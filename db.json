{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/img/hexo-github-action.jpg","path":"img/hexo-github-action.jpg","modified":1,"renderable":0},{"_id":"source/img/hexo.jpeg","path":"img/hexo.jpeg","modified":1,"renderable":0},{"_id":"source/img/linux.jpeg","path":"img/linux.jpeg","modified":1,"renderable":0},{"_id":"source/img/spring-cloud.jpeg","path":"img/spring-cloud.jpeg","modified":1,"renderable":0},{"_id":"source/music/Memories-Maroon 5.jpg","path":"music/Memories-Maroon 5.jpg","modified":1,"renderable":0},{"_id":"source/music/Passenger.jpg","path":"music/Passenger.jpg","modified":1,"renderable":0},{"_id":"source/music/Sketch Plane-Cam Kelley.jpg","path":"music/Sketch Plane-Cam Kelley.jpg","modified":1,"renderable":0},{"_id":"source/music/Someone You Loved-Lewis Capaldi.jpg","path":"music/Someone You Loved-Lewis Capaldi.jpg","modified":1,"renderable":0},{"_id":"source/img/wechatpay.jpg","path":"img/wechatpay.jpg","modified":1,"renderable":0},{"_id":"source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":0},{"_id":"source/img/default_thumbnail.jpg","path":"img/default_thumbnail.jpg","modified":1,"renderable":0},{"_id":"source/img/docker.png","path":"img/docker.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/img/java.jpeg","path":"img/java.jpeg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/img/default.png","path":"img/default.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"source/music/someone you loved.mp3","path":"music/someone you loved.mp3","modified":1,"renderable":0},{"_id":"source/music/memories.mp3","path":"music/memories.mp3","modified":1,"renderable":0},{"_id":"source/music/Simple Song.mp3","path":"music/Simple Song.mp3","modified":1,"renderable":0},{"_id":"source/music/M800002kitDY3lqvHN.mp3","path":"music/M800002kitDY3lqvHN.mp3","modified":1,"renderable":0}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514748788000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514748788000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514748788000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514748788000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514748788000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514748788000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514748788000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514748788000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514748788000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514748788000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514748788000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1607967571190},{"_id":"themes/next/_config.yml","hash":"f0d83fd6a0a1cf9485a580463822dce3a9896954","modified":1607966660661},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514748788000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514748788000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514748788000},{"_id":"source/_data/fluid_config.yml","hash":"906d5e31daebe9630474448476f745a5af54927b","modified":1607961290456},{"_id":"source/_data/next.yml","hash":"60cb9ebb484585cf258a8ce599325b362887d1ab","modified":1607968357142},{"_id":"source/_drafts/.DS_Store","hash":"23507b682cc6652f55072d30d75a60e9cb45d8c5","modified":1587395062000},{"_id":"source/_drafts/data-structure-overview.md","hash":"315c759573a38c9ad62d8ed0a0e1f787a7600655","modified":1587397292000},{"_id":"source/_drafts/hashtable-learning.md","hash":"d9bb5099980d04170ee62b4c7202a125c5487dca","modified":1587314054000},{"_id":"source/_drafts/mac-brew-update.md","hash":"4b8cc48bc4a4687e1c787fd5a056bb207eb98c6d","modified":1587270394000},{"_id":"source/_drafts/mysql-index-learning.md","hash":"583bd27a0120822b8ca038b2ead7eaacb50b5802","modified":1587397504000},{"_id":"source/_drafts/tools-list.md","hash":"7db6ac4b5d1ff22de28c99552644c184650f6f64","modified":1587312444000},{"_id":"source/_posts/data-structure-overview.md","hash":"f8bf170f197bd6029c411a8b73ea9c8fd59cd046","modified":1607961290456},{"_id":"source/_posts/redis-cluster.md","hash":"09bed1c905eb6ca8579ca88dce68a59389fab752","modified":1607961290465},{"_id":"source/about/index.md","hash":"b42d17bc522f1e7c3b49a344deb5e2bec2354403","modified":1587140394000},{"_id":"source/categories/index.md","hash":"1f6f9db5cf4cba5be4d91278021eb9873b80d376","modified":1587143104000},{"_id":"source/img/hexo-github-action.jpg","hash":"518d9efbbbc5f270f54775083e3ad5d397fa3256","modified":1587209572000},{"_id":"source/img/hexo.jpeg","hash":"adaaf4d9ebaea9c4a43bb90187368967a48f8888","modified":1587209428000},{"_id":"source/img/linux.jpeg","hash":"b437e6194f139a064d3e096f9fd4a107ef02dde8","modified":1587209976000},{"_id":"source/img/spring-cloud.jpeg","hash":"7d01a6e80f2aa14cedb2e429cde591df5a526ea4","modified":1587209894000},{"_id":"source/music/Memories-Maroon 5.jpg","hash":"782d0e6854c8823f40e9ae04d3903eceece3f66e","modified":1587214224000},{"_id":"source/music/Passenger.jpg","hash":"3351e31cd4d73ffcaf420f8328f4571ecea3625e","modified":1587226672000},{"_id":"source/music/Sketch Plane-Cam Kelley.jpg","hash":"2faabd0f61fb058d5d370f073ee0fd596f6b009a","modified":1587226986000},{"_id":"source/music/Someone You Loved-Lewis Capaldi.jpg","hash":"aa2ae6acaf6c5ab8f4fbb588f8563622a4c0c809","modified":1587226272000},{"_id":"source/tags/index.md","hash":"7c33368714c02998c88ee12fd0c129599c478fa5","modified":1586971414000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514748788000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514748788000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514748788000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1514748788000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514748788000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514748788000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514748788000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514748788000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514748788000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514748788000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514748788000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514748788000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514748788000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514748788000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514748788000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514748788000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514748788000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514748788000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514748788000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514748788000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514748788000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514748788000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514748788000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514748788000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514748788000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514748788000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514748788000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514748788000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514748788000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514748788000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514748788000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514748788000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514748788000},{"_id":"source/img/wechatpay.jpg","hash":"8547ff093d704c77131abe7bda9aa69ae723eac0","modified":1587266940000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"source/_posts/data-structure-overview/hashtable.jpg","hash":"0228ea21bac82c01fdd0d9da4053897d32cb0666","modified":1607961290457},{"_id":"source/_posts/data-structure-overview/heap.jpg","hash":"906ce5bed102dd1cb26e16f716793267fbe53add","modified":1607961290458},{"_id":"source/_posts/data-structure-overview/linkedlist.jpg","hash":"a0e88d4b9e0f3b8fdf986a7264a82e8b5c65b52f","modified":1607961290459},{"_id":"source/_posts/data-structure-overview/queue.png","hash":"2471e04cc8484d3796e670340ad0fa8e43232477","modified":1607961290460},{"_id":"source/_posts/hexo/hexo-github-action.md","hash":"d629d174492eef66471017b8ed4083caa7d40a0e","modified":1587209802000},{"_id":"source/_posts/hexo/hexo写作.md","hash":"1276b9c2a15cab1b8a9198d534f2840752ca84a4","modified":1607963208852},{"_id":"source/_posts/hexo/hexo命令.md","hash":"842e2ab94b8f0a8e56ef0b21f2d0f5a77b45c6ef","modified":1607963179605},{"_id":"source/_posts/java/hashcode.md","hash":"4bd6961a2684e5bbce7522a0218e37161a0bf5ba","modified":1587210038000},{"_id":"source/_posts/java/jvm.md","hash":"16f1b3a60690bb2f1d29ae778c12b39136f40c55","modified":1587209868000},{"_id":"source/_posts/linux/Linux之SSH免密登录.md","hash":"a09bd0f5f4a9c9eb3cd808ce761b25800195ea1b","modified":1607962880223},{"_id":"source/_posts/linux/linux与k8s的区别.md","hash":"65d9302184bb5b63068922b0dd4da0e643ca0302","modified":1607961015609},{"_id":"source/_posts/spring/spring-cloud-learning.md","hash":"1afee04187001ab187573d1d660939d3f561ee3c","modified":1587209912000},{"_id":"source/img/alipay.jpg","hash":"d0589052ca92dc36723d0e122c0998dc829c8660","modified":1587266986000},{"_id":"source/img/avatar.png","hash":"61964f92efc9440d16847b1d5e5342c7d3a7a0b2","modified":1587140394000},{"_id":"source/img/default_thumbnail.jpg","hash":"1783f9565a6bc13dd2a0446d5385d27def19cac6","modified":1587140394000},{"_id":"source/img/docker.png","hash":"0880d9cf41fe327f3004a893a5eaa6ea382f9ea3","modified":1607960887319},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514748788000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514748788000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514748788000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514748788000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514748788000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514748788000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514748788000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514748788000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514748788000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514748788000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514748788000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514748788000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514748788000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514748788000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514748788000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514748788000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514748788000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514748788000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514748788000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514748788000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514748788000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514748788000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514748788000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514748788000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514748788000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514748788000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514748788000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514748788000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514748788000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514748788000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514748788000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514748788000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514748788000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514748788000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514748788000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514748788000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514748788000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514748788000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514748788000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514748788000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514748788000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514748788000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514748788000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514748788000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514748788000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514748788000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514748788000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514748788000},{"_id":"source/_posts/data-structure-overview/overview.png","hash":"e7ec9f16e9f389f7a20eb04f747fd0f86a8daacf","modified":1607961290460},{"_id":"source/_posts/data-structure-overview/stack.png","hash":"3736ff92eaad9a88e52c47e393513bff93b84988","modified":1607961290461},{"_id":"source/_posts/spring-cloud-learning/5.png","hash":"30f94353204cebe861c2d857e61a270a0d39d98d","modified":1586971414000},{"_id":"source/_posts/spring-cloud-learning/7.png","hash":"4aebce32a523b2488b4c749ffa08632aee12f82e","modified":1586971414000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"source/_posts/spring-cloud-learning/1.png","hash":"abab5dc7c34d169807ac7a7b6d7cbf73638e63a6","modified":1586971414000},{"_id":"source/_posts/spring-cloud-learning/2.png","hash":"5302d6db6520be044a4103187168145dd2eb3dfa","modified":1586971414000},{"_id":"source/_posts/spring-cloud-learning/3.png","hash":"3ebf0ed986d4e4aa1fc327ca85b771b05745bb90","modified":1586971414000},{"_id":"source/_posts/spring-cloud-learning/4.png","hash":"52162d3dc7ec73d75afa5c3b7fbd801a719d58bc","modified":1586971414000},{"_id":"source/_posts/spring-cloud-learning/6.png","hash":"2bbcf8a0560d84d6aa8b5cf3b4e139609d365247","modified":1586971414000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514748788000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514748788000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514748788000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514748788000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514748788000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514748788000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514748788000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514748788000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514748788000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514748788000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514748788000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514748788000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514748788000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514748788000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514748788000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514748788000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514748788000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514748788000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514748788000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514748788000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514748788000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514748788000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514748788000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514748788000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514748788000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514748788000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514748788000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514748788000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514748788000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514748788000},{"_id":"source/img/java.jpeg","hash":"b100e3b0e45ffdd57ca87d4976647ed2f4c09c80","modified":1587209850000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514748788000},{"_id":"source/img/default.png","hash":"2e84eaeeb1f33c366bf05fa74539847da27a8560","modified":1587140394000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514748788000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514748788000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514748788000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514748788000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514748788000},{"_id":"source/_posts/linux/linux与k8s的区别.assets/720430-20181226134308841-1109691453.png","hash":"0880d9cf41fe327f3004a893a5eaa6ea382f9ea3","modified":1607960800796},{"_id":"source/_posts/linux/linux与k8s的区别.assets/720430-20181226134440039-355719052.png","hash":"c8fa2724b824af9e565c8ec3c909fad02e8cc9a3","modified":1607960786882},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514748788000},{"_id":"source/_posts/spring-cloud-learning/8.png","hash":"66162d84f9e742607a6036b69ec666fc0e700769","modified":1586971414000},{"_id":"source/_posts/data-structure-overview/tree.png","hash":"640752cff95dfa31c304680cbc1b1c7c2523425f","modified":1607961290465},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514748788000},{"_id":"source/img/banner.jpg","hash":"f73654d2ed2732a2931daa8a632bb22c1e89082b","modified":1587140394000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514748788000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514748788000},{"_id":"source/music/someone you loved.mp3","hash":"efce34463dd02fad2e7ee1cdfc151ae559d0297e","modified":1587226210000},{"_id":"source/music/memories.mp3","hash":"14ff8bfb41da43a206c262ea1ad1f95584a742de","modified":1587214124000},{"_id":"source/music/Simple Song.mp3","hash":"9c9e1c647434b14c9c67cfa0ad88d2ecb38ce842","modified":1587226600000},{"_id":"source/music/M800002kitDY3lqvHN.mp3","hash":"fd8a8d6c574ed2bd1373e3b4e6782ed3a035e008","modified":1587226978000}],"Category":[],"Data":[{"_id":"next","data":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}}},{"_id":"fluid_config","data":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}],"Page":[{"title":"about","date":"2018-04-16T05:01:39.000Z","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-04-16 13:01:39\nlayout: about\n---\n","updated":"2020-04-17T16:19:54.000Z","path":"about/index.html","comments":1,"_id":"ckiouwoyp0001jcxc5s8wd527","content":"","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":""},{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"layout: categories\ncomments: false\n---","date":"2020-12-14T16:01:28.602Z","updated":"2020-04-17T17:05:04.000Z","path":"categories/index.html","title":"","_id":"ckiouwoys0003jcxcfx3ve695","content":"","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":""},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"layout: tags\ncomments: false\n---","date":"2020-06-28T16:13:17.432Z","updated":"2020-04-15T17:23:34.000Z","path":"tags/index.html","title":"","_id":"ckiouwoyv0006jcxcg2b2fabv","content":"","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":""}],"Post":[{"title":"【数据结构】八大数据结构简介","abbrlink":2827031203,"date":"2017-02-19T13:38:18.000Z","_content":"\n# 数据结构分类\n数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。\n常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：\n\n{% asset_img overview.png %}\n\n常见数据结构大致可分为三大类，如下所示\n- 线性表：顺序表、链表、栈和队列；\n- 树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；\n- 图存储结构\n\n## 优缺点对比表\n每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。\n\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n# 数组（Array）\n\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。\n\n    int[] data = new int[100]；\n    data[0]  = 1;\n\n## 优点\n- 按照索引查询元素速度快\n- 按照索引遍历数组方便\n\n## 缺点\n- 数组的大小固定后就无法扩容了\n- 数组只能存储一种类型的数据\n- 添加，删除的操作慢，因为要移动其他的元素。\n\n## 适用场景\n- 频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n# 栈（Stack）\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n{% asset_img stack.png %}\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n# 队列\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：\n{% asset_img queue.png %}\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n# 链表\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n{% asset_img linekdlist.jpg %}\n## 优点\n- 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n- 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；\n\n## 缺点\n- 因为含有大量的指针域，占用空间较大；\n- 查找元素需要遍历链表来查找，非常耗时。\n\n## 适用场景\n数据量较小，需要频繁增加，删除操作的场景\n\n# 树\n树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\n{% asset_img tree.png %}\n每个节点有零个或多个子节点；\n没有父节点的节点称为根节点；\n每一个非根节点有且只有一个父节点；\n除了根节点外，每个子节点可以分为多个不相交的子树；\n在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n- 即使某结点只有一个子树，也要区分左右子树。\n\n二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n扩展：\n二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。\n\n# 散列表\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n{% asset_img hashtable.jpg %}\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：\n\n从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。\n\n哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。\n\n# 堆\n{% asset_img heap.jpg %}\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n# 图\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n按照顶点指向的方向可分为无向图和有向图：\n\n图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。\n","source":"_drafts/data-structure-overview.md","raw":"---\ntitle: 【数据结构】八大数据结构简介\ntags:\n  - 数据结构\n  - 算法\nabbrlink: 2827031203\ndate: 2017-02-19 21:38:18\n---\n\n# 数据结构分类\n数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。\n常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：\n\n{% asset_img overview.png %}\n\n常见数据结构大致可分为三大类，如下所示\n- 线性表：顺序表、链表、栈和队列；\n- 树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；\n- 图存储结构\n\n## 优缺点对比表\n每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。\n\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n# 数组（Array）\n\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。\n\n    int[] data = new int[100]；\n    data[0]  = 1;\n\n## 优点\n- 按照索引查询元素速度快\n- 按照索引遍历数组方便\n\n## 缺点\n- 数组的大小固定后就无法扩容了\n- 数组只能存储一种类型的数据\n- 添加，删除的操作慢，因为要移动其他的元素。\n\n## 适用场景\n- 频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n# 栈（Stack）\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n{% asset_img stack.png %}\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n# 队列\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：\n{% asset_img queue.png %}\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n# 链表\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n{% asset_img linekdlist.jpg %}\n## 优点\n- 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n- 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；\n\n## 缺点\n- 因为含有大量的指针域，占用空间较大；\n- 查找元素需要遍历链表来查找，非常耗时。\n\n## 适用场景\n数据量较小，需要频繁增加，删除操作的场景\n\n# 树\n树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\n{% asset_img tree.png %}\n每个节点有零个或多个子节点；\n没有父节点的节点称为根节点；\n每一个非根节点有且只有一个父节点；\n除了根节点外，每个子节点可以分为多个不相交的子树；\n在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n- 即使某结点只有一个子树，也要区分左右子树。\n\n二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n扩展：\n二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。\n\n# 散列表\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n{% asset_img hashtable.jpg %}\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：\n\n从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。\n\n哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。\n\n# 堆\n{% asset_img heap.jpg %}\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n# 图\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n按照顶点指向的方向可分为无向图和有向图：\n\n图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。\n","slug":"data-structure-overview","published":0,"updated":"2020-04-20T15:41:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwoyl0000jcxc78egcyka","content":"<h1 id=\"数据结构分类\"><a href=\"#数据结构分类\" class=\"headerlink\" title=\"数据结构分类\"></a>数据结构分类</h1><p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。<br>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：</p>\n\n\n<p>常见数据结构大致可分为三大类，如下所示</p>\n<ul>\n<li>线性表：顺序表、链表、栈和队列；</li>\n<li>树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；</li>\n<li>图存储结构</li>\n</ul>\n<h2 id=\"优缺点对比表\"><a href=\"#优缺点对比表\" class=\"headerlink\" title=\"优缺点对比表\"></a>优缺点对比表</h2><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p>\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n<h1 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h1><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\n<pre><code>int[] data = new int[100]；\ndata[0]  = 1;</code></pre><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>按照索引查询元素速度快</li>\n<li>按照索引遍历数组方便</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>数组的大小固定后就无法扩容了</li>\n<li>数组只能存储一种类型的数据</li>\n<li>添加，删除的操作慢，因为要移动其他的元素。</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>频繁查询，对存储空间要求不大，很少增加和删除的情况。</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p>\n\n<p>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</li>\n</ul>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ul>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>数据量较小，需要频繁增加，删除操作的场景</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>\n\n<p>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；<br>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。</p>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li>每个结点最多有两颗子树，结点的度最大为2。</li>\n<li>左子树和右子树是有顺序的，次序不能颠倒。</li>\n<li>即使某结点只有一个子树，也要区分左右子树。</li>\n</ul>\n<p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<p>扩展：<br>二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p>\n<p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>\n<p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1>\n<p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>按照顶点指向的方向可分为无向图和有向图：</p>\n<p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>\n","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"数据结构分类\"><a href=\"#数据结构分类\" class=\"headerlink\" title=\"数据结构分类\"></a>数据结构分类</h1><p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。<br>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：</p>\n\n\n<p>常见数据结构大致可分为三大类，如下所示</p>\n<ul>\n<li>线性表：顺序表、链表、栈和队列；</li>\n<li>树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；</li>\n<li>图存储结构</li>\n</ul>\n<h2 id=\"优缺点对比表\"><a href=\"#优缺点对比表\" class=\"headerlink\" title=\"优缺点对比表\"></a>优缺点对比表</h2><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p>\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n<h1 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h1><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\n<pre><code>int[] data = new int[100]；\ndata[0]  = 1;</code></pre><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>按照索引查询元素速度快</li>\n<li>按照索引遍历数组方便</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>数组的大小固定后就无法扩容了</li>\n<li>数组只能存储一种类型的数据</li>\n<li>添加，删除的操作慢，因为要移动其他的元素。</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>频繁查询，对存储空间要求不大，很少增加和删除的情况。</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p>\n\n<p>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</li>\n</ul>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ul>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>数据量较小，需要频繁增加，删除操作的场景</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>\n\n<p>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；<br>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。</p>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li>每个结点最多有两颗子树，结点的度最大为2。</li>\n<li>左子树和右子树是有顺序的，次序不能颠倒。</li>\n<li>即使某结点只有一个子树，也要区分左右子树。</li>\n</ul>\n<p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<p>扩展：<br>二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p>\n<p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>\n<p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1>\n<p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>按照顶点指向的方向可分为无向图和有向图：</p>\n<p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>\n"},{"title":"【数据结构】之哈希表（散列表）","abbrlink":3309293362,"date":"2020-04-19T13:17:16.000Z","_content":"\n# 什么是哈希表？\n哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n记录的存储位置=f(关键字)\n\n这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。\n\n哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。）\n    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。\n\n## 参考\n[参考文章](https://blog.csdn.net/duan19920101/article/details/51579136?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2)","source":"_drafts/hashtable-learning.md","raw":"---\ntitle: 【数据结构】之哈希表（散列表）\nabbrlink: 3309293362\ndate: 2020-04-19 21:17:16\ntags:\n  - 数据结构\n---\n\n# 什么是哈希表？\n哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n记录的存储位置=f(关键字)\n\n这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。\n\n哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。）\n    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。\n\n## 参考\n[参考文章](https://blog.csdn.net/duan19920101/article/details/51579136?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2)","slug":"hashtable-learning","published":0,"updated":"2020-04-19T16:34:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwoyq0002jcxca1h99a4f","content":"<h1 id=\"什么是哈希表？\"><a href=\"#什么是哈希表？\" class=\"headerlink\" title=\"什么是哈希表？\"></a>什么是哈希表？</h1><p>哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>记录的存储位置=f(关键字)</p>\n<p>这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。</p>\n<p>哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。）<br>    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/duan19920101/article/details/51579136?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"什么是哈希表？\"><a href=\"#什么是哈希表？\" class=\"headerlink\" title=\"什么是哈希表？\"></a>什么是哈希表？</h1><p>哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>记录的存储位置=f(关键字)</p>\n<p>这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。</p>\n<p>哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。）<br>    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/duan19920101/article/details/51579136?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n"},{"title":"MacOS平台brew update卡死","abbrlink":2155797608,"date":"2020-04-19T04:24:47.000Z","_content":"\n","source":"_drafts/mac-brew-update.md","raw":"---\ntitle: MacOS平台brew update卡死\nabbrlink: 2155797608\ndate: 2020-04-19 12:24:47\ntags:\n  - Mac\n  - Linux\n---\n\n","slug":"mac-brew-update","published":0,"updated":"2020-04-19T04:26:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwoyt0005jcxcfivtb9f8","content":"","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":""},{"title":"【MySQL】索引及分页详解","abbrlink":780159822,"date":"2018-07-19T13:38:18.000Z","_content":"\n# 什么是索引\n索引是数据表中一列或多列的值进行排序的一种数据结构。故此，索引本质就是数据结构。这也是为什么每次数据表建立索引都需要设置在列字段上的原因。\n\n\n# 常用的索引结构是什么\n## 参考\n# https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw","source":"_drafts/mysql-index-learning.md","raw":"---\ntitle: 【MySQL】索引及分页详解\ntags:\n  - MySQL\nabbrlink: 780159822\ndate: 2018-07-19 21:38:18\n---\n\n# 什么是索引\n索引是数据表中一列或多列的值进行排序的一种数据结构。故此，索引本质就是数据结构。这也是为什么每次数据表建立索引都需要设置在列字段上的原因。\n\n\n# 常用的索引结构是什么\n## 参考\n# https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw","slug":"mysql-index-learning","published":0,"updated":"2020-04-20T15:45:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwoyw0007jcxc1meidi3m","content":"<h1 id=\"什么是索引\"><a href=\"#什么是索引\" class=\"headerlink\" title=\"什么是索引\"></a>什么是索引</h1><p>索引是数据表中一列或多列的值进行排序的一种数据结构。故此，索引本质就是数据结构。这也是为什么每次数据表建立索引都需要设置在列字段上的原因。</p>\n<h1 id=\"常用的索引结构是什么\"><a href=\"#常用的索引结构是什么\" class=\"headerlink\" title=\"常用的索引结构是什么\"></a>常用的索引结构是什么</h1><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><h1 id=\"https-mp-weixin-qq-com-s-5Yl6H6up9ntZq6l8qxiogw\"><a href=\"#https-mp-weixin-qq-com-s-5Yl6H6up9ntZq6l8qxiogw\" class=\"headerlink\" title=\"https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw\"></a><a href=\"https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw</a></h1>","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"什么是索引\"><a href=\"#什么是索引\" class=\"headerlink\" title=\"什么是索引\"></a>什么是索引</h1><p>索引是数据表中一列或多列的值进行排序的一种数据结构。故此，索引本质就是数据结构。这也是为什么每次数据表建立索引都需要设置在列字段上的原因。</p>\n<h1 id=\"常用的索引结构是什么\"><a href=\"#常用的索引结构是什么\" class=\"headerlink\" title=\"常用的索引结构是什么\"></a>常用的索引结构是什么</h1><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><h1 id=\"https-mp-weixin-qq-com-s-5Yl6H6up9ntZq6l8qxiogw\"><a href=\"#https-mp-weixin-qq-com-s-5Yl6H6up9ntZq6l8qxiogw\" class=\"headerlink\" title=\"https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw\"></a><a href=\"https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw</a></h1>"},{"title":"tools-list","abbrlink":189015225,"_content":"","source":"_drafts/tools-list.md","raw":"---\ntitle: tools-list\nabbrlink: 189015225\ntags:\n---\n","slug":"tools-list","published":0,"date":"2020-05-26T16:16:04.584Z","updated":"2020-04-19T16:07:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwoyy0008jcxc3eekawcn","content":"","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":""},{"title":"【数据结构】八大数据结构简介","abbrlink":2827031203,"date":"2017-02-19T13:38:18.000Z","_content":"\n\n# 数据结构分类\n数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。\n常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：\n\n{% asset_img overview.png %}\n\n常见数据结构大致可分为三大类，如下所示\n- 线性表：顺序表、链表、栈和队列；\n- 树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；\n- 图存储结构\n\n## 优缺点对比表\n每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。\n\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n# 数组（Array）\n\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。\n\n    int[] data = new int[100]；\n    data[0]  = 1;\n\n## 优点\n- 按照索引查询元素速度快\n- 按照索引遍历数组方便\n\n## 缺点\n- 数组的大小固定后就无法扩容了\n- 数组只能存储一种类型的数据\n- 添加，删除的操作慢，因为要移动其他的元素。\n\n## 适用场景\n- 频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n# 栈（Stack）\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n{% asset_img stack.png %}\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n# 队列\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：\n{% asset_img queue.png %}\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n# 链表\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n{% asset_img linekdlist.jpg %}\n## 优点\n- 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n- 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；\n\n## 缺点\n- 因为含有大量的指针域，占用空间较大；\n- 查找元素需要遍历链表来查找，非常耗时。\n\n## 适用场景\n数据量较小，需要频繁增加，删除操作的场景\n\n# 树\n树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\n{% asset_img tree.png %}\n每个节点有零个或多个子节点；\n没有父节点的节点称为根节点；\n每一个非根节点有且只有一个父节点；\n除了根节点外，每个子节点可以分为多个不相交的子树；\n在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n- 即使某结点只有一个子树，也要区分左右子树。\n\n二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n扩展：\n二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。\n\n# 散列表\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n{% asset_img hashtable.jpg %}\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：\n\n从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。\n\n哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。\n\n# 堆\n{% asset_img heap.jpg %}\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n# 图\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n按照顶点指向的方向可分为无向图和有向图：\n\n图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。\n","source":"_posts/data-structure-overview.md","raw":"---\ntitle: 【数据结构】八大数据结构简介\ntags:\n  - 数据结构\n  - 算法\nabbrlink: 2827031203\ndate: 2017-02-19 21:38:18\n---\n\n\n# 数据结构分类\n数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。\n常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：\n\n{% asset_img overview.png %}\n\n常见数据结构大致可分为三大类，如下所示\n- 线性表：顺序表、链表、栈和队列；\n- 树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；\n- 图存储结构\n\n## 优缺点对比表\n每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。\n\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n# 数组（Array）\n\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。\n\n    int[] data = new int[100]；\n    data[0]  = 1;\n\n## 优点\n- 按照索引查询元素速度快\n- 按照索引遍历数组方便\n\n## 缺点\n- 数组的大小固定后就无法扩容了\n- 数组只能存储一种类型的数据\n- 添加，删除的操作慢，因为要移动其他的元素。\n\n## 适用场景\n- 频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n# 栈（Stack）\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n{% asset_img stack.png %}\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n# 队列\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：\n{% asset_img queue.png %}\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n# 链表\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n{% asset_img linekdlist.jpg %}\n## 优点\n- 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n- 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；\n\n## 缺点\n- 因为含有大量的指针域，占用空间较大；\n- 查找元素需要遍历链表来查找，非常耗时。\n\n## 适用场景\n数据量较小，需要频繁增加，删除操作的场景\n\n# 树\n树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\n{% asset_img tree.png %}\n每个节点有零个或多个子节点；\n没有父节点的节点称为根节点；\n每一个非根节点有且只有一个父节点；\n除了根节点外，每个子节点可以分为多个不相交的子树；\n在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n- 即使某结点只有一个子树，也要区分左右子树。\n\n二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n扩展：\n二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。\n\n# 散列表\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n{% asset_img hashtable.jpg %}\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：\n\n从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。\n\n哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。\n\n# 堆\n{% asset_img heap.jpg %}\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n# 图\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n按照顶点指向的方向可分为无向图和有向图：\n\n图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。\n","slug":"data-structure-overview","published":1,"updated":"2020-12-14T15:54:50.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwoz0000ajcxc91m4drqs","content":"<h1 id=\"数据结构分类\"><a href=\"#数据结构分类\" class=\"headerlink\" title=\"数据结构分类\"></a>数据结构分类</h1><p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。<br>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：</p>\n<img src=\"/posts/2827031203/index/overview.png\" class=\"\">\n\n<p>常见数据结构大致可分为三大类，如下所示</p>\n<ul>\n<li>线性表：顺序表、链表、栈和队列；</li>\n<li>树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；</li>\n<li>图存储结构</li>\n</ul>\n<h2 id=\"优缺点对比表\"><a href=\"#优缺点对比表\" class=\"headerlink\" title=\"优缺点对比表\"></a>优缺点对比表</h2><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p>\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n<h1 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h1><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\n<pre><code>int[] data = new int[100]；\ndata[0]  = 1;</code></pre><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>按照索引查询元素速度快</li>\n<li>按照索引遍历数组方便</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>数组的大小固定后就无法扩容了</li>\n<li>数组只能存储一种类型的数据</li>\n<li>添加，删除的操作慢，因为要移动其他的元素。</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>频繁查询，对存储空间要求不大，很少增加和删除的情况。</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n<img src=\"/posts/2827031203/index/stack.png\" class=\"\">\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p>\n<img src=\"/posts/2827031203/index/queue.png\" class=\"\">\n<p>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</li>\n</ul>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ul>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>数据量较小，需要频繁增加，删除操作的场景</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>\n<img src=\"/posts/2827031203/index/tree.png\" class=\"\">\n<p>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；<br>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。</p>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li>每个结点最多有两颗子树，结点的度最大为2。</li>\n<li>左子树和右子树是有顺序的，次序不能颠倒。</li>\n<li>即使某结点只有一个子树，也要区分左右子树。</li>\n</ul>\n<p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<p>扩展：<br>二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n<img src=\"/posts/2827031203/index/hashtable.jpg\" class=\"\">\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p>\n<p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>\n<p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><img src=\"/posts/2827031203/index/heap.jpg\" class=\"\">\n<p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>按照顶点指向的方向可分为无向图和有向图：</p>\n<p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>\n","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"数据结构分类\"><a href=\"#数据结构分类\" class=\"headerlink\" title=\"数据结构分类\"></a>数据结构分类</h1><p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。<br>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：</p>\n<img src=\"/posts/2827031203/index/overview.png\" class=\"\">\n\n<p>常见数据结构大致可分为三大类，如下所示</p>\n<ul>\n<li>线性表：顺序表、链表、栈和队列；</li>\n<li>树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；</li>\n<li>图存储结构</li>\n</ul>\n<h2 id=\"优缺点对比表\"><a href=\"#优缺点对比表\" class=\"headerlink\" title=\"优缺点对比表\"></a>优缺点对比表</h2><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p>\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n<h1 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h1><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\n<pre><code>int[] data = new int[100]；\ndata[0]  = 1;</code></pre><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>按照索引查询元素速度快</li>\n<li>按照索引遍历数组方便</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>数组的大小固定后就无法扩容了</li>\n<li>数组只能存储一种类型的数据</li>\n<li>添加，删除的操作慢，因为要移动其他的元素。</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>频繁查询，对存储空间要求不大，很少增加和删除的情况。</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n<img src=\"/posts/2827031203/index/stack.png\" class=\"\">\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p>\n<img src=\"/posts/2827031203/index/queue.png\" class=\"\">\n<p>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</li>\n</ul>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ul>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>数据量较小，需要频繁增加，删除操作的场景</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>\n<img src=\"/posts/2827031203/index/tree.png\" class=\"\">\n<p>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；<br>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。</p>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li>每个结点最多有两颗子树，结点的度最大为2。</li>\n<li>左子树和右子树是有顺序的，次序不能颠倒。</li>\n<li>即使某结点只有一个子树，也要区分左右子树。</li>\n</ul>\n<p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<p>扩展：<br>二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n<img src=\"/posts/2827031203/index/hashtable.jpg\" class=\"\">\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p>\n<p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>\n<p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><img src=\"/posts/2827031203/index/heap.jpg\" class=\"\">\n<p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>按照顶点指向的方向可分为无向图和有向图：</p>\n<p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>\n"},{"title":"Docker之Redis Cluster搭建","abbrlink":41928529,"date":"2020-12-10T08:33:34.000Z","_content":"\n## 环境\n\nDocker 版本 19.03.8\n```\nMacBook-Pro-6:~ tanxinzheng$ docker -v\nDocker version 19.03.8, build afacb8b\n```\n\n## 搭建\n搭建的部署主要分为\n- 架构设计\n- 编写Docker Compose编排文件\n- 创建redis cluster配置文件\n- 启动服务容器\n- 创建Redis集群\n\n### 架构设计\nredis集群模式必须要有3个主节点3个从节点才能正常启动集群模式\n\n- 主节点端口：7000 | 7001 | 7002\n- 从节点端口：7003 | 7004 | 7005\n\n### Docker Compose\n为节省内存资源，主从节点都部署在单机实例中\n```\nversion: '2'\n\nservices:\n  cluster:\n    image: daocloud.io/redis\n    container_name: redis-cluster\n    # 添加该参数后服务后台运行后，容器不会自动退出\n    tty: true\n    restart: always\n    # linux环境下建议使用host模式\n    network_mode: host\n\n    volumes:\n      - ./data:/data\n      - ./config:/etc/redis  \n    ports:\n      - \"7000:7000\"\n      - \"7001:7001\"\n      - \"7002:7002\"\n      - \"7003:7003\"\n      - \"7004:7004\"\n      - \"7005:7005\"\n    ## 必须使用宿主机ip 作为集群总线ip，否则宿主机无法访问到容器内的redis集群ip \n    # 也可以加在配置文件中\n    #  --cluster-announce-ip 172.16.65.218 \n    command: \n      - /bin/bash \n      - -c \n      - |\n        redis-server /etc/redis/redis_cluster_7000.conf  --cluster-announce-ip 172.16.65.218 & \n        redis-server /etc/redis/redis_cluster_7001.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7002.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7003.conf  --cluster-announce-ip 172.16.65.218 & \n        redis-server /etc/redis/redis_cluster_7004.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7005.conf  --cluster-announce-ip 172.16.65.218 \n```\n### redis_700X.conf\n根据各端口修改配置中的端口号\n```\nport 7000\n# 绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1\nbind 0.0.0.0\n# 启用集群模式\ncluster-enabled yes\n# 集群节点文件\ncluster-config-file nodes_7000.conf\n# 指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录\ndir /data/7000/\n# 节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间\ncluster-node-timeout 5000\n# 集群广播ip\n#cluster-announce-ip 172.20.0.4\n#cluster-announce-port 7000\n# 开启AOF模式\nappendonly yes\n# 关闭保护模式\nprotected-mode no\n# 是否后台启动\ndaemonize no\n# pid file所在目录\npidfile /var/run/redis_7000.pid \n# 客户端访问密码\n# requirepass redis2020\n# 日志文件\nlogfile /var/log/redis_7001.log\n```\n\n## 启动Redis Cluster\n```\ndocker-compose up -d\n```\n\n### 创建Redis集群\n\n- 进入容器\n```\n$ docker exec -it redis-cluster /bin/bash\n```\n- 创建集群\n```\n$ redis-cli --cluster create 127.0.0.1:7000 \\\n                           127.0.0.1:7001 \\\n                           127.0.0.1:7002 \\\n                           127.0.0.1:7003 \\\n                           127.0.0.1:7004 \\\n                           127.0.0.1:7005 \\\n                           --cluster-replicas 1\n```\n\n## 查看集群状态\n\n### \n```\n## -c表示集群模式进入\nroot@docker-desktop:/data# redis-cli -c -h localhost -p 7000\n\n## 查看集群信息 cluster_state为ok则表示集群创建成功\nlocalhost:7000> cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:1\ncluster_current_epoch:6\ncluster_my_epoch:3\ncluster_stats_messages_ping_sent:5290\ncluster_stats_messages_pong_sent:5299\ncluster_stats_messages_update_sent:1\ncluster_stats_messages_sent:10590\ncluster_stats_messages_ping_received:5294\ncluster_stats_messages_pong_received:5290\ncluster_stats_messages_meet_received:5\ncluster_stats_messages_update_received:3\ncluster_stats_messages_received:10592\n\n## 查看集群节点信息\nlocalhost:7000> cluster nodes\n6b7f8c4767feb376a99e79068748253afcf6ea5a 127.0.0.1:7001@17001 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594235646 3 connected\n52b109a6491a2e4280b6a66642716939d0f46e89 127.0.0.1:7004@17004 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594236555 5 connected\ndf7dcbf82ecba0ff044f2715b052674e73ec1ca6 127.0.0.1:7000@17000 myself,slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594234000 1 connected\n51f5c9fb771a702933d8bc29fcd13eb41811e2bb 127.0.0.1:7005@17005 master - 0 1607594236000 6 connected\nef7fdf2421427d1da29da4c1dab9e8c26ca12854 127.0.0.1:7002@17002 master - 0 1607594236657 3 connected 0-16383\ncf7327c9ec3b374ebc6ba3f49c6bd5e0a7098601 127.0.0.1:7003@17003 master - 0 1607594235544 4 connected\n```\n\n## 参考\n- [1] [Redis Cluster](https://redis.io/topics/cluster-tutorial)","source":"_posts/redis-cluster.md","raw":"---\ntitle: Docker之Redis Cluster搭建\ntags:\n  - redis\n  - cluster\n  - docker\n  - docker-compose\nabbrlink: 41928529\ndate: 2020-12-10 16:33:34\n---\n\n## 环境\n\nDocker 版本 19.03.8\n```\nMacBook-Pro-6:~ tanxinzheng$ docker -v\nDocker version 19.03.8, build afacb8b\n```\n\n## 搭建\n搭建的部署主要分为\n- 架构设计\n- 编写Docker Compose编排文件\n- 创建redis cluster配置文件\n- 启动服务容器\n- 创建Redis集群\n\n### 架构设计\nredis集群模式必须要有3个主节点3个从节点才能正常启动集群模式\n\n- 主节点端口：7000 | 7001 | 7002\n- 从节点端口：7003 | 7004 | 7005\n\n### Docker Compose\n为节省内存资源，主从节点都部署在单机实例中\n```\nversion: '2'\n\nservices:\n  cluster:\n    image: daocloud.io/redis\n    container_name: redis-cluster\n    # 添加该参数后服务后台运行后，容器不会自动退出\n    tty: true\n    restart: always\n    # linux环境下建议使用host模式\n    network_mode: host\n\n    volumes:\n      - ./data:/data\n      - ./config:/etc/redis  \n    ports:\n      - \"7000:7000\"\n      - \"7001:7001\"\n      - \"7002:7002\"\n      - \"7003:7003\"\n      - \"7004:7004\"\n      - \"7005:7005\"\n    ## 必须使用宿主机ip 作为集群总线ip，否则宿主机无法访问到容器内的redis集群ip \n    # 也可以加在配置文件中\n    #  --cluster-announce-ip 172.16.65.218 \n    command: \n      - /bin/bash \n      - -c \n      - |\n        redis-server /etc/redis/redis_cluster_7000.conf  --cluster-announce-ip 172.16.65.218 & \n        redis-server /etc/redis/redis_cluster_7001.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7002.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7003.conf  --cluster-announce-ip 172.16.65.218 & \n        redis-server /etc/redis/redis_cluster_7004.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7005.conf  --cluster-announce-ip 172.16.65.218 \n```\n### redis_700X.conf\n根据各端口修改配置中的端口号\n```\nport 7000\n# 绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1\nbind 0.0.0.0\n# 启用集群模式\ncluster-enabled yes\n# 集群节点文件\ncluster-config-file nodes_7000.conf\n# 指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录\ndir /data/7000/\n# 节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间\ncluster-node-timeout 5000\n# 集群广播ip\n#cluster-announce-ip 172.20.0.4\n#cluster-announce-port 7000\n# 开启AOF模式\nappendonly yes\n# 关闭保护模式\nprotected-mode no\n# 是否后台启动\ndaemonize no\n# pid file所在目录\npidfile /var/run/redis_7000.pid \n# 客户端访问密码\n# requirepass redis2020\n# 日志文件\nlogfile /var/log/redis_7001.log\n```\n\n## 启动Redis Cluster\n```\ndocker-compose up -d\n```\n\n### 创建Redis集群\n\n- 进入容器\n```\n$ docker exec -it redis-cluster /bin/bash\n```\n- 创建集群\n```\n$ redis-cli --cluster create 127.0.0.1:7000 \\\n                           127.0.0.1:7001 \\\n                           127.0.0.1:7002 \\\n                           127.0.0.1:7003 \\\n                           127.0.0.1:7004 \\\n                           127.0.0.1:7005 \\\n                           --cluster-replicas 1\n```\n\n## 查看集群状态\n\n### \n```\n## -c表示集群模式进入\nroot@docker-desktop:/data# redis-cli -c -h localhost -p 7000\n\n## 查看集群信息 cluster_state为ok则表示集群创建成功\nlocalhost:7000> cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:1\ncluster_current_epoch:6\ncluster_my_epoch:3\ncluster_stats_messages_ping_sent:5290\ncluster_stats_messages_pong_sent:5299\ncluster_stats_messages_update_sent:1\ncluster_stats_messages_sent:10590\ncluster_stats_messages_ping_received:5294\ncluster_stats_messages_pong_received:5290\ncluster_stats_messages_meet_received:5\ncluster_stats_messages_update_received:3\ncluster_stats_messages_received:10592\n\n## 查看集群节点信息\nlocalhost:7000> cluster nodes\n6b7f8c4767feb376a99e79068748253afcf6ea5a 127.0.0.1:7001@17001 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594235646 3 connected\n52b109a6491a2e4280b6a66642716939d0f46e89 127.0.0.1:7004@17004 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594236555 5 connected\ndf7dcbf82ecba0ff044f2715b052674e73ec1ca6 127.0.0.1:7000@17000 myself,slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594234000 1 connected\n51f5c9fb771a702933d8bc29fcd13eb41811e2bb 127.0.0.1:7005@17005 master - 0 1607594236000 6 connected\nef7fdf2421427d1da29da4c1dab9e8c26ca12854 127.0.0.1:7002@17002 master - 0 1607594236657 3 connected 0-16383\ncf7327c9ec3b374ebc6ba3f49c6bd5e0a7098601 127.0.0.1:7003@17003 master - 0 1607594235544 4 connected\n```\n\n## 参考\n- [1] [Redis Cluster](https://redis.io/topics/cluster-tutorial)","slug":"redis-cluster","published":1,"updated":"2020-12-14T15:54:50.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwoz1000bjcxcfncbc2bz","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Docker 版本 19.03.8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MacBook-Pro-6:~ tanxinzheng$ docker -v</span><br><span class=\"line\">Docker version 19.03.8, build afacb8b</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><p>搭建的部署主要分为</p>\n<ul>\n<li>架构设计</li>\n<li>编写Docker Compose编排文件</li>\n<li>创建redis cluster配置文件</li>\n<li>启动服务容器</li>\n<li>创建Redis集群</li>\n</ul>\n<h3 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h3><p>redis集群模式必须要有3个主节点3个从节点才能正常启动集群模式</p>\n<ul>\n<li>主节点端口：7000 | 7001 | 7002</li>\n<li>从节点端口：7003 | 7004 | 7005</li>\n</ul>\n<h3 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h3><p>为节省内存资源，主从节点都部署在单机实例中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#39;2&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  cluster:</span><br><span class=\"line\">    image: daocloud.io&#x2F;redis</span><br><span class=\"line\">    container_name: redis-cluster</span><br><span class=\"line\">    # 添加该参数后服务后台运行后，容器不会自动退出</span><br><span class=\"line\">    tty: true</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    # linux环境下建议使用host模式</span><br><span class=\"line\">    network_mode: host</span><br><span class=\"line\"></span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - .&#x2F;data:&#x2F;data</span><br><span class=\"line\">      - .&#x2F;config:&#x2F;etc&#x2F;redis  </span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;7000:7000&quot;</span><br><span class=\"line\">      - &quot;7001:7001&quot;</span><br><span class=\"line\">      - &quot;7002:7002&quot;</span><br><span class=\"line\">      - &quot;7003:7003&quot;</span><br><span class=\"line\">      - &quot;7004:7004&quot;</span><br><span class=\"line\">      - &quot;7005:7005&quot;</span><br><span class=\"line\">    ## 必须使用宿主机ip 作为集群总线ip，否则宿主机无法访问到容器内的redis集群ip </span><br><span class=\"line\">    # 也可以加在配置文件中</span><br><span class=\"line\">    #  --cluster-announce-ip 172.16.65.218 </span><br><span class=\"line\">    command: </span><br><span class=\"line\">      - &#x2F;bin&#x2F;bash </span><br><span class=\"line\">      - -c </span><br><span class=\"line\">      - |</span><br><span class=\"line\">        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7000.conf  --cluster-announce-ip 172.16.65.218 &amp; </span><br><span class=\"line\">        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7001.conf  --cluster-announce-ip 172.16.65.218 &amp;</span><br><span class=\"line\">        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7002.conf  --cluster-announce-ip 172.16.65.218 &amp;</span><br><span class=\"line\">        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7003.conf  --cluster-announce-ip 172.16.65.218 &amp; </span><br><span class=\"line\">        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7004.conf  --cluster-announce-ip 172.16.65.218 &amp;</span><br><span class=\"line\">        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7005.conf  --cluster-announce-ip 172.16.65.218</span><br></pre></td></tr></table></figure>\n<h3 id=\"redis-700X-conf\"><a href=\"#redis-700X-conf\" class=\"headerlink\" title=\"redis_700X.conf\"></a>redis_700X.conf</h3><p>根据各端口修改配置中的端口号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port 7000</span><br><span class=\"line\"># 绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1</span><br><span class=\"line\">bind 0.0.0.0</span><br><span class=\"line\"># 启用集群模式</span><br><span class=\"line\">cluster-enabled yes</span><br><span class=\"line\"># 集群节点文件</span><br><span class=\"line\">cluster-config-file nodes_7000.conf</span><br><span class=\"line\"># 指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录</span><br><span class=\"line\">dir &#x2F;data&#x2F;7000&#x2F;</span><br><span class=\"line\"># 节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间</span><br><span class=\"line\">cluster-node-timeout 5000</span><br><span class=\"line\"># 集群广播ip</span><br><span class=\"line\">#cluster-announce-ip 172.20.0.4</span><br><span class=\"line\">#cluster-announce-port 7000</span><br><span class=\"line\"># 开启AOF模式</span><br><span class=\"line\">appendonly yes</span><br><span class=\"line\"># 关闭保护模式</span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\"># 是否后台启动</span><br><span class=\"line\">daemonize no</span><br><span class=\"line\"># pid file所在目录</span><br><span class=\"line\">pidfile &#x2F;var&#x2F;run&#x2F;redis_7000.pid </span><br><span class=\"line\"># 客户端访问密码</span><br><span class=\"line\"># requirepass redis2020</span><br><span class=\"line\"># 日志文件</span><br><span class=\"line\">logfile &#x2F;var&#x2F;log&#x2F;redis_7001.log</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动Redis-Cluster\"><a href=\"#启动Redis-Cluster\" class=\"headerlink\" title=\"启动Redis Cluster\"></a>启动Redis Cluster</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建Redis集群\"><a href=\"#创建Redis集群\" class=\"headerlink\" title=\"创建Redis集群\"></a>创建Redis集群</h3><ul>\n<li>进入容器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker exec -it redis-cluster &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></li>\n<li>创建集群<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli --cluster create 127.0.0.1:7000 \\</span><br><span class=\"line\">                           127.0.0.1:7001 \\</span><br><span class=\"line\">                           127.0.0.1:7002 \\</span><br><span class=\"line\">                           127.0.0.1:7003 \\</span><br><span class=\"line\">                           127.0.0.1:7004 \\</span><br><span class=\"line\">                           127.0.0.1:7005 \\</span><br><span class=\"line\">                           --cluster-replicas 1</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## -c表示集群模式进入</span><br><span class=\"line\">root@docker-desktop:&#x2F;data# redis-cli -c -h localhost -p 7000</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看集群信息 cluster_state为ok则表示集群创建成功</span><br><span class=\"line\">localhost:7000&gt; cluster info</span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_slots_ok:16384</span><br><span class=\"line\">cluster_slots_pfail:0</span><br><span class=\"line\">cluster_slots_fail:0</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\">cluster_size:1</span><br><span class=\"line\">cluster_current_epoch:6</span><br><span class=\"line\">cluster_my_epoch:3</span><br><span class=\"line\">cluster_stats_messages_ping_sent:5290</span><br><span class=\"line\">cluster_stats_messages_pong_sent:5299</span><br><span class=\"line\">cluster_stats_messages_update_sent:1</span><br><span class=\"line\">cluster_stats_messages_sent:10590</span><br><span class=\"line\">cluster_stats_messages_ping_received:5294</span><br><span class=\"line\">cluster_stats_messages_pong_received:5290</span><br><span class=\"line\">cluster_stats_messages_meet_received:5</span><br><span class=\"line\">cluster_stats_messages_update_received:3</span><br><span class=\"line\">cluster_stats_messages_received:10592</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看集群节点信息</span><br><span class=\"line\">localhost:7000&gt; cluster nodes</span><br><span class=\"line\">6b7f8c4767feb376a99e79068748253afcf6ea5a 127.0.0.1:7001@17001 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594235646 3 connected</span><br><span class=\"line\">52b109a6491a2e4280b6a66642716939d0f46e89 127.0.0.1:7004@17004 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594236555 5 connected</span><br><span class=\"line\">df7dcbf82ecba0ff044f2715b052674e73ec1ca6 127.0.0.1:7000@17000 myself,slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594234000 1 connected</span><br><span class=\"line\">51f5c9fb771a702933d8bc29fcd13eb41811e2bb 127.0.0.1:7005@17005 master - 0 1607594236000 6 connected</span><br><span class=\"line\">ef7fdf2421427d1da29da4c1dab9e8c26ca12854 127.0.0.1:7002@17002 master - 0 1607594236657 3 connected 0-16383</span><br><span class=\"line\">cf7327c9ec3b374ebc6ba3f49c6bd5e0a7098601 127.0.0.1:7003@17003 master - 0 1607594235544 4 connected</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>[1] <a href=\"https://redis.io/topics/cluster-tutorial\" target=\"_blank\" rel=\"noopener\">Redis Cluster</a></li>\n</ul>\n","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Docker 版本 19.03.8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MacBook-Pro-6:~ tanxinzheng$ docker -v</span><br><span class=\"line\">Docker version 19.03.8, build afacb8b</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><p>搭建的部署主要分为</p>\n<ul>\n<li>架构设计</li>\n<li>编写Docker Compose编排文件</li>\n<li>创建redis cluster配置文件</li>\n<li>启动服务容器</li>\n<li>创建Redis集群</li>\n</ul>\n<h3 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h3><p>redis集群模式必须要有3个主节点3个从节点才能正常启动集群模式</p>\n<ul>\n<li>主节点端口：7000 | 7001 | 7002</li>\n<li>从节点端口：7003 | 7004 | 7005</li>\n</ul>\n<h3 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h3><p>为节省内存资源，主从节点都部署在单机实例中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#39;2&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  cluster:</span><br><span class=\"line\">    image: daocloud.io&#x2F;redis</span><br><span class=\"line\">    container_name: redis-cluster</span><br><span class=\"line\">    # 添加该参数后服务后台运行后，容器不会自动退出</span><br><span class=\"line\">    tty: true</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    # linux环境下建议使用host模式</span><br><span class=\"line\">    network_mode: host</span><br><span class=\"line\"></span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - .&#x2F;data:&#x2F;data</span><br><span class=\"line\">      - .&#x2F;config:&#x2F;etc&#x2F;redis  </span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;7000:7000&quot;</span><br><span class=\"line\">      - &quot;7001:7001&quot;</span><br><span class=\"line\">      - &quot;7002:7002&quot;</span><br><span class=\"line\">      - &quot;7003:7003&quot;</span><br><span class=\"line\">      - &quot;7004:7004&quot;</span><br><span class=\"line\">      - &quot;7005:7005&quot;</span><br><span class=\"line\">    ## 必须使用宿主机ip 作为集群总线ip，否则宿主机无法访问到容器内的redis集群ip </span><br><span class=\"line\">    # 也可以加在配置文件中</span><br><span class=\"line\">    #  --cluster-announce-ip 172.16.65.218 </span><br><span class=\"line\">    command: </span><br><span class=\"line\">      - &#x2F;bin&#x2F;bash </span><br><span class=\"line\">      - -c </span><br><span class=\"line\">      - |</span><br><span class=\"line\">        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7000.conf  --cluster-announce-ip 172.16.65.218 &amp; </span><br><span class=\"line\">        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7001.conf  --cluster-announce-ip 172.16.65.218 &amp;</span><br><span class=\"line\">        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7002.conf  --cluster-announce-ip 172.16.65.218 &amp;</span><br><span class=\"line\">        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7003.conf  --cluster-announce-ip 172.16.65.218 &amp; </span><br><span class=\"line\">        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7004.conf  --cluster-announce-ip 172.16.65.218 &amp;</span><br><span class=\"line\">        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7005.conf  --cluster-announce-ip 172.16.65.218</span><br></pre></td></tr></table></figure>\n<h3 id=\"redis-700X-conf\"><a href=\"#redis-700X-conf\" class=\"headerlink\" title=\"redis_700X.conf\"></a>redis_700X.conf</h3><p>根据各端口修改配置中的端口号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port 7000</span><br><span class=\"line\"># 绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1</span><br><span class=\"line\">bind 0.0.0.0</span><br><span class=\"line\"># 启用集群模式</span><br><span class=\"line\">cluster-enabled yes</span><br><span class=\"line\"># 集群节点文件</span><br><span class=\"line\">cluster-config-file nodes_7000.conf</span><br><span class=\"line\"># 指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录</span><br><span class=\"line\">dir &#x2F;data&#x2F;7000&#x2F;</span><br><span class=\"line\"># 节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间</span><br><span class=\"line\">cluster-node-timeout 5000</span><br><span class=\"line\"># 集群广播ip</span><br><span class=\"line\">#cluster-announce-ip 172.20.0.4</span><br><span class=\"line\">#cluster-announce-port 7000</span><br><span class=\"line\"># 开启AOF模式</span><br><span class=\"line\">appendonly yes</span><br><span class=\"line\"># 关闭保护模式</span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\"># 是否后台启动</span><br><span class=\"line\">daemonize no</span><br><span class=\"line\"># pid file所在目录</span><br><span class=\"line\">pidfile &#x2F;var&#x2F;run&#x2F;redis_7000.pid </span><br><span class=\"line\"># 客户端访问密码</span><br><span class=\"line\"># requirepass redis2020</span><br><span class=\"line\"># 日志文件</span><br><span class=\"line\">logfile &#x2F;var&#x2F;log&#x2F;redis_7001.log</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动Redis-Cluster\"><a href=\"#启动Redis-Cluster\" class=\"headerlink\" title=\"启动Redis Cluster\"></a>启动Redis Cluster</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建Redis集群\"><a href=\"#创建Redis集群\" class=\"headerlink\" title=\"创建Redis集群\"></a>创建Redis集群</h3><ul>\n<li>进入容器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker exec -it redis-cluster &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></li>\n<li>创建集群<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli --cluster create 127.0.0.1:7000 \\</span><br><span class=\"line\">                           127.0.0.1:7001 \\</span><br><span class=\"line\">                           127.0.0.1:7002 \\</span><br><span class=\"line\">                           127.0.0.1:7003 \\</span><br><span class=\"line\">                           127.0.0.1:7004 \\</span><br><span class=\"line\">                           127.0.0.1:7005 \\</span><br><span class=\"line\">                           --cluster-replicas 1</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## -c表示集群模式进入</span><br><span class=\"line\">root@docker-desktop:&#x2F;data# redis-cli -c -h localhost -p 7000</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看集群信息 cluster_state为ok则表示集群创建成功</span><br><span class=\"line\">localhost:7000&gt; cluster info</span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_slots_ok:16384</span><br><span class=\"line\">cluster_slots_pfail:0</span><br><span class=\"line\">cluster_slots_fail:0</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\">cluster_size:1</span><br><span class=\"line\">cluster_current_epoch:6</span><br><span class=\"line\">cluster_my_epoch:3</span><br><span class=\"line\">cluster_stats_messages_ping_sent:5290</span><br><span class=\"line\">cluster_stats_messages_pong_sent:5299</span><br><span class=\"line\">cluster_stats_messages_update_sent:1</span><br><span class=\"line\">cluster_stats_messages_sent:10590</span><br><span class=\"line\">cluster_stats_messages_ping_received:5294</span><br><span class=\"line\">cluster_stats_messages_pong_received:5290</span><br><span class=\"line\">cluster_stats_messages_meet_received:5</span><br><span class=\"line\">cluster_stats_messages_update_received:3</span><br><span class=\"line\">cluster_stats_messages_received:10592</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看集群节点信息</span><br><span class=\"line\">localhost:7000&gt; cluster nodes</span><br><span class=\"line\">6b7f8c4767feb376a99e79068748253afcf6ea5a 127.0.0.1:7001@17001 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594235646 3 connected</span><br><span class=\"line\">52b109a6491a2e4280b6a66642716939d0f46e89 127.0.0.1:7004@17004 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594236555 5 connected</span><br><span class=\"line\">df7dcbf82ecba0ff044f2715b052674e73ec1ca6 127.0.0.1:7000@17000 myself,slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594234000 1 connected</span><br><span class=\"line\">51f5c9fb771a702933d8bc29fcd13eb41811e2bb 127.0.0.1:7005@17005 master - 0 1607594236000 6 connected</span><br><span class=\"line\">ef7fdf2421427d1da29da4c1dab9e8c26ca12854 127.0.0.1:7002@17002 master - 0 1607594236657 3 connected 0-16383</span><br><span class=\"line\">cf7327c9ec3b374ebc6ba3f49c6bd5e0a7098601 127.0.0.1:7003@17003 master - 0 1607594235544 4 connected</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>[1] <a href=\"https://redis.io/topics/cluster-tutorial\" target=\"_blank\" rel=\"noopener\">Redis Cluster</a></li>\n</ul>\n"},{"title":"基于Github Action工作流自动部署Hexo","index_img":"/img/hexo-github-action.jpg","abbrlink":2231850037,"date":"2020-04-16T03:54:14.000Z","_content":"\n# Hexo搭建\n这段就pass了，只要这篇主要讲解Github Action部署\n\n# 创建github ssh 私钥和公钥\n在本地运行如下命令生成id_rsa和id_rsa.pub文件，一路回车，不要输入密码！！！不要输入密码！！！不要输入密码！！！（被这个坑的我想哭T_T，一直验证不通过）\n```cmd\n$ ssh-keygen -t rsa -C \"tanxinzheng@139.com\" #此处修改为你github的注册邮箱\n```\n\n# Github设置\n- 将id_rsa私钥放入项目的settings/secures配置中\n- 将id_rsa.pub公钥填入账号的settings/SSH keys配置中\n\n# 创建Github Action工作流脚本\n\n在项目该目录下创建~./.github/workflows/main.yml文件，将下面的配置信息填入，并修改自己的信息即可\n\n```yml\nname: CI\non:\n  push:\n    branches:\n      - generate-source\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v1\n        with:\n          ref: generate-source\n      - name: Use Node.js ${{ matrix.node_version }}\n        uses: actions/setup-node@v1\n        with:\n          version: ${{ matrix.node_version }}\n      - name: Setup hexo\n        env:\n          ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_PRI }}\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.email \"tanxinzheng@139.com\"\n          git config --global user.name \"tanxinzheng\"\n          npm install hexo-cli -g\n          npm install\n      - name: Hexo deploy\n        run: |\n          hexo clean\n          hexo d\n```\n\n# Github Action执行部署\n在Github Action页面执行即可，push之后会自动部署。","source":"_posts/hexo/hexo-github-action.md","raw":"---\ntitle: 基于Github Action工作流自动部署Hexo\ntags:\n  - Hexo\n  - Github\nindex_img: /img/hexo-github-action.jpg\nabbrlink: 2231850037\ndate: 2020-04-16 11:54:14\n---\n\n# Hexo搭建\n这段就pass了，只要这篇主要讲解Github Action部署\n\n# 创建github ssh 私钥和公钥\n在本地运行如下命令生成id_rsa和id_rsa.pub文件，一路回车，不要输入密码！！！不要输入密码！！！不要输入密码！！！（被这个坑的我想哭T_T，一直验证不通过）\n```cmd\n$ ssh-keygen -t rsa -C \"tanxinzheng@139.com\" #此处修改为你github的注册邮箱\n```\n\n# Github设置\n- 将id_rsa私钥放入项目的settings/secures配置中\n- 将id_rsa.pub公钥填入账号的settings/SSH keys配置中\n\n# 创建Github Action工作流脚本\n\n在项目该目录下创建~./.github/workflows/main.yml文件，将下面的配置信息填入，并修改自己的信息即可\n\n```yml\nname: CI\non:\n  push:\n    branches:\n      - generate-source\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v1\n        with:\n          ref: generate-source\n      - name: Use Node.js ${{ matrix.node_version }}\n        uses: actions/setup-node@v1\n        with:\n          version: ${{ matrix.node_version }}\n      - name: Setup hexo\n        env:\n          ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_PRI }}\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.email \"tanxinzheng@139.com\"\n          git config --global user.name \"tanxinzheng\"\n          npm install hexo-cli -g\n          npm install\n      - name: Hexo deploy\n        run: |\n          hexo clean\n          hexo d\n```\n\n# Github Action执行部署\n在Github Action页面执行即可，push之后会自动部署。","slug":"hexo/hexo-github-action","published":1,"updated":"2020-04-18T11:36:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwp0z000wjcxcdrcw5g94","content":"<h1 id=\"Hexo搭建\"><a href=\"#Hexo搭建\" class=\"headerlink\" title=\"Hexo搭建\"></a>Hexo搭建</h1><p>这段就pass了，只要这篇主要讲解Github Action部署</p>\n<h1 id=\"创建github-ssh-私钥和公钥\"><a href=\"#创建github-ssh-私钥和公钥\" class=\"headerlink\" title=\"创建github ssh 私钥和公钥\"></a>创建github ssh 私钥和公钥</h1><p>在本地运行如下命令生成id_rsa和id_rsa.pub文件，一路回车，不要输入密码！！！不要输入密码！！！不要输入密码！！！（被这个坑的我想哭T_T，一直验证不通过）</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C \"tanxinzheng@<span class=\"number\">139</span>.com\" #此处修改为你github的注册邮箱</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Github设置\"><a href=\"#Github设置\" class=\"headerlink\" title=\"Github设置\"></a>Github设置</h1><ul>\n<li>将id_rsa私钥放入项目的settings/secures配置中</li>\n<li>将id_rsa.pub公钥填入账号的settings/SSH keys配置中</li>\n</ul>\n<h1 id=\"创建Github-Action工作流脚本\"><a href=\"#创建Github-Action工作流脚本\" class=\"headerlink\" title=\"创建Github Action工作流脚本\"></a>创建Github Action工作流脚本</h1><p>在项目该目录下创建~./.github/workflows/main.yml文件，将下面的配置信息填入，并修改自己的信息即可</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">CI</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">generate-source</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span> <span class=\"string\">source</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">generate-source</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Use</span> <span class=\"string\">Node.js</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.node_version</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">version:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.node_version</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">hexo</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">ACTION_DEPLOY_KEY:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.HEXO_DEPLOY_PRI</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">mkdir</span> <span class=\"string\">-p</span> <span class=\"string\">~/.ssh/</span></span><br><span class=\"line\">          <span class=\"string\">echo</span> <span class=\"string\">\"$ACTION_DEPLOY_KEY\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">~/.ssh/id_rsa</span></span><br><span class=\"line\">          <span class=\"string\">chmod</span> <span class=\"number\">600</span> <span class=\"string\">~/.ssh/id_rsa</span></span><br><span class=\"line\">          <span class=\"string\">ssh-keyscan</span> <span class=\"string\">github.com</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">~/.ssh/known_hosts</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"tanxinzheng@139.com\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"tanxinzheng\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-cli</span> <span class=\"string\">-g</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\">          <span class=\"string\">hexo</span> <span class=\"string\">d</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Github-Action执行部署\"><a href=\"#Github-Action执行部署\" class=\"headerlink\" title=\"Github Action执行部署\"></a>Github Action执行部署</h1><p>在Github Action页面执行即可，push之后会自动部署。</p>\n","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"Hexo搭建\"><a href=\"#Hexo搭建\" class=\"headerlink\" title=\"Hexo搭建\"></a>Hexo搭建</h1><p>这段就pass了，只要这篇主要讲解Github Action部署</p>\n<h1 id=\"创建github-ssh-私钥和公钥\"><a href=\"#创建github-ssh-私钥和公钥\" class=\"headerlink\" title=\"创建github ssh 私钥和公钥\"></a>创建github ssh 私钥和公钥</h1><p>在本地运行如下命令生成id_rsa和id_rsa.pub文件，一路回车，不要输入密码！！！不要输入密码！！！不要输入密码！！！（被这个坑的我想哭T_T，一直验证不通过）</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C \"tanxinzheng@<span class=\"number\">139</span>.com\" #此处修改为你github的注册邮箱</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Github设置\"><a href=\"#Github设置\" class=\"headerlink\" title=\"Github设置\"></a>Github设置</h1><ul>\n<li>将id_rsa私钥放入项目的settings/secures配置中</li>\n<li>将id_rsa.pub公钥填入账号的settings/SSH keys配置中</li>\n</ul>\n<h1 id=\"创建Github-Action工作流脚本\"><a href=\"#创建Github-Action工作流脚本\" class=\"headerlink\" title=\"创建Github Action工作流脚本\"></a>创建Github Action工作流脚本</h1><p>在项目该目录下创建~./.github/workflows/main.yml文件，将下面的配置信息填入，并修改自己的信息即可</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">CI</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">generate-source</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span> <span class=\"string\">source</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">generate-source</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Use</span> <span class=\"string\">Node.js</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.node_version</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">version:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.node_version</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">hexo</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">ACTION_DEPLOY_KEY:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.HEXO_DEPLOY_PRI</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">mkdir</span> <span class=\"string\">-p</span> <span class=\"string\">~/.ssh/</span></span><br><span class=\"line\">          <span class=\"string\">echo</span> <span class=\"string\">\"$ACTION_DEPLOY_KEY\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">~/.ssh/id_rsa</span></span><br><span class=\"line\">          <span class=\"string\">chmod</span> <span class=\"number\">600</span> <span class=\"string\">~/.ssh/id_rsa</span></span><br><span class=\"line\">          <span class=\"string\">ssh-keyscan</span> <span class=\"string\">github.com</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">~/.ssh/known_hosts</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"tanxinzheng@139.com\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"tanxinzheng\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-cli</span> <span class=\"string\">-g</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\">          <span class=\"string\">hexo</span> <span class=\"string\">d</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Github-Action执行部署\"><a href=\"#Github-Action执行部署\" class=\"headerlink\" title=\"Github Action执行部署\"></a>Github Action执行部署</h1><p>在Github Action页面执行即可，push之后会自动部署。</p>\n"},{"title":"Hexo命令","index_img":"/img/hexo.jpeg","abbrlink":2628717197,"_content":"\n\n## init\n\n```\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\nThis command is a shortcut that runs the following steps:\n\n1. Git clone [hexo-starter](https://github.com/hexojs/hexo-starter) including [hexo-theme-landscape](https://github.com/hexojs/hexo-theme-landscape) into the current directory or a target folder if specified.\n2. Install dependencies using a package manager: [Yarn 1](https://classic.yarnpkg.com/lang/en/), [pnpm](https://pnpm.js.org/) or [npm](https://docs.npmjs.com/cli/install), whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with [Node.js](https://hexo.io/docs/#Install-Node-js) by default.\n\n## new\n\n```\n$ hexo new [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](https://hexo.io/zh-cn/docs/configuration) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n```\n$ hexo new \"post title with whitespace\"\n```\n\n| 参数              | 描述                                          |\n| :---------------- | :-------------------------------------------- |\n| `-p`, `--path`    | 自定义新文章的路径                            |\n| `-r`, `--replace` | 如果存在同名文章，将其替换                    |\n| `-s`, `--slug`    | 文章的 Slug，作为新文章的文件名和发布后的 URL |\n\n默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 `index.md` 文件。你可以使用 `--path` 参数来覆盖上述行为、自行决定文件的目录：\n\n```\nhexo new page --path about/me \"About me\"\n```\n\n以上命令会创建一个 `source/about/me.md` 文件，同时 Front Matter 中的 title 为 `\"About me\"`\n\n注意！title 是必须指定的！如果你这么做并不能达到你的目的：\n\n```\nhexo new page --path about/me\n```\n\n此时 Hexo 会创建 `source/_posts/about/me.md`，同时 `me.md` 的 Front Matter 中的 title 为 `\"page\"`。这是因为在上述命令中，hexo-cli 将 `page` 视为指定文章的标题、并采用默认的 `layout`。\n\n## generate\n\n```\n$ hexo generate\n```\n\n生成静态文件。\n\n| 选项                  | 描述                                                         |\n| :-------------------- | :----------------------------------------------------------- |\n| `-d`, `--deploy`      | 文件生成后立即部署网站                                       |\n| `-w`, `--watch`       | 监视文件变动                                                 |\n| `-b`, `--bail`        | 生成过程中如果发生任何未处理的异常则抛出异常                 |\n| `-f`, `--force`       | 强制重新生成文件 Hexo 引入了差分机制，如果 `public` 目录存在，那么 `hexo g` 只会重新生成改动的文件。 使用该参数的效果接近 `hexo clean && hexo generate` |\n| `-c`, `--concurrency` | 最大同时生成文件的数量，默认无限制                           |\n\n该命令可以简写为\n\n```\n$ hexo g\n```\n\n## publish\n\n```\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n## server\n\n```\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n| 选项             | 描述                           |\n| :--------------- | :----------------------------- |\n| `-p`, `--port`   | 重设端口                       |\n| `-s`, `--static` | 只使用静态文件                 |\n| `-l`, `--log`    | 启动日记记录，使用覆盖记录格式 |\n\n## deploy\n\n```\n$ hexo deploy\n```\n\n部署网站。\n\n| 参数               | 描述                     |\n| :----------------- | :----------------------- |\n| `-g`, `--generate` | 部署之前预先生成静态文件 |\n\n该命令可以简写为：\n\n```\n$ hexo d\n```\n\n## render\n\n```\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n| 参数             | 描述         |\n| :--------------- | :----------- |\n| `-o`, `--output` | 设置输出路径 |\n\n## migrate\n\n```\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](https://hexo.io/zh-cn/docs/migration)。\n\n## clean\n\n```\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n\n## list\n\n```\n$ hexo list <type>\n```\n\n列出网站资料。\n\n## version\n\n```\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n## 选项\n\n### 安全模式\n\n```\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n\n```\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n### 简洁模式\n\n```\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n### 自定义配置文件的路径\n\n```\n# 使用 custom.yml 代替默认的 _config.yml\n$ hexo server --config custom.yml\n\n# 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高\n$ hexo generate --config custom.yml,custom2.json,custom3.yml\n```\n\n自定义配置文件的路径，指定这个参数后将不再使用默认的 `_config.yml`。\n你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：\n\n```\n# 使用 custom.yml 代替默认的 _config.yml\n$ hexo server --config custom.yml\n\n# 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json\n$ hexo generate --config custom.yml,custom2.json,custom3.yml\n```\n\n当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 `_multiconfig.yml`。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。\n\n### 显示草稿\n\n```\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n\n```\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。","source":"_posts/hexo/hexo命令.md","raw":"---\ntitle: Hexo命令\ntags:\n  - Hexo\nindex_img: /img/hexo.jpeg\nabbrlink: 2628717197\n---\n\n\n## init\n\n```\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\nThis command is a shortcut that runs the following steps:\n\n1. Git clone [hexo-starter](https://github.com/hexojs/hexo-starter) including [hexo-theme-landscape](https://github.com/hexojs/hexo-theme-landscape) into the current directory or a target folder if specified.\n2. Install dependencies using a package manager: [Yarn 1](https://classic.yarnpkg.com/lang/en/), [pnpm](https://pnpm.js.org/) or [npm](https://docs.npmjs.com/cli/install), whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with [Node.js](https://hexo.io/docs/#Install-Node-js) by default.\n\n## new\n\n```\n$ hexo new [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](https://hexo.io/zh-cn/docs/configuration) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n```\n$ hexo new \"post title with whitespace\"\n```\n\n| 参数              | 描述                                          |\n| :---------------- | :-------------------------------------------- |\n| `-p`, `--path`    | 自定义新文章的路径                            |\n| `-r`, `--replace` | 如果存在同名文章，将其替换                    |\n| `-s`, `--slug`    | 文章的 Slug，作为新文章的文件名和发布后的 URL |\n\n默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 `index.md` 文件。你可以使用 `--path` 参数来覆盖上述行为、自行决定文件的目录：\n\n```\nhexo new page --path about/me \"About me\"\n```\n\n以上命令会创建一个 `source/about/me.md` 文件，同时 Front Matter 中的 title 为 `\"About me\"`\n\n注意！title 是必须指定的！如果你这么做并不能达到你的目的：\n\n```\nhexo new page --path about/me\n```\n\n此时 Hexo 会创建 `source/_posts/about/me.md`，同时 `me.md` 的 Front Matter 中的 title 为 `\"page\"`。这是因为在上述命令中，hexo-cli 将 `page` 视为指定文章的标题、并采用默认的 `layout`。\n\n## generate\n\n```\n$ hexo generate\n```\n\n生成静态文件。\n\n| 选项                  | 描述                                                         |\n| :-------------------- | :----------------------------------------------------------- |\n| `-d`, `--deploy`      | 文件生成后立即部署网站                                       |\n| `-w`, `--watch`       | 监视文件变动                                                 |\n| `-b`, `--bail`        | 生成过程中如果发生任何未处理的异常则抛出异常                 |\n| `-f`, `--force`       | 强制重新生成文件 Hexo 引入了差分机制，如果 `public` 目录存在，那么 `hexo g` 只会重新生成改动的文件。 使用该参数的效果接近 `hexo clean && hexo generate` |\n| `-c`, `--concurrency` | 最大同时生成文件的数量，默认无限制                           |\n\n该命令可以简写为\n\n```\n$ hexo g\n```\n\n## publish\n\n```\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n## server\n\n```\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n| 选项             | 描述                           |\n| :--------------- | :----------------------------- |\n| `-p`, `--port`   | 重设端口                       |\n| `-s`, `--static` | 只使用静态文件                 |\n| `-l`, `--log`    | 启动日记记录，使用覆盖记录格式 |\n\n## deploy\n\n```\n$ hexo deploy\n```\n\n部署网站。\n\n| 参数               | 描述                     |\n| :----------------- | :----------------------- |\n| `-g`, `--generate` | 部署之前预先生成静态文件 |\n\n该命令可以简写为：\n\n```\n$ hexo d\n```\n\n## render\n\n```\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n| 参数             | 描述         |\n| :--------------- | :----------- |\n| `-o`, `--output` | 设置输出路径 |\n\n## migrate\n\n```\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](https://hexo.io/zh-cn/docs/migration)。\n\n## clean\n\n```\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n\n## list\n\n```\n$ hexo list <type>\n```\n\n列出网站资料。\n\n## version\n\n```\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n## 选项\n\n### 安全模式\n\n```\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n\n```\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n### 简洁模式\n\n```\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n### 自定义配置文件的路径\n\n```\n# 使用 custom.yml 代替默认的 _config.yml\n$ hexo server --config custom.yml\n\n# 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高\n$ hexo generate --config custom.yml,custom2.json,custom3.yml\n```\n\n自定义配置文件的路径，指定这个参数后将不再使用默认的 `_config.yml`。\n你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：\n\n```\n# 使用 custom.yml 代替默认的 _config.yml\n$ hexo server --config custom.yml\n\n# 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json\n$ hexo generate --config custom.yml,custom2.json,custom3.yml\n```\n\n当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 `_multiconfig.yml`。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。\n\n### 显示草稿\n\n```\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n\n```\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。","slug":"hexo/hexo命令","published":1,"date":"2020-05-26T16:16:04.563Z","updated":"2020-12-14T16:26:19.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwp0z000xjcxc78de01mg","content":"<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<p>This command is a shortcut that runs the following steps:</p>\n<ol>\n<li>Git clone <a href=\"https://github.com/hexojs/hexo-starter\" target=\"_blank\" rel=\"noopener\">hexo-starter</a> including <a href=\"https://github.com/hexojs/hexo-theme-landscape\" target=\"_blank\" rel=\"noopener\">hexo-theme-landscape</a> into the current directory or a target folder if specified.</li>\n<li>Install dependencies using a package manager: <a href=\"https://classic.yarnpkg.com/lang/en/\" target=\"_blank\" rel=\"noopener\">Yarn 1</a>, <a href=\"https://pnpm.js.org/\" target=\"_blank\" rel=\"noopener\">pnpm</a> or <a href=\"https://docs.npmjs.com/cli/install\" target=\"_blank\" rel=\"noopener\">npm</a>, whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with <a href=\"https://hexo.io/docs/#Install-Node-js\" target=\"_blank\" rel=\"noopener\">Node.js</a> by default.</li>\n</ol>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-p</code>, <code>--path</code></td>\n<td align=\"left\">自定义新文章的路径</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-r</code>, <code>--replace</code></td>\n<td align=\"left\">如果存在同名文章，将其替换</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--slug</code></td>\n<td align=\"left\">文章的 Slug，作为新文章的文件名和发布后的 URL</td>\n</tr>\n</tbody></table>\n<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page --path about&#x2F;me &quot;About me&quot;</span><br></pre></td></tr></table></figure>\n\n<p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p>\n<p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page --path about&#x2F;me</span><br></pre></td></tr></table></figure>\n\n<p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p>\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-d</code>, <code>--deploy</code></td>\n<td align=\"left\">文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-w</code>, <code>--watch</code></td>\n<td align=\"left\">监视文件变动</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-b</code>, <code>--bail</code></td>\n<td align=\"left\">生成过程中如果发生任何未处理的异常则抛出异常</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-f</code>, <code>--force</code></td>\n<td align=\"left\">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>-c</code>, <code>--concurrency</code></td>\n<td align=\"left\">最大同时生成文件的数量，默认无限制</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-p</code>, <code>--port</code></td>\n<td align=\"left\">重设端口</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--static</code></td>\n<td align=\"left\">只使用静态文件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-l</code>, <code>--log</code></td>\n<td align=\"left\">启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody></table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-g</code>, <code>--generate</code></td>\n<td align=\"left\">部署之前预先生成静态文件</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-o</code>, <code>--output</code></td>\n<td align=\"left\">设置输出路径</td>\n</tr>\n</tbody></table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>\n\n<p>从其他博客系统 <a href=\"https://hexo.io/zh-cn/docs/migration\" target=\"_blank\" rel=\"noopener\">迁移内容</a>。</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>\n\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\" target=\"_blank\" rel=\"noopener\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class=\"line\">$ hexo server --config custom.yml</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br><span class=\"line\">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>\n\n<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class=\"line\">$ hexo server --config custom.yml</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br><span class=\"line\">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>\n\n<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --draft</span><br></pre></td></tr></table></figure>\n\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure>\n\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<p>This command is a shortcut that runs the following steps:</p>\n<ol>\n<li>Git clone <a href=\"https://github.com/hexojs/hexo-starter\" target=\"_blank\" rel=\"noopener\">hexo-starter</a> including <a href=\"https://github.com/hexojs/hexo-theme-landscape\" target=\"_blank\" rel=\"noopener\">hexo-theme-landscape</a> into the current directory or a target folder if specified.</li>\n<li>Install dependencies using a package manager: <a href=\"https://classic.yarnpkg.com/lang/en/\" target=\"_blank\" rel=\"noopener\">Yarn 1</a>, <a href=\"https://pnpm.js.org/\" target=\"_blank\" rel=\"noopener\">pnpm</a> or <a href=\"https://docs.npmjs.com/cli/install\" target=\"_blank\" rel=\"noopener\">npm</a>, whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with <a href=\"https://hexo.io/docs/#Install-Node-js\" target=\"_blank\" rel=\"noopener\">Node.js</a> by default.</li>\n</ol>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-p</code>, <code>--path</code></td>\n<td align=\"left\">自定义新文章的路径</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-r</code>, <code>--replace</code></td>\n<td align=\"left\">如果存在同名文章，将其替换</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--slug</code></td>\n<td align=\"left\">文章的 Slug，作为新文章的文件名和发布后的 URL</td>\n</tr>\n</tbody></table>\n<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page --path about&#x2F;me &quot;About me&quot;</span><br></pre></td></tr></table></figure>\n\n<p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p>\n<p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page --path about&#x2F;me</span><br></pre></td></tr></table></figure>\n\n<p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p>\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-d</code>, <code>--deploy</code></td>\n<td align=\"left\">文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-w</code>, <code>--watch</code></td>\n<td align=\"left\">监视文件变动</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-b</code>, <code>--bail</code></td>\n<td align=\"left\">生成过程中如果发生任何未处理的异常则抛出异常</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-f</code>, <code>--force</code></td>\n<td align=\"left\">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>-c</code>, <code>--concurrency</code></td>\n<td align=\"left\">最大同时生成文件的数量，默认无限制</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-p</code>, <code>--port</code></td>\n<td align=\"left\">重设端口</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--static</code></td>\n<td align=\"left\">只使用静态文件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-l</code>, <code>--log</code></td>\n<td align=\"left\">启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody></table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-g</code>, <code>--generate</code></td>\n<td align=\"left\">部署之前预先生成静态文件</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-o</code>, <code>--output</code></td>\n<td align=\"left\">设置输出路径</td>\n</tr>\n</tbody></table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>\n\n<p>从其他博客系统 <a href=\"https://hexo.io/zh-cn/docs/migration\" target=\"_blank\" rel=\"noopener\">迁移内容</a>。</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>\n\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\" target=\"_blank\" rel=\"noopener\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class=\"line\">$ hexo server --config custom.yml</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br><span class=\"line\">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>\n\n<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class=\"line\">$ hexo server --config custom.yml</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br><span class=\"line\">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>\n\n<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --draft</span><br></pre></td></tr></table></figure>\n\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure>\n\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n"},{"title":"Hexo写作","index_img":"/img/hexo.jpeg","abbrlink":3878378061,"_content":"\n\n\n\n你可以执行下列命令来创建一篇新文章或者新的页面。\n\n```\n$ hexo new [layout] <title>\n```\n\n您可以在命令中指定文章的布局（layout），默认为 `post`，可以通过修改 `_config.yml` 中的 `default_layout` 参数来指定默认布局。\n\n### 布局（Layout）\n\nHexo 有三种默认布局：`post`、`page` 和 `draft`。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 `post` 相同，都将储存到 `source/_posts` 文件夹。\n\n| 布局    | 路径             |\n| :------ | :--------------- |\n| `post`  | `source/_posts`  |\n| `page`  | `source`         |\n| `draft` | `source/_drafts` |\n\n> Disabling layout\n>\n> If you don’t want an article (post/page) to be processed with a theme, set `layout: false` in its front-matter. Refer to [this section](https://hexo.io/zh-cn/docs/front-matter#布局) for more details.\n\n### 文件名称\n\nHexo 默认以标题做为文件名称，但您可编辑 `new_post_name` 参数来改变默认的文件名称，举例来说，设为 `:year-:month-:day-:title.md` 可让您更方便的通过日期来管理文章。\n\n| 变量       | 描述                                |\n| :--------- | :---------------------------------- |\n| `:title`   | 标题（小写，空格将会被替换为短杠）  |\n| `:year`    | 建立的年份，比如， `2015`           |\n| `:month`   | 建立的月份（有前导零），比如， `04` |\n| `:i_month` | 建立的月份（无前导零），比如， `4`  |\n| `:day`     | 建立的日期（有前导零），比如， `07` |\n| `:i_day`   | 建立的日期（无前导零），比如， `7`  |\n\n### 草稿\n\n刚刚提到了 Hexo 的一种特殊布局：`draft`，这种布局在建立时会被保存到 `source/_drafts` 文件夹，您可通过 `publish` 命令将草稿移动到 `source/_posts` 文件夹，该命令的使用方式与 `new` 十分类似，您也可在命令中指定 `layout` 来指定布局。\n\n```\n$ hexo publish [layout] <title>\n```\n\n草稿默认不会显示在页面中，您可在执行时加上 `--draft` 参数，或是把 `render_drafts` 参数设为 `true` 来预览草稿。\n\n## 模版（Scaffold）\n\n在新建文章时，Hexo 会根据 `scaffolds` 文件夹内相对应的文件来建立文件，例如：\n\n```\n$ hexo new photo \"My Gallery\"\n```\n\n在执行这行指令时，Hexo 会尝试在 `scaffolds` 文件夹中寻找 `photo.md`，并根据其内容建立文章，以下是您可以在模版中使用的变量：\n\n| 变量     | 描述         |\n| :------- | :----------- |\n| `layout` | 布局         |\n| `title`  | 标题         |\n| `date`   | 文件建立日期 |\n\n### 支持的格式\n\nHexo 支持以任何格式书写文章，只要安装了相应的渲染插件。\n\n例如，Hexo 默认安装了 `hexo-renderer-marked` 和 `hexo-renderer-ejs`，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 `hexo-renderer-pug`，你甚至可以用 Pug 模板语言书写文章。\n\n只需要将文章的扩展名从 `md` 改成 `ejs`，Hexo 就会使用 `hexo-renderer-ejs` 渲染这个文件，其他格式同理。","source":"_posts/hexo/hexo写作.md","raw":"---\ntitle: Hexo写作\ntags:\n  - Hexo\nindex_img: /img/hexo.jpeg\nabbrlink: 3878378061\n---\n\n\n\n\n你可以执行下列命令来创建一篇新文章或者新的页面。\n\n```\n$ hexo new [layout] <title>\n```\n\n您可以在命令中指定文章的布局（layout），默认为 `post`，可以通过修改 `_config.yml` 中的 `default_layout` 参数来指定默认布局。\n\n### 布局（Layout）\n\nHexo 有三种默认布局：`post`、`page` 和 `draft`。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 `post` 相同，都将储存到 `source/_posts` 文件夹。\n\n| 布局    | 路径             |\n| :------ | :--------------- |\n| `post`  | `source/_posts`  |\n| `page`  | `source`         |\n| `draft` | `source/_drafts` |\n\n> Disabling layout\n>\n> If you don’t want an article (post/page) to be processed with a theme, set `layout: false` in its front-matter. Refer to [this section](https://hexo.io/zh-cn/docs/front-matter#布局) for more details.\n\n### 文件名称\n\nHexo 默认以标题做为文件名称，但您可编辑 `new_post_name` 参数来改变默认的文件名称，举例来说，设为 `:year-:month-:day-:title.md` 可让您更方便的通过日期来管理文章。\n\n| 变量       | 描述                                |\n| :--------- | :---------------------------------- |\n| `:title`   | 标题（小写，空格将会被替换为短杠）  |\n| `:year`    | 建立的年份，比如， `2015`           |\n| `:month`   | 建立的月份（有前导零），比如， `04` |\n| `:i_month` | 建立的月份（无前导零），比如， `4`  |\n| `:day`     | 建立的日期（有前导零），比如， `07` |\n| `:i_day`   | 建立的日期（无前导零），比如， `7`  |\n\n### 草稿\n\n刚刚提到了 Hexo 的一种特殊布局：`draft`，这种布局在建立时会被保存到 `source/_drafts` 文件夹，您可通过 `publish` 命令将草稿移动到 `source/_posts` 文件夹，该命令的使用方式与 `new` 十分类似，您也可在命令中指定 `layout` 来指定布局。\n\n```\n$ hexo publish [layout] <title>\n```\n\n草稿默认不会显示在页面中，您可在执行时加上 `--draft` 参数，或是把 `render_drafts` 参数设为 `true` 来预览草稿。\n\n## 模版（Scaffold）\n\n在新建文章时，Hexo 会根据 `scaffolds` 文件夹内相对应的文件来建立文件，例如：\n\n```\n$ hexo new photo \"My Gallery\"\n```\n\n在执行这行指令时，Hexo 会尝试在 `scaffolds` 文件夹中寻找 `photo.md`，并根据其内容建立文章，以下是您可以在模版中使用的变量：\n\n| 变量     | 描述         |\n| :------- | :----------- |\n| `layout` | 布局         |\n| `title`  | 标题         |\n| `date`   | 文件建立日期 |\n\n### 支持的格式\n\nHexo 支持以任何格式书写文章，只要安装了相应的渲染插件。\n\n例如，Hexo 默认安装了 `hexo-renderer-marked` 和 `hexo-renderer-ejs`，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 `hexo-renderer-pug`，你甚至可以用 Pug 模板语言书写文章。\n\n只需要将文章的扩展名从 `md` 改成 `ejs`，Hexo 就会使用 `hexo-renderer-ejs` 渲染这个文件，其他格式同理。","slug":"hexo/hexo写作","published":1,"date":"2020-12-14T16:24:00.428Z","updated":"2020-12-14T16:26:48.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwp10000zjcxc48k6f4q5","content":"<p>你可以执行下列命令来创建一篇新文章或者新的页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p>\n<h3 id=\"布局（Layout）\"><a href=\"#布局（Layout）\" class=\"headerlink\" title=\"布局（Layout）\"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">布局</th>\n<th align=\"left\">路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>post</code></td>\n<td align=\"left\"><code>source/_posts</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>page</code></td>\n<td align=\"left\"><code>source</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>draft</code></td>\n<td align=\"left\"><code>source/_drafts</code></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Disabling layout</p>\n<p>If you don’t want an article (post/page) to be processed with a theme, set <code>layout: false</code> in its front-matter. Refer to <a href=\"https://hexo.io/zh-cn/docs/front-matter#布局\" target=\"_blank\" rel=\"noopener\">this section</a> for more details.</p>\n</blockquote>\n<h3 id=\"文件名称\"><a href=\"#文件名称\" class=\"headerlink\" title=\"文件名称\"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">变量</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>:title</code></td>\n<td align=\"left\">标题（小写，空格将会被替换为短杠）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:year</code></td>\n<td align=\"left\">建立的年份，比如， <code>2015</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:month</code></td>\n<td align=\"left\">建立的月份（有前导零），比如， <code>04</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:i_month</code></td>\n<td align=\"left\">建立的月份（无前导零），比如， <code>4</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:day</code></td>\n<td align=\"left\">建立的日期（有前导零），比如， <code>07</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:i_day</code></td>\n<td align=\"left\">建立的日期（无前导零），比如， <code>7</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"草稿\"><a href=\"#草稿\" class=\"headerlink\" title=\"草稿\"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p>\n<h2 id=\"模版（Scaffold）\"><a href=\"#模版（Scaffold）\" class=\"headerlink\" title=\"模版（Scaffold）\"></a>模版（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">变量</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>layout</code></td>\n<td align=\"left\">布局</td>\n</tr>\n<tr>\n<td align=\"left\"><code>title</code></td>\n<td align=\"left\">标题</td>\n</tr>\n<tr>\n<td align=\"left\"><code>date</code></td>\n<td align=\"left\">文件建立日期</td>\n</tr>\n</tbody></table>\n<h3 id=\"支持的格式\"><a href=\"#支持的格式\" class=\"headerlink\" title=\"支持的格式\"></a>支持的格式</h3><p>Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p>\n<p>例如，Hexo 默认安装了 <code>hexo-renderer-marked</code> 和 <code>hexo-renderer-ejs</code>，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 <code>hexo-renderer-pug</code>，你甚至可以用 Pug 模板语言书写文章。</p>\n<p>只需要将文章的扩展名从 <code>md</code> 改成 <code>ejs</code>，Hexo 就会使用 <code>hexo-renderer-ejs</code> 渲染这个文件，其他格式同理。</p>\n","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>你可以执行下列命令来创建一篇新文章或者新的页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p>\n<h3 id=\"布局（Layout）\"><a href=\"#布局（Layout）\" class=\"headerlink\" title=\"布局（Layout）\"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">布局</th>\n<th align=\"left\">路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>post</code></td>\n<td align=\"left\"><code>source/_posts</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>page</code></td>\n<td align=\"left\"><code>source</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>draft</code></td>\n<td align=\"left\"><code>source/_drafts</code></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Disabling layout</p>\n<p>If you don’t want an article (post/page) to be processed with a theme, set <code>layout: false</code> in its front-matter. Refer to <a href=\"https://hexo.io/zh-cn/docs/front-matter#布局\" target=\"_blank\" rel=\"noopener\">this section</a> for more details.</p>\n</blockquote>\n<h3 id=\"文件名称\"><a href=\"#文件名称\" class=\"headerlink\" title=\"文件名称\"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">变量</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>:title</code></td>\n<td align=\"left\">标题（小写，空格将会被替换为短杠）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:year</code></td>\n<td align=\"left\">建立的年份，比如， <code>2015</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:month</code></td>\n<td align=\"left\">建立的月份（有前导零），比如， <code>04</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:i_month</code></td>\n<td align=\"left\">建立的月份（无前导零），比如， <code>4</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:day</code></td>\n<td align=\"left\">建立的日期（有前导零），比如， <code>07</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:i_day</code></td>\n<td align=\"left\">建立的日期（无前导零），比如， <code>7</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"草稿\"><a href=\"#草稿\" class=\"headerlink\" title=\"草稿\"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p>\n<h2 id=\"模版（Scaffold）\"><a href=\"#模版（Scaffold）\" class=\"headerlink\" title=\"模版（Scaffold）\"></a>模版（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">变量</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>layout</code></td>\n<td align=\"left\">布局</td>\n</tr>\n<tr>\n<td align=\"left\"><code>title</code></td>\n<td align=\"left\">标题</td>\n</tr>\n<tr>\n<td align=\"left\"><code>date</code></td>\n<td align=\"left\">文件建立日期</td>\n</tr>\n</tbody></table>\n<h3 id=\"支持的格式\"><a href=\"#支持的格式\" class=\"headerlink\" title=\"支持的格式\"></a>支持的格式</h3><p>Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p>\n<p>例如，Hexo 默认安装了 <code>hexo-renderer-marked</code> 和 <code>hexo-renderer-ejs</code>，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 <code>hexo-renderer-pug</code>，你甚至可以用 Pug 模板语言书写文章。</p>\n<p>只需要将文章的扩展名从 <code>md</code> 改成 <code>ejs</code>，Hexo 就会使用 <code>hexo-renderer-ejs</code> 渲染这个文件，其他格式同理。</p>\n"},{"title":"Java【基础篇之HashMap及hashcode】","abbrlink":2936205123,"date":"2019-10-10T02:12:00.000Z","index_img":"/img/java.jpeg","_content":"## 一、hashcode是什么\n要理解hashcode首先要理解hash表这个概念\n\n1. 哈希表\nhash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的hashcode是什么记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。\n简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。\n具有快速查找和插入操作的优点\n2. hashcode\nhashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置\n每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode\n## 二、hashcode的作用\n    HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的\n\n    对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。\n\n   在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题\n\n   如何判别在集合中是否已经存在该对象了？\n\n   首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。\n\n    这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。\n\n            所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。\n\n## 三、 hashCode()和equals()\nJava的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)\n\n1. equals方法\nObject类中equals()方法实现如下\n\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。\n\n虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定\n\n自反性：x.equals(x)必须返回true。\n对称性：x.equals(y)与y.equals(x)的返回值必须相等。\n传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。\n一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。\n非null：x不是null，y为null，则x.equals(y)必须为false。\n2. hashCode 方法\nObject类中hashCode()方法的声明如下：\n\npublic native int hashCode();\n可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。\n\n与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：\n\n（1）hashCode()在哈希表中起作用，如java.util.HashMap。\n（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。\n（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。\n（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。\n重写hashcode()的原则\n\n（1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。\n（2）hashCode()方法不能太过简单，否则哈希冲突过多。\n（3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能\nhashCode()重写方法\n\n《Effective Java》中提出了一种简单通用的hashCode算法：\n\n初始化一个整形变量，为此变量赋予一个非零的常数值，比如int result = 17;\n\n选取equals方法中用于比较的所有域（之所以只选择equals()中使用的域，是为了保证上述原则的第1条），然后针对每个域的属性进行计算：\n\n复制代码\n(1) 如果是boolean值，则计算f ? 1:0\n(2) 如果是bytecharshortint,则计算(int)f\n(3) 如果是long值，则计算(int)(f ^ (f >>> 32))\n(4) 如果是float值，则计算Float.floatToIntBits(f)\n(5) 如果是double值，则计算Double.doubleToLongBits(f)，然后返回的结果是long,再用规则(3)去处理long,得到int\n(6) 如果是对象应用，如果equals方法中采取递归调用的比较方式，那么hashCode中同样采取递归调用hashCode的方式。否则需要为这个域计算一个范式，比如当这个域的值为null的时候，那么hashCode 值为0\n(7) 如果是数组，那么需要为每个元素当做单独的域来处理。java.util.Arrays.hashCode方法包含了8种基本类型数组和引用数组的hashCode计算，算法同上。 \n复制代码\n最后，把每个域的散列码合并到对象的哈希码中。\n\n## 四、HashMap中的hash()函数\nHashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法\n```\nstatic final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n这段代码类似作用是为了增加hashcode的随机性\n\nkey.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。\n\nhashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个\"与\"操作\n\nstatic int indexFor(int h, int length) { return h & (length-1);}\n这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h & (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。\n  01111010 00111100 00100101\n& 00000000 00000000 00001111\n----------------------------------\n  00000000 00000000 00000101\n  //高位全部归零，只保留末四位 \nbut 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。\n\n这时候 “hash”函数作用就出来了\n\n右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。\n设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。\n根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。\nhashMap中 MAXIMUM_CAPACITY = 1 << 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了）","source":"_posts/java/hashcode.md","raw":"---\ntitle: Java【基础篇之HashMap及hashcode】\ntags:\n  - Java\nabbrlink: 2936205123\ndate: 2019-10-10 10:12:00\nindex_img: /img/java.jpeg\n---\n## 一、hashcode是什么\n要理解hashcode首先要理解hash表这个概念\n\n1. 哈希表\nhash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的hashcode是什么记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。\n简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。\n具有快速查找和插入操作的优点\n2. hashcode\nhashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置\n每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode\n## 二、hashcode的作用\n    HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的\n\n    对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。\n\n   在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题\n\n   如何判别在集合中是否已经存在该对象了？\n\n   首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。\n\n    这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。\n\n            所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。\n\n## 三、 hashCode()和equals()\nJava的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)\n\n1. equals方法\nObject类中equals()方法实现如下\n\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。\n\n虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定\n\n自反性：x.equals(x)必须返回true。\n对称性：x.equals(y)与y.equals(x)的返回值必须相等。\n传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。\n一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。\n非null：x不是null，y为null，则x.equals(y)必须为false。\n2. hashCode 方法\nObject类中hashCode()方法的声明如下：\n\npublic native int hashCode();\n可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。\n\n与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：\n\n（1）hashCode()在哈希表中起作用，如java.util.HashMap。\n（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。\n（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。\n（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。\n重写hashcode()的原则\n\n（1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。\n（2）hashCode()方法不能太过简单，否则哈希冲突过多。\n（3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能\nhashCode()重写方法\n\n《Effective Java》中提出了一种简单通用的hashCode算法：\n\n初始化一个整形变量，为此变量赋予一个非零的常数值，比如int result = 17;\n\n选取equals方法中用于比较的所有域（之所以只选择equals()中使用的域，是为了保证上述原则的第1条），然后针对每个域的属性进行计算：\n\n复制代码\n(1) 如果是boolean值，则计算f ? 1:0\n(2) 如果是bytecharshortint,则计算(int)f\n(3) 如果是long值，则计算(int)(f ^ (f >>> 32))\n(4) 如果是float值，则计算Float.floatToIntBits(f)\n(5) 如果是double值，则计算Double.doubleToLongBits(f)，然后返回的结果是long,再用规则(3)去处理long,得到int\n(6) 如果是对象应用，如果equals方法中采取递归调用的比较方式，那么hashCode中同样采取递归调用hashCode的方式。否则需要为这个域计算一个范式，比如当这个域的值为null的时候，那么hashCode 值为0\n(7) 如果是数组，那么需要为每个元素当做单独的域来处理。java.util.Arrays.hashCode方法包含了8种基本类型数组和引用数组的hashCode计算，算法同上。 \n复制代码\n最后，把每个域的散列码合并到对象的哈希码中。\n\n## 四、HashMap中的hash()函数\nHashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法\n```\nstatic final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n这段代码类似作用是为了增加hashcode的随机性\n\nkey.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。\n\nhashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个\"与\"操作\n\nstatic int indexFor(int h, int length) { return h & (length-1);}\n这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h & (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。\n  01111010 00111100 00100101\n& 00000000 00000000 00001111\n----------------------------------\n  00000000 00000000 00000101\n  //高位全部归零，只保留末四位 \nbut 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。\n\n这时候 “hash”函数作用就出来了\n\n右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。\n设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。\n根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。\nhashMap中 MAXIMUM_CAPACITY = 1 << 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了）","slug":"java/hashcode","published":1,"updated":"2020-04-18T11:40:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwp110010jcxc76r8ae76","content":"<h2 id=\"一、hashcode是什么\"><a href=\"#一、hashcode是什么\" class=\"headerlink\" title=\"一、hashcode是什么\"></a>一、hashcode是什么</h2><p>要理解hashcode首先要理解hash表这个概念</p>\n<ol>\n<li><p>哈希表<br>hash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的hashcode是什么记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。<br>简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。<br>具有快速查找和插入操作的优点</p>\n</li>\n<li><p>hashcode<br>hashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置<br>每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode</p>\n<h2 id=\"二、hashcode的作用\"><a href=\"#二、hashcode的作用\" class=\"headerlink\" title=\"二、hashcode的作用\"></a>二、hashcode的作用</h2><p> HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的</p>\n<p> 对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。</p>\n<p>在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题</p>\n<p>如何判别在集合中是否已经存在该对象了？</p>\n<p>首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。</p>\n<p> 这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。</p>\n<pre><code>所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。</code></pre></li>\n</ol>\n<h2 id=\"三、-hashCode-和equals\"><a href=\"#三、-hashCode-和equals\" class=\"headerlink\" title=\"三、 hashCode()和equals()\"></a>三、 hashCode()和equals()</h2><p>Java的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)</p>\n<ol>\n<li>equals方法<br>Object类中equals()方法实现如下</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。</p>\n<p>虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定</p>\n<p>自反性：x.equals(x)必须返回true。<br>对称性：x.equals(y)与y.equals(x)的返回值必须相等。<br>传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。<br>一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。<br>非null：x不是null，y为null，则x.equals(y)必须为false。<br>2. hashCode 方法<br>Object类中hashCode()方法的声明如下：</p>\n<p>public native int hashCode();<br>可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。</p>\n<p>与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：</p>\n<p>（1）hashCode()在哈希表中起作用，如java.util.HashMap。<br>（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。<br>（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。<br>（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。<br>重写hashcode()的原则</p>\n<p>（1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。<br>（2）hashCode()方法不能太过简单，否则哈希冲突过多。<br>（3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能<br>hashCode()重写方法</p>\n<p>《Effective Java》中提出了一种简单通用的hashCode算法：</p>\n<p>初始化一个整形变量，为此变量赋予一个非零的常数值，比如int result = 17;</p>\n<p>选取equals方法中用于比较的所有域（之所以只选择equals()中使用的域，是为了保证上述原则的第1条），然后针对每个域的属性进行计算：</p>\n<p>复制代码<br>(1) 如果是boolean值，则计算f ? 1:0<br>(2) 如果是bytecharshortint,则计算(int)f<br>(3) 如果是long值，则计算(int)(f ^ (f &gt;&gt;&gt; 32))<br>(4) 如果是float值，则计算Float.floatToIntBits(f)<br>(5) 如果是double值，则计算Double.doubleToLongBits(f)，然后返回的结果是long,再用规则(3)去处理long,得到int<br>(6) 如果是对象应用，如果equals方法中采取递归调用的比较方式，那么hashCode中同样采取递归调用hashCode的方式。否则需要为这个域计算一个范式，比如当这个域的值为null的时候，那么hashCode 值为0<br>(7) 如果是数组，那么需要为每个元素当做单独的域来处理。java.util.Arrays.hashCode方法包含了8种基本类型数组和引用数组的hashCode计算，算法同上。<br>复制代码<br>最后，把每个域的散列码合并到对象的哈希码中。</p>\n<h2 id=\"四、HashMap中的hash-函数\"><a href=\"#四、HashMap中的hash-函数\" class=\"headerlink\" title=\"四、HashMap中的hash()函数\"></a>四、HashMap中的hash()函数</h2><p>HashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int hash(Object key) &#123;</span><br><span class=\"line\">    int h;</span><br><span class=\"line\">    return (key &#x3D;&#x3D; null) ? 0 : (h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码类似作用是为了增加hashcode的随机性</p>\n<p>key.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。</p>\n<p>hashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个”与”操作</p>\n<p>static int indexFor(int h, int length) { return h &amp; (length-1);}<br>这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h &amp; (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。<br>  01111010 00111100 00100101<br>&amp; 00000000 00000000 00001111</p>\n<hr>\n<p>  00000000 00000000 00000101<br>  //高位全部归零，只保留末四位<br>but 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。</p>\n<p>这时候 “hash”函数作用就出来了</p>\n<p>右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。<br>设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。<br>根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。<br>hashMap中 MAXIMUM_CAPACITY = 1 &lt;&lt; 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了）</p>\n","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"一、hashcode是什么\"><a href=\"#一、hashcode是什么\" class=\"headerlink\" title=\"一、hashcode是什么\"></a>一、hashcode是什么</h2><p>要理解hashcode首先要理解hash表这个概念</p>\n<ol>\n<li><p>哈希表<br>hash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的hashcode是什么记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。<br>简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。<br>具有快速查找和插入操作的优点</p>\n</li>\n<li><p>hashcode<br>hashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置<br>每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode</p>\n<h2 id=\"二、hashcode的作用\"><a href=\"#二、hashcode的作用\" class=\"headerlink\" title=\"二、hashcode的作用\"></a>二、hashcode的作用</h2><p> HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的</p>\n<p> 对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。</p>\n<p>在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题</p>\n<p>如何判别在集合中是否已经存在该对象了？</p>\n<p>首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。</p>\n<p> 这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。</p>\n<pre><code>所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。</code></pre></li>\n</ol>\n<h2 id=\"三、-hashCode-和equals\"><a href=\"#三、-hashCode-和equals\" class=\"headerlink\" title=\"三、 hashCode()和equals()\"></a>三、 hashCode()和equals()</h2><p>Java的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)</p>\n<ol>\n<li>equals方法<br>Object类中equals()方法实现如下</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。</p>\n<p>虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定</p>\n<p>自反性：x.equals(x)必须返回true。<br>对称性：x.equals(y)与y.equals(x)的返回值必须相等。<br>传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。<br>一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。<br>非null：x不是null，y为null，则x.equals(y)必须为false。<br>2. hashCode 方法<br>Object类中hashCode()方法的声明如下：</p>\n<p>public native int hashCode();<br>可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。</p>\n<p>与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：</p>\n<p>（1）hashCode()在哈希表中起作用，如java.util.HashMap。<br>（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。<br>（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。<br>（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。<br>重写hashcode()的原则</p>\n<p>（1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。<br>（2）hashCode()方法不能太过简单，否则哈希冲突过多。<br>（3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能<br>hashCode()重写方法</p>\n<p>《Effective Java》中提出了一种简单通用的hashCode算法：</p>\n<p>初始化一个整形变量，为此变量赋予一个非零的常数值，比如int result = 17;</p>\n<p>选取equals方法中用于比较的所有域（之所以只选择equals()中使用的域，是为了保证上述原则的第1条），然后针对每个域的属性进行计算：</p>\n<p>复制代码<br>(1) 如果是boolean值，则计算f ? 1:0<br>(2) 如果是bytecharshortint,则计算(int)f<br>(3) 如果是long值，则计算(int)(f ^ (f &gt;&gt;&gt; 32))<br>(4) 如果是float值，则计算Float.floatToIntBits(f)<br>(5) 如果是double值，则计算Double.doubleToLongBits(f)，然后返回的结果是long,再用规则(3)去处理long,得到int<br>(6) 如果是对象应用，如果equals方法中采取递归调用的比较方式，那么hashCode中同样采取递归调用hashCode的方式。否则需要为这个域计算一个范式，比如当这个域的值为null的时候，那么hashCode 值为0<br>(7) 如果是数组，那么需要为每个元素当做单独的域来处理。java.util.Arrays.hashCode方法包含了8种基本类型数组和引用数组的hashCode计算，算法同上。<br>复制代码<br>最后，把每个域的散列码合并到对象的哈希码中。</p>\n<h2 id=\"四、HashMap中的hash-函数\"><a href=\"#四、HashMap中的hash-函数\" class=\"headerlink\" title=\"四、HashMap中的hash()函数\"></a>四、HashMap中的hash()函数</h2><p>HashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int hash(Object key) &#123;</span><br><span class=\"line\">    int h;</span><br><span class=\"line\">    return (key &#x3D;&#x3D; null) ? 0 : (h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码类似作用是为了增加hashcode的随机性</p>\n<p>key.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。</p>\n<p>hashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个”与”操作</p>\n<p>static int indexFor(int h, int length) { return h &amp; (length-1);}<br>这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h &amp; (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。<br>  01111010 00111100 00100101<br>&amp; 00000000 00000000 00001111</p>\n<hr>\n<p>  00000000 00000000 00000101<br>  //高位全部归零，只保留末四位<br>but 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。</p>\n<p>这时候 “hash”函数作用就出来了</p>\n<p>右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。<br>设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。<br>根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。<br>hashMap中 MAXIMUM_CAPACITY = 1 &lt;&lt; 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了）</p>\n"},{"title":"JVM【性能调优篇】","index_img":"/img/java.jpeg","abbrlink":3097382278,"date":"2016-10-16T03:54:14.000Z","_content":"\n前面我们学习了整个JVM系列，最终目标的不仅仅是了解JVM的基础知识，也是为了进行JVM性能调优做准备。这篇文章带领大家学习JVM性能调优的知识。\n\n### 性能调优\n性能调优包含多个层次，比如：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。\n\n架构调优和代码调优是JVM调优的基础，其中架构调优是对系统影响最大的。\n\n性能调优基本上按照以下步骤进行：明确优化目标、发现性能瓶颈、性能调优、通过监控及数据统计工具获得数据、确认是否达到目标。\n\n### 何时进行JVM调优\n遇到以下情况，就需要考虑进行JVM调优了：\n- Heap内存（老年代）持续上涨达到设置的最大内存值；\n- Full GC 次数频繁；\n- GC 停顿时间过长（超过1秒）；\n- 应用出现OutOfMemory 等内存异常；\n- 应用中有使用本地缓存且占用大量内存空间；\n- 系统吞吐量与响应性能不高或下降。\n\n### JVM调优的基本原则\nJVM调优是一个手段，但并不一定所有问题都可以通过JVM进行调优解决，因此，在进行JVM调优时，我们要遵循一些原则：\n\n- 大多数的Java应用不需要进行JVM优化；\n- 大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；\n- 上线之前，应先考虑将机器的JVM参数设置到最优；\n- 减少创建对象的数量（代码层面）；\n- 减少使用全局变量和大对象（代码层面）；\n- 优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；\n- 分析GC情况优化代码比优化JVM参数更好（代码层面）；\n\n通过以上原则，我们发现，其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。\n\n### JVM调优目标\n调优的最终目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。\njvm调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量。\n\n- 延迟：GC低停顿和GC低频率；\n- 低内存占用；\n- 高吞吐量;\n\n其中，任何一个属性性能的提高，几乎都是以牺牲其他属性性能的损为代价的，不可兼得。具体根据在业务中的重要性确定。\n\n### JVM调优量化目标\n下面展示了一些JVM调优的量化目标参考实例：\n\n- Heap 内存使用率 <= 70%;\n- Old generation内存使用率<= 70%;\n- avgpause <= 1秒;\n- Full gc 次数0 或 avg pause interval >= 24小时 ;\n\n注意：不同应用的JVM调优量化目标是不一样的。\n\n### JVM调优的步骤\n一般情况下，JVM调优可通过以下步骤进行：\n\n- 分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；\n- 确定JVM调优量化目标；\n- 确定JVM调优参数（根据历史JVM参数来调整）；\n- 依次调优内存、延迟、吞吐量等指标；\n- 对比观察调优前后的差异；\n- 不断的分析和调整，直到找到合适的JVM参数配置；\n- 找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。\n\n以上操作步骤中，某些步骤是需要多次不断迭代完成的。一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。\n\n### JVM参数\nJVM调优最重要的工具就是JVM参数了。先来了解一下JVM参数相关内容。\n\n-XX 参数被称为不稳定参数，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。如果此类参数设置合理将大大提高JVM的性能及稳定性。\n\n不稳定参数语法规则包含以下内容。\n\n    布尔类型参数值：\n    -XX:+<option> '+'表示启用该选项\n    -XX:-<option> '-'表示关闭该选项\n    数字类型参数值：\n    -XX:<option>=<number>给选项设置一个数字类型值，可跟随单位，例如：'m'或'M'表示兆字节;'k'或'K'千字节;'g'或'G'千兆字节。32K与32768是相同大小的。\n    字符串类型参数值\n    -XX:<option>=<string>给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。例如：-XX:HeapDumpPath=./dump.core\n\n\n### JVM参数解析及调优\n比如以下参数示例：\n\n    -Xmx4g –Xms4g –Xmn1200m –Xss512k -XX:NewRatio=4 -XX:SurvivorRatio=8 -XX:PermSize=100m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=15\n\n上面为Java7及以前版本的示例，在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。这在前面章节中已经讲到。\n\n参数解析：\n```\n-Xmx4g：堆内存最大值为4GB。\n-Xms4g：初始化堆内存大小为4GB。\n-Xmn1200m：设置年轻代大小为1200MB。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。\n-Xss512k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。\n-XX:NewRatio=4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5\n-XX:SurvivorRatio=8：设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1/10\n-XX:PermSize=100m：初始化永久代大小为100MB。\n-XX:MaxPermSize=256m：设置持久代大小为256MB。\n-XX:MaxTenuringThreshold=15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n```\n新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。\n\n可调优参数：\n```\n-Xms：初始化堆内存大小，默认为物理内存的1/64(小于1GB)。\n-Xmx：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。\n-Xmn：新生代大小，包括Eden区与2个Survivor区。\n-XX:SurvivorRatio=1：Eden区与一个Survivor区比值为1:1。\n-XX:MaxDirectMemorySize=1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。\n-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。\n-XX:CMSInitiatingOccupancyFraction=60：老年代内存回收阈值，默认值为68。\n-XX:ConcGCThreads=4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。\n-XX:ParallelGCThreads=8：新生代并行收集器的线程数。\n-XX:MaxTenuringThreshold=10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n-XX:CMSFullGCsBeforeCompaction=4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。\n-XX:CMSMaxAbortablePrecleanTime=500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。\n```\n> 注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。\n\n在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。\n\n### 内存优化示例\n当JVM运行稳定之后，触发了FullGC我们一般会拿到如下信息:\n\nimage\n以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。\n\n    java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n    永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久带空间占用。\n    新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n    老年代：2-3倍FullGC后的老年代空间占用。\n\n基于以上规则，则对参数定义如下：\n```\njava -Xms373m -Xmx373m -Xmn140m -XX:PermSize=5m -XX:MaxPermSize=5m\n```\n\n### 延迟优化示例\n对延迟性优化，首先需要了解延迟性需求及可调优的指标有哪些。\n\n- 应用程序可接受的平均停滞时间: 此时间与测量的Minor\n- GC持续时间进行比较。可接受的Minor GC频率：Minor\n- GC的频率与可容忍的值进行比较。\n- 可接受的最大停顿时间:最大停顿时间与最差情况下FullGC的持续时间进行比较。\n- 可接受的最大停顿发生的频率：基本就是FullGC的频率。\n\n其中，平均停滞时间和最大停顿时间，对用户体验最为重要。对于上面的指标，相关数据采集包括：MinorGC的持续时间、统计MinorGC的次数、FullGC的最差持续时间、最差情况下，FullGC的频率。\n\nimage\n如上图，Minor GC的平均持续时间0.069秒，MinorGC的频率为0.389秒一次。\n\n新生代空间越大，Minor GC的GC时间越长，频率越低。如果想减少其持续时长，就需要减少其空间大小。如果想减小其频率，就需要加大其空间大小。\n\n这里以减少了新生代空间10%的大小，来减小延迟时间。在此过程中，应该保持老年代和持代的大小不变化。调优后的参数如下变化:\n```\njava -Xms359m -Xmx359m -Xmn126m -XX:PermSize=5m -XX:MaxPermSize=5m\n```\n### 吞吐量调优\n吞吐量调优主要是基于应用程序的吞吐量要求而来的，应用程序应该有一个综合的吞吐指标，这个指标基于整个应用的需求和测试而衍生出来的。\n\n评估当前吞吐量和目标差距是否巨大，如果在20%左右，可以修改参数，加大内存，再次从头调试，如果巨大就需要从整个应用层面来考虑，设计以及目标是否一致了，重新评估吞吐目标。\n\n> 对于垃圾收集器来说，提升吞吐量的性能调优的目标就是尽可能避免或者很少发生FullGC或者Stop-The-World压缩式垃圾收集（CMS），因为这两种方式都会造成应用程序吞吐降低。尽量在MinorGC 阶段回收更多的对象，避免对象提升过快到老年代。\n\n### 调优工具\n借助GCViewer日志分析工具，可以非常直观地分析出待调优点。可从以下几方面来分析：\n- Memory,分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；\n- Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；","source":"_posts/java/jvm.md","raw":"---\ntitle: JVM【性能调优篇】\ntags:\n  - Java\nindex_img: /img/java.jpeg\nabbrlink: 3097382278\ndate: 2016-10-16 11:54:14\n\n---\n\n前面我们学习了整个JVM系列，最终目标的不仅仅是了解JVM的基础知识，也是为了进行JVM性能调优做准备。这篇文章带领大家学习JVM性能调优的知识。\n\n### 性能调优\n性能调优包含多个层次，比如：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。\n\n架构调优和代码调优是JVM调优的基础，其中架构调优是对系统影响最大的。\n\n性能调优基本上按照以下步骤进行：明确优化目标、发现性能瓶颈、性能调优、通过监控及数据统计工具获得数据、确认是否达到目标。\n\n### 何时进行JVM调优\n遇到以下情况，就需要考虑进行JVM调优了：\n- Heap内存（老年代）持续上涨达到设置的最大内存值；\n- Full GC 次数频繁；\n- GC 停顿时间过长（超过1秒）；\n- 应用出现OutOfMemory 等内存异常；\n- 应用中有使用本地缓存且占用大量内存空间；\n- 系统吞吐量与响应性能不高或下降。\n\n### JVM调优的基本原则\nJVM调优是一个手段，但并不一定所有问题都可以通过JVM进行调优解决，因此，在进行JVM调优时，我们要遵循一些原则：\n\n- 大多数的Java应用不需要进行JVM优化；\n- 大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；\n- 上线之前，应先考虑将机器的JVM参数设置到最优；\n- 减少创建对象的数量（代码层面）；\n- 减少使用全局变量和大对象（代码层面）；\n- 优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；\n- 分析GC情况优化代码比优化JVM参数更好（代码层面）；\n\n通过以上原则，我们发现，其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。\n\n### JVM调优目标\n调优的最终目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。\njvm调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量。\n\n- 延迟：GC低停顿和GC低频率；\n- 低内存占用；\n- 高吞吐量;\n\n其中，任何一个属性性能的提高，几乎都是以牺牲其他属性性能的损为代价的，不可兼得。具体根据在业务中的重要性确定。\n\n### JVM调优量化目标\n下面展示了一些JVM调优的量化目标参考实例：\n\n- Heap 内存使用率 <= 70%;\n- Old generation内存使用率<= 70%;\n- avgpause <= 1秒;\n- Full gc 次数0 或 avg pause interval >= 24小时 ;\n\n注意：不同应用的JVM调优量化目标是不一样的。\n\n### JVM调优的步骤\n一般情况下，JVM调优可通过以下步骤进行：\n\n- 分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；\n- 确定JVM调优量化目标；\n- 确定JVM调优参数（根据历史JVM参数来调整）；\n- 依次调优内存、延迟、吞吐量等指标；\n- 对比观察调优前后的差异；\n- 不断的分析和调整，直到找到合适的JVM参数配置；\n- 找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。\n\n以上操作步骤中，某些步骤是需要多次不断迭代完成的。一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。\n\n### JVM参数\nJVM调优最重要的工具就是JVM参数了。先来了解一下JVM参数相关内容。\n\n-XX 参数被称为不稳定参数，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。如果此类参数设置合理将大大提高JVM的性能及稳定性。\n\n不稳定参数语法规则包含以下内容。\n\n    布尔类型参数值：\n    -XX:+<option> '+'表示启用该选项\n    -XX:-<option> '-'表示关闭该选项\n    数字类型参数值：\n    -XX:<option>=<number>给选项设置一个数字类型值，可跟随单位，例如：'m'或'M'表示兆字节;'k'或'K'千字节;'g'或'G'千兆字节。32K与32768是相同大小的。\n    字符串类型参数值\n    -XX:<option>=<string>给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。例如：-XX:HeapDumpPath=./dump.core\n\n\n### JVM参数解析及调优\n比如以下参数示例：\n\n    -Xmx4g –Xms4g –Xmn1200m –Xss512k -XX:NewRatio=4 -XX:SurvivorRatio=8 -XX:PermSize=100m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=15\n\n上面为Java7及以前版本的示例，在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。这在前面章节中已经讲到。\n\n参数解析：\n```\n-Xmx4g：堆内存最大值为4GB。\n-Xms4g：初始化堆内存大小为4GB。\n-Xmn1200m：设置年轻代大小为1200MB。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。\n-Xss512k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。\n-XX:NewRatio=4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5\n-XX:SurvivorRatio=8：设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1/10\n-XX:PermSize=100m：初始化永久代大小为100MB。\n-XX:MaxPermSize=256m：设置持久代大小为256MB。\n-XX:MaxTenuringThreshold=15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n```\n新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。\n\n可调优参数：\n```\n-Xms：初始化堆内存大小，默认为物理内存的1/64(小于1GB)。\n-Xmx：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。\n-Xmn：新生代大小，包括Eden区与2个Survivor区。\n-XX:SurvivorRatio=1：Eden区与一个Survivor区比值为1:1。\n-XX:MaxDirectMemorySize=1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。\n-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。\n-XX:CMSInitiatingOccupancyFraction=60：老年代内存回收阈值，默认值为68。\n-XX:ConcGCThreads=4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。\n-XX:ParallelGCThreads=8：新生代并行收集器的线程数。\n-XX:MaxTenuringThreshold=10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n-XX:CMSFullGCsBeforeCompaction=4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。\n-XX:CMSMaxAbortablePrecleanTime=500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。\n```\n> 注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。\n\n在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。\n\n### 内存优化示例\n当JVM运行稳定之后，触发了FullGC我们一般会拿到如下信息:\n\nimage\n以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。\n\n    java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n    永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久带空间占用。\n    新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n    老年代：2-3倍FullGC后的老年代空间占用。\n\n基于以上规则，则对参数定义如下：\n```\njava -Xms373m -Xmx373m -Xmn140m -XX:PermSize=5m -XX:MaxPermSize=5m\n```\n\n### 延迟优化示例\n对延迟性优化，首先需要了解延迟性需求及可调优的指标有哪些。\n\n- 应用程序可接受的平均停滞时间: 此时间与测量的Minor\n- GC持续时间进行比较。可接受的Minor GC频率：Minor\n- GC的频率与可容忍的值进行比较。\n- 可接受的最大停顿时间:最大停顿时间与最差情况下FullGC的持续时间进行比较。\n- 可接受的最大停顿发生的频率：基本就是FullGC的频率。\n\n其中，平均停滞时间和最大停顿时间，对用户体验最为重要。对于上面的指标，相关数据采集包括：MinorGC的持续时间、统计MinorGC的次数、FullGC的最差持续时间、最差情况下，FullGC的频率。\n\nimage\n如上图，Minor GC的平均持续时间0.069秒，MinorGC的频率为0.389秒一次。\n\n新生代空间越大，Minor GC的GC时间越长，频率越低。如果想减少其持续时长，就需要减少其空间大小。如果想减小其频率，就需要加大其空间大小。\n\n这里以减少了新生代空间10%的大小，来减小延迟时间。在此过程中，应该保持老年代和持代的大小不变化。调优后的参数如下变化:\n```\njava -Xms359m -Xmx359m -Xmn126m -XX:PermSize=5m -XX:MaxPermSize=5m\n```\n### 吞吐量调优\n吞吐量调优主要是基于应用程序的吞吐量要求而来的，应用程序应该有一个综合的吞吐指标，这个指标基于整个应用的需求和测试而衍生出来的。\n\n评估当前吞吐量和目标差距是否巨大，如果在20%左右，可以修改参数，加大内存，再次从头调试，如果巨大就需要从整个应用层面来考虑，设计以及目标是否一致了，重新评估吞吐目标。\n\n> 对于垃圾收集器来说，提升吞吐量的性能调优的目标就是尽可能避免或者很少发生FullGC或者Stop-The-World压缩式垃圾收集（CMS），因为这两种方式都会造成应用程序吞吐降低。尽量在MinorGC 阶段回收更多的对象，避免对象提升过快到老年代。\n\n### 调优工具\n借助GCViewer日志分析工具，可以非常直观地分析出待调优点。可从以下几方面来分析：\n- Memory,分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；\n- Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；","slug":"java/jvm","published":1,"updated":"2020-04-18T11:37:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwp110011jcxca7thbm10","content":"<p>前面我们学习了整个JVM系列，最终目标的不仅仅是了解JVM的基础知识，也是为了进行JVM性能调优做准备。这篇文章带领大家学习JVM性能调优的知识。</p>\n<h3 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h3><p>性能调优包含多个层次，比如：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。</p>\n<p>架构调优和代码调优是JVM调优的基础，其中架构调优是对系统影响最大的。</p>\n<p>性能调优基本上按照以下步骤进行：明确优化目标、发现性能瓶颈、性能调优、通过监控及数据统计工具获得数据、确认是否达到目标。</p>\n<h3 id=\"何时进行JVM调优\"><a href=\"#何时进行JVM调优\" class=\"headerlink\" title=\"何时进行JVM调优\"></a>何时进行JVM调优</h3><p>遇到以下情况，就需要考虑进行JVM调优了：</p>\n<ul>\n<li>Heap内存（老年代）持续上涨达到设置的最大内存值；</li>\n<li>Full GC 次数频繁；</li>\n<li>GC 停顿时间过长（超过1秒）；</li>\n<li>应用出现OutOfMemory 等内存异常；</li>\n<li>应用中有使用本地缓存且占用大量内存空间；</li>\n<li>系统吞吐量与响应性能不高或下降。</li>\n</ul>\n<h3 id=\"JVM调优的基本原则\"><a href=\"#JVM调优的基本原则\" class=\"headerlink\" title=\"JVM调优的基本原则\"></a>JVM调优的基本原则</h3><p>JVM调优是一个手段，但并不一定所有问题都可以通过JVM进行调优解决，因此，在进行JVM调优时，我们要遵循一些原则：</p>\n<ul>\n<li>大多数的Java应用不需要进行JVM优化；</li>\n<li>大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；</li>\n<li>上线之前，应先考虑将机器的JVM参数设置到最优；</li>\n<li>减少创建对象的数量（代码层面）；</li>\n<li>减少使用全局变量和大对象（代码层面）；</li>\n<li>优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；</li>\n<li>分析GC情况优化代码比优化JVM参数更好（代码层面）；</li>\n</ul>\n<p>通过以上原则，我们发现，其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。</p>\n<h3 id=\"JVM调优目标\"><a href=\"#JVM调优目标\" class=\"headerlink\" title=\"JVM调优目标\"></a>JVM调优目标</h3><p>调优的最终目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。<br>jvm调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量。</p>\n<ul>\n<li>延迟：GC低停顿和GC低频率；</li>\n<li>低内存占用；</li>\n<li>高吞吐量;</li>\n</ul>\n<p>其中，任何一个属性性能的提高，几乎都是以牺牲其他属性性能的损为代价的，不可兼得。具体根据在业务中的重要性确定。</p>\n<h3 id=\"JVM调优量化目标\"><a href=\"#JVM调优量化目标\" class=\"headerlink\" title=\"JVM调优量化目标\"></a>JVM调优量化目标</h3><p>下面展示了一些JVM调优的量化目标参考实例：</p>\n<ul>\n<li>Heap 内存使用率 &lt;= 70%;</li>\n<li>Old generation内存使用率&lt;= 70%;</li>\n<li>avgpause &lt;= 1秒;</li>\n<li>Full gc 次数0 或 avg pause interval &gt;= 24小时 ;</li>\n</ul>\n<p>注意：不同应用的JVM调优量化目标是不一样的。</p>\n<h3 id=\"JVM调优的步骤\"><a href=\"#JVM调优的步骤\" class=\"headerlink\" title=\"JVM调优的步骤\"></a>JVM调优的步骤</h3><p>一般情况下，JVM调优可通过以下步骤进行：</p>\n<ul>\n<li>分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；</li>\n<li>确定JVM调优量化目标；</li>\n<li>确定JVM调优参数（根据历史JVM参数来调整）；</li>\n<li>依次调优内存、延迟、吞吐量等指标；</li>\n<li>对比观察调优前后的差异；</li>\n<li>不断的分析和调整，直到找到合适的JVM参数配置；</li>\n<li>找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。</li>\n</ul>\n<p>以上操作步骤中，某些步骤是需要多次不断迭代完成的。一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。</p>\n<h3 id=\"JVM参数\"><a href=\"#JVM参数\" class=\"headerlink\" title=\"JVM参数\"></a>JVM参数</h3><p>JVM调优最重要的工具就是JVM参数了。先来了解一下JVM参数相关内容。</p>\n<p>-XX 参数被称为不稳定参数，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。如果此类参数设置合理将大大提高JVM的性能及稳定性。</p>\n<p>不稳定参数语法规则包含以下内容。</p>\n<pre><code>布尔类型参数值：\n-XX:+&lt;option&gt; &apos;+&apos;表示启用该选项\n-XX:-&lt;option&gt; &apos;-&apos;表示关闭该选项\n数字类型参数值：\n-XX:&lt;option&gt;=&lt;number&gt;给选项设置一个数字类型值，可跟随单位，例如：&apos;m&apos;或&apos;M&apos;表示兆字节;&apos;k&apos;或&apos;K&apos;千字节;&apos;g&apos;或&apos;G&apos;千兆字节。32K与32768是相同大小的。\n字符串类型参数值\n-XX:&lt;option&gt;=&lt;string&gt;给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。例如：-XX:HeapDumpPath=./dump.core</code></pre><h3 id=\"JVM参数解析及调优\"><a href=\"#JVM参数解析及调优\" class=\"headerlink\" title=\"JVM参数解析及调优\"></a>JVM参数解析及调优</h3><p>比如以下参数示例：</p>\n<pre><code>-Xmx4g –Xms4g –Xmn1200m –Xss512k -XX:NewRatio=4 -XX:SurvivorRatio=8 -XX:PermSize=100m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=15</code></pre><p>上面为Java7及以前版本的示例，在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。这在前面章节中已经讲到。</p>\n<p>参数解析：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Xmx4g：堆内存最大值为4GB。</span><br><span class=\"line\">-Xms4g：初始化堆内存大小为4GB。</span><br><span class=\"line\">-Xmn1200m：设置年轻代大小为1200MB。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3&#x2F;8。</span><br><span class=\"line\">-Xss512k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。</span><br><span class=\"line\">-XX:NewRatio&#x3D;4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1&#x2F;5</span><br><span class=\"line\">-XX:SurvivorRatio&#x3D;8：设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1&#x2F;10</span><br><span class=\"line\">-XX:PermSize&#x3D;100m：初始化永久代大小为100MB。</span><br><span class=\"line\">-XX:MaxPermSize&#x3D;256m：设置持久代大小为256MB。</span><br><span class=\"line\">-XX:MaxTenuringThreshold&#x3D;15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</span><br></pre></td></tr></table></figure>\n<p>新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。</p>\n<p>可调优参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Xms：初始化堆内存大小，默认为物理内存的1&#x2F;64(小于1GB)。</span><br><span class=\"line\">-Xmx：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。</span><br><span class=\"line\">-Xmn：新生代大小，包括Eden区与2个Survivor区。</span><br><span class=\"line\">-XX:SurvivorRatio&#x3D;1：Eden区与一个Survivor区比值为1:1。</span><br><span class=\"line\">-XX:MaxDirectMemorySize&#x3D;1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。</span><br><span class=\"line\">-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。</span><br><span class=\"line\">-XX:CMSInitiatingOccupancyFraction&#x3D;60：老年代内存回收阈值，默认值为68。</span><br><span class=\"line\">-XX:ConcGCThreads&#x3D;4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。</span><br><span class=\"line\">-XX:ParallelGCThreads&#x3D;8：新生代并行收集器的线程数。</span><br><span class=\"line\">-XX:MaxTenuringThreshold&#x3D;10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</span><br><span class=\"line\">-XX:CMSFullGCsBeforeCompaction&#x3D;4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。</span><br><span class=\"line\">-XX:CMSMaxAbortablePrecleanTime&#x3D;500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。</p>\n</blockquote>\n<p>在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。</p>\n<h3 id=\"内存优化示例\"><a href=\"#内存优化示例\" class=\"headerlink\" title=\"内存优化示例\"></a>内存优化示例</h3><p>当JVM运行稳定之后，触发了FullGC我们一般会拿到如下信息:</p>\n<p>image<br>以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。</p>\n<pre><code>java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久带空间占用。\n新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n老年代：2-3倍FullGC后的老年代空间占用。</code></pre><p>基于以上规则，则对参数定义如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xms373m -Xmx373m -Xmn140m -XX:PermSize&#x3D;5m -XX:MaxPermSize&#x3D;5m</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"延迟优化示例\"><a href=\"#延迟优化示例\" class=\"headerlink\" title=\"延迟优化示例\"></a>延迟优化示例</h3><p>对延迟性优化，首先需要了解延迟性需求及可调优的指标有哪些。</p>\n<ul>\n<li>应用程序可接受的平均停滞时间: 此时间与测量的Minor</li>\n<li>GC持续时间进行比较。可接受的Minor GC频率：Minor</li>\n<li>GC的频率与可容忍的值进行比较。</li>\n<li>可接受的最大停顿时间:最大停顿时间与最差情况下FullGC的持续时间进行比较。</li>\n<li>可接受的最大停顿发生的频率：基本就是FullGC的频率。</li>\n</ul>\n<p>其中，平均停滞时间和最大停顿时间，对用户体验最为重要。对于上面的指标，相关数据采集包括：MinorGC的持续时间、统计MinorGC的次数、FullGC的最差持续时间、最差情况下，FullGC的频率。</p>\n<p>image<br>如上图，Minor GC的平均持续时间0.069秒，MinorGC的频率为0.389秒一次。</p>\n<p>新生代空间越大，Minor GC的GC时间越长，频率越低。如果想减少其持续时长，就需要减少其空间大小。如果想减小其频率，就需要加大其空间大小。</p>\n<p>这里以减少了新生代空间10%的大小，来减小延迟时间。在此过程中，应该保持老年代和持代的大小不变化。调优后的参数如下变化:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xms359m -Xmx359m -Xmn126m -XX:PermSize&#x3D;5m -XX:MaxPermSize&#x3D;5m</span><br></pre></td></tr></table></figure>\n<h3 id=\"吞吐量调优\"><a href=\"#吞吐量调优\" class=\"headerlink\" title=\"吞吐量调优\"></a>吞吐量调优</h3><p>吞吐量调优主要是基于应用程序的吞吐量要求而来的，应用程序应该有一个综合的吞吐指标，这个指标基于整个应用的需求和测试而衍生出来的。</p>\n<p>评估当前吞吐量和目标差距是否巨大，如果在20%左右，可以修改参数，加大内存，再次从头调试，如果巨大就需要从整个应用层面来考虑，设计以及目标是否一致了，重新评估吞吐目标。</p>\n<blockquote>\n<p>对于垃圾收集器来说，提升吞吐量的性能调优的目标就是尽可能避免或者很少发生FullGC或者Stop-The-World压缩式垃圾收集（CMS），因为这两种方式都会造成应用程序吞吐降低。尽量在MinorGC 阶段回收更多的对象，避免对象提升过快到老年代。</p>\n</blockquote>\n<h3 id=\"调优工具\"><a href=\"#调优工具\" class=\"headerlink\" title=\"调优工具\"></a>调优工具</h3><p>借助GCViewer日志分析工具，可以非常直观地分析出待调优点。可从以下几方面来分析：</p>\n<ul>\n<li>Memory,分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；</li>\n<li>Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；</li>\n</ul>\n","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>前面我们学习了整个JVM系列，最终目标的不仅仅是了解JVM的基础知识，也是为了进行JVM性能调优做准备。这篇文章带领大家学习JVM性能调优的知识。</p>\n<h3 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h3><p>性能调优包含多个层次，比如：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。</p>\n<p>架构调优和代码调优是JVM调优的基础，其中架构调优是对系统影响最大的。</p>\n<p>性能调优基本上按照以下步骤进行：明确优化目标、发现性能瓶颈、性能调优、通过监控及数据统计工具获得数据、确认是否达到目标。</p>\n<h3 id=\"何时进行JVM调优\"><a href=\"#何时进行JVM调优\" class=\"headerlink\" title=\"何时进行JVM调优\"></a>何时进行JVM调优</h3><p>遇到以下情况，就需要考虑进行JVM调优了：</p>\n<ul>\n<li>Heap内存（老年代）持续上涨达到设置的最大内存值；</li>\n<li>Full GC 次数频繁；</li>\n<li>GC 停顿时间过长（超过1秒）；</li>\n<li>应用出现OutOfMemory 等内存异常；</li>\n<li>应用中有使用本地缓存且占用大量内存空间；</li>\n<li>系统吞吐量与响应性能不高或下降。</li>\n</ul>\n<h3 id=\"JVM调优的基本原则\"><a href=\"#JVM调优的基本原则\" class=\"headerlink\" title=\"JVM调优的基本原则\"></a>JVM调优的基本原则</h3><p>JVM调优是一个手段，但并不一定所有问题都可以通过JVM进行调优解决，因此，在进行JVM调优时，我们要遵循一些原则：</p>\n<ul>\n<li>大多数的Java应用不需要进行JVM优化；</li>\n<li>大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；</li>\n<li>上线之前，应先考虑将机器的JVM参数设置到最优；</li>\n<li>减少创建对象的数量（代码层面）；</li>\n<li>减少使用全局变量和大对象（代码层面）；</li>\n<li>优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；</li>\n<li>分析GC情况优化代码比优化JVM参数更好（代码层面）；</li>\n</ul>\n<p>通过以上原则，我们发现，其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。</p>\n<h3 id=\"JVM调优目标\"><a href=\"#JVM调优目标\" class=\"headerlink\" title=\"JVM调优目标\"></a>JVM调优目标</h3><p>调优的最终目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。<br>jvm调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量。</p>\n<ul>\n<li>延迟：GC低停顿和GC低频率；</li>\n<li>低内存占用；</li>\n<li>高吞吐量;</li>\n</ul>\n<p>其中，任何一个属性性能的提高，几乎都是以牺牲其他属性性能的损为代价的，不可兼得。具体根据在业务中的重要性确定。</p>\n<h3 id=\"JVM调优量化目标\"><a href=\"#JVM调优量化目标\" class=\"headerlink\" title=\"JVM调优量化目标\"></a>JVM调优量化目标</h3><p>下面展示了一些JVM调优的量化目标参考实例：</p>\n<ul>\n<li>Heap 内存使用率 &lt;= 70%;</li>\n<li>Old generation内存使用率&lt;= 70%;</li>\n<li>avgpause &lt;= 1秒;</li>\n<li>Full gc 次数0 或 avg pause interval &gt;= 24小时 ;</li>\n</ul>\n<p>注意：不同应用的JVM调优量化目标是不一样的。</p>\n<h3 id=\"JVM调优的步骤\"><a href=\"#JVM调优的步骤\" class=\"headerlink\" title=\"JVM调优的步骤\"></a>JVM调优的步骤</h3><p>一般情况下，JVM调优可通过以下步骤进行：</p>\n<ul>\n<li>分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；</li>\n<li>确定JVM调优量化目标；</li>\n<li>确定JVM调优参数（根据历史JVM参数来调整）；</li>\n<li>依次调优内存、延迟、吞吐量等指标；</li>\n<li>对比观察调优前后的差异；</li>\n<li>不断的分析和调整，直到找到合适的JVM参数配置；</li>\n<li>找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。</li>\n</ul>\n<p>以上操作步骤中，某些步骤是需要多次不断迭代完成的。一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。</p>\n<h3 id=\"JVM参数\"><a href=\"#JVM参数\" class=\"headerlink\" title=\"JVM参数\"></a>JVM参数</h3><p>JVM调优最重要的工具就是JVM参数了。先来了解一下JVM参数相关内容。</p>\n<p>-XX 参数被称为不稳定参数，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。如果此类参数设置合理将大大提高JVM的性能及稳定性。</p>\n<p>不稳定参数语法规则包含以下内容。</p>\n<pre><code>布尔类型参数值：\n-XX:+&lt;option&gt; &apos;+&apos;表示启用该选项\n-XX:-&lt;option&gt; &apos;-&apos;表示关闭该选项\n数字类型参数值：\n-XX:&lt;option&gt;=&lt;number&gt;给选项设置一个数字类型值，可跟随单位，例如：&apos;m&apos;或&apos;M&apos;表示兆字节;&apos;k&apos;或&apos;K&apos;千字节;&apos;g&apos;或&apos;G&apos;千兆字节。32K与32768是相同大小的。\n字符串类型参数值\n-XX:&lt;option&gt;=&lt;string&gt;给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。例如：-XX:HeapDumpPath=./dump.core</code></pre><h3 id=\"JVM参数解析及调优\"><a href=\"#JVM参数解析及调优\" class=\"headerlink\" title=\"JVM参数解析及调优\"></a>JVM参数解析及调优</h3><p>比如以下参数示例：</p>\n<pre><code>-Xmx4g –Xms4g –Xmn1200m –Xss512k -XX:NewRatio=4 -XX:SurvivorRatio=8 -XX:PermSize=100m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=15</code></pre><p>上面为Java7及以前版本的示例，在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。这在前面章节中已经讲到。</p>\n<p>参数解析：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Xmx4g：堆内存最大值为4GB。</span><br><span class=\"line\">-Xms4g：初始化堆内存大小为4GB。</span><br><span class=\"line\">-Xmn1200m：设置年轻代大小为1200MB。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3&#x2F;8。</span><br><span class=\"line\">-Xss512k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。</span><br><span class=\"line\">-XX:NewRatio&#x3D;4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1&#x2F;5</span><br><span class=\"line\">-XX:SurvivorRatio&#x3D;8：设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1&#x2F;10</span><br><span class=\"line\">-XX:PermSize&#x3D;100m：初始化永久代大小为100MB。</span><br><span class=\"line\">-XX:MaxPermSize&#x3D;256m：设置持久代大小为256MB。</span><br><span class=\"line\">-XX:MaxTenuringThreshold&#x3D;15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</span><br></pre></td></tr></table></figure>\n<p>新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。</p>\n<p>可调优参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Xms：初始化堆内存大小，默认为物理内存的1&#x2F;64(小于1GB)。</span><br><span class=\"line\">-Xmx：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。</span><br><span class=\"line\">-Xmn：新生代大小，包括Eden区与2个Survivor区。</span><br><span class=\"line\">-XX:SurvivorRatio&#x3D;1：Eden区与一个Survivor区比值为1:1。</span><br><span class=\"line\">-XX:MaxDirectMemorySize&#x3D;1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。</span><br><span class=\"line\">-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。</span><br><span class=\"line\">-XX:CMSInitiatingOccupancyFraction&#x3D;60：老年代内存回收阈值，默认值为68。</span><br><span class=\"line\">-XX:ConcGCThreads&#x3D;4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。</span><br><span class=\"line\">-XX:ParallelGCThreads&#x3D;8：新生代并行收集器的线程数。</span><br><span class=\"line\">-XX:MaxTenuringThreshold&#x3D;10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</span><br><span class=\"line\">-XX:CMSFullGCsBeforeCompaction&#x3D;4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。</span><br><span class=\"line\">-XX:CMSMaxAbortablePrecleanTime&#x3D;500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。</p>\n</blockquote>\n<p>在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。</p>\n<h3 id=\"内存优化示例\"><a href=\"#内存优化示例\" class=\"headerlink\" title=\"内存优化示例\"></a>内存优化示例</h3><p>当JVM运行稳定之后，触发了FullGC我们一般会拿到如下信息:</p>\n<p>image<br>以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。</p>\n<pre><code>java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久带空间占用。\n新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n老年代：2-3倍FullGC后的老年代空间占用。</code></pre><p>基于以上规则，则对参数定义如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xms373m -Xmx373m -Xmn140m -XX:PermSize&#x3D;5m -XX:MaxPermSize&#x3D;5m</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"延迟优化示例\"><a href=\"#延迟优化示例\" class=\"headerlink\" title=\"延迟优化示例\"></a>延迟优化示例</h3><p>对延迟性优化，首先需要了解延迟性需求及可调优的指标有哪些。</p>\n<ul>\n<li>应用程序可接受的平均停滞时间: 此时间与测量的Minor</li>\n<li>GC持续时间进行比较。可接受的Minor GC频率：Minor</li>\n<li>GC的频率与可容忍的值进行比较。</li>\n<li>可接受的最大停顿时间:最大停顿时间与最差情况下FullGC的持续时间进行比较。</li>\n<li>可接受的最大停顿发生的频率：基本就是FullGC的频率。</li>\n</ul>\n<p>其中，平均停滞时间和最大停顿时间，对用户体验最为重要。对于上面的指标，相关数据采集包括：MinorGC的持续时间、统计MinorGC的次数、FullGC的最差持续时间、最差情况下，FullGC的频率。</p>\n<p>image<br>如上图，Minor GC的平均持续时间0.069秒，MinorGC的频率为0.389秒一次。</p>\n<p>新生代空间越大，Minor GC的GC时间越长，频率越低。如果想减少其持续时长，就需要减少其空间大小。如果想减小其频率，就需要加大其空间大小。</p>\n<p>这里以减少了新生代空间10%的大小，来减小延迟时间。在此过程中，应该保持老年代和持代的大小不变化。调优后的参数如下变化:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xms359m -Xmx359m -Xmn126m -XX:PermSize&#x3D;5m -XX:MaxPermSize&#x3D;5m</span><br></pre></td></tr></table></figure>\n<h3 id=\"吞吐量调优\"><a href=\"#吞吐量调优\" class=\"headerlink\" title=\"吞吐量调优\"></a>吞吐量调优</h3><p>吞吐量调优主要是基于应用程序的吞吐量要求而来的，应用程序应该有一个综合的吞吐指标，这个指标基于整个应用的需求和测试而衍生出来的。</p>\n<p>评估当前吞吐量和目标差距是否巨大，如果在20%左右，可以修改参数，加大内存，再次从头调试，如果巨大就需要从整个应用层面来考虑，设计以及目标是否一致了，重新评估吞吐目标。</p>\n<blockquote>\n<p>对于垃圾收集器来说，提升吞吐量的性能调优的目标就是尽可能避免或者很少发生FullGC或者Stop-The-World压缩式垃圾收集（CMS），因为这两种方式都会造成应用程序吞吐降低。尽量在MinorGC 阶段回收更多的对象，避免对象提升过快到老年代。</p>\n</blockquote>\n<h3 id=\"调优工具\"><a href=\"#调优工具\" class=\"headerlink\" title=\"调优工具\"></a>调优工具</h3><p>借助GCViewer日志分析工具，可以非常直观地分析出待调优点。可从以下几方面来分析：</p>\n<ul>\n<li>Memory,分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；</li>\n<li>Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；</li>\n</ul>\n"},{"title":"Linux之SSH免密登录","abbrlink":2578104319,"date":"2017-08-18T09:59:25.000Z","index_img":"/img/linux.jpeg","_content":"\n\n\n安装Linux/Ubuntu的阿里云ECS默认情况下是使用账号+密码通过SSH登录的，并且默认账户是root，所以这里难免会有安全隐患。\n因此这里记录一下：Linux/Ubuntu系统怎么设置普通用户（非root用户），本教程以admin用户为例，使用秘钥登录通过SSH登录远程服务器。\n\n# 本地端流程\n## 检查本地SSH Key\n检查本地是否已经存在SSH Key秘钥，输入下面的命令来检查本地是否已经存在秘钥，如果有下面结果则跳过该步，若没有那么接下来的步骤生成秘钥\n\n    $ ls -a ~/.ssh\n    .\t\t..\t\tauthorized_keys\tid_rsa\t\tid_rsa.pub\tknown_hosts\n\n## 生成本地SSH Key秘钥\n输入以下命令，默认会在相应路径下（~/.ssh）生成id_rsa和id_rsa.pub两个文件，如下面代码所示\n\n     # 注：若需要免密码登录则直接回车\n     ~$ ssh-keygen -t rsa -C \"your_email@example.com\"   \n     Enter file in which to save the key (/your_home_path/.ssh/id_rsa): \n     Enter passphrase (empty for no passphrase): \n     Enter same passphrase again: \n     Your identification has been saved in /your_home_path/.ssh/id_rsa.\n     Your public key has been saved in /your_home_path/.ssh/id_rsa.pub.\n     The key fingerprint is:\n     SHA256:YgZkAauw6YCWAWwvfiMgJ7zBGkVbFqgRxQ7hdet5nGY your_email@example.com\n     The key's randomart image is:\n     +---[RSA 2048]----+\n     |BO=++o           |\n     |Bo++. .          |\n     |oOo ..           |\n     |+==...o .        |\n     |X+.  o+ES        |\n     |=X + o+.         |\n     |.oX .            |\n     |..               |\n     |                 |\n     +----[SHA256]-----+\n\n# 服务器端流程\n创建普通用户\n使用root用户操作以下命令创建普通用户：\n## 创建用户并修改密码\n\n    useradd admin\n    passwd admin\n    vi /etc/sudoers                                 # 增加用户su身份，编辑sudoers文件\n    admin ALL=(ALL:ALL) ALL                         # 在最底部加入这一行，保存退出\n\n## 添加ssh key公钥配置\n使用root用户操作以下命令创建存储密钥的文件夹及文件\n> <font color=red>**注意：第三步是最重要的一步！！！**</font>\n\n     mkdir /home/admin/.ssh\n     chmod 700 /home/admin/.ssh                       \n     vi /home/admin/.ssh/authorized_keys            #创建authorized_keys文件，并将本地生成的id_rsa.pub的内容填入authorized_keys\n     chmod 600 /home/admin/.ssh/authorized_keys     #设置authorized_keys权限\n     chown -R admin:admin /home/admin/.ssh/         #修改用户组和用户所有权\n     systemctl stop sshd                            #暂停ssh服务\n     systemctl start sshd                           #启动ssh服务\n\n## 设置SSH登录安全配置（可选步骤）\n> **温馨提示：SSH登录安全配置建议，使用root用户操作以下命令**\n\n     # 编辑SSH配置文件 \n     vi /etc/ssh/sshd_config\n     PermitRootLogin no                             # 禁用root账号登录，该配置可不修改，避免特殊情况下需要用到root\n     PasswordAuthentication no                      # 禁用账号+密码登录\n     # 保存退出后，重启ssh服务\n     systemctl stop sshd\n     systemctl start sshd\n\n# 本地验证登录\n因为每次记ip很麻烦，推荐使用hosts映射ip，使用别名登录。\n## 添加远端ip别名\n\n    vi /etc/hosts\n    xxx.xxx.xxx.xxx   my-remote-server              # 添加远端ip及映射的别名：ip  别名\n\n## 验证ssh免密登录\n\n    ssh admin@xxx.xxx.xxx.xxx                       # ip远程登录\n    ssh admin@my-remote-server                      # 别名远程登录\n\n   \n\n\n","source":"_posts/linux/Linux之SSH免密登录.md","raw":"---\ntitle: Linux之SSH免密登录\nabbrlink: 2578104319\ndate: 2017-08-18 17:59:25\nindex_img: /img/linux.jpeg\ntags: \n  - Linux\n---\n\n\n\n安装Linux/Ubuntu的阿里云ECS默认情况下是使用账号+密码通过SSH登录的，并且默认账户是root，所以这里难免会有安全隐患。\n因此这里记录一下：Linux/Ubuntu系统怎么设置普通用户（非root用户），本教程以admin用户为例，使用秘钥登录通过SSH登录远程服务器。\n\n# 本地端流程\n## 检查本地SSH Key\n检查本地是否已经存在SSH Key秘钥，输入下面的命令来检查本地是否已经存在秘钥，如果有下面结果则跳过该步，若没有那么接下来的步骤生成秘钥\n\n    $ ls -a ~/.ssh\n    .\t\t..\t\tauthorized_keys\tid_rsa\t\tid_rsa.pub\tknown_hosts\n\n## 生成本地SSH Key秘钥\n输入以下命令，默认会在相应路径下（~/.ssh）生成id_rsa和id_rsa.pub两个文件，如下面代码所示\n\n     # 注：若需要免密码登录则直接回车\n     ~$ ssh-keygen -t rsa -C \"your_email@example.com\"   \n     Enter file in which to save the key (/your_home_path/.ssh/id_rsa): \n     Enter passphrase (empty for no passphrase): \n     Enter same passphrase again: \n     Your identification has been saved in /your_home_path/.ssh/id_rsa.\n     Your public key has been saved in /your_home_path/.ssh/id_rsa.pub.\n     The key fingerprint is:\n     SHA256:YgZkAauw6YCWAWwvfiMgJ7zBGkVbFqgRxQ7hdet5nGY your_email@example.com\n     The key's randomart image is:\n     +---[RSA 2048]----+\n     |BO=++o           |\n     |Bo++. .          |\n     |oOo ..           |\n     |+==...o .        |\n     |X+.  o+ES        |\n     |=X + o+.         |\n     |.oX .            |\n     |..               |\n     |                 |\n     +----[SHA256]-----+\n\n# 服务器端流程\n创建普通用户\n使用root用户操作以下命令创建普通用户：\n## 创建用户并修改密码\n\n    useradd admin\n    passwd admin\n    vi /etc/sudoers                                 # 增加用户su身份，编辑sudoers文件\n    admin ALL=(ALL:ALL) ALL                         # 在最底部加入这一行，保存退出\n\n## 添加ssh key公钥配置\n使用root用户操作以下命令创建存储密钥的文件夹及文件\n> <font color=red>**注意：第三步是最重要的一步！！！**</font>\n\n     mkdir /home/admin/.ssh\n     chmod 700 /home/admin/.ssh                       \n     vi /home/admin/.ssh/authorized_keys            #创建authorized_keys文件，并将本地生成的id_rsa.pub的内容填入authorized_keys\n     chmod 600 /home/admin/.ssh/authorized_keys     #设置authorized_keys权限\n     chown -R admin:admin /home/admin/.ssh/         #修改用户组和用户所有权\n     systemctl stop sshd                            #暂停ssh服务\n     systemctl start sshd                           #启动ssh服务\n\n## 设置SSH登录安全配置（可选步骤）\n> **温馨提示：SSH登录安全配置建议，使用root用户操作以下命令**\n\n     # 编辑SSH配置文件 \n     vi /etc/ssh/sshd_config\n     PermitRootLogin no                             # 禁用root账号登录，该配置可不修改，避免特殊情况下需要用到root\n     PasswordAuthentication no                      # 禁用账号+密码登录\n     # 保存退出后，重启ssh服务\n     systemctl stop sshd\n     systemctl start sshd\n\n# 本地验证登录\n因为每次记ip很麻烦，推荐使用hosts映射ip，使用别名登录。\n## 添加远端ip别名\n\n    vi /etc/hosts\n    xxx.xxx.xxx.xxx   my-remote-server              # 添加远端ip及映射的别名：ip  别名\n\n## 验证ssh免密登录\n\n    ssh admin@xxx.xxx.xxx.xxx                       # ip远程登录\n    ssh admin@my-remote-server                      # 别名远程登录\n\n   \n\n\n","slug":"linux/Linux之SSH免密登录","published":1,"updated":"2020-12-14T16:21:20.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwp120013jcxcehregd49","content":"<p>安装Linux/Ubuntu的阿里云ECS默认情况下是使用账号+密码通过SSH登录的，并且默认账户是root，所以这里难免会有安全隐患。<br>因此这里记录一下：Linux/Ubuntu系统怎么设置普通用户（非root用户），本教程以admin用户为例，使用秘钥登录通过SSH登录远程服务器。</p>\n<h1 id=\"本地端流程\"><a href=\"#本地端流程\" class=\"headerlink\" title=\"本地端流程\"></a>本地端流程</h1><h2 id=\"检查本地SSH-Key\"><a href=\"#检查本地SSH-Key\" class=\"headerlink\" title=\"检查本地SSH Key\"></a>检查本地SSH Key</h2><p>检查本地是否已经存在SSH Key秘钥，输入下面的命令来检查本地是否已经存在秘钥，如果有下面结果则跳过该步，若没有那么接下来的步骤生成秘钥</p>\n<pre><code>$ ls -a ~/.ssh\n.        ..        authorized_keys    id_rsa        id_rsa.pub    known_hosts</code></pre><h2 id=\"生成本地SSH-Key秘钥\"><a href=\"#生成本地SSH-Key秘钥\" class=\"headerlink\" title=\"生成本地SSH Key秘钥\"></a>生成本地SSH Key秘钥</h2><p>输入以下命令，默认会在相应路径下（~/.ssh）生成id_rsa和id_rsa.pub两个文件，如下面代码所示</p>\n<pre><code># 注：若需要免密码登录则直接回车\n~$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;   \nEnter file in which to save the key (/your_home_path/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /your_home_path/.ssh/id_rsa.\nYour public key has been saved in /your_home_path/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:YgZkAauw6YCWAWwvfiMgJ7zBGkVbFqgRxQ7hdet5nGY your_email@example.com\nThe key&apos;s randomart image is:\n+---[RSA 2048]----+\n|BO=++o           |\n|Bo++. .          |\n|oOo ..           |\n|+==...o .        |\n|X+.  o+ES        |\n|=X + o+.         |\n|.oX .            |\n|..               |\n|                 |\n+----[SHA256]-----+</code></pre><h1 id=\"服务器端流程\"><a href=\"#服务器端流程\" class=\"headerlink\" title=\"服务器端流程\"></a>服务器端流程</h1><p>创建普通用户<br>使用root用户操作以下命令创建普通用户：</p>\n<h2 id=\"创建用户并修改密码\"><a href=\"#创建用户并修改密码\" class=\"headerlink\" title=\"创建用户并修改密码\"></a>创建用户并修改密码</h2><pre><code>useradd admin\npasswd admin\nvi /etc/sudoers                                 # 增加用户su身份，编辑sudoers文件\nadmin ALL=(ALL:ALL) ALL                         # 在最底部加入这一行，保存退出</code></pre><h2 id=\"添加ssh-key公钥配置\"><a href=\"#添加ssh-key公钥配置\" class=\"headerlink\" title=\"添加ssh key公钥配置\"></a>添加ssh key公钥配置</h2><p>使用root用户操作以下命令创建存储密钥的文件夹及文件</p>\n<blockquote>\n<p><font color=red><strong>注意：第三步是最重要的一步！！！</strong></font></p>\n</blockquote>\n<pre><code>mkdir /home/admin/.ssh\nchmod 700 /home/admin/.ssh                       \nvi /home/admin/.ssh/authorized_keys            #创建authorized_keys文件，并将本地生成的id_rsa.pub的内容填入authorized_keys\nchmod 600 /home/admin/.ssh/authorized_keys     #设置authorized_keys权限\nchown -R admin:admin /home/admin/.ssh/         #修改用户组和用户所有权\nsystemctl stop sshd                            #暂停ssh服务\nsystemctl start sshd                           #启动ssh服务</code></pre><h2 id=\"设置SSH登录安全配置（可选步骤）\"><a href=\"#设置SSH登录安全配置（可选步骤）\" class=\"headerlink\" title=\"设置SSH登录安全配置（可选步骤）\"></a>设置SSH登录安全配置（可选步骤）</h2><blockquote>\n<p><strong>温馨提示：SSH登录安全配置建议，使用root用户操作以下命令</strong></p>\n</blockquote>\n<pre><code># 编辑SSH配置文件 \nvi /etc/ssh/sshd_config\nPermitRootLogin no                             # 禁用root账号登录，该配置可不修改，避免特殊情况下需要用到root\nPasswordAuthentication no                      # 禁用账号+密码登录\n# 保存退出后，重启ssh服务\nsystemctl stop sshd\nsystemctl start sshd</code></pre><h1 id=\"本地验证登录\"><a href=\"#本地验证登录\" class=\"headerlink\" title=\"本地验证登录\"></a>本地验证登录</h1><p>因为每次记ip很麻烦，推荐使用hosts映射ip，使用别名登录。</p>\n<h2 id=\"添加远端ip别名\"><a href=\"#添加远端ip别名\" class=\"headerlink\" title=\"添加远端ip别名\"></a>添加远端ip别名</h2><pre><code>vi /etc/hosts\nxxx.xxx.xxx.xxx   my-remote-server              # 添加远端ip及映射的别名：ip  别名</code></pre><h2 id=\"验证ssh免密登录\"><a href=\"#验证ssh免密登录\" class=\"headerlink\" title=\"验证ssh免密登录\"></a>验证ssh免密登录</h2><pre><code>ssh admin@xxx.xxx.xxx.xxx                       # ip远程登录\nssh admin@my-remote-server                      # 别名远程登录</code></pre>","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>安装Linux/Ubuntu的阿里云ECS默认情况下是使用账号+密码通过SSH登录的，并且默认账户是root，所以这里难免会有安全隐患。<br>因此这里记录一下：Linux/Ubuntu系统怎么设置普通用户（非root用户），本教程以admin用户为例，使用秘钥登录通过SSH登录远程服务器。</p>\n<h1 id=\"本地端流程\"><a href=\"#本地端流程\" class=\"headerlink\" title=\"本地端流程\"></a>本地端流程</h1><h2 id=\"检查本地SSH-Key\"><a href=\"#检查本地SSH-Key\" class=\"headerlink\" title=\"检查本地SSH Key\"></a>检查本地SSH Key</h2><p>检查本地是否已经存在SSH Key秘钥，输入下面的命令来检查本地是否已经存在秘钥，如果有下面结果则跳过该步，若没有那么接下来的步骤生成秘钥</p>\n<pre><code>$ ls -a ~/.ssh\n.        ..        authorized_keys    id_rsa        id_rsa.pub    known_hosts</code></pre><h2 id=\"生成本地SSH-Key秘钥\"><a href=\"#生成本地SSH-Key秘钥\" class=\"headerlink\" title=\"生成本地SSH Key秘钥\"></a>生成本地SSH Key秘钥</h2><p>输入以下命令，默认会在相应路径下（~/.ssh）生成id_rsa和id_rsa.pub两个文件，如下面代码所示</p>\n<pre><code># 注：若需要免密码登录则直接回车\n~$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;   \nEnter file in which to save the key (/your_home_path/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /your_home_path/.ssh/id_rsa.\nYour public key has been saved in /your_home_path/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:YgZkAauw6YCWAWwvfiMgJ7zBGkVbFqgRxQ7hdet5nGY your_email@example.com\nThe key&apos;s randomart image is:\n+---[RSA 2048]----+\n|BO=++o           |\n|Bo++. .          |\n|oOo ..           |\n|+==...o .        |\n|X+.  o+ES        |\n|=X + o+.         |\n|.oX .            |\n|..               |\n|                 |\n+----[SHA256]-----+</code></pre><h1 id=\"服务器端流程\"><a href=\"#服务器端流程\" class=\"headerlink\" title=\"服务器端流程\"></a>服务器端流程</h1><p>创建普通用户<br>使用root用户操作以下命令创建普通用户：</p>\n<h2 id=\"创建用户并修改密码\"><a href=\"#创建用户并修改密码\" class=\"headerlink\" title=\"创建用户并修改密码\"></a>创建用户并修改密码</h2><pre><code>useradd admin\npasswd admin\nvi /etc/sudoers                                 # 增加用户su身份，编辑sudoers文件\nadmin ALL=(ALL:ALL) ALL                         # 在最底部加入这一行，保存退出</code></pre><h2 id=\"添加ssh-key公钥配置\"><a href=\"#添加ssh-key公钥配置\" class=\"headerlink\" title=\"添加ssh key公钥配置\"></a>添加ssh key公钥配置</h2><p>使用root用户操作以下命令创建存储密钥的文件夹及文件</p>\n<blockquote>\n<p><font color=red><strong>注意：第三步是最重要的一步！！！</strong></font></p>\n</blockquote>\n<pre><code>mkdir /home/admin/.ssh\nchmod 700 /home/admin/.ssh                       \nvi /home/admin/.ssh/authorized_keys            #创建authorized_keys文件，并将本地生成的id_rsa.pub的内容填入authorized_keys\nchmod 600 /home/admin/.ssh/authorized_keys     #设置authorized_keys权限\nchown -R admin:admin /home/admin/.ssh/         #修改用户组和用户所有权\nsystemctl stop sshd                            #暂停ssh服务\nsystemctl start sshd                           #启动ssh服务</code></pre><h2 id=\"设置SSH登录安全配置（可选步骤）\"><a href=\"#设置SSH登录安全配置（可选步骤）\" class=\"headerlink\" title=\"设置SSH登录安全配置（可选步骤）\"></a>设置SSH登录安全配置（可选步骤）</h2><blockquote>\n<p><strong>温馨提示：SSH登录安全配置建议，使用root用户操作以下命令</strong></p>\n</blockquote>\n<pre><code># 编辑SSH配置文件 \nvi /etc/ssh/sshd_config\nPermitRootLogin no                             # 禁用root账号登录，该配置可不修改，避免特殊情况下需要用到root\nPasswordAuthentication no                      # 禁用账号+密码登录\n# 保存退出后，重启ssh服务\nsystemctl stop sshd\nsystemctl start sshd</code></pre><h1 id=\"本地验证登录\"><a href=\"#本地验证登录\" class=\"headerlink\" title=\"本地验证登录\"></a>本地验证登录</h1><p>因为每次记ip很麻烦，推荐使用hosts映射ip，使用别名登录。</p>\n<h2 id=\"添加远端ip别名\"><a href=\"#添加远端ip别名\" class=\"headerlink\" title=\"添加远端ip别名\"></a>添加远端ip别名</h2><pre><code>vi /etc/hosts\nxxx.xxx.xxx.xxx   my-remote-server              # 添加远端ip及映射的别名：ip  别名</code></pre><h2 id=\"验证ssh免密登录\"><a href=\"#验证ssh免密登录\" class=\"headerlink\" title=\"验证ssh免密登录\"></a>验证ssh免密登录</h2><pre><code>ssh admin@xxx.xxx.xxx.xxx                       # ip远程登录\nssh admin@my-remote-server                      # 别名远程登录</code></pre>"},{"title":"linux与k8s的区别","abbrlink":2578104314,"date":"2017-08-18T09:59:25.000Z","index_img":"./img/docker.png","_content":"\n# [10分钟看懂Docker和K8S](https://www.cnblogs.com/itbsl/p/10178698.html)\n\n**本文来源：鲜枣课堂**\n\n2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134250810-1685533200.png)\n\n这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134259735-1931086473.png)\n\nLXC，就是Linux容器虚拟技术（Linux container）\n\n后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。\n\n![img](linux%E4%B8%8Ek8s%E7%9A%84%E5%8C%BA%E5%88%AB.assets/720430-20181226134308841-1109691453.png)\n\nDocker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。\n\n正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。\n\n什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134321094-1025894099.png)\n\nOpen Source，开源\n\n有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。\n\n2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134409452-99479785.png)\n\nSolomon Hykes（今年刚从Docker离职）\n\n不开则已，一开惊人。\n\n越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。\n\nDocker的人气迅速攀升，速度之快，令人瞠目结舌。\n\n开源当月，Docker 0.1版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0版本正式发布。\n\n此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。\n\nDocker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc.。\n\nDocker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。\n\n在容器技术之前，业界的网红是虚拟机。**虚拟机**技术的代表，是**VMWare**和**OpenStack**。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134345971-148194642.png)\n\n相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134357583-1178315643.png)\n\n虚拟机，类似于“子电脑”\n\n在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是**相互隔离**的，互不影响。\n\n虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于**轻量级的虚拟化**。\n\n虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。\n\n而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134422660-219996811.png)\n\n沙箱\n\n它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134430830-648875754.png)\n\n容器和虚拟机的对比\n\n正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。\n\n我们具体来看看Docker。\n\n大家需要注意，**Docker本身并不是容器**，它是创建容器的工具，是应用容器引擎。\n\n想要搞懂Docker，其实看它的两句口号就行。\n\n第一句，是“**Build, Ship and Run**”。\n\n![img](linux%E4%B8%8Ek8s%E7%9A%84%E5%8C%BA%E5%88%AB.assets/720430-20181226134440039-355719052.png)\n\n也就是，“搭建、发送、运行”，三板斧。\n\n举个例子：\n\n我来到一片空地，想建个房子，于是我搬石头、砍木头、画图纸，一顿操作，终于把这个房子盖好了。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134448189-1614413776.png)\n\n结果，我住了一段时间，想搬到另一片空地去。这时候，按以往的办法，我只能再次搬石头、砍木头、画图纸、盖房子。\n\n但是，跑来一个老巫婆，教会我一种魔法。\n\n这种魔法，可以把我盖好的房子复制一份，做成“镜像”，放在我的背包里。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134458048-1632935313.png)\n\n等我到了另一片空地，就用这个“镜像”，复制一套房子，摆在那边，拎包入住。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134507695-502496013.png)\n\n怎么样？是不是很神奇？\n\n所以，Docker的第二句口号就是：“**Build once，Run anywhere（搭建一次，到处能用）**”。\n\nDocker技术的三大核心概念，分别是：\n\n- **镜像（Image）**\n- **容器（Container）**\n- **仓库（Repository）**\n\n我刚才例子里面，那个放在包里的“镜像”，就是**Docker镜像**。而我的背包，就是**Docker仓库**。我在空地上，用魔法造好的房子，就是一个**Docker容器**。\n\n说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。\n\n也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。\n\n每一个镜像可以变出一种房子。那么，我可以有多个镜像呀！\n\n也就是说，我盖了一个欧式别墅，生成了镜像。另一个哥们可能盖了一个中国四合院，也生成了镜像。还有哥们，盖了一个非洲茅草屋，也生成了镜像。。。\n\n这么一来，我们可以交换镜像，你用我的，我用你的，岂不是很爽？\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134517561-1517184540.png)\n\n于是乎，就变成了一个大的公共仓库。\n\n负责对Docker镜像进行管理的，是**Docker Registry服务**（类似仓库管理员）。\n\n不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？\n\n所以，Docker Registry服务对镜像的管理是非常严格的。\n\n最常使用的Registry公开服务，是官方的**Docker Hub**，这也是默认的Registry，并拥有大量的高质量的官方镜像。\n\n好了，说完了Docker，我们再把目光转向K8S。\n\n就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。\n\n就在这个时候，K8S出现了。\n\n**K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。**\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134529220-885595947.png)\n\nKubernetes这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。\n\n和Docker不同，K8S的创造者，是众人皆知的行业巨头——**Google**。\n\n然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的**Borg系统**。\n\nK8S是2014年6月由Google公司正式公布出来并宣布开源的。\n\n同年7月，微软、Red Hat、IBM、Docker、CoreOS、Mesosphere和Saltstack等公司，相继加入K8S。\n\n之后的一年内，VMware、HP、Intel等公司，也陆续加入。\n\n2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。\n\n目前，kubernetes的版本已经发展到V1.13。\n\nK8S的架构，略微有一点复杂，我们简单来看一下。\n\n一个K8S系统，通常称为一个**K8S集群（Cluster）**。\n\n这个集群主要包括两个部分：\n\n- **一个Master节点（主节点）**\n- **一群Node节点（计算节点）**\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134539670-1577644922.png)\n\n一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。\n\n深入来看这两种节点。\n\n首先是**Master节点。**\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134549651-376208258.png)\n\nMaster节点包括API Server、Scheduler、Controller manager、etcd。\n\nAPI Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。\n\nScheduler负责对集群内部的资源进行调度，相当于“调度室”。\n\nController manager负责管理控制器，相当于“大总管”。\n\n然后是**Node节点**。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134600202-626807958.png)\n\nNode节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是**Pod**。\n\n> Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。这段不太好理解，跳过吧。\n\nDocker，不用说了，创建容器的。\n\nKubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。\n\nKube-proxy，主要负责为Pod对象提供代理。\n\nFluentd，主要负责日志收集、存储与查询。\n\n是不是有点懵？唉，三言两语真的很难讲清楚，继续跳过吧。\n\nDocker和K8S都介绍完了，然而文章并没有结束。\n\n接下来的部分，是**写给核心网工程师甚至所有通信工程师看的**。\n\n从几十年前的1G，到现在的4G，再到将来的5G，移动通信发生了翻天覆地的变化，核心网亦是如此。\n\n但是，如果你仔细洞察这些变化，会发现，所谓的核心网，其实本质上并没有发生改变，无非就是很多的服务器而已。不同的核心网网元，就是不同的服务器，不同的计算节点。\n\n变化的，是这些“服务器”的形态和接口：形态，从机柜单板，变成机柜刀片，从机柜刀片，变成X86通用刀片服务器；接口，从中继线缆，变成网线，从网线，变成光纤。\n\n就算变来变去，还是服务器，是计算节点，是CPU。\n\n既然是服务器，那么就势必会和IT云计算一样，走上虚拟化的道路。毕竟，虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度，等等。\n\n前几年，大家以为虚拟机是核心网的终极形态。目前看来，更有可能是**容器化**。这几年经常说的NFV（网元功能虚拟化），也有可能改口为NFC（网元功能容器化）。\n\n以VoLTE为例，如果按以前2G/3G的方式，那需要大量的专用设备，分别充当EPC和IMS的不同网元。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134611008-1358657705.png)\n\nVoLTE相关的网元\n\n而采用容器之后，很可能只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同网元的服务程序。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134621637-1646543877.png)\n\n这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。\n\n简直完美！\n\n5G时代，核心网采用微服务架构，也是和容器完美搭配——单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型。每个专能型，分配给一个隔离的容器，赋予了最大程度的灵活。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134635090-835720705.png)\n\n精细化分工\n\n按照这样的发展趋势，在移动通信系统中，除了天线，剩下的部分都有可能虚拟化。核心网是第一个，但不是最后一个。虚拟化之后的核心网，与其说属于通信，实际上更应该归为IT。核心网的功能，只是容器中普通一个软件功能而已。\n\n至于说在座的各位核心网工程师，恭喜你们，马上就要成功转型啦！","source":"_posts/linux/linux与k8s的区别.md","raw":"---\ntitle: linux与k8s的区别\nabbrlink: 2578104314\ndate: 2017-08-18 17:59:25\nindex_img: ./img/docker.png\ntags: \n  - Docker\n---\n\n# [10分钟看懂Docker和K8S](https://www.cnblogs.com/itbsl/p/10178698.html)\n\n**本文来源：鲜枣课堂**\n\n2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134250810-1685533200.png)\n\n这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134259735-1931086473.png)\n\nLXC，就是Linux容器虚拟技术（Linux container）\n\n后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。\n\n![img](linux%E4%B8%8Ek8s%E7%9A%84%E5%8C%BA%E5%88%AB.assets/720430-20181226134308841-1109691453.png)\n\nDocker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。\n\n正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。\n\n什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134321094-1025894099.png)\n\nOpen Source，开源\n\n有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。\n\n2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134409452-99479785.png)\n\nSolomon Hykes（今年刚从Docker离职）\n\n不开则已，一开惊人。\n\n越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。\n\nDocker的人气迅速攀升，速度之快，令人瞠目结舌。\n\n开源当月，Docker 0.1版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0版本正式发布。\n\n此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。\n\nDocker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc.。\n\nDocker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。\n\n在容器技术之前，业界的网红是虚拟机。**虚拟机**技术的代表，是**VMWare**和**OpenStack**。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134345971-148194642.png)\n\n相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134357583-1178315643.png)\n\n虚拟机，类似于“子电脑”\n\n在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是**相互隔离**的，互不影响。\n\n虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于**轻量级的虚拟化**。\n\n虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。\n\n而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134422660-219996811.png)\n\n沙箱\n\n它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134430830-648875754.png)\n\n容器和虚拟机的对比\n\n正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。\n\n我们具体来看看Docker。\n\n大家需要注意，**Docker本身并不是容器**，它是创建容器的工具，是应用容器引擎。\n\n想要搞懂Docker，其实看它的两句口号就行。\n\n第一句，是“**Build, Ship and Run**”。\n\n![img](linux%E4%B8%8Ek8s%E7%9A%84%E5%8C%BA%E5%88%AB.assets/720430-20181226134440039-355719052.png)\n\n也就是，“搭建、发送、运行”，三板斧。\n\n举个例子：\n\n我来到一片空地，想建个房子，于是我搬石头、砍木头、画图纸，一顿操作，终于把这个房子盖好了。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134448189-1614413776.png)\n\n结果，我住了一段时间，想搬到另一片空地去。这时候，按以往的办法，我只能再次搬石头、砍木头、画图纸、盖房子。\n\n但是，跑来一个老巫婆，教会我一种魔法。\n\n这种魔法，可以把我盖好的房子复制一份，做成“镜像”，放在我的背包里。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134458048-1632935313.png)\n\n等我到了另一片空地，就用这个“镜像”，复制一套房子，摆在那边，拎包入住。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134507695-502496013.png)\n\n怎么样？是不是很神奇？\n\n所以，Docker的第二句口号就是：“**Build once，Run anywhere（搭建一次，到处能用）**”。\n\nDocker技术的三大核心概念，分别是：\n\n- **镜像（Image）**\n- **容器（Container）**\n- **仓库（Repository）**\n\n我刚才例子里面，那个放在包里的“镜像”，就是**Docker镜像**。而我的背包，就是**Docker仓库**。我在空地上，用魔法造好的房子，就是一个**Docker容器**。\n\n说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。\n\n也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。\n\n每一个镜像可以变出一种房子。那么，我可以有多个镜像呀！\n\n也就是说，我盖了一个欧式别墅，生成了镜像。另一个哥们可能盖了一个中国四合院，也生成了镜像。还有哥们，盖了一个非洲茅草屋，也生成了镜像。。。\n\n这么一来，我们可以交换镜像，你用我的，我用你的，岂不是很爽？\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134517561-1517184540.png)\n\n于是乎，就变成了一个大的公共仓库。\n\n负责对Docker镜像进行管理的，是**Docker Registry服务**（类似仓库管理员）。\n\n不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？\n\n所以，Docker Registry服务对镜像的管理是非常严格的。\n\n最常使用的Registry公开服务，是官方的**Docker Hub**，这也是默认的Registry，并拥有大量的高质量的官方镜像。\n\n好了，说完了Docker，我们再把目光转向K8S。\n\n就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。\n\n就在这个时候，K8S出现了。\n\n**K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。**\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134529220-885595947.png)\n\nKubernetes这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。\n\n和Docker不同，K8S的创造者，是众人皆知的行业巨头——**Google**。\n\n然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的**Borg系统**。\n\nK8S是2014年6月由Google公司正式公布出来并宣布开源的。\n\n同年7月，微软、Red Hat、IBM、Docker、CoreOS、Mesosphere和Saltstack等公司，相继加入K8S。\n\n之后的一年内，VMware、HP、Intel等公司，也陆续加入。\n\n2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。\n\n目前，kubernetes的版本已经发展到V1.13。\n\nK8S的架构，略微有一点复杂，我们简单来看一下。\n\n一个K8S系统，通常称为一个**K8S集群（Cluster）**。\n\n这个集群主要包括两个部分：\n\n- **一个Master节点（主节点）**\n- **一群Node节点（计算节点）**\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134539670-1577644922.png)\n\n一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。\n\n深入来看这两种节点。\n\n首先是**Master节点。**\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134549651-376208258.png)\n\nMaster节点包括API Server、Scheduler、Controller manager、etcd。\n\nAPI Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。\n\nScheduler负责对集群内部的资源进行调度，相当于“调度室”。\n\nController manager负责管理控制器，相当于“大总管”。\n\n然后是**Node节点**。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134600202-626807958.png)\n\nNode节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是**Pod**。\n\n> Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。这段不太好理解，跳过吧。\n\nDocker，不用说了，创建容器的。\n\nKubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。\n\nKube-proxy，主要负责为Pod对象提供代理。\n\nFluentd，主要负责日志收集、存储与查询。\n\n是不是有点懵？唉，三言两语真的很难讲清楚，继续跳过吧。\n\nDocker和K8S都介绍完了，然而文章并没有结束。\n\n接下来的部分，是**写给核心网工程师甚至所有通信工程师看的**。\n\n从几十年前的1G，到现在的4G，再到将来的5G，移动通信发生了翻天覆地的变化，核心网亦是如此。\n\n但是，如果你仔细洞察这些变化，会发现，所谓的核心网，其实本质上并没有发生改变，无非就是很多的服务器而已。不同的核心网网元，就是不同的服务器，不同的计算节点。\n\n变化的，是这些“服务器”的形态和接口：形态，从机柜单板，变成机柜刀片，从机柜刀片，变成X86通用刀片服务器；接口，从中继线缆，变成网线，从网线，变成光纤。\n\n就算变来变去，还是服务器，是计算节点，是CPU。\n\n既然是服务器，那么就势必会和IT云计算一样，走上虚拟化的道路。毕竟，虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度，等等。\n\n前几年，大家以为虚拟机是核心网的终极形态。目前看来，更有可能是**容器化**。这几年经常说的NFV（网元功能虚拟化），也有可能改口为NFC（网元功能容器化）。\n\n以VoLTE为例，如果按以前2G/3G的方式，那需要大量的专用设备，分别充当EPC和IMS的不同网元。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134611008-1358657705.png)\n\nVoLTE相关的网元\n\n而采用容器之后，很可能只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同网元的服务程序。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134621637-1646543877.png)\n\n这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。\n\n简直完美！\n\n5G时代，核心网采用微服务架构，也是和容器完美搭配——单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型。每个专能型，分配给一个隔离的容器，赋予了最大程度的灵活。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134635090-835720705.png)\n\n精细化分工\n\n按照这样的发展趋势，在移动通信系统中，除了天线，剩下的部分都有可能虚拟化。核心网是第一个，但不是最后一个。虚拟化之后的核心网，与其说属于通信，实际上更应该归为IT。核心网的功能，只是容器中普通一个软件功能而已。\n\n至于说在座的各位核心网工程师，恭喜你们，马上就要成功转型啦！","slug":"linux/linux与k8s的区别","published":1,"updated":"2020-12-14T15:50:15.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwp130014jcxc1yyuacld","content":"<h1 id=\"10分钟看懂Docker和K8S\"><a href=\"#10分钟看懂Docker和K8S\" class=\"headerlink\" title=\"10分钟看懂Docker和K8S\"></a><a href=\"https://www.cnblogs.com/itbsl/p/10178698.html\" target=\"_blank\" rel=\"noopener\">10分钟看懂Docker和K8S</a></h1><p><strong>本文来源：鲜枣课堂</strong></p>\n<p>2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134250810-1685533200.png\" alt=\"img\"></p>\n<p>这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134259735-1931086473.png\" alt=\"img\"></p>\n<p>LXC，就是Linux容器虚拟技术（Linux container）</p>\n<p>后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。</p>\n<p><img src=\"linux%E4%B8%8Ek8s%E7%9A%84%E5%8C%BA%E5%88%AB.assets/720430-20181226134308841-1109691453.png\" alt=\"img\"></p>\n<p>Docker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。</p>\n<p>正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。</p>\n<p>什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134321094-1025894099.png\" alt=\"img\"></p>\n<p>Open Source，开源</p>\n<p>有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。</p>\n<p>2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134409452-99479785.png\" alt=\"img\"></p>\n<p>Solomon Hykes（今年刚从Docker离职）</p>\n<p>不开则已，一开惊人。</p>\n<p>越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。</p>\n<p>Docker的人气迅速攀升，速度之快，令人瞠目结舌。</p>\n<p>开源当月，Docker 0.1版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0版本正式发布。</p>\n<p>此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。</p>\n<p>Docker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc.。</p>\n<p>Docker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。</p>\n<p>在容器技术之前，业界的网红是虚拟机。<strong>虚拟机</strong>技术的代表，是<strong>VMWare</strong>和<strong>OpenStack</strong>。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134345971-148194642.png\" alt=\"img\"></p>\n<p>相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134357583-1178315643.png\" alt=\"img\"></p>\n<p>虚拟机，类似于“子电脑”</p>\n<p>在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是<strong>相互隔离</strong>的，互不影响。</p>\n<p>虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于<strong>轻量级的虚拟化</strong>。</p>\n<p>虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。</p>\n<p>而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134422660-219996811.png\" alt=\"img\"></p>\n<p>沙箱</p>\n<p>它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134430830-648875754.png\" alt=\"img\"></p>\n<p>容器和虚拟机的对比</p>\n<p>正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。</p>\n<p>我们具体来看看Docker。</p>\n<p>大家需要注意，<strong>Docker本身并不是容器</strong>，它是创建容器的工具，是应用容器引擎。</p>\n<p>想要搞懂Docker，其实看它的两句口号就行。</p>\n<p>第一句，是“<strong>Build, Ship and Run</strong>”。</p>\n<p><img src=\"linux%E4%B8%8Ek8s%E7%9A%84%E5%8C%BA%E5%88%AB.assets/720430-20181226134440039-355719052.png\" alt=\"img\"></p>\n<p>也就是，“搭建、发送、运行”，三板斧。</p>\n<p>举个例子：</p>\n<p>我来到一片空地，想建个房子，于是我搬石头、砍木头、画图纸，一顿操作，终于把这个房子盖好了。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134448189-1614413776.png\" alt=\"img\"></p>\n<p>结果，我住了一段时间，想搬到另一片空地去。这时候，按以往的办法，我只能再次搬石头、砍木头、画图纸、盖房子。</p>\n<p>但是，跑来一个老巫婆，教会我一种魔法。</p>\n<p>这种魔法，可以把我盖好的房子复制一份，做成“镜像”，放在我的背包里。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134458048-1632935313.png\" alt=\"img\"></p>\n<p>等我到了另一片空地，就用这个“镜像”，复制一套房子，摆在那边，拎包入住。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134507695-502496013.png\" alt=\"img\"></p>\n<p>怎么样？是不是很神奇？</p>\n<p>所以，Docker的第二句口号就是：“<strong>Build once，Run anywhere（搭建一次，到处能用）</strong>”。</p>\n<p>Docker技术的三大核心概念，分别是：</p>\n<ul>\n<li><strong>镜像（Image）</strong></li>\n<li><strong>容器（Container）</strong></li>\n<li><strong>仓库（Repository）</strong></li>\n</ul>\n<p>我刚才例子里面，那个放在包里的“镜像”，就是<strong>Docker镜像</strong>。而我的背包，就是<strong>Docker仓库</strong>。我在空地上，用魔法造好的房子，就是一个<strong>Docker容器</strong>。</p>\n<p>说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>\n<p>也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。</p>\n<p>每一个镜像可以变出一种房子。那么，我可以有多个镜像呀！</p>\n<p>也就是说，我盖了一个欧式别墅，生成了镜像。另一个哥们可能盖了一个中国四合院，也生成了镜像。还有哥们，盖了一个非洲茅草屋，也生成了镜像。。。</p>\n<p>这么一来，我们可以交换镜像，你用我的，我用你的，岂不是很爽？</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134517561-1517184540.png\" alt=\"img\"></p>\n<p>于是乎，就变成了一个大的公共仓库。</p>\n<p>负责对Docker镜像进行管理的，是<strong>Docker Registry服务</strong>（类似仓库管理员）。</p>\n<p>不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？</p>\n<p>所以，Docker Registry服务对镜像的管理是非常严格的。</p>\n<p>最常使用的Registry公开服务，是官方的<strong>Docker Hub</strong>，这也是默认的Registry，并拥有大量的高质量的官方镜像。</p>\n<p>好了，说完了Docker，我们再把目光转向K8S。</p>\n<p>就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。</p>\n<p>就在这个时候，K8S出现了。</p>\n<p><strong>K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。</strong></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134529220-885595947.png\" alt=\"img\"></p>\n<p>Kubernetes这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。</p>\n<p>和Docker不同，K8S的创造者，是众人皆知的行业巨头——<strong>Google</strong>。</p>\n<p>然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的<strong>Borg系统</strong>。</p>\n<p>K8S是2014年6月由Google公司正式公布出来并宣布开源的。</p>\n<p>同年7月，微软、Red Hat、IBM、Docker、CoreOS、Mesosphere和Saltstack等公司，相继加入K8S。</p>\n<p>之后的一年内，VMware、HP、Intel等公司，也陆续加入。</p>\n<p>2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。</p>\n<p>目前，kubernetes的版本已经发展到V1.13。</p>\n<p>K8S的架构，略微有一点复杂，我们简单来看一下。</p>\n<p>一个K8S系统，通常称为一个<strong>K8S集群（Cluster）</strong>。</p>\n<p>这个集群主要包括两个部分：</p>\n<ul>\n<li><strong>一个Master节点（主节点）</strong></li>\n<li><strong>一群Node节点（计算节点）</strong></li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134539670-1577644922.png\" alt=\"img\"></p>\n<p>一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。</p>\n<p>深入来看这两种节点。</p>\n<p>首先是<strong>Master节点。</strong></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134549651-376208258.png\" alt=\"img\"></p>\n<p>Master节点包括API Server、Scheduler、Controller manager、etcd。</p>\n<p>API Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。</p>\n<p>Scheduler负责对集群内部的资源进行调度，相当于“调度室”。</p>\n<p>Controller manager负责管理控制器，相当于“大总管”。</p>\n<p>然后是<strong>Node节点</strong>。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134600202-626807958.png\" alt=\"img\"></p>\n<p>Node节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是<strong>Pod</strong>。</p>\n<blockquote>\n<p>Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。这段不太好理解，跳过吧。</p>\n</blockquote>\n<p>Docker，不用说了，创建容器的。</p>\n<p>Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。</p>\n<p>Kube-proxy，主要负责为Pod对象提供代理。</p>\n<p>Fluentd，主要负责日志收集、存储与查询。</p>\n<p>是不是有点懵？唉，三言两语真的很难讲清楚，继续跳过吧。</p>\n<p>Docker和K8S都介绍完了，然而文章并没有结束。</p>\n<p>接下来的部分，是<strong>写给核心网工程师甚至所有通信工程师看的</strong>。</p>\n<p>从几十年前的1G，到现在的4G，再到将来的5G，移动通信发生了翻天覆地的变化，核心网亦是如此。</p>\n<p>但是，如果你仔细洞察这些变化，会发现，所谓的核心网，其实本质上并没有发生改变，无非就是很多的服务器而已。不同的核心网网元，就是不同的服务器，不同的计算节点。</p>\n<p>变化的，是这些“服务器”的形态和接口：形态，从机柜单板，变成机柜刀片，从机柜刀片，变成X86通用刀片服务器；接口，从中继线缆，变成网线，从网线，变成光纤。</p>\n<p>就算变来变去，还是服务器，是计算节点，是CPU。</p>\n<p>既然是服务器，那么就势必会和IT云计算一样，走上虚拟化的道路。毕竟，虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度，等等。</p>\n<p>前几年，大家以为虚拟机是核心网的终极形态。目前看来，更有可能是<strong>容器化</strong>。这几年经常说的NFV（网元功能虚拟化），也有可能改口为NFC（网元功能容器化）。</p>\n<p>以VoLTE为例，如果按以前2G/3G的方式，那需要大量的专用设备，分别充当EPC和IMS的不同网元。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134611008-1358657705.png\" alt=\"img\"></p>\n<p>VoLTE相关的网元</p>\n<p>而采用容器之后，很可能只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同网元的服务程序。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134621637-1646543877.png\" alt=\"img\"></p>\n<p>这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。</p>\n<p>简直完美！</p>\n<p>5G时代，核心网采用微服务架构，也是和容器完美搭配——单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型。每个专能型，分配给一个隔离的容器，赋予了最大程度的灵活。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134635090-835720705.png\" alt=\"img\"></p>\n<p>精细化分工</p>\n<p>按照这样的发展趋势，在移动通信系统中，除了天线，剩下的部分都有可能虚拟化。核心网是第一个，但不是最后一个。虚拟化之后的核心网，与其说属于通信，实际上更应该归为IT。核心网的功能，只是容器中普通一个软件功能而已。</p>\n<p>至于说在座的各位核心网工程师，恭喜你们，马上就要成功转型啦！</p>\n","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"10分钟看懂Docker和K8S\"><a href=\"#10分钟看懂Docker和K8S\" class=\"headerlink\" title=\"10分钟看懂Docker和K8S\"></a><a href=\"https://www.cnblogs.com/itbsl/p/10178698.html\" target=\"_blank\" rel=\"noopener\">10分钟看懂Docker和K8S</a></h1><p><strong>本文来源：鲜枣课堂</strong></p>\n<p>2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134250810-1685533200.png\" alt=\"img\"></p>\n<p>这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134259735-1931086473.png\" alt=\"img\"></p>\n<p>LXC，就是Linux容器虚拟技术（Linux container）</p>\n<p>后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。</p>\n<p><img src=\"linux%E4%B8%8Ek8s%E7%9A%84%E5%8C%BA%E5%88%AB.assets/720430-20181226134308841-1109691453.png\" alt=\"img\"></p>\n<p>Docker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。</p>\n<p>正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。</p>\n<p>什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134321094-1025894099.png\" alt=\"img\"></p>\n<p>Open Source，开源</p>\n<p>有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。</p>\n<p>2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134409452-99479785.png\" alt=\"img\"></p>\n<p>Solomon Hykes（今年刚从Docker离职）</p>\n<p>不开则已，一开惊人。</p>\n<p>越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。</p>\n<p>Docker的人气迅速攀升，速度之快，令人瞠目结舌。</p>\n<p>开源当月，Docker 0.1版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0版本正式发布。</p>\n<p>此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。</p>\n<p>Docker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc.。</p>\n<p>Docker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。</p>\n<p>在容器技术之前，业界的网红是虚拟机。<strong>虚拟机</strong>技术的代表，是<strong>VMWare</strong>和<strong>OpenStack</strong>。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134345971-148194642.png\" alt=\"img\"></p>\n<p>相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134357583-1178315643.png\" alt=\"img\"></p>\n<p>虚拟机，类似于“子电脑”</p>\n<p>在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是<strong>相互隔离</strong>的，互不影响。</p>\n<p>虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于<strong>轻量级的虚拟化</strong>。</p>\n<p>虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。</p>\n<p>而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134422660-219996811.png\" alt=\"img\"></p>\n<p>沙箱</p>\n<p>它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134430830-648875754.png\" alt=\"img\"></p>\n<p>容器和虚拟机的对比</p>\n<p>正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。</p>\n<p>我们具体来看看Docker。</p>\n<p>大家需要注意，<strong>Docker本身并不是容器</strong>，它是创建容器的工具，是应用容器引擎。</p>\n<p>想要搞懂Docker，其实看它的两句口号就行。</p>\n<p>第一句，是“<strong>Build, Ship and Run</strong>”。</p>\n<p><img src=\"linux%E4%B8%8Ek8s%E7%9A%84%E5%8C%BA%E5%88%AB.assets/720430-20181226134440039-355719052.png\" alt=\"img\"></p>\n<p>也就是，“搭建、发送、运行”，三板斧。</p>\n<p>举个例子：</p>\n<p>我来到一片空地，想建个房子，于是我搬石头、砍木头、画图纸，一顿操作，终于把这个房子盖好了。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134448189-1614413776.png\" alt=\"img\"></p>\n<p>结果，我住了一段时间，想搬到另一片空地去。这时候，按以往的办法，我只能再次搬石头、砍木头、画图纸、盖房子。</p>\n<p>但是，跑来一个老巫婆，教会我一种魔法。</p>\n<p>这种魔法，可以把我盖好的房子复制一份，做成“镜像”，放在我的背包里。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134458048-1632935313.png\" alt=\"img\"></p>\n<p>等我到了另一片空地，就用这个“镜像”，复制一套房子，摆在那边，拎包入住。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134507695-502496013.png\" alt=\"img\"></p>\n<p>怎么样？是不是很神奇？</p>\n<p>所以，Docker的第二句口号就是：“<strong>Build once，Run anywhere（搭建一次，到处能用）</strong>”。</p>\n<p>Docker技术的三大核心概念，分别是：</p>\n<ul>\n<li><strong>镜像（Image）</strong></li>\n<li><strong>容器（Container）</strong></li>\n<li><strong>仓库（Repository）</strong></li>\n</ul>\n<p>我刚才例子里面，那个放在包里的“镜像”，就是<strong>Docker镜像</strong>。而我的背包，就是<strong>Docker仓库</strong>。我在空地上，用魔法造好的房子，就是一个<strong>Docker容器</strong>。</p>\n<p>说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>\n<p>也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。</p>\n<p>每一个镜像可以变出一种房子。那么，我可以有多个镜像呀！</p>\n<p>也就是说，我盖了一个欧式别墅，生成了镜像。另一个哥们可能盖了一个中国四合院，也生成了镜像。还有哥们，盖了一个非洲茅草屋，也生成了镜像。。。</p>\n<p>这么一来，我们可以交换镜像，你用我的，我用你的，岂不是很爽？</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134517561-1517184540.png\" alt=\"img\"></p>\n<p>于是乎，就变成了一个大的公共仓库。</p>\n<p>负责对Docker镜像进行管理的，是<strong>Docker Registry服务</strong>（类似仓库管理员）。</p>\n<p>不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？</p>\n<p>所以，Docker Registry服务对镜像的管理是非常严格的。</p>\n<p>最常使用的Registry公开服务，是官方的<strong>Docker Hub</strong>，这也是默认的Registry，并拥有大量的高质量的官方镜像。</p>\n<p>好了，说完了Docker，我们再把目光转向K8S。</p>\n<p>就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。</p>\n<p>就在这个时候，K8S出现了。</p>\n<p><strong>K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。</strong></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134529220-885595947.png\" alt=\"img\"></p>\n<p>Kubernetes这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。</p>\n<p>和Docker不同，K8S的创造者，是众人皆知的行业巨头——<strong>Google</strong>。</p>\n<p>然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的<strong>Borg系统</strong>。</p>\n<p>K8S是2014年6月由Google公司正式公布出来并宣布开源的。</p>\n<p>同年7月，微软、Red Hat、IBM、Docker、CoreOS、Mesosphere和Saltstack等公司，相继加入K8S。</p>\n<p>之后的一年内，VMware、HP、Intel等公司，也陆续加入。</p>\n<p>2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。</p>\n<p>目前，kubernetes的版本已经发展到V1.13。</p>\n<p>K8S的架构，略微有一点复杂，我们简单来看一下。</p>\n<p>一个K8S系统，通常称为一个<strong>K8S集群（Cluster）</strong>。</p>\n<p>这个集群主要包括两个部分：</p>\n<ul>\n<li><strong>一个Master节点（主节点）</strong></li>\n<li><strong>一群Node节点（计算节点）</strong></li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134539670-1577644922.png\" alt=\"img\"></p>\n<p>一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。</p>\n<p>深入来看这两种节点。</p>\n<p>首先是<strong>Master节点。</strong></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134549651-376208258.png\" alt=\"img\"></p>\n<p>Master节点包括API Server、Scheduler、Controller manager、etcd。</p>\n<p>API Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。</p>\n<p>Scheduler负责对集群内部的资源进行调度，相当于“调度室”。</p>\n<p>Controller manager负责管理控制器，相当于“大总管”。</p>\n<p>然后是<strong>Node节点</strong>。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134600202-626807958.png\" alt=\"img\"></p>\n<p>Node节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是<strong>Pod</strong>。</p>\n<blockquote>\n<p>Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。这段不太好理解，跳过吧。</p>\n</blockquote>\n<p>Docker，不用说了，创建容器的。</p>\n<p>Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。</p>\n<p>Kube-proxy，主要负责为Pod对象提供代理。</p>\n<p>Fluentd，主要负责日志收集、存储与查询。</p>\n<p>是不是有点懵？唉，三言两语真的很难讲清楚，继续跳过吧。</p>\n<p>Docker和K8S都介绍完了，然而文章并没有结束。</p>\n<p>接下来的部分，是<strong>写给核心网工程师甚至所有通信工程师看的</strong>。</p>\n<p>从几十年前的1G，到现在的4G，再到将来的5G，移动通信发生了翻天覆地的变化，核心网亦是如此。</p>\n<p>但是，如果你仔细洞察这些变化，会发现，所谓的核心网，其实本质上并没有发生改变，无非就是很多的服务器而已。不同的核心网网元，就是不同的服务器，不同的计算节点。</p>\n<p>变化的，是这些“服务器”的形态和接口：形态，从机柜单板，变成机柜刀片，从机柜刀片，变成X86通用刀片服务器；接口，从中继线缆，变成网线，从网线，变成光纤。</p>\n<p>就算变来变去，还是服务器，是计算节点，是CPU。</p>\n<p>既然是服务器，那么就势必会和IT云计算一样，走上虚拟化的道路。毕竟，虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度，等等。</p>\n<p>前几年，大家以为虚拟机是核心网的终极形态。目前看来，更有可能是<strong>容器化</strong>。这几年经常说的NFV（网元功能虚拟化），也有可能改口为NFC（网元功能容器化）。</p>\n<p>以VoLTE为例，如果按以前2G/3G的方式，那需要大量的专用设备，分别充当EPC和IMS的不同网元。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134611008-1358657705.png\" alt=\"img\"></p>\n<p>VoLTE相关的网元</p>\n<p>而采用容器之后，很可能只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同网元的服务程序。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134621637-1646543877.png\" alt=\"img\"></p>\n<p>这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。</p>\n<p>简直完美！</p>\n<p>5G时代，核心网采用微服务架构，也是和容器完美搭配——单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型。每个专能型，分配给一个隔离的容器，赋予了最大程度的灵活。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134635090-835720705.png\" alt=\"img\"></p>\n<p>精细化分工</p>\n<p>按照这样的发展趋势，在移动通信系统中，除了天线，剩下的部分都有可能虚拟化。核心网是第一个，但不是最后一个。虚拟化之后的核心网，与其说属于通信，实际上更应该归为IT。核心网的功能，只是容器中普通一个软件功能而已。</p>\n<p>至于说在座的各位核心网工程师，恭喜你们，马上就要成功转型啦！</p>\n"},{"title":"Spring Cloud 微服务架构全链路实践","index_img":"/img/spring-cloud.jpeg","abbrlink":1879991184,"date":"2016-08-15T16:04:12.000Z","_content":"\nJava 微服务框架选型（Dubbo 和 Spring Cloud）\n\n{% asset_img 1.png %}\n\n目前公司使用的 Spring Cloud 整个技术组件，基本包含了上面图中所包含的，不得不说，Spring Cloud 整个生态真的很强大，使用起来也很方便有效。\n\n后面有时间再针对每个组件进行使用解读，这篇文章主要说下 Spring Cloud 架构的链路图，顺便把自己的思路整理下来，以备查阅。\n\n{% asset_img 2.png %}\n\n# 网关请求流程\n\n在 Spring Cloud 整个组件库中，Spring Cloud Zuul 是最容易被忽视，但也是最重要的，Spring Cloud Zuul 可以和 Eureka 注册中心集成，我们目前使用 Spring Cloud Zuul 的功能如下：\n- Filter 过滤器\n- Router 路由\n- Ribbon 负载均衡\n- Hystrix 熔断\n- Retry 重试\n有些功能是 Spring Cloud Zuul 自带的，比如 Filter 和 Router，有些是结合 Spring Cloud 其他组件，比如 Ribbon 和 Hystrix。\n\n这里重点介绍下 Filter 过滤器，分为四个过滤类型：\n- pre：Zuul 转发请求之前执行，我们目前的实现是AccessTokenFilter，用于 oAuth2.0 JWT 的授权验证。\n- route：Zuul 路由时执行，目前项目没用到。\n- post：Zuul 路由转发后执行，也就是已经请求成功了后端服务，我们目前的实现是CustomResponseFilter，用于统一请求格式的封装，比如 code/msg/data 等。\n- error：以上过滤器发生错误时执行，我们目前的实现是CustomErrorFilter，用于拦截过滤器执行的出现的错误，然后统一格式封装返回，另外，error 过滤器好像并不能捕获后端服务执行出现的错误。\n\n另外，关于 oAuth2.0 JWT 的授权验证，实现的方式有两种：\n- 授权的配置在后端服务中（每个服务都需要当作 Resource Server 进行配置，需要配置公钥，接口的授权具体配置在注解中），Zuul 只做转发，并不进行授权的验证。\n- 授权的配置在 Zuul 中，也就是把 Zuul 当作 Resource Server，后端服务不需要进行任何处理，Zuul 中具体的实现就是AccessTokenFilter，里面的逻辑是手动解析 JWT，然后判断是否正确，以及解析出用户信息/Scope/Role，然后根据当前的请求 API，对授权 Map 中的配置进行匹配，如果匹配错误，直接抛出 401 授权错误。\n我们目前采用的是第二种方式，这两种方式都有利有弊，关键在于自己的取舍，为什么采用第二种方式？目的就是发挥 Zuul 的作用，对外网关进行统一授权验证。\n\n关于授权 Map，里面存储了所有服务接口的配置，示例配置：\n```\nprivate static final Map ROUTE_MAPS;\nstatic {\n    ROUTE_MAPS = new HashMap();\n    ROUTE_MAPS.put(\"eureka-client/home\", \"read:ROLE_ADMIN\");\n    ROUTE_MAPS.put(\"eureka-client/user\", \"read:ROLE_ADMIN\");\n    ROUTE_MAPS.put(\"eureka-client/error\", \"read:ROLE_ADMIN\");\n}\n```\n\n\n这是我们目前的配置，是一个静态的 Map，后面会存储在 Spring Cloud Config 配置中心，Zuul 启动时进行加载，利用 Spring Cloud Bus 动态刷新。\n\n关于 Zuul 网关，其实还有很多需要说的，后面有机会再进行针对说明。\n\n# Eureka 服务治理\n\n{% asset_img 3.png %}\n\nEureka 遵循的是 AP 原则（服务可用性和分区容错性），是服务治理最理想的遵循 CAP 分布式原则。\n\nEureka 集群中的节点是彼此平级，不像 Consul 有 master/worker 之分，集群中的 Eureka 节点彼此两两注册，所以，Eureka 集群最好部署三个节点，这也是我们目前的部署方式。\n\n另外，Eureka 的自我保护机制，可以参考这篇文章。\n\n服务之间的相互调用，负载有两种使用方式：\n- Feign：基于声明式，顾名思义，就是需要定义接口，就像我们平常使用对象调用一样。\n- Ribbon：软负载，通过往 RestTemplate 中注入负载 Handler，然后通过负载算法选取调用（通过 Eureka 获取服务注册信息）。\n我们目前打算使用 Ribbon 负载方式，为什么？看下面代码就知道了：\n\n```\nrestTemplate.getForObject(\"http://eureka-client/hello\", String.class);\n```\n\n# Config 配置中心\n\n{% asset_img 4.png %}\n\n我们目前配置中心使用的是 Spring Cloud Config，当然你也可以使用功能更强大的 Polly（携程开源），但 Config 目前也能满足我们的需求，存储仓库我们现在使用的是 Git。\n\nConfig 配置中心提供了数据加密功能，你可以使用 RSA 的加密方式，这样存储在 Git 中的配置都是密文形式，Config Client 获取加密配置的时候，Config Server 会自动进行解密返回。\n\n配置中心的使用场景，我们目前主要是两个地方：\n\n- 项目启动的配置信息，比如数据库的连接字符串等。\n- 业务服务的配置信息，也就是业务相关的配置。\n\n另外，需要说明的是，默认情况下，如果 Git 中的配置更新了，Config Client 不会进行更新配置，我们目前的解决方式是，使用 Spring Cloud Bus 进行动态刷新配置（Config Server 中配置），具体的流程：\n1. Git 中添加 WebHooks 脚本，比如curl -X POST http://manager1:8180/bus/refresh，当 Git 仓库中的配置更新后，自动执行。\n2. Config Server 中配置 Spring Cloud Bus，接受 Git 的配置刷新请求，然后利用 RabbitMQ 广播通知所有的 Config Client 订阅方，刷新配置信息。\n\n# Hystrix 监控\n\n{% asset_img 5.png %}\n\nHystrix 主要是用于服务熔断/降级/隔离处理，Hystrix 配置在调用方，当被调用方服务不可用时，触发 Hystrix 熔断，会执行指定的 Fallback 方法，进行特殊处理。\n\n我之前以为，Hystrix 熔断的触发条件是服务不可用，也就是服务请求超时（比如服务挂掉了），但我自己测试了下，服务出现 500 错误，也会触发 Hystrix 熔断，而且会自动忽略 Hystrix 的超时时间设置。\n\n我们目前使用 Hystrix，主要有两个地方：\n- 内部服务调用：可以对某个 API 接口进行熔断处理。\n- Zuul 网关使用：就是当 Zuul 路由转发调用时，但有个局限性，就是只能对服务进行熔断，并不能针对某个 API 接口熔断。\n\n上面图中，主要画的是 Hystrix 的监控流程，我们目前主要使用 RabbitMQ 进行采集传输，turbine-server 进行数据流的聚合，hystrix-dashboard 进行图形化的展示。\n\n# 服务调用链路\n\n{% asset_img 6.png %}\n\n服务调用链路的概念，就是当服务请求发起时，记录整个请求链路的数据，以备查询。\n\n目前市面上，几乎所有服务调用链路的实现，理论基础都是基于 Google Dapper 的那篇论文，其中最重要的概念就是 traceId 和 spanId。\ntraceId 记录整个服务链路的 ID，由首次请求方创建，服务链路中唯一。\nspanId 记录当前服务块的 ID，由当前服务方创建。\nparentId 记录上一个请求服务的 spanId。\n下面我描述下，我们目前的服务调用链路过程：\nH5 发起请求，到 Zuul 网关，Zuul 创建全局的 traceId 和自己的 spanId，然后携带这些数据到业务服务 A，并利用 Spring Cloud Sluth 传输到 RabbitMQ。\n业务服务 A，接收到 Zuul 传输的 traceId 和 spanId，然后把 Zuul 的 spanId 设置成 parentId，并生成自己的 spanId，然后携带这些数据到业务服务 B，并利用 Spring Cloud Sluth 传输到 RabbitMQ。\n....\n上面图中，详细说明了整个服务调用链路的过程，这边再说下使用的技术栈：\nSpring Cloud Sluth：和 SkyWalking 的探针概念比较类似，每个服务都进行配置，收集当然服务的请求数据（traceId 和 spanId），然后利用stream-sluth和binder-rabbit组件，将请求数据传输到 RabbitMQ。\nSpring Cloud Zipkin：主要用于请求链路的 UI 展示，Zipkin 会从 RabbitMQ 读取请求数据，然后存储到 ElasticSearch 中，然后下次显示直接从 ElasticSearch 中读取。\nKibana：Kibana 也可以显示 ElasticSearch 中的请求数据，只不过不是图形化的，需要索引配置创建。\n\n# ELK 日志链路\n\n{% asset_img 7.png  %}\n\nELK 可以参考下之前的几篇文章：\nELK 架构之 Elasticsearch 和 Kibana 安装配置\nELK 架构之 Logstash 和 Filebeat 安装配置\nELK 架构之 Logstash 和 Filebeat 配置使用（采集过滤）\nELK 架构之 Elasticsearch、Kibana、Logstash 和 Filebeat 安装配置汇总（6.2.4 版本）\n上面图中已经很详细介绍了下 ELK 的流程，ELK 默认技术栈里是没有 Filebeat 的，Logstash 用作日志收集的时候，CPU 和内存会占用资源比较大，所以我们使用轻量化的 Filebeat 进行日志的收集，Filebeat 部署在每个业务服务所在的服务器，然后将收集到的日志数据传输到 Logstash，Logstash 可以部署两到三台服务器上，用作日志的过滤和分析工作，然后再将处理后的日志数据，传输到 ElasticSearch 存储。\n\n# 统一格式返回\n\n{% asset_img 8.png %}\n\n","source":"_posts/spring/spring-cloud-learning.md","raw":"---\ntitle: Spring Cloud 微服务架构全链路实践\ntags:\n  - Spring\n  - Java\nindex_img: /img/spring-cloud.jpeg\nabbrlink: 1879991184\ndate: 2016-08-16 00:04:12\n---\n\nJava 微服务框架选型（Dubbo 和 Spring Cloud）\n\n{% asset_img 1.png %}\n\n目前公司使用的 Spring Cloud 整个技术组件，基本包含了上面图中所包含的，不得不说，Spring Cloud 整个生态真的很强大，使用起来也很方便有效。\n\n后面有时间再针对每个组件进行使用解读，这篇文章主要说下 Spring Cloud 架构的链路图，顺便把自己的思路整理下来，以备查阅。\n\n{% asset_img 2.png %}\n\n# 网关请求流程\n\n在 Spring Cloud 整个组件库中，Spring Cloud Zuul 是最容易被忽视，但也是最重要的，Spring Cloud Zuul 可以和 Eureka 注册中心集成，我们目前使用 Spring Cloud Zuul 的功能如下：\n- Filter 过滤器\n- Router 路由\n- Ribbon 负载均衡\n- Hystrix 熔断\n- Retry 重试\n有些功能是 Spring Cloud Zuul 自带的，比如 Filter 和 Router，有些是结合 Spring Cloud 其他组件，比如 Ribbon 和 Hystrix。\n\n这里重点介绍下 Filter 过滤器，分为四个过滤类型：\n- pre：Zuul 转发请求之前执行，我们目前的实现是AccessTokenFilter，用于 oAuth2.0 JWT 的授权验证。\n- route：Zuul 路由时执行，目前项目没用到。\n- post：Zuul 路由转发后执行，也就是已经请求成功了后端服务，我们目前的实现是CustomResponseFilter，用于统一请求格式的封装，比如 code/msg/data 等。\n- error：以上过滤器发生错误时执行，我们目前的实现是CustomErrorFilter，用于拦截过滤器执行的出现的错误，然后统一格式封装返回，另外，error 过滤器好像并不能捕获后端服务执行出现的错误。\n\n另外，关于 oAuth2.0 JWT 的授权验证，实现的方式有两种：\n- 授权的配置在后端服务中（每个服务都需要当作 Resource Server 进行配置，需要配置公钥，接口的授权具体配置在注解中），Zuul 只做转发，并不进行授权的验证。\n- 授权的配置在 Zuul 中，也就是把 Zuul 当作 Resource Server，后端服务不需要进行任何处理，Zuul 中具体的实现就是AccessTokenFilter，里面的逻辑是手动解析 JWT，然后判断是否正确，以及解析出用户信息/Scope/Role，然后根据当前的请求 API，对授权 Map 中的配置进行匹配，如果匹配错误，直接抛出 401 授权错误。\n我们目前采用的是第二种方式，这两种方式都有利有弊，关键在于自己的取舍，为什么采用第二种方式？目的就是发挥 Zuul 的作用，对外网关进行统一授权验证。\n\n关于授权 Map，里面存储了所有服务接口的配置，示例配置：\n```\nprivate static final Map ROUTE_MAPS;\nstatic {\n    ROUTE_MAPS = new HashMap();\n    ROUTE_MAPS.put(\"eureka-client/home\", \"read:ROLE_ADMIN\");\n    ROUTE_MAPS.put(\"eureka-client/user\", \"read:ROLE_ADMIN\");\n    ROUTE_MAPS.put(\"eureka-client/error\", \"read:ROLE_ADMIN\");\n}\n```\n\n\n这是我们目前的配置，是一个静态的 Map，后面会存储在 Spring Cloud Config 配置中心，Zuul 启动时进行加载，利用 Spring Cloud Bus 动态刷新。\n\n关于 Zuul 网关，其实还有很多需要说的，后面有机会再进行针对说明。\n\n# Eureka 服务治理\n\n{% asset_img 3.png %}\n\nEureka 遵循的是 AP 原则（服务可用性和分区容错性），是服务治理最理想的遵循 CAP 分布式原则。\n\nEureka 集群中的节点是彼此平级，不像 Consul 有 master/worker 之分，集群中的 Eureka 节点彼此两两注册，所以，Eureka 集群最好部署三个节点，这也是我们目前的部署方式。\n\n另外，Eureka 的自我保护机制，可以参考这篇文章。\n\n服务之间的相互调用，负载有两种使用方式：\n- Feign：基于声明式，顾名思义，就是需要定义接口，就像我们平常使用对象调用一样。\n- Ribbon：软负载，通过往 RestTemplate 中注入负载 Handler，然后通过负载算法选取调用（通过 Eureka 获取服务注册信息）。\n我们目前打算使用 Ribbon 负载方式，为什么？看下面代码就知道了：\n\n```\nrestTemplate.getForObject(\"http://eureka-client/hello\", String.class);\n```\n\n# Config 配置中心\n\n{% asset_img 4.png %}\n\n我们目前配置中心使用的是 Spring Cloud Config，当然你也可以使用功能更强大的 Polly（携程开源），但 Config 目前也能满足我们的需求，存储仓库我们现在使用的是 Git。\n\nConfig 配置中心提供了数据加密功能，你可以使用 RSA 的加密方式，这样存储在 Git 中的配置都是密文形式，Config Client 获取加密配置的时候，Config Server 会自动进行解密返回。\n\n配置中心的使用场景，我们目前主要是两个地方：\n\n- 项目启动的配置信息，比如数据库的连接字符串等。\n- 业务服务的配置信息，也就是业务相关的配置。\n\n另外，需要说明的是，默认情况下，如果 Git 中的配置更新了，Config Client 不会进行更新配置，我们目前的解决方式是，使用 Spring Cloud Bus 进行动态刷新配置（Config Server 中配置），具体的流程：\n1. Git 中添加 WebHooks 脚本，比如curl -X POST http://manager1:8180/bus/refresh，当 Git 仓库中的配置更新后，自动执行。\n2. Config Server 中配置 Spring Cloud Bus，接受 Git 的配置刷新请求，然后利用 RabbitMQ 广播通知所有的 Config Client 订阅方，刷新配置信息。\n\n# Hystrix 监控\n\n{% asset_img 5.png %}\n\nHystrix 主要是用于服务熔断/降级/隔离处理，Hystrix 配置在调用方，当被调用方服务不可用时，触发 Hystrix 熔断，会执行指定的 Fallback 方法，进行特殊处理。\n\n我之前以为，Hystrix 熔断的触发条件是服务不可用，也就是服务请求超时（比如服务挂掉了），但我自己测试了下，服务出现 500 错误，也会触发 Hystrix 熔断，而且会自动忽略 Hystrix 的超时时间设置。\n\n我们目前使用 Hystrix，主要有两个地方：\n- 内部服务调用：可以对某个 API 接口进行熔断处理。\n- Zuul 网关使用：就是当 Zuul 路由转发调用时，但有个局限性，就是只能对服务进行熔断，并不能针对某个 API 接口熔断。\n\n上面图中，主要画的是 Hystrix 的监控流程，我们目前主要使用 RabbitMQ 进行采集传输，turbine-server 进行数据流的聚合，hystrix-dashboard 进行图形化的展示。\n\n# 服务调用链路\n\n{% asset_img 6.png %}\n\n服务调用链路的概念，就是当服务请求发起时，记录整个请求链路的数据，以备查询。\n\n目前市面上，几乎所有服务调用链路的实现，理论基础都是基于 Google Dapper 的那篇论文，其中最重要的概念就是 traceId 和 spanId。\ntraceId 记录整个服务链路的 ID，由首次请求方创建，服务链路中唯一。\nspanId 记录当前服务块的 ID，由当前服务方创建。\nparentId 记录上一个请求服务的 spanId。\n下面我描述下，我们目前的服务调用链路过程：\nH5 发起请求，到 Zuul 网关，Zuul 创建全局的 traceId 和自己的 spanId，然后携带这些数据到业务服务 A，并利用 Spring Cloud Sluth 传输到 RabbitMQ。\n业务服务 A，接收到 Zuul 传输的 traceId 和 spanId，然后把 Zuul 的 spanId 设置成 parentId，并生成自己的 spanId，然后携带这些数据到业务服务 B，并利用 Spring Cloud Sluth 传输到 RabbitMQ。\n....\n上面图中，详细说明了整个服务调用链路的过程，这边再说下使用的技术栈：\nSpring Cloud Sluth：和 SkyWalking 的探针概念比较类似，每个服务都进行配置，收集当然服务的请求数据（traceId 和 spanId），然后利用stream-sluth和binder-rabbit组件，将请求数据传输到 RabbitMQ。\nSpring Cloud Zipkin：主要用于请求链路的 UI 展示，Zipkin 会从 RabbitMQ 读取请求数据，然后存储到 ElasticSearch 中，然后下次显示直接从 ElasticSearch 中读取。\nKibana：Kibana 也可以显示 ElasticSearch 中的请求数据，只不过不是图形化的，需要索引配置创建。\n\n# ELK 日志链路\n\n{% asset_img 7.png  %}\n\nELK 可以参考下之前的几篇文章：\nELK 架构之 Elasticsearch 和 Kibana 安装配置\nELK 架构之 Logstash 和 Filebeat 安装配置\nELK 架构之 Logstash 和 Filebeat 配置使用（采集过滤）\nELK 架构之 Elasticsearch、Kibana、Logstash 和 Filebeat 安装配置汇总（6.2.4 版本）\n上面图中已经很详细介绍了下 ELK 的流程，ELK 默认技术栈里是没有 Filebeat 的，Logstash 用作日志收集的时候，CPU 和内存会占用资源比较大，所以我们使用轻量化的 Filebeat 进行日志的收集，Filebeat 部署在每个业务服务所在的服务器，然后将收集到的日志数据传输到 Logstash，Logstash 可以部署两到三台服务器上，用作日志的过滤和分析工作，然后再将处理后的日志数据，传输到 ElasticSearch 存储。\n\n# 统一格式返回\n\n{% asset_img 8.png %}\n\n","slug":"spring/spring-cloud-learning","published":1,"updated":"2020-04-18T11:38:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiouwp140017jcxc6b942nsg","content":"<p>Java 微服务框架选型（Dubbo 和 Spring Cloud）</p>\n\n\n<p>目前公司使用的 Spring Cloud 整个技术组件，基本包含了上面图中所包含的，不得不说，Spring Cloud 整个生态真的很强大，使用起来也很方便有效。</p>\n<p>后面有时间再针对每个组件进行使用解读，这篇文章主要说下 Spring Cloud 架构的链路图，顺便把自己的思路整理下来，以备查阅。</p>\n\n\n<h1 id=\"网关请求流程\"><a href=\"#网关请求流程\" class=\"headerlink\" title=\"网关请求流程\"></a>网关请求流程</h1><p>在 Spring Cloud 整个组件库中，Spring Cloud Zuul 是最容易被忽视，但也是最重要的，Spring Cloud Zuul 可以和 Eureka 注册中心集成，我们目前使用 Spring Cloud Zuul 的功能如下：</p>\n<ul>\n<li>Filter 过滤器</li>\n<li>Router 路由</li>\n<li>Ribbon 负载均衡</li>\n<li>Hystrix 熔断</li>\n<li>Retry 重试<br>有些功能是 Spring Cloud Zuul 自带的，比如 Filter 和 Router，有些是结合 Spring Cloud 其他组件，比如 Ribbon 和 Hystrix。</li>\n</ul>\n<p>这里重点介绍下 Filter 过滤器，分为四个过滤类型：</p>\n<ul>\n<li>pre：Zuul 转发请求之前执行，我们目前的实现是AccessTokenFilter，用于 oAuth2.0 JWT 的授权验证。</li>\n<li>route：Zuul 路由时执行，目前项目没用到。</li>\n<li>post：Zuul 路由转发后执行，也就是已经请求成功了后端服务，我们目前的实现是CustomResponseFilter，用于统一请求格式的封装，比如 code/msg/data 等。</li>\n<li>error：以上过滤器发生错误时执行，我们目前的实现是CustomErrorFilter，用于拦截过滤器执行的出现的错误，然后统一格式封装返回，另外，error 过滤器好像并不能捕获后端服务执行出现的错误。</li>\n</ul>\n<p>另外，关于 oAuth2.0 JWT 的授权验证，实现的方式有两种：</p>\n<ul>\n<li>授权的配置在后端服务中（每个服务都需要当作 Resource Server 进行配置，需要配置公钥，接口的授权具体配置在注解中），Zuul 只做转发，并不进行授权的验证。</li>\n<li>授权的配置在 Zuul 中，也就是把 Zuul 当作 Resource Server，后端服务不需要进行任何处理，Zuul 中具体的实现就是AccessTokenFilter，里面的逻辑是手动解析 JWT，然后判断是否正确，以及解析出用户信息/Scope/Role，然后根据当前的请求 API，对授权 Map 中的配置进行匹配，如果匹配错误，直接抛出 401 授权错误。<br>我们目前采用的是第二种方式，这两种方式都有利有弊，关键在于自己的取舍，为什么采用第二种方式？目的就是发挥 Zuul 的作用，对外网关进行统一授权验证。</li>\n</ul>\n<p>关于授权 Map，里面存储了所有服务接口的配置，示例配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final Map ROUTE_MAPS;</span><br><span class=\"line\">static &#123;</span><br><span class=\"line\">    ROUTE_MAPS &#x3D; new HashMap();</span><br><span class=\"line\">    ROUTE_MAPS.put(&quot;eureka-client&#x2F;home&quot;, &quot;read:ROLE_ADMIN&quot;);</span><br><span class=\"line\">    ROUTE_MAPS.put(&quot;eureka-client&#x2F;user&quot;, &quot;read:ROLE_ADMIN&quot;);</span><br><span class=\"line\">    ROUTE_MAPS.put(&quot;eureka-client&#x2F;error&quot;, &quot;read:ROLE_ADMIN&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>这是我们目前的配置，是一个静态的 Map，后面会存储在 Spring Cloud Config 配置中心，Zuul 启动时进行加载，利用 Spring Cloud Bus 动态刷新。</p>\n<p>关于 Zuul 网关，其实还有很多需要说的，后面有机会再进行针对说明。</p>\n<h1 id=\"Eureka-服务治理\"><a href=\"#Eureka-服务治理\" class=\"headerlink\" title=\"Eureka 服务治理\"></a>Eureka 服务治理</h1>\n\n<p>Eureka 遵循的是 AP 原则（服务可用性和分区容错性），是服务治理最理想的遵循 CAP 分布式原则。</p>\n<p>Eureka 集群中的节点是彼此平级，不像 Consul 有 master/worker 之分，集群中的 Eureka 节点彼此两两注册，所以，Eureka 集群最好部署三个节点，这也是我们目前的部署方式。</p>\n<p>另外，Eureka 的自我保护机制，可以参考这篇文章。</p>\n<p>服务之间的相互调用，负载有两种使用方式：</p>\n<ul>\n<li>Feign：基于声明式，顾名思义，就是需要定义接口，就像我们平常使用对象调用一样。</li>\n<li>Ribbon：软负载，通过往 RestTemplate 中注入负载 Handler，然后通过负载算法选取调用（通过 Eureka 获取服务注册信息）。<br>我们目前打算使用 Ribbon 负载方式，为什么？看下面代码就知道了：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restTemplate.getForObject(&quot;http:&#x2F;&#x2F;eureka-client&#x2F;hello&quot;, String.class);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Config-配置中心\"><a href=\"#Config-配置中心\" class=\"headerlink\" title=\"Config 配置中心\"></a>Config 配置中心</h1>\n\n<p>我们目前配置中心使用的是 Spring Cloud Config，当然你也可以使用功能更强大的 Polly（携程开源），但 Config 目前也能满足我们的需求，存储仓库我们现在使用的是 Git。</p>\n<p>Config 配置中心提供了数据加密功能，你可以使用 RSA 的加密方式，这样存储在 Git 中的配置都是密文形式，Config Client 获取加密配置的时候，Config Server 会自动进行解密返回。</p>\n<p>配置中心的使用场景，我们目前主要是两个地方：</p>\n<ul>\n<li>项目启动的配置信息，比如数据库的连接字符串等。</li>\n<li>业务服务的配置信息，也就是业务相关的配置。</li>\n</ul>\n<p>另外，需要说明的是，默认情况下，如果 Git 中的配置更新了，Config Client 不会进行更新配置，我们目前的解决方式是，使用 Spring Cloud Bus 进行动态刷新配置（Config Server 中配置），具体的流程：</p>\n<ol>\n<li>Git 中添加 WebHooks 脚本，比如curl -X POST <a href=\"http://manager1:8180/bus/refresh，当\" target=\"_blank\" rel=\"noopener\">http://manager1:8180/bus/refresh，当</a> Git 仓库中的配置更新后，自动执行。</li>\n<li>Config Server 中配置 Spring Cloud Bus，接受 Git 的配置刷新请求，然后利用 RabbitMQ 广播通知所有的 Config Client 订阅方，刷新配置信息。</li>\n</ol>\n<h1 id=\"Hystrix-监控\"><a href=\"#Hystrix-监控\" class=\"headerlink\" title=\"Hystrix 监控\"></a>Hystrix 监控</h1>\n\n<p>Hystrix 主要是用于服务熔断/降级/隔离处理，Hystrix 配置在调用方，当被调用方服务不可用时，触发 Hystrix 熔断，会执行指定的 Fallback 方法，进行特殊处理。</p>\n<p>我之前以为，Hystrix 熔断的触发条件是服务不可用，也就是服务请求超时（比如服务挂掉了），但我自己测试了下，服务出现 500 错误，也会触发 Hystrix 熔断，而且会自动忽略 Hystrix 的超时时间设置。</p>\n<p>我们目前使用 Hystrix，主要有两个地方：</p>\n<ul>\n<li>内部服务调用：可以对某个 API 接口进行熔断处理。</li>\n<li>Zuul 网关使用：就是当 Zuul 路由转发调用时，但有个局限性，就是只能对服务进行熔断，并不能针对某个 API 接口熔断。</li>\n</ul>\n<p>上面图中，主要画的是 Hystrix 的监控流程，我们目前主要使用 RabbitMQ 进行采集传输，turbine-server 进行数据流的聚合，hystrix-dashboard 进行图形化的展示。</p>\n<h1 id=\"服务调用链路\"><a href=\"#服务调用链路\" class=\"headerlink\" title=\"服务调用链路\"></a>服务调用链路</h1>\n\n<p>服务调用链路的概念，就是当服务请求发起时，记录整个请求链路的数据，以备查询。</p>\n<p>目前市面上，几乎所有服务调用链路的实现，理论基础都是基于 Google Dapper 的那篇论文，其中最重要的概念就是 traceId 和 spanId。<br>traceId 记录整个服务链路的 ID，由首次请求方创建，服务链路中唯一。<br>spanId 记录当前服务块的 ID，由当前服务方创建。<br>parentId 记录上一个请求服务的 spanId。<br>下面我描述下，我们目前的服务调用链路过程：<br>H5 发起请求，到 Zuul 网关，Zuul 创建全局的 traceId 和自己的 spanId，然后携带这些数据到业务服务 A，并利用 Spring Cloud Sluth 传输到 RabbitMQ。<br>业务服务 A，接收到 Zuul 传输的 traceId 和 spanId，然后把 Zuul 的 spanId 设置成 parentId，并生成自己的 spanId，然后携带这些数据到业务服务 B，并利用 Spring Cloud Sluth 传输到 RabbitMQ。<br>….<br>上面图中，详细说明了整个服务调用链路的过程，这边再说下使用的技术栈：<br>Spring Cloud Sluth：和 SkyWalking 的探针概念比较类似，每个服务都进行配置，收集当然服务的请求数据（traceId 和 spanId），然后利用stream-sluth和binder-rabbit组件，将请求数据传输到 RabbitMQ。<br>Spring Cloud Zipkin：主要用于请求链路的 UI 展示，Zipkin 会从 RabbitMQ 读取请求数据，然后存储到 ElasticSearch 中，然后下次显示直接从 ElasticSearch 中读取。<br>Kibana：Kibana 也可以显示 ElasticSearch 中的请求数据，只不过不是图形化的，需要索引配置创建。</p>\n<h1 id=\"ELK-日志链路\"><a href=\"#ELK-日志链路\" class=\"headerlink\" title=\"ELK 日志链路\"></a>ELK 日志链路</h1>\n\n<p>ELK 可以参考下之前的几篇文章：<br>ELK 架构之 Elasticsearch 和 Kibana 安装配置<br>ELK 架构之 Logstash 和 Filebeat 安装配置<br>ELK 架构之 Logstash 和 Filebeat 配置使用（采集过滤）<br>ELK 架构之 Elasticsearch、Kibana、Logstash 和 Filebeat 安装配置汇总（6.2.4 版本）<br>上面图中已经很详细介绍了下 ELK 的流程，ELK 默认技术栈里是没有 Filebeat 的，Logstash 用作日志收集的时候，CPU 和内存会占用资源比较大，所以我们使用轻量化的 Filebeat 进行日志的收集，Filebeat 部署在每个业务服务所在的服务器，然后将收集到的日志数据传输到 Logstash，Logstash 可以部署两到三台服务器上，用作日志的过滤和分析工作，然后再将处理后的日志数据，传输到 ElasticSearch 存储。</p>\n<h1 id=\"统一格式返回\"><a href=\"#统一格式返回\" class=\"headerlink\" title=\"统一格式返回\"></a>统一格式返回</h1>\n\n","site":{"data":{"next":{"language":"zh-Hans","duoshuo":{"enable":true,"shortname":"your-duoshuo-shortname"},"menu":{"home":"/","archives":"/archives","categories":"/categories"}},"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>Java 微服务框架选型（Dubbo 和 Spring Cloud）</p>\n\n\n<p>目前公司使用的 Spring Cloud 整个技术组件，基本包含了上面图中所包含的，不得不说，Spring Cloud 整个生态真的很强大，使用起来也很方便有效。</p>\n<p>后面有时间再针对每个组件进行使用解读，这篇文章主要说下 Spring Cloud 架构的链路图，顺便把自己的思路整理下来，以备查阅。</p>\n\n\n<h1 id=\"网关请求流程\"><a href=\"#网关请求流程\" class=\"headerlink\" title=\"网关请求流程\"></a>网关请求流程</h1><p>在 Spring Cloud 整个组件库中，Spring Cloud Zuul 是最容易被忽视，但也是最重要的，Spring Cloud Zuul 可以和 Eureka 注册中心集成，我们目前使用 Spring Cloud Zuul 的功能如下：</p>\n<ul>\n<li>Filter 过滤器</li>\n<li>Router 路由</li>\n<li>Ribbon 负载均衡</li>\n<li>Hystrix 熔断</li>\n<li>Retry 重试<br>有些功能是 Spring Cloud Zuul 自带的，比如 Filter 和 Router，有些是结合 Spring Cloud 其他组件，比如 Ribbon 和 Hystrix。</li>\n</ul>\n<p>这里重点介绍下 Filter 过滤器，分为四个过滤类型：</p>\n<ul>\n<li>pre：Zuul 转发请求之前执行，我们目前的实现是AccessTokenFilter，用于 oAuth2.0 JWT 的授权验证。</li>\n<li>route：Zuul 路由时执行，目前项目没用到。</li>\n<li>post：Zuul 路由转发后执行，也就是已经请求成功了后端服务，我们目前的实现是CustomResponseFilter，用于统一请求格式的封装，比如 code/msg/data 等。</li>\n<li>error：以上过滤器发生错误时执行，我们目前的实现是CustomErrorFilter，用于拦截过滤器执行的出现的错误，然后统一格式封装返回，另外，error 过滤器好像并不能捕获后端服务执行出现的错误。</li>\n</ul>\n<p>另外，关于 oAuth2.0 JWT 的授权验证，实现的方式有两种：</p>\n<ul>\n<li>授权的配置在后端服务中（每个服务都需要当作 Resource Server 进行配置，需要配置公钥，接口的授权具体配置在注解中），Zuul 只做转发，并不进行授权的验证。</li>\n<li>授权的配置在 Zuul 中，也就是把 Zuul 当作 Resource Server，后端服务不需要进行任何处理，Zuul 中具体的实现就是AccessTokenFilter，里面的逻辑是手动解析 JWT，然后判断是否正确，以及解析出用户信息/Scope/Role，然后根据当前的请求 API，对授权 Map 中的配置进行匹配，如果匹配错误，直接抛出 401 授权错误。<br>我们目前采用的是第二种方式，这两种方式都有利有弊，关键在于自己的取舍，为什么采用第二种方式？目的就是发挥 Zuul 的作用，对外网关进行统一授权验证。</li>\n</ul>\n<p>关于授权 Map，里面存储了所有服务接口的配置，示例配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final Map ROUTE_MAPS;</span><br><span class=\"line\">static &#123;</span><br><span class=\"line\">    ROUTE_MAPS &#x3D; new HashMap();</span><br><span class=\"line\">    ROUTE_MAPS.put(&quot;eureka-client&#x2F;home&quot;, &quot;read:ROLE_ADMIN&quot;);</span><br><span class=\"line\">    ROUTE_MAPS.put(&quot;eureka-client&#x2F;user&quot;, &quot;read:ROLE_ADMIN&quot;);</span><br><span class=\"line\">    ROUTE_MAPS.put(&quot;eureka-client&#x2F;error&quot;, &quot;read:ROLE_ADMIN&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>这是我们目前的配置，是一个静态的 Map，后面会存储在 Spring Cloud Config 配置中心，Zuul 启动时进行加载，利用 Spring Cloud Bus 动态刷新。</p>\n<p>关于 Zuul 网关，其实还有很多需要说的，后面有机会再进行针对说明。</p>\n<h1 id=\"Eureka-服务治理\"><a href=\"#Eureka-服务治理\" class=\"headerlink\" title=\"Eureka 服务治理\"></a>Eureka 服务治理</h1>\n\n<p>Eureka 遵循的是 AP 原则（服务可用性和分区容错性），是服务治理最理想的遵循 CAP 分布式原则。</p>\n<p>Eureka 集群中的节点是彼此平级，不像 Consul 有 master/worker 之分，集群中的 Eureka 节点彼此两两注册，所以，Eureka 集群最好部署三个节点，这也是我们目前的部署方式。</p>\n<p>另外，Eureka 的自我保护机制，可以参考这篇文章。</p>\n<p>服务之间的相互调用，负载有两种使用方式：</p>\n<ul>\n<li>Feign：基于声明式，顾名思义，就是需要定义接口，就像我们平常使用对象调用一样。</li>\n<li>Ribbon：软负载，通过往 RestTemplate 中注入负载 Handler，然后通过负载算法选取调用（通过 Eureka 获取服务注册信息）。<br>我们目前打算使用 Ribbon 负载方式，为什么？看下面代码就知道了：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restTemplate.getForObject(&quot;http:&#x2F;&#x2F;eureka-client&#x2F;hello&quot;, String.class);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Config-配置中心\"><a href=\"#Config-配置中心\" class=\"headerlink\" title=\"Config 配置中心\"></a>Config 配置中心</h1>\n\n<p>我们目前配置中心使用的是 Spring Cloud Config，当然你也可以使用功能更强大的 Polly（携程开源），但 Config 目前也能满足我们的需求，存储仓库我们现在使用的是 Git。</p>\n<p>Config 配置中心提供了数据加密功能，你可以使用 RSA 的加密方式，这样存储在 Git 中的配置都是密文形式，Config Client 获取加密配置的时候，Config Server 会自动进行解密返回。</p>\n<p>配置中心的使用场景，我们目前主要是两个地方：</p>\n<ul>\n<li>项目启动的配置信息，比如数据库的连接字符串等。</li>\n<li>业务服务的配置信息，也就是业务相关的配置。</li>\n</ul>\n<p>另外，需要说明的是，默认情况下，如果 Git 中的配置更新了，Config Client 不会进行更新配置，我们目前的解决方式是，使用 Spring Cloud Bus 进行动态刷新配置（Config Server 中配置），具体的流程：</p>\n<ol>\n<li>Git 中添加 WebHooks 脚本，比如curl -X POST <a href=\"http://manager1:8180/bus/refresh，当\" target=\"_blank\" rel=\"noopener\">http://manager1:8180/bus/refresh，当</a> Git 仓库中的配置更新后，自动执行。</li>\n<li>Config Server 中配置 Spring Cloud Bus，接受 Git 的配置刷新请求，然后利用 RabbitMQ 广播通知所有的 Config Client 订阅方，刷新配置信息。</li>\n</ol>\n<h1 id=\"Hystrix-监控\"><a href=\"#Hystrix-监控\" class=\"headerlink\" title=\"Hystrix 监控\"></a>Hystrix 监控</h1>\n\n<p>Hystrix 主要是用于服务熔断/降级/隔离处理，Hystrix 配置在调用方，当被调用方服务不可用时，触发 Hystrix 熔断，会执行指定的 Fallback 方法，进行特殊处理。</p>\n<p>我之前以为，Hystrix 熔断的触发条件是服务不可用，也就是服务请求超时（比如服务挂掉了），但我自己测试了下，服务出现 500 错误，也会触发 Hystrix 熔断，而且会自动忽略 Hystrix 的超时时间设置。</p>\n<p>我们目前使用 Hystrix，主要有两个地方：</p>\n<ul>\n<li>内部服务调用：可以对某个 API 接口进行熔断处理。</li>\n<li>Zuul 网关使用：就是当 Zuul 路由转发调用时，但有个局限性，就是只能对服务进行熔断，并不能针对某个 API 接口熔断。</li>\n</ul>\n<p>上面图中，主要画的是 Hystrix 的监控流程，我们目前主要使用 RabbitMQ 进行采集传输，turbine-server 进行数据流的聚合，hystrix-dashboard 进行图形化的展示。</p>\n<h1 id=\"服务调用链路\"><a href=\"#服务调用链路\" class=\"headerlink\" title=\"服务调用链路\"></a>服务调用链路</h1>\n\n<p>服务调用链路的概念，就是当服务请求发起时，记录整个请求链路的数据，以备查询。</p>\n<p>目前市面上，几乎所有服务调用链路的实现，理论基础都是基于 Google Dapper 的那篇论文，其中最重要的概念就是 traceId 和 spanId。<br>traceId 记录整个服务链路的 ID，由首次请求方创建，服务链路中唯一。<br>spanId 记录当前服务块的 ID，由当前服务方创建。<br>parentId 记录上一个请求服务的 spanId。<br>下面我描述下，我们目前的服务调用链路过程：<br>H5 发起请求，到 Zuul 网关，Zuul 创建全局的 traceId 和自己的 spanId，然后携带这些数据到业务服务 A，并利用 Spring Cloud Sluth 传输到 RabbitMQ。<br>业务服务 A，接收到 Zuul 传输的 traceId 和 spanId，然后把 Zuul 的 spanId 设置成 parentId，并生成自己的 spanId，然后携带这些数据到业务服务 B，并利用 Spring Cloud Sluth 传输到 RabbitMQ。<br>….<br>上面图中，详细说明了整个服务调用链路的过程，这边再说下使用的技术栈：<br>Spring Cloud Sluth：和 SkyWalking 的探针概念比较类似，每个服务都进行配置，收集当然服务的请求数据（traceId 和 spanId），然后利用stream-sluth和binder-rabbit组件，将请求数据传输到 RabbitMQ。<br>Spring Cloud Zipkin：主要用于请求链路的 UI 展示，Zipkin 会从 RabbitMQ 读取请求数据，然后存储到 ElasticSearch 中，然后下次显示直接从 ElasticSearch 中读取。<br>Kibana：Kibana 也可以显示 ElasticSearch 中的请求数据，只不过不是图形化的，需要索引配置创建。</p>\n<h1 id=\"ELK-日志链路\"><a href=\"#ELK-日志链路\" class=\"headerlink\" title=\"ELK 日志链路\"></a>ELK 日志链路</h1>\n\n<p>ELK 可以参考下之前的几篇文章：<br>ELK 架构之 Elasticsearch 和 Kibana 安装配置<br>ELK 架构之 Logstash 和 Filebeat 安装配置<br>ELK 架构之 Logstash 和 Filebeat 配置使用（采集过滤）<br>ELK 架构之 Elasticsearch、Kibana、Logstash 和 Filebeat 安装配置汇总（6.2.4 版本）<br>上面图中已经很详细介绍了下 ELK 的流程，ELK 默认技术栈里是没有 Filebeat 的，Logstash 用作日志收集的时候，CPU 和内存会占用资源比较大，所以我们使用轻量化的 Filebeat 进行日志的收集，Filebeat 部署在每个业务服务所在的服务器，然后将收集到的日志数据传输到 Logstash，Logstash 可以部署两到三台服务器上，用作日志的过滤和分析工作，然后再将处理后的日志数据，传输到 ElasticSearch 存储。</p>\n<h1 id=\"统一格式返回\"><a href=\"#统一格式返回\" class=\"headerlink\" title=\"统一格式返回\"></a>统一格式返回</h1>\n\n"}],"PostAsset":[{"_id":"source/_posts/data-structure-overview/hashtable.jpg","post":"ckiouwoz0000ajcxc91m4drqs","slug":"hashtable.jpg","modified":1,"renderable":1},{"_id":"source/_posts/data-structure-overview/heap.jpg","post":"ckiouwoz0000ajcxc91m4drqs","slug":"heap.jpg","modified":1,"renderable":1},{"_id":"source/_posts/data-structure-overview/linkedlist.jpg","post":"ckiouwoz0000ajcxc91m4drqs","slug":"linkedlist.jpg","modified":1,"renderable":1},{"_id":"source/_posts/data-structure-overview/overview.png","post":"ckiouwoz0000ajcxc91m4drqs","slug":"overview.png","modified":1,"renderable":1},{"_id":"source/_posts/data-structure-overview/queue.png","post":"ckiouwoz0000ajcxc91m4drqs","slug":"queue.png","modified":1,"renderable":1},{"_id":"source/_posts/data-structure-overview/stack.png","post":"ckiouwoz0000ajcxc91m4drqs","slug":"stack.png","modified":1,"renderable":1},{"_id":"source/_posts/data-structure-overview/tree.png","slug":"tree.png","post":"ckiouwoz0000ajcxc91m4drqs","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckiouwoz0000ajcxc91m4drqs","tag_id":"ckiouwoyt0004jcxcc7mqgmc1","_id":"ckiouwoz4000djcxc3x0kd731"},{"post_id":"ckiouwoz0000ajcxc91m4drqs","tag_id":"ckiouwoyy0009jcxc7egegpvd","_id":"ckiouwoz4000ejcxc7tmtghqc"},{"post_id":"ckiouwoyl0000jcxc78egcyka","tag_id":"ckiouwoyt0004jcxcc7mqgmc1","_id":"ckiouwoz5000gjcxc1rzt9dcc"},{"post_id":"ckiouwoyl0000jcxc78egcyka","tag_id":"ckiouwoyy0009jcxc7egegpvd","_id":"ckiouwoz5000hjcxccvxcepun"},{"post_id":"ckiouwoyq0002jcxca1h99a4f","tag_id":"ckiouwoyt0004jcxcc7mqgmc1","_id":"ckiouwoz5000jjcxc0law00bq"},{"post_id":"ckiouwoyt0005jcxcfivtb9f8","tag_id":"ckiouwoz4000fjcxcfaq43r39","_id":"ckiouwoz6000ljcxc57yc8ot6"},{"post_id":"ckiouwoyt0005jcxcfivtb9f8","tag_id":"ckiouwoz5000ijcxc9a2p2ee0","_id":"ckiouwoz6000mjcxceq0ne9ar"},{"post_id":"ckiouwoyw0007jcxc1meidi3m","tag_id":"ckiouwoz6000kjcxc0olka9ng","_id":"ckiouwoz6000ojcxc8aac8s50"},{"post_id":"ckiouwoz1000bjcxcfncbc2bz","tag_id":"ckiouwoz6000njcxce88khjz1","_id":"ckiouwoz8000sjcxc9w804fl3"},{"post_id":"ckiouwoz1000bjcxcfncbc2bz","tag_id":"ckiouwoz7000pjcxcf7jcey6u","_id":"ckiouwoz8000tjcxcgp7ganxt"},{"post_id":"ckiouwoz1000bjcxcfncbc2bz","tag_id":"ckiouwoz7000qjcxc1ou3a5u2","_id":"ckiouwoz8000ujcxc24b26hz9"},{"post_id":"ckiouwoz1000bjcxcfncbc2bz","tag_id":"ckiouwoz8000rjcxc7s1m8ra6","_id":"ckiouwoz8000vjcxc73hc0q6y"},{"post_id":"ckiouwp120013jcxcehregd49","tag_id":"ckiouwoz5000ijcxc9a2p2ee0","_id":"ckiouwp130016jcxc30f0bp7m"},{"post_id":"ckiouwp0z000wjcxcdrcw5g94","tag_id":"ckiouwp10000yjcxcfeyo3w34","_id":"ckiouwp140018jcxc4w4867yn"},{"post_id":"ckiouwp0z000wjcxcdrcw5g94","tag_id":"ckiouwp120012jcxc2qag2g6h","_id":"ckiouwp15001ajcxcakip6k7a"},{"post_id":"ckiouwp0z000xjcxc78de01mg","tag_id":"ckiouwp10000yjcxcfeyo3w34","_id":"ckiouwp15001bjcxc001ke2kp"},{"post_id":"ckiouwp10000zjcxc48k6f4q5","tag_id":"ckiouwp10000yjcxcfeyo3w34","_id":"ckiouwp15001djcxcepk0655f"},{"post_id":"ckiouwp110010jcxc76r8ae76","tag_id":"ckiouwp15001cjcxc3xp4hfvs","_id":"ckiouwp17001fjcxcefqp1uc0"},{"post_id":"ckiouwp110011jcxca7thbm10","tag_id":"ckiouwp15001cjcxc3xp4hfvs","_id":"ckiouwp17001hjcxc8ayh6h0s"},{"post_id":"ckiouwp130014jcxc1yyuacld","tag_id":"ckiouwp17001gjcxc95gxhk8m","_id":"ckiouwp19001jjcxc9vnicfmn"},{"post_id":"ckiouwp140017jcxc6b942nsg","tag_id":"ckiouwp18001ijcxc9osi9lzt","_id":"ckiouwp19001ljcxc43c58jso"},{"post_id":"ckiouwp140017jcxc6b942nsg","tag_id":"ckiouwp15001cjcxc3xp4hfvs","_id":"ckiouwp19001mjcxc15ha3swc"}],"Tag":[{"name":"数据结构","_id":"ckiouwoyt0004jcxcc7mqgmc1"},{"name":"算法","_id":"ckiouwoyy0009jcxc7egegpvd"},{"name":"Mac","_id":"ckiouwoz4000fjcxcfaq43r39"},{"name":"Linux","_id":"ckiouwoz5000ijcxc9a2p2ee0"},{"name":"MySQL","_id":"ckiouwoz6000kjcxc0olka9ng"},{"name":"redis","_id":"ckiouwoz6000njcxce88khjz1"},{"name":"cluster","_id":"ckiouwoz7000pjcxcf7jcey6u"},{"name":"docker","_id":"ckiouwoz7000qjcxc1ou3a5u2"},{"name":"docker-compose","_id":"ckiouwoz8000rjcxc7s1m8ra6"},{"name":"Hexo","_id":"ckiouwp10000yjcxcfeyo3w34"},{"name":"Github","_id":"ckiouwp120012jcxc2qag2g6h"},{"name":"Java","_id":"ckiouwp15001cjcxc3xp4hfvs"},{"name":"Docker","_id":"ckiouwp17001gjcxc95gxhk8m"},{"name":"Spring","_id":"ckiouwp18001ijcxc9osi9lzt"}]}}