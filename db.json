{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/img/hexo-github-action.jpg","path":"img/hexo-github-action.jpg","modified":1,"renderable":0},{"_id":"source/img/hexo.jpeg","path":"img/hexo.jpeg","modified":1,"renderable":0},{"_id":"source/img/linux.jpeg","path":"img/linux.jpeg","modified":1,"renderable":0},{"_id":"source/img/spring-cloud.jpeg","path":"img/spring-cloud.jpeg","modified":1,"renderable":0},{"_id":"source/music/Memories-Maroon 5.jpg","path":"music/Memories-Maroon 5.jpg","modified":1,"renderable":0},{"_id":"source/music/Passenger.jpg","path":"music/Passenger.jpg","modified":1,"renderable":0},{"_id":"source/music/Sketch Plane-Cam Kelley.jpg","path":"music/Sketch Plane-Cam Kelley.jpg","modified":1,"renderable":0},{"_id":"source/music/Someone You Loved-Lewis Capaldi.jpg","path":"music/Someone You Loved-Lewis Capaldi.jpg","modified":1,"renderable":0},{"_id":"source/img/wechatpay.jpg","path":"img/wechatpay.jpg","modified":1,"renderable":0},{"_id":"source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":0},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/apple-touch-icon.png","path":"img/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/clipboard-use.js","path":"js/clipboard-use.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"source/img/default_thumbnail.jpg","path":"img/default_thumbnail.jpg","modified":1,"renderable":0},{"_id":"source/img/java.jpeg","path":"img/java.jpeg","modified":1,"renderable":0},{"_id":"source/img/default.png","path":"img/default.png","modified":1,"renderable":0},{"_id":"source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":0},{"_id":"themes/fluid/source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":1},{"_id":"source/music/memories.mp3","path":"music/memories.mp3","modified":1,"renderable":0},{"_id":"source/music/someone you loved.mp3","path":"music/someone you loved.mp3","modified":1,"renderable":0},{"_id":"source/music/Simple Song.mp3","path":"music/Simple Song.mp3","modified":1,"renderable":0},{"_id":"source/music/M800002kitDY3lqvHN.mp3","path":"music/M800002kitDY3lqvHN.mp3","modified":1,"renderable":0}],"Cache":[{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1587140393990},{"_id":"themes/fluid/LICENSE","hash":"5b919c12e4f5f5cdebb7c17ded4f10f1ebe64811","modified":1587140393991},{"_id":"themes/fluid/README.md","hash":"cef6b96990f7480fd18d53f4af1a24099b227dc9","modified":1587140393991},{"_id":"themes/fluid/README_en.md","hash":"14192bb5a099378e79142c70668a87fe79c4f8a6","modified":1587140393991},{"_id":"themes/fluid/Changelog.md","hash":"3be9cf3fd4dfbb0275d523db3c6a816ec147551e","modified":1587140393990},{"_id":"themes/fluid/_static_prefix.yml","hash":"661f70c9af2bb4414c7e19116dd955e7ffb9b609","modified":1587140393992},{"_id":"themes/fluid/_config.yml","hash":"03f5dad7dca366d9308aa162167a524251b29724","modified":1607595130368},{"_id":"themes/fluid/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1587140394003},{"_id":"themes/fluid/package.json","hash":"eb6a752c621b385ae0b53f7d8207abeb77c8fe05","modified":1587140394003},{"_id":"source/_drafts/.DS_Store","hash":"23507b682cc6652f55072d30d75a60e9cb45d8c5","modified":1587395061901},{"_id":"source/_data/fluid_config.yml","hash":"43ea67e99b7f39487c90e9d9edc503c51fd9e95a","modified":1604989293553},{"_id":"source/_drafts/data-structure-overview.md","hash":"315c759573a38c9ad62d8ed0a0e1f787a7600655","modified":1604986871695},{"_id":"source/_drafts/hashtable-learning.md","hash":"d9bb5099980d04170ee62b4c7202a125c5487dca","modified":1587314053058},{"_id":"source/_drafts/mysql-index-learning.md","hash":"583bd27a0120822b8ca038b2ead7eaacb50b5802","modified":1587397504144},{"_id":"source/_drafts/tools-list.md","hash":"7db6ac4b5d1ff22de28c99552644c184650f6f64","modified":1587312444853},{"_id":"source/_drafts/mac-brew-update.md","hash":"4b8cc48bc4a4687e1c787fd5a056bb207eb98c6d","modified":1587270394871},{"_id":"source/_posts/data-structure-overview.md","hash":"7d8308fd5c95687c767775e5a1c57d9d1c9c677d","modified":1594017746149},{"_id":"source/_posts/hello-world.md","hash":"29b6a15312da4c0640ada3247c755c6d15627394","modified":1587304486896},{"_id":"source/_posts/hashcode.md","hash":"4bd6961a2684e5bbce7522a0218e37161a0bf5ba","modified":1587210038980},{"_id":"source/_posts/hexo-github-action.md","hash":"d629d174492eef66471017b8ed4083caa7d40a0e","modified":1587209801335},{"_id":"source/_posts/linux-ssh.md","hash":"f75da8d3f1367dc54efa1c93cdf2551a6f52b415","modified":1587210011678},{"_id":"source/_posts/jvm.md","hash":"16f1b3a60690bb2f1d29ae778c12b39136f40c55","modified":1587209868661},{"_id":"source/_posts/redis-cluster.md","hash":"2bc00c49dc8345f7ffa5bbd607f9a58f6a9aa6df","modified":1607594339819},{"_id":"source/about/index.md","hash":"b42d17bc522f1e7c3b49a344deb5e2bec2354403","modified":1587140393983},{"_id":"source/_posts/spring-cloud-learning.md","hash":"1afee04187001ab187573d1d660939d3f561ee3c","modified":1587209911768},{"_id":"source/categories/index.md","hash":"1f6f9db5cf4cba5be4d91278021eb9873b80d376","modified":1587143104377},{"_id":"source/img/hexo-github-action.jpg","hash":"518d9efbbbc5f270f54775083e3ad5d397fa3256","modified":1587209572791},{"_id":"source/img/hexo.jpeg","hash":"adaaf4d9ebaea9c4a43bb90187368967a48f8888","modified":1587209427211},{"_id":"source/img/linux.jpeg","hash":"b437e6194f139a064d3e096f9fd4a107ef02dde8","modified":1587209976005},{"_id":"source/img/spring-cloud.jpeg","hash":"7d01a6e80f2aa14cedb2e429cde591df5a526ea4","modified":1587209893814},{"_id":"source/music/Memories-Maroon 5.jpg","hash":"782d0e6854c8823f40e9ae04d3903eceece3f66e","modified":1587214223762},{"_id":"source/music/Passenger.jpg","hash":"3351e31cd4d73ffcaf420f8328f4571ecea3625e","modified":1587226672228},{"_id":"source/music/Sketch Plane-Cam Kelley.jpg","hash":"2faabd0f61fb058d5d370f073ee0fd596f6b009a","modified":1587226985422},{"_id":"source/music/Someone You Loved-Lewis Capaldi.jpg","hash":"aa2ae6acaf6c5ab8f4fbb588f8563622a4c0c809","modified":1587226271670},{"_id":"source/tags/index.md","hash":"7c33368714c02998c88ee12fd0c129599c478fa5","modified":1586971414956},{"_id":"themes/fluid/languages/en.yml","hash":"370b61742ea947934c72331ad29a2f1ec10db70f","modified":1587140393992},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"39da8ad1f57035cc80844c333d44b497cb427dda","modified":1587219170447},{"_id":"themes/fluid/languages/ja.yml","hash":"3bf2824d4f32415ef228d92e08aa5c76f04e475b","modified":1587140393992},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1587140393993},{"_id":"themes/fluid/layout/about.ejs","hash":"1b966bd7c1c2627112bbbc8c9765b44e37bbda5b","modified":1587140394000},{"_id":"themes/fluid/layout/archive.ejs","hash":"783ce7efe83bd72e3c767fd5a190ad38113ff34f","modified":1587143203424},{"_id":"themes/fluid/layout/categories.ejs","hash":"c6be3facc1c47aa8b3d002ea82c7bd91c5b38906","modified":1587144576147},{"_id":"themes/fluid/layout/category.ejs","hash":"cf7260650f77336c20ee8f9c4898f336d3a98ee2","modified":1587144537896},{"_id":"themes/fluid/layout/index.ejs","hash":"59ef6ede5dd3aada5edd5338c1505fc025c6d235","modified":1587216180613},{"_id":"themes/fluid/layout/layout.ejs","hash":"57b4c1e88ffff30dec1442f0a1ccc36dfa8a01ea","modified":1587228483305},{"_id":"themes/fluid/layout/links.ejs","hash":"0bb8360ad6a2433fdeddf01fbd39b4f2db67b08f","modified":1587143203416},{"_id":"themes/fluid/layout/page.ejs","hash":"8cab50ead4cdb992d35710147a9a5308fb5df290","modified":1587140394002},{"_id":"themes/fluid/layout/post.ejs","hash":"a9142edc21225469fa951607de86e23f86640712","modified":1587233522248},{"_id":"themes/fluid/layout/tag.ejs","hash":"8c9dd4ba1cc259972c257826419bacdcab26f47a","modified":1587143203412},{"_id":"themes/fluid/layout/tags.ejs","hash":"bfe6a143ab341c1fc041c0a7631f0e05041e08aa","modified":1587145622345},{"_id":"source/img/wechatpay.jpg","hash":"8547ff093d704c77131abe7bda9aa69ae723eac0","modified":1587266940841},{"_id":"source/_posts/data-structure-overview/hashtable.jpg","hash":"0228ea21bac82c01fdd0d9da4053897d32cb0666","modified":1587397138090},{"_id":"source/_posts/data-structure-overview/linkedlist.jpg","hash":"a0e88d4b9e0f3b8fdf986a7264a82e8b5c65b52f","modified":1587390835301},{"_id":"source/_posts/data-structure-overview/heap.jpg","hash":"906ce5bed102dd1cb26e16f716793267fbe53add","modified":1587396978777},{"_id":"source/_posts/data-structure-overview/queue.png","hash":"2471e04cc8484d3796e670340ad0fa8e43232477","modified":1587390713990},{"_id":"source/img/alipay.jpg","hash":"d0589052ca92dc36723d0e122c0998dc829c8660","modified":1587266986049},{"_id":"source/img/avatar.png","hash":"61964f92efc9440d16847b1d5e5342c7d3a7a0b2","modified":1587140393984},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"6e9b964665a70ef49f4b08a9bb0aa7f1d4f07741","modified":1587140393990},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"549e67fc53c3063dda86d4bb4a981c55cf626400","modified":1587140393989},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"296c23b30ca21e176f04f0bb12ec77abf4836a95","modified":1587140393989},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"3ca580473d337f011052678fbc2a276d09769f0d","modified":1587140393990},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"049d6088b2a02dbbedcd761166b236aa5bf0588e","modified":1587140393994},{"_id":"themes/fluid/layout/_partial/busuanzi.ejs","hash":"cec5a8c84131039eb1f2c3df9310433421f87fb8","modified":1587140393994},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"57564f32640702cb5a742feb5d62489da84a3f49","modified":1587233340644},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"e400759d909e27fce4e7e96bfb3f53a94220c3e3","modified":1607594559156},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"7b91aa45bcd77914ee5d2182e97cdb42f19c76a4","modified":1587142012129},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"ea023654308f1225316b613f5a74cf5ea1e1677e","modified":1587140393996},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"783eee847562ce14db8f723b4ae742fb69aaf620","modified":1587140393997},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"43db23662e22fef3635a92cba3b260423cbebbd0","modified":1587233333013},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1587140393999},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3cf1d9b9032919d6b936e1f2410911df3b325670","modified":1587140393999},{"_id":"themes/fluid/scripts/events/index.js","hash":"10ecaa5545d8ec2a8af1c48e1434f0f3f7ac39ac","modified":1587140394003},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"15eae203321e994040e586cec85f49a139564373","modified":1587140394004},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"2826b9dff67a8a482f73fed2698d1b33c4cf81c5","modified":1587140394005},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"88ab60fc3266b72e533dcfce86dfa7731bdbfebf","modified":1587140394005},{"_id":"themes/fluid/scripts/helpers/my_tag_cloud.js","hash":"94c73fd2fc5f69100f0d65a3522f2437e2b25a89","modified":1587145622337},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"61a034508bdea19ccd414aca554f764ff000756e","modified":1587140394005},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"21754edfe2f9ae548da73584fae021b1bb4ca53d","modified":1587140394005},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"2c5f0678d64d4c7d1638d5e21dd86ae307fdc735","modified":1587140394005},{"_id":"themes/fluid/scripts/tags/button.js","hash":"760e69fda033e84973966eacab0ba91776cc8ccb","modified":1587143203422},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"34a6e6f5bc54befb95d142547a8634c93777f3e1","modified":1587140394006},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"d8abe6006a31b88447b974c2493f804ae5f3f0f0","modified":1587140394006},{"_id":"themes/fluid/scripts/tags/label.js","hash":"ddd3b0bbf91f2bdb68bd5cb663ea1d0bb89505a8","modified":1587140394006},{"_id":"themes/fluid/scripts/tags/note.js","hash":"060396056c59c0b8511f9db2aa1f1d06fe795a77","modified":1587140394006},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"141f7e33ebe6947c3b6cdffd96a04fb4b6c534a9","modified":1587140394007},{"_id":"themes/fluid/scripts/utils/object.js","hash":"0c2ad69eb7bd044b7c38e90607a9003ea232f23b","modified":1587140394007},{"_id":"themes/fluid/source/css/main.styl","hash":"fffe602a8ae02d289fd879b5a2437cfe18f39822","modified":1587229737605},{"_id":"themes/fluid/source/img/apple-touch-icon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1587140394011},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1587140394011},{"_id":"themes/fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1587140394014},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1587140394013},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1587140394014},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1587140394014},{"_id":"themes/fluid/source/js/clipboard-use.js","hash":"ef3db5643578e9e56faa67f723d896419e414a47","modified":1587140394014},{"_id":"themes/fluid/source/js/lazyload.js","hash":"8da1a2061986ef7f7eb51ed4d0ebcb7984b801ce","modified":1587140394015},{"_id":"themes/fluid/source/js/local-search.js","hash":"66046f2ad85aa22fd64bbd0e968a498a2c5bfbaa","modified":1587140394015},{"_id":"themes/fluid/source/js/main.js","hash":"f9353c1337a37cbac3cc5fa5afd24e9c412dc83a","modified":1587140394015},{"_id":"source/_posts/data-structure-overview/overview.png","hash":"e7ec9f16e9f389f7a20eb04f747fd0f86a8daacf","modified":1587306802908},{"_id":"source/_posts/data-structure-overview/stack.png","hash":"3736ff92eaad9a88e52c47e393513bff93b84988","modified":1587390633727},{"_id":"source/_posts/spring-cloud-learning/7.png","hash":"4aebce32a523b2488b4c749ffa08632aee12f82e","modified":1586971414950},{"_id":"source/img/default_thumbnail.jpg","hash":"1783f9565a6bc13dd2a0446d5385d27def19cac6","modified":1587140393989},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587140394007},{"_id":"source/_posts/spring-cloud-learning/3.png","hash":"3ebf0ed986d4e4aa1fc327ca85b771b05745bb90","modified":1586971414940},{"_id":"source/_posts/spring-cloud-learning/4.png","hash":"52162d3dc7ec73d75afa5c3b7fbd801a719d58bc","modified":1586971414942},{"_id":"source/_posts/spring-cloud-learning/5.png","hash":"30f94353204cebe861c2d857e61a270a0d39d98d","modified":1586971414944},{"_id":"source/_posts/spring-cloud-learning/6.png","hash":"2bbcf8a0560d84d6aa8b5cf3b4e139609d365247","modified":1586971414947},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"71410cabde9641497f845346df93ef4739ba3318","modified":1587140393995},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"8c5a209258746db8842ae64a9da69980ff2247d3","modified":1587140393995},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"01406b8bdfece518a30325cef9f2581ffcc9cb5e","modified":1587140393995},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"d209021c9d2bbae0aaa82df62c2985c27079d41e","modified":1587140393995},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"cf8f5703344c6966d756c5bdaa0be70637a4f0e4","modified":1587140393995},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"18d9e0334c6d410712d90cb7bd70bfa245782a88","modified":1587140393995},{"_id":"themes/fluid/layout/_partial/plugins/daovoice.ejs","hash":"cfc684ba48608abd25afd155ee373d9936bbe84e","modified":1587140393997},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"db103077a6957c9d4786e98fd8144d6a5b03c495","modified":1587140393997},{"_id":"themes/fluid/layout/_partial/plugins/anchor.ejs","hash":"40032ca6af619716fa3479eeb9a5f47924d95126","modified":1587140393997},{"_id":"themes/fluid/layout/_partial/plugins/aplayer.ejs","hash":"e843cdbe64af3dee9385eb1d763539d3ac10ed72","modified":1587226345448},{"_id":"themes/fluid/layout/_partial/plugins/fancybox.ejs","hash":"c447e35c93c61a70c1c2dfc34948615832989660","modified":1587140393998},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"421ad423f4a44a9468253e1f117145a500fdec78","modified":1587140393998},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"b2ed1e91d502479c814d25499eb8138db852b884","modified":1587140393998},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1587140393998},{"_id":"themes/fluid/layout/_partial/plugins/mouse-click.ejs","hash":"eb19991199c201ceb103a6ef025e4dfd1e7dbfb7","modified":1587140393998},{"_id":"themes/fluid/layout/_partial/plugins/tocjs.ejs","hash":"889b233437b31be6c22a473cf477a051cecf29d7","modified":1587140393999},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"913929ecfeee8234077713c8d8a08ee454a16d02","modified":1587140394003},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"d2019cf36280b80ec53a55f9f162bf1f013a5427","modified":1587140394004},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"d2acd408f33f2bf0d3abad739fe2fd72dbdffbbf","modified":1587140394004},{"_id":"themes/fluid/scripts/events/lib/version.js","hash":"261677cd651b1cbe7869e9df998d2e5d55f85719","modified":1587140394004},{"_id":"themes/fluid/layout/_partial/plugins/reward.ejs","hash":"d6730b5e475b46ecd542f717afcc2d607cc13bed","modified":1587268419486},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"d61401cad1dd8f02cf9a6a7a367d2549e69edb48","modified":1587218997646},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"37cdcd3c43cc89c6dc929f90bf342c6d33af0622","modified":1587140394007},{"_id":"themes/fluid/source/css/_functions/reward.styl","hash":"59b895ec94e5638e8e20c7b92d75cf5ea9a36839","modified":1587229737601},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1587140394010},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"9941bf94cbb20d9e45e63957638c258b5c7de18d","modified":1587140394010},{"_id":"source/_posts/spring-cloud-learning/1.png","hash":"abab5dc7c34d169807ac7a7b6d7cbf73638e63a6","modified":1586971414936},{"_id":"source/_posts/spring-cloud-learning/2.png","hash":"5302d6db6520be044a4103187168145dd2eb3dfa","modified":1586971414938},{"_id":"source/img/java.jpeg","hash":"b100e3b0e45ffdd57ca87d4976647ed2f4c09c80","modified":1587209849081},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587140394009},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587140394010},{"_id":"source/img/default.png","hash":"2e84eaeeb1f33c366bf05fa74539847da27a8560","modified":1587140393988},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"7e07e44fa0e77ddbdd3aa0c0abdb3be6822df2e0","modified":1587140394008},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1587140394008},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"1adc8fc6fdb186898f44ec9a25bd308ea43cd5b1","modified":1587140394008},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"c34979b9b8e5c9cb54dcdd73a1fe877bcb943548","modified":1587140394008},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"8b0242133d8baf32be9a4eced92cf17beaaecef6","modified":1587140394008},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"156029204344c724b5d469f05ff8d26c5e141bce","modified":1587140394009},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"c5a771c10c31479e9744d7bb0e2a8ae58fd80ceb","modified":1587140394009},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"44c1b50c8529afa4d79c34d039273076b55e1e79","modified":1587140394009},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"dfef3cc9c8ab7ffb73f3bc90867f783d17b22394","modified":1587229681232},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b75db2aa3d3c640feddc019086234fd92034bb04","modified":1587140394010},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"934a6ae74b29a6903d2309498653910c19a77c8b","modified":1587140394010},{"_id":"source/_posts/spring-cloud-learning/8.png","hash":"66162d84f9e742607a6036b69ec666fc0e700769","modified":1586971414956},{"_id":"source/_posts/data-structure-overview/tree.png","hash":"640752cff95dfa31c304680cbc1b1c7c2523425f","modified":1587396551826},{"_id":"source/img/banner.jpg","hash":"f73654d2ed2732a2931daa8a632bb22c1e89082b","modified":1587140393986},{"_id":"themes/fluid/source/img/banner.jpg","hash":"f9d0249b82595a47389bb062ff5951e8f04d85b3","modified":1587140394013},{"_id":"source/music/memories.mp3","hash":"14ff8bfb41da43a206c262ea1ad1f95584a742de","modified":1587214124318},{"_id":"source/music/someone you loved.mp3","hash":"efce34463dd02fad2e7ee1cdfc151ae559d0297e","modified":1587226210654},{"_id":"source/music/Simple Song.mp3","hash":"9c9e1c647434b14c9c67cfa0ad88d2ecb38ce842","modified":1587226600398},{"_id":"source/music/M800002kitDY3lqvHN.mp3","hash":"fd8a8d6c574ed2bd1373e3b4e6782ed3a035e008","modified":1587226977548},{"_id":"public/local-search.xml","hash":"54e925cf98bc917ed80ef1414e514f159a785c7d","modified":1607596004625},{"_id":"public/about/index.html","hash":"f47bf4fa911f0faaa07f3c7b805980ad752fa22a","modified":1607596004625},{"_id":"public/tags/index.html","hash":"a6d3884111086a231860055cebe82ee1110f14ef","modified":1607596004625},{"_id":"public/categories/index.html","hash":"35736106a2090fc2d3aa182cee129e212fc31e22","modified":1607596004625},{"_id":"public/archives/index.html","hash":"bc00f91ded921cc1bc72183e70f52689f51acf91","modified":1607596004625},{"_id":"public/archives/2016/index.html","hash":"322b989ab8df57f855450146f2cfc2816e63d7e2","modified":1607596004625},{"_id":"public/archives/2016/08/index.html","hash":"6ea20ad7be62739520e51662f381ce5bdf369029","modified":1607596004625},{"_id":"public/archives/2016/10/index.html","hash":"043218fe936b20435d9b932b5e1c3d9dc57205b2","modified":1607596004625},{"_id":"public/archives/2017/index.html","hash":"5d7417751a0919c209e22f8c3fadd5786fdba31d","modified":1607596004625},{"_id":"public/archives/2017/02/index.html","hash":"b5fb63c1b42ec6fd262b95e0a9b61c6b5c7cceba","modified":1607596004625},{"_id":"public/archives/2017/08/index.html","hash":"f96b910504644b9d350dfb98d642fb40258ffdff","modified":1607596004625},{"_id":"public/archives/2019/index.html","hash":"11fb5c06d3419cd2ece6622371c24d107a74f2b1","modified":1607596004625},{"_id":"public/archives/2019/10/index.html","hash":"11fb5c06d3419cd2ece6622371c24d107a74f2b1","modified":1607596004625},{"_id":"public/archives/2020/index.html","hash":"53a609f21760bf27376d5041ba456cd21a52db6a","modified":1607596004625},{"_id":"public/archives/2020/04/index.html","hash":"662120933204f9a6a05b0d5418bb082ee1c00cda","modified":1607596004625},{"_id":"public/archives/2020/12/index.html","hash":"28651514f3e872908c4f8ff911e3314c3e588b11","modified":1607596004625},{"_id":"public/tags/数据结构/index.html","hash":"e8cfa74efaa32a84b06c1b84b74397ba72a6c154","modified":1607596004625},{"_id":"public/tags/Linux/index.html","hash":"7387312bbbe7f931d49bd95340d4928f6fe0acf6","modified":1607596004625},{"_id":"public/tags/Hexo/index.html","hash":"f4ee34b935758d6f31f9912f701d3bfdb94264c0","modified":1607596004625},{"_id":"public/tags/Github/index.html","hash":"bc7f43568d5612440bfabe9369546d58d3b50f84","modified":1607596004625},{"_id":"public/tags/redis/index.html","hash":"3d126a8d30ac9926ade477605f1fbdac037eaf48","modified":1607596004625},{"_id":"public/tags/cluster/index.html","hash":"a97495ccab00483fe14bfdcc0d0ae6dcb90f0ab9","modified":1607596004625},{"_id":"public/tags/docker/index.html","hash":"feb4a175d5ddaaa2241fcf8a399ef47853e4f298","modified":1607596004625},{"_id":"public/tags/docker-compose/index.html","hash":"d68f510523631555c38c93d4df78f22524edccd1","modified":1607596004625},{"_id":"public/tags/算法/index.html","hash":"65053a68c19aa0c32087295d009f57cf777d18d9","modified":1607596004625},{"_id":"public/tags/Java/index.html","hash":"9cd4532f92cbbf47f7d16572bb4a7dca780a61e5","modified":1607596004625},{"_id":"public/tags/Spring/index.html","hash":"39258b96abbf09e0e3eba80ef53be22e8738c302","modified":1607596004625},{"_id":"public/404.html","hash":"e4352d81cefcfb5118ecca707353de0ceae2a9fc","modified":1607596004625},{"_id":"public/links/index.html","hash":"4f6562ef078c40c7cd9081a2a138be315d4babde","modified":1607596004625},{"_id":"public/posts/41928529/index.html","hash":"68cf14e70d8d6c86eb98506d364dbd9155f34147","modified":1607596004625},{"_id":"public/posts/2628717197/index.html","hash":"4673064b6eb1d969b39c83bd9cd42a55c088c36c","modified":1607596004625},{"_id":"public/posts/2231850037/index.html","hash":"df2fe22b832d4c67e92da78c63004c91e94a5384","modified":1607596004625},{"_id":"public/posts/2936205123/index.html","hash":"8c41aa2fc55a066595e2aa579acf7bc3e80de2a4","modified":1607596004625},{"_id":"public/posts/2578104319/index.html","hash":"3f1e458e4872bcbff94118d1e9b64e2849466017","modified":1607596004625},{"_id":"public/posts/2827031203/index.html","hash":"eb60b869d0f3000125ee1acbb3583ab226fe86c7","modified":1607596004625},{"_id":"public/posts/3097382278/index.html","hash":"7fba3c18c891f0efc07d56700f3455ac3e2f915f","modified":1607596004625},{"_id":"public/posts/1879991184/index.html","hash":"51fff547375648f4fb52483787d01abcb9d24f15","modified":1607596004625},{"_id":"public/index.html","hash":"12c01f6624ed77a9eec3375f59346581cac3f1f8","modified":1607596004625},{"_id":"public/img/hexo.jpeg","hash":"adaaf4d9ebaea9c4a43bb90187368967a48f8888","modified":1607596004625},{"_id":"public/img/linux.jpeg","hash":"b437e6194f139a064d3e096f9fd4a107ef02dde8","modified":1607596004625},{"_id":"public/img/spring-cloud.jpeg","hash":"7d01a6e80f2aa14cedb2e429cde591df5a526ea4","modified":1607596004625},{"_id":"public/music/Memories-Maroon 5.jpg","hash":"782d0e6854c8823f40e9ae04d3903eceece3f66e","modified":1607596004625},{"_id":"public/music/Passenger.jpg","hash":"3351e31cd4d73ffcaf420f8328f4571ecea3625e","modified":1607596004625},{"_id":"public/music/Sketch Plane-Cam Kelley.jpg","hash":"2faabd0f61fb058d5d370f073ee0fd596f6b009a","modified":1607596004625},{"_id":"public/music/Someone You Loved-Lewis Capaldi.jpg","hash":"aa2ae6acaf6c5ab8f4fbb588f8563622a4c0c809","modified":1607596004625},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1607596004625},{"_id":"public/img/apple-touch-icon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1607596004625},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1607596004625},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1607596004625},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1607596004625},{"_id":"public/posts/2827031203/index/heap.jpg","hash":"906ce5bed102dd1cb26e16f716793267fbe53add","modified":1607596004625},{"_id":"public/posts/2827031203/index/hashtable.jpg","hash":"0228ea21bac82c01fdd0d9da4053897d32cb0666","modified":1607596004625},{"_id":"public/posts/2827031203/index/linkedlist.jpg","hash":"a0e88d4b9e0f3b8fdf986a7264a82e8b5c65b52f","modified":1607596004625},{"_id":"public/posts/2827031203/index/queue.png","hash":"2471e04cc8484d3796e670340ad0fa8e43232477","modified":1607596004625},{"_id":"public/img/hexo-github-action.jpg","hash":"518d9efbbbc5f270f54775083e3ad5d397fa3256","modified":1607596004625},{"_id":"public/img/wechatpay.jpg","hash":"8547ff093d704c77131abe7bda9aa69ae723eac0","modified":1607596004625},{"_id":"public/posts/2827031203/index/overview.png","hash":"e7ec9f16e9f389f7a20eb04f747fd0f86a8daacf","modified":1607596004625},{"_id":"public/posts/2827031203/index/stack.png","hash":"3736ff92eaad9a88e52c47e393513bff93b84988","modified":1607596004625},{"_id":"public/posts/1879991184/index/5.png","hash":"30f94353204cebe861c2d857e61a270a0d39d98d","modified":1607596004625},{"_id":"public/posts/1879991184/index/7.png","hash":"4aebce32a523b2488b4c749ffa08632aee12f82e","modified":1607596004625},{"_id":"public/js/lazyload.js","hash":"8da1a2061986ef7f7eb51ed4d0ebcb7984b801ce","modified":1607596004625},{"_id":"public/js/clipboard-use.js","hash":"ef3db5643578e9e56faa67f723d896419e414a47","modified":1607596004625},{"_id":"public/js/main.js","hash":"f9353c1337a37cbac3cc5fa5afd24e9c412dc83a","modified":1607596004625},{"_id":"public/js/local-search.js","hash":"66046f2ad85aa22fd64bbd0e968a498a2c5bfbaa","modified":1607596004625},{"_id":"public/css/main.css","hash":"c1a65189e95eeb3fe15655ef3d8da399290344a4","modified":1607596004625},{"_id":"public/img/alipay.jpg","hash":"d0589052ca92dc36723d0e122c0998dc829c8660","modified":1607596004625},{"_id":"public/posts/1879991184/index/1.png","hash":"abab5dc7c34d169807ac7a7b6d7cbf73638e63a6","modified":1607596004625},{"_id":"public/posts/1879991184/index/2.png","hash":"5302d6db6520be044a4103187168145dd2eb3dfa","modified":1607596004625},{"_id":"public/posts/1879991184/index/3.png","hash":"3ebf0ed986d4e4aa1fc327ca85b771b05745bb90","modified":1607596004625},{"_id":"public/posts/1879991184/index/4.png","hash":"52162d3dc7ec73d75afa5c3b7fbd801a719d58bc","modified":1607596004625},{"_id":"public/img/default_thumbnail.jpg","hash":"1783f9565a6bc13dd2a0446d5385d27def19cac6","modified":1607596004625},{"_id":"public/posts/1879991184/index/6.png","hash":"2bbcf8a0560d84d6aa8b5cf3b4e139609d365247","modified":1607596004625},{"_id":"public/img/java.jpeg","hash":"b100e3b0e45ffdd57ca87d4976647ed2f4c09c80","modified":1607596004625},{"_id":"public/img/default.png","hash":"2e84eaeeb1f33c366bf05fa74539847da27a8560","modified":1607596004625},{"_id":"public/posts/1879991184/index/8.png","hash":"66162d84f9e742607a6036b69ec666fc0e700769","modified":1607596004625},{"_id":"public/posts/2827031203/index/tree.png","hash":"640752cff95dfa31c304680cbc1b1c7c2523425f","modified":1607596004625},{"_id":"public/img/banner.jpg","hash":"f9d0249b82595a47389bb062ff5951e8f04d85b3","modified":1607596004625},{"_id":"public/music/memories.mp3","hash":"14ff8bfb41da43a206c262ea1ad1f95584a742de","modified":1607596004625},{"_id":"public/music/someone you loved.mp3","hash":"efce34463dd02fad2e7ee1cdfc151ae559d0297e","modified":1607596004625},{"_id":"public/music/Simple Song.mp3","hash":"9c9e1c647434b14c9c67cfa0ad88d2ecb38ce842","modified":1607596004625},{"_id":"public/music/M800002kitDY3lqvHN.mp3","hash":"fd8a8d6c574ed2bd1373e3b4e6782ed3a035e008","modified":1607596004625}],"Category":[],"Data":[{"_id":"fluid_config","data":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}],"Page":[{"title":"about","date":"2018-04-16T05:01:39.000Z","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-04-16 13:01:39\nlayout: about\n---\n","updated":"2020-04-17T16:19:53.983Z","path":"about/index.html","comments":1,"_id":"ckiip5kfx0001shcd3frxchu1","content":"","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":""},{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"layout: categories\ncomments: false\n---","date":"2020-04-17T17:05:04.377Z","updated":"2020-04-17T17:05:04.377Z","path":"categories/index.html","title":"","_id":"ckiip5kfz0003shcd7pr16u0v","content":"","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":""},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"layout: tags\ncomments: false\n---","date":"2020-04-15T17:23:34.956Z","updated":"2020-04-15T17:23:34.956Z","path":"tags/index.html","title":"","_id":"ckiip5kh4000zshcdfvma8awd","content":"","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":""}],"Post":[{"title":"【数据结构】之哈希表（散列表）","abbrlink":3309293362,"date":"2020-04-19T13:17:16.000Z","_content":"\n# 什么是哈希表？\n哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n记录的存储位置=f(关键字)\n\n这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。\n\n哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。）\n    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。\n\n## 参考\n[参考文章](https://blog.csdn.net/duan19920101/article/details/51579136?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2)","source":"_drafts/hashtable-learning.md","raw":"---\ntitle: 【数据结构】之哈希表（散列表）\nabbrlink: 3309293362\ndate: 2020-04-19 21:17:16\ntags:\n  - 数据结构\n---\n\n# 什么是哈希表？\n哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n记录的存储位置=f(关键字)\n\n这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。\n\n哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。）\n    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。\n\n## 参考\n[参考文章](https://blog.csdn.net/duan19920101/article/details/51579136?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2)","slug":"hashtable-learning","published":0,"updated":"2020-04-19T16:34:13.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kfr0000shcd06k8hm4a","content":"<h1 id=\"什么是哈希表？\"><a href=\"#什么是哈希表？\" class=\"headerlink\" title=\"什么是哈希表？\"></a>什么是哈希表？</h1><p>哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>记录的存储位置=f(关键字)</p>\n<p>这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。</p>\n<p>哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。）<br>    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/duan19920101/article/details/51579136?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"什么是哈希表？\"><a href=\"#什么是哈希表？\" class=\"headerlink\" title=\"什么是哈希表？\"></a>什么是哈希表？</h1><p>哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>记录的存储位置=f(关键字)</p>\n<p>这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。</p>\n<p>哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。）<br>    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/duan19920101/article/details/51579136?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n"},{"title":"【MySQL】索引及分页详解","abbrlink":780159822,"date":"2018-07-19T13:38:18.000Z","_content":"\n# 什么是索引\n索引是数据表中一列或多列的值进行排序的一种数据结构。故此，索引本质就是数据结构。这也是为什么每次数据表建立索引都需要设置在列字段上的原因。\n\n\n# 常用的索引结构是什么\n## 参考\n# https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw","source":"_drafts/mysql-index-learning.md","raw":"---\ntitle: 【MySQL】索引及分页详解\ntags:\n  - MySQL\nabbrlink: 780159822\ndate: 2018-07-19 21:38:18\n---\n\n# 什么是索引\n索引是数据表中一列或多列的值进行排序的一种数据结构。故此，索引本质就是数据结构。这也是为什么每次数据表建立索引都需要设置在列字段上的原因。\n\n\n# 常用的索引结构是什么\n## 参考\n# https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw","slug":"mysql-index-learning","published":0,"updated":"2020-04-20T15:45:04.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kfy0002shcdc17o9v80","content":"<h1 id=\"什么是索引\"><a href=\"#什么是索引\" class=\"headerlink\" title=\"什么是索引\"></a>什么是索引</h1><p>索引是数据表中一列或多列的值进行排序的一种数据结构。故此，索引本质就是数据结构。这也是为什么每次数据表建立索引都需要设置在列字段上的原因。</p>\n<h1 id=\"常用的索引结构是什么\"><a href=\"#常用的索引结构是什么\" class=\"headerlink\" title=\"常用的索引结构是什么\"></a>常用的索引结构是什么</h1><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><h1 id=\"https-mp-weixin-qq-com-s-5Yl6H6up9ntZq6l8qxiogw\"><a href=\"#https-mp-weixin-qq-com-s-5Yl6H6up9ntZq6l8qxiogw\" class=\"headerlink\" title=\"https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw\"></a><a href=\"https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw</a></h1>","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"什么是索引\"><a href=\"#什么是索引\" class=\"headerlink\" title=\"什么是索引\"></a>什么是索引</h1><p>索引是数据表中一列或多列的值进行排序的一种数据结构。故此，索引本质就是数据结构。这也是为什么每次数据表建立索引都需要设置在列字段上的原因。</p>\n<h1 id=\"常用的索引结构是什么\"><a href=\"#常用的索引结构是什么\" class=\"headerlink\" title=\"常用的索引结构是什么\"></a>常用的索引结构是什么</h1><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><h1 id=\"https-mp-weixin-qq-com-s-5Yl6H6up9ntZq6l8qxiogw\"><a href=\"#https-mp-weixin-qq-com-s-5Yl6H6up9ntZq6l8qxiogw\" class=\"headerlink\" title=\"https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw\"></a><a href=\"https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw</a></h1>"},{"title":"tools-list","abbrlink":189015225,"_content":"","source":"_drafts/tools-list.md","raw":"---\ntitle: tools-list\nabbrlink: 189015225\ntags:\n---\n","slug":"tools-list","published":0,"date":"2020-04-19T13:41:09.626Z","updated":"2020-04-19T16:07:24.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kg00005shcdhuj4c5nx","content":"","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":""},{"title":"MacOS平台brew update卡死","abbrlink":2155797608,"date":"2020-04-19T04:24:47.000Z","_content":"\n","source":"_drafts/mac-brew-update.md","raw":"---\ntitle: MacOS平台brew update卡死\nabbrlink: 2155797608\ndate: 2020-04-19 12:24:47\ntags:\n  - Mac\n  - Linux\n---\n\n","slug":"mac-brew-update","published":0,"updated":"2020-04-19T04:26:34.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kg20006shcd50fjgykf","content":"","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":""},{"title":"Hexo教程","index_img":"/img/hexo.jpeg","abbrlink":2628717197,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### New draft\n\n    //新建草稿\n    $ hexo new draft \"new draft\"\n\n    //如果你希望强行预览草稿，更改配置文件：\n    render_drafts: true\n    \n    //或者，如下方式启动server：\n    $ hexo server --drafts\n    \n    //把草稿变成文章，或者页面：\n    $ hexo publish [layout] <filename>","source":"_posts/hello-world.md","raw":"---\ntitle: Hexo教程\ntags:\n  - Hexo\nindex_img: /img/hexo.jpeg\nabbrlink: 2628717197\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n### New draft\n\n    //新建草稿\n    $ hexo new draft \"new draft\"\n\n    //如果你希望强行预览草稿，更改配置文件：\n    render_drafts: true\n    \n    //或者，如下方式启动server：\n    $ hexo server --drafts\n    \n    //把草稿变成文章，或者页面：\n    $ hexo publish [layout] <filename>","slug":"hello-world","published":1,"date":"2020-04-17T16:19:53.982Z","updated":"2020-04-19T13:54:46.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kg20007shcdd2c5hxhm","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">\"My New Post\"</span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"hljs bash\">$ hexo server</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"hljs bash\">$ hexo generate</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"hljs bash\">$ hexo deploy</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h3 id=\"New-draft\"><a href=\"#New-draft\" class=\"headerlink\" title=\"New draft\"></a>New draft</h3><pre><code>//新建草稿\n$ hexo new draft &quot;new draft&quot;\n\n//如果你希望强行预览草稿，更改配置文件：\nrender_drafts: true\n\n//或者，如下方式启动server：\n$ hexo server --drafts\n\n//把草稿变成文章，或者页面：\n$ hexo publish [layout] &lt;filename&gt;</code></pre>","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">\"My New Post\"</span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"hljs bash\">$ hexo server</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"hljs bash\">$ hexo generate</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"hljs bash\">$ hexo deploy</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h3 id=\"New-draft\"><a href=\"#New-draft\" class=\"headerlink\" title=\"New draft\"></a>New draft</h3><pre><code>//新建草稿\n$ hexo new draft &quot;new draft&quot;\n\n//如果你希望强行预览草稿，更改配置文件：\nrender_drafts: true\n\n//或者，如下方式启动server：\n$ hexo server --drafts\n\n//把草稿变成文章，或者页面：\n$ hexo publish [layout] &lt;filename&gt;</code></pre>"},{"title":"基于Github Action工作流自动部署Hexo","index_img":"/img/hexo-github-action.jpg","abbrlink":2231850037,"date":"2020-04-16T03:54:14.000Z","_content":"\n# Hexo搭建\n这段就pass了，只要这篇主要讲解Github Action部署\n\n# 创建github ssh 私钥和公钥\n在本地运行如下命令生成id_rsa和id_rsa.pub文件，一路回车，不要输入密码！！！不要输入密码！！！不要输入密码！！！（被这个坑的我想哭T_T，一直验证不通过）\n```cmd\n$ ssh-keygen -t rsa -C \"tanxinzheng@139.com\" #此处修改为你github的注册邮箱\n```\n\n# Github设置\n- 将id_rsa私钥放入项目的settings/secures配置中\n- 将id_rsa.pub公钥填入账号的settings/SSH keys配置中\n\n# 创建Github Action工作流脚本\n\n在项目该目录下创建~./.github/workflows/main.yml文件，将下面的配置信息填入，并修改自己的信息即可\n\n```yml\nname: CI\non:\n  push:\n    branches:\n      - generate-source\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v1\n        with:\n          ref: generate-source\n      - name: Use Node.js ${{ matrix.node_version }}\n        uses: actions/setup-node@v1\n        with:\n          version: ${{ matrix.node_version }}\n      - name: Setup hexo\n        env:\n          ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_PRI }}\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.email \"tanxinzheng@139.com\"\n          git config --global user.name \"tanxinzheng\"\n          npm install hexo-cli -g\n          npm install\n      - name: Hexo deploy\n        run: |\n          hexo clean\n          hexo d\n```\n\n# Github Action执行部署\n在Github Action页面执行即可，push之后会自动部署。","source":"_posts/hexo-github-action.md","raw":"---\ntitle: 基于Github Action工作流自动部署Hexo\ntags:\n  - Hexo\n  - Github\nindex_img: /img/hexo-github-action.jpg\nabbrlink: 2231850037\ndate: 2020-04-16 11:54:14\n---\n\n# Hexo搭建\n这段就pass了，只要这篇主要讲解Github Action部署\n\n# 创建github ssh 私钥和公钥\n在本地运行如下命令生成id_rsa和id_rsa.pub文件，一路回车，不要输入密码！！！不要输入密码！！！不要输入密码！！！（被这个坑的我想哭T_T，一直验证不通过）\n```cmd\n$ ssh-keygen -t rsa -C \"tanxinzheng@139.com\" #此处修改为你github的注册邮箱\n```\n\n# Github设置\n- 将id_rsa私钥放入项目的settings/secures配置中\n- 将id_rsa.pub公钥填入账号的settings/SSH keys配置中\n\n# 创建Github Action工作流脚本\n\n在项目该目录下创建~./.github/workflows/main.yml文件，将下面的配置信息填入，并修改自己的信息即可\n\n```yml\nname: CI\non:\n  push:\n    branches:\n      - generate-source\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v1\n        with:\n          ref: generate-source\n      - name: Use Node.js ${{ matrix.node_version }}\n        uses: actions/setup-node@v1\n        with:\n          version: ${{ matrix.node_version }}\n      - name: Setup hexo\n        env:\n          ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_PRI }}\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.email \"tanxinzheng@139.com\"\n          git config --global user.name \"tanxinzheng\"\n          npm install hexo-cli -g\n          npm install\n      - name: Hexo deploy\n        run: |\n          hexo clean\n          hexo d\n```\n\n# Github Action执行部署\n在Github Action页面执行即可，push之后会自动部署。","slug":"hexo-github-action","published":1,"updated":"2020-04-18T11:36:41.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kg6000ashcd2l54cuue","content":"<h1 id=\"Hexo搭建\"><a href=\"#Hexo搭建\" class=\"headerlink\" title=\"Hexo搭建\"></a>Hexo搭建</h1><p>这段就pass了，只要这篇主要讲解Github Action部署</p>\n<h1 id=\"创建github-ssh-私钥和公钥\"><a href=\"#创建github-ssh-私钥和公钥\" class=\"headerlink\" title=\"创建github ssh 私钥和公钥\"></a>创建github ssh 私钥和公钥</h1><p>在本地运行如下命令生成id_rsa和id_rsa.pub文件，一路回车，不要输入密码！！！不要输入密码！！！不要输入密码！！！（被这个坑的我想哭T_T，一直验证不通过）</p>\n<pre><code class=\"hljs cmd\">$ ssh-keygen -t rsa -C \"tanxinzheng@<span class=\"hljs-number\">139</span>.com\" #此处修改为你github的注册邮箱</code></pre>\n\n<h1 id=\"Github设置\"><a href=\"#Github设置\" class=\"headerlink\" title=\"Github设置\"></a>Github设置</h1><ul>\n<li>将id_rsa私钥放入项目的settings/secures配置中</li>\n<li>将id_rsa.pub公钥填入账号的settings/SSH keys配置中</li>\n</ul>\n<h1 id=\"创建Github-Action工作流脚本\"><a href=\"#创建Github-Action工作流脚本\" class=\"headerlink\" title=\"创建Github Action工作流脚本\"></a>创建Github Action工作流脚本</h1><p>在项目该目录下创建~./.github/workflows/main.yml文件，将下面的配置信息填入，并修改自己的信息即可</p>\n<pre><code class=\"hljs yml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">CI</span>\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">push:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">generate-source</span>\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span> <span class=\"hljs-string\">source</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">ref:</span> <span class=\"hljs-string\">generate-source</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Use</span> <span class=\"hljs-string\">Node.js</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">matrix.node_version</span> <span class=\"hljs-string\">&#125;&#125;</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">matrix.node_version</span> <span class=\"hljs-string\">&#125;&#125;</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Setup</span> <span class=\"hljs-string\">hexo</span>\n        <span class=\"hljs-attr\">env:</span>\n          <span class=\"hljs-attr\">ACTION_DEPLOY_KEY:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HEXO_DEPLOY_PRI</span> <span class=\"hljs-string\">&#125;&#125;</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span>\n          <span class=\"hljs-string\">mkdir</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">~/.ssh/</span>\n          <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">\"$ACTION_DEPLOY_KEY\"</span> <span class=\"hljs-string\">&gt;</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span>\n          <span class=\"hljs-string\">chmod</span> <span class=\"hljs-number\">600</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span>\n          <span class=\"hljs-string\">ssh-keyscan</span> <span class=\"hljs-string\">github.com</span> <span class=\"hljs-string\">&gt;&gt;</span> <span class=\"hljs-string\">~/.ssh/known_hosts</span>\n          <span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">--global</span> <span class=\"hljs-string\">user.email</span> <span class=\"hljs-string\">\"tanxinzheng@139.com\"</span>\n          <span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">--global</span> <span class=\"hljs-string\">user.name</span> <span class=\"hljs-string\">\"tanxinzheng\"</span>\n          <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span> <span class=\"hljs-string\">hexo-cli</span> <span class=\"hljs-string\">-g</span>\n          <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Hexo</span> <span class=\"hljs-string\">deploy</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span>\n          <span class=\"hljs-string\">hexo</span> <span class=\"hljs-string\">clean</span>\n          <span class=\"hljs-string\">hexo</span> <span class=\"hljs-string\">d</span></code></pre>\n\n<h1 id=\"Github-Action执行部署\"><a href=\"#Github-Action执行部署\" class=\"headerlink\" title=\"Github Action执行部署\"></a>Github Action执行部署</h1><p>在Github Action页面执行即可，push之后会自动部署。</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"Hexo搭建\"><a href=\"#Hexo搭建\" class=\"headerlink\" title=\"Hexo搭建\"></a>Hexo搭建</h1><p>这段就pass了，只要这篇主要讲解Github Action部署</p>\n<h1 id=\"创建github-ssh-私钥和公钥\"><a href=\"#创建github-ssh-私钥和公钥\" class=\"headerlink\" title=\"创建github ssh 私钥和公钥\"></a>创建github ssh 私钥和公钥</h1><p>在本地运行如下命令生成id_rsa和id_rsa.pub文件，一路回车，不要输入密码！！！不要输入密码！！！不要输入密码！！！（被这个坑的我想哭T_T，一直验证不通过）</p>\n<pre><code class=\"hljs cmd\">$ ssh-keygen -t rsa -C \"tanxinzheng@<span class=\"hljs-number\">139</span>.com\" #此处修改为你github的注册邮箱</code></pre>\n\n<h1 id=\"Github设置\"><a href=\"#Github设置\" class=\"headerlink\" title=\"Github设置\"></a>Github设置</h1><ul>\n<li>将id_rsa私钥放入项目的settings/secures配置中</li>\n<li>将id_rsa.pub公钥填入账号的settings/SSH keys配置中</li>\n</ul>\n<h1 id=\"创建Github-Action工作流脚本\"><a href=\"#创建Github-Action工作流脚本\" class=\"headerlink\" title=\"创建Github Action工作流脚本\"></a>创建Github Action工作流脚本</h1><p>在项目该目录下创建~./.github/workflows/main.yml文件，将下面的配置信息填入，并修改自己的信息即可</p>\n<pre><code class=\"hljs yml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">CI</span>\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">push:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">generate-source</span>\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span> <span class=\"hljs-string\">source</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">ref:</span> <span class=\"hljs-string\">generate-source</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Use</span> <span class=\"hljs-string\">Node.js</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">matrix.node_version</span> <span class=\"hljs-string\">&#125;&#125;</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">matrix.node_version</span> <span class=\"hljs-string\">&#125;&#125;</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Setup</span> <span class=\"hljs-string\">hexo</span>\n        <span class=\"hljs-attr\">env:</span>\n          <span class=\"hljs-attr\">ACTION_DEPLOY_KEY:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HEXO_DEPLOY_PRI</span> <span class=\"hljs-string\">&#125;&#125;</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span>\n          <span class=\"hljs-string\">mkdir</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">~/.ssh/</span>\n          <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">\"$ACTION_DEPLOY_KEY\"</span> <span class=\"hljs-string\">&gt;</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span>\n          <span class=\"hljs-string\">chmod</span> <span class=\"hljs-number\">600</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span>\n          <span class=\"hljs-string\">ssh-keyscan</span> <span class=\"hljs-string\">github.com</span> <span class=\"hljs-string\">&gt;&gt;</span> <span class=\"hljs-string\">~/.ssh/known_hosts</span>\n          <span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">--global</span> <span class=\"hljs-string\">user.email</span> <span class=\"hljs-string\">\"tanxinzheng@139.com\"</span>\n          <span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">--global</span> <span class=\"hljs-string\">user.name</span> <span class=\"hljs-string\">\"tanxinzheng\"</span>\n          <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span> <span class=\"hljs-string\">hexo-cli</span> <span class=\"hljs-string\">-g</span>\n          <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Hexo</span> <span class=\"hljs-string\">deploy</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span>\n          <span class=\"hljs-string\">hexo</span> <span class=\"hljs-string\">clean</span>\n          <span class=\"hljs-string\">hexo</span> <span class=\"hljs-string\">d</span></code></pre>\n\n<h1 id=\"Github-Action执行部署\"><a href=\"#Github-Action执行部署\" class=\"headerlink\" title=\"Github Action执行部署\"></a>Github Action执行部署</h1><p>在Github Action页面执行即可，push之后会自动部署。</p>\n"},{"title":"Linux使用非root账户密钥登录SSH","abbrlink":2578104319,"date":"2017-08-18T09:59:25.000Z","index_img":"/img/linux.jpeg","_content":"\n安装Linux/Ubuntu的阿里云ECS默认情况下是使用账号+密码通过SSH登录的，并且默认账户是root，所以这里难免会有安全隐患。\n因此这里记录一下：Linux/Ubuntu系统怎么设置普通用户（非root用户），本教程以admin用户为例，使用秘钥登录通过SSH登录远程服务器。\n\n# 本地端流程\n## 检查本地SSH Key\n检查本地是否已经存在SSH Key秘钥，输入下面的命令来检查本地是否已经存在秘钥，如果有下面结果则跳过该步，若没有那么接下来的步骤生成秘钥\n\n    $ ls -a ~/.ssh\n    .\t\t..\t\tauthorized_keys\tid_rsa\t\tid_rsa.pub\tknown_hosts\n\n## 生成本地SSH Key秘钥\n输入以下命令，默认会在相应路径下（~/.ssh）生成id_rsa和id_rsa.pub两个文件，如下面代码所示\n\n     # 注：若需要免密码登录则直接回车\n     ~$ ssh-keygen -t rsa -C \"your_email@example.com\"   \n     Enter file in which to save the key (/your_home_path/.ssh/id_rsa): \n     Enter passphrase (empty for no passphrase): \n     Enter same passphrase again: \n     Your identification has been saved in /your_home_path/.ssh/id_rsa.\n     Your public key has been saved in /your_home_path/.ssh/id_rsa.pub.\n     The key fingerprint is:\n     SHA256:YgZkAauw6YCWAWwvfiMgJ7zBGkVbFqgRxQ7hdet5nGY your_email@example.com\n     The key's randomart image is:\n     +---[RSA 2048]----+\n     |BO=++o           |\n     |Bo++. .          |\n     |oOo ..           |\n     |+==...o .        |\n     |X+.  o+ES        |\n     |=X + o+.         |\n     |.oX .            |\n     |..               |\n     |                 |\n     +----[SHA256]-----+\n\n# 服务器端流程\n创建普通用户\n使用root用户操作以下命令创建普通用户：\n## 创建用户并修改密码\n    \n    useradd admin\n    passwd admin\n    vi /etc/sudoers                                 # 增加用户su身份，编辑sudoers文件\n    admin ALL=(ALL:ALL) ALL                         # 在最底部加入这一行，保存退出\n\n## 添加ssh key公钥配置\n使用root用户操作以下命令创建存储密钥的文件夹及文件\n> <font color=red>**注意：第三步是最重要的一步！！！**</font>\n\n     mkdir /home/admin/.ssh\n     chmod 700 /home/admin/.ssh                       \n     vi /home/admin/.ssh/authorized_keys            #创建authorized_keys文件，并将本地生成的id_rsa.pub的内容填入authorized_keys\n     chmod 600 /home/admin/.ssh/authorized_keys     #设置authorized_keys权限\n     chown -R admin:admin /home/admin/.ssh/         #修改用户组和用户所有权\n     systemctl stop sshd                            #暂停ssh服务\n     systemctl start sshd                           #启动ssh服务\n\n## 设置SSH登录安全配置（可选步骤）\n> **温馨提示：SSH登录安全配置建议，使用root用户操作以下命令**\n\n     # 编辑SSH配置文件 \n     vi /etc/ssh/sshd_config\n     PermitRootLogin no                             # 禁用root账号登录，该配置可不修改，避免特殊情况下需要用到root\n     PasswordAuthentication no                      # 禁用账号+密码登录\n     # 保存退出后，重启ssh服务\n     systemctl stop sshd\n     systemctl start sshd\n     \n# 本地验证登录\n因为每次记ip很麻烦，推荐使用hosts映射ip，使用别名登录。\n## 添加远端ip别名\n\n    vi /etc/hosts\n    xxx.xxx.xxx.xxx   my-remote-server              # 添加远端ip及映射的别名：ip  别名\n\n## 验证ssh免密登录\n    \n    ssh admin@xxx.xxx.xxx.xxx                       # ip远程登录\n    ssh admin@my-remote-server                      # 别名远程登录\n    \n   \n","source":"_posts/linux-ssh.md","raw":"---\ntitle: Linux使用非root账户密钥登录SSH\nabbrlink: 2578104319\ndate: 2017-08-18 17:59:25\nindex_img: /img/linux.jpeg\ntags: \n  - Linux\n---\n\n安装Linux/Ubuntu的阿里云ECS默认情况下是使用账号+密码通过SSH登录的，并且默认账户是root，所以这里难免会有安全隐患。\n因此这里记录一下：Linux/Ubuntu系统怎么设置普通用户（非root用户），本教程以admin用户为例，使用秘钥登录通过SSH登录远程服务器。\n\n# 本地端流程\n## 检查本地SSH Key\n检查本地是否已经存在SSH Key秘钥，输入下面的命令来检查本地是否已经存在秘钥，如果有下面结果则跳过该步，若没有那么接下来的步骤生成秘钥\n\n    $ ls -a ~/.ssh\n    .\t\t..\t\tauthorized_keys\tid_rsa\t\tid_rsa.pub\tknown_hosts\n\n## 生成本地SSH Key秘钥\n输入以下命令，默认会在相应路径下（~/.ssh）生成id_rsa和id_rsa.pub两个文件，如下面代码所示\n\n     # 注：若需要免密码登录则直接回车\n     ~$ ssh-keygen -t rsa -C \"your_email@example.com\"   \n     Enter file in which to save the key (/your_home_path/.ssh/id_rsa): \n     Enter passphrase (empty for no passphrase): \n     Enter same passphrase again: \n     Your identification has been saved in /your_home_path/.ssh/id_rsa.\n     Your public key has been saved in /your_home_path/.ssh/id_rsa.pub.\n     The key fingerprint is:\n     SHA256:YgZkAauw6YCWAWwvfiMgJ7zBGkVbFqgRxQ7hdet5nGY your_email@example.com\n     The key's randomart image is:\n     +---[RSA 2048]----+\n     |BO=++o           |\n     |Bo++. .          |\n     |oOo ..           |\n     |+==...o .        |\n     |X+.  o+ES        |\n     |=X + o+.         |\n     |.oX .            |\n     |..               |\n     |                 |\n     +----[SHA256]-----+\n\n# 服务器端流程\n创建普通用户\n使用root用户操作以下命令创建普通用户：\n## 创建用户并修改密码\n    \n    useradd admin\n    passwd admin\n    vi /etc/sudoers                                 # 增加用户su身份，编辑sudoers文件\n    admin ALL=(ALL:ALL) ALL                         # 在最底部加入这一行，保存退出\n\n## 添加ssh key公钥配置\n使用root用户操作以下命令创建存储密钥的文件夹及文件\n> <font color=red>**注意：第三步是最重要的一步！！！**</font>\n\n     mkdir /home/admin/.ssh\n     chmod 700 /home/admin/.ssh                       \n     vi /home/admin/.ssh/authorized_keys            #创建authorized_keys文件，并将本地生成的id_rsa.pub的内容填入authorized_keys\n     chmod 600 /home/admin/.ssh/authorized_keys     #设置authorized_keys权限\n     chown -R admin:admin /home/admin/.ssh/         #修改用户组和用户所有权\n     systemctl stop sshd                            #暂停ssh服务\n     systemctl start sshd                           #启动ssh服务\n\n## 设置SSH登录安全配置（可选步骤）\n> **温馨提示：SSH登录安全配置建议，使用root用户操作以下命令**\n\n     # 编辑SSH配置文件 \n     vi /etc/ssh/sshd_config\n     PermitRootLogin no                             # 禁用root账号登录，该配置可不修改，避免特殊情况下需要用到root\n     PasswordAuthentication no                      # 禁用账号+密码登录\n     # 保存退出后，重启ssh服务\n     systemctl stop sshd\n     systemctl start sshd\n     \n# 本地验证登录\n因为每次记ip很麻烦，推荐使用hosts映射ip，使用别名登录。\n## 添加远端ip别名\n\n    vi /etc/hosts\n    xxx.xxx.xxx.xxx   my-remote-server              # 添加远端ip及映射的别名：ip  别名\n\n## 验证ssh免密登录\n    \n    ssh admin@xxx.xxx.xxx.xxx                       # ip远程登录\n    ssh admin@my-remote-server                      # 别名远程登录\n    \n   \n","slug":"linux-ssh","published":1,"updated":"2020-04-18T11:40:11.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kg8000bshcd0b5nejj9","content":"<p>安装Linux/Ubuntu的阿里云ECS默认情况下是使用账号+密码通过SSH登录的，并且默认账户是root，所以这里难免会有安全隐患。<br>因此这里记录一下：Linux/Ubuntu系统怎么设置普通用户（非root用户），本教程以admin用户为例，使用秘钥登录通过SSH登录远程服务器。</p>\n<h1 id=\"本地端流程\"><a href=\"#本地端流程\" class=\"headerlink\" title=\"本地端流程\"></a>本地端流程</h1><h2 id=\"检查本地SSH-Key\"><a href=\"#检查本地SSH-Key\" class=\"headerlink\" title=\"检查本地SSH Key\"></a>检查本地SSH Key</h2><p>检查本地是否已经存在SSH Key秘钥，输入下面的命令来检查本地是否已经存在秘钥，如果有下面结果则跳过该步，若没有那么接下来的步骤生成秘钥</p>\n<pre><code>$ ls -a ~/.ssh\n.        ..        authorized_keys    id_rsa        id_rsa.pub    known_hosts</code></pre><h2 id=\"生成本地SSH-Key秘钥\"><a href=\"#生成本地SSH-Key秘钥\" class=\"headerlink\" title=\"生成本地SSH Key秘钥\"></a>生成本地SSH Key秘钥</h2><p>输入以下命令，默认会在相应路径下（~/.ssh）生成id_rsa和id_rsa.pub两个文件，如下面代码所示</p>\n<pre><code># 注：若需要免密码登录则直接回车\n~$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;   \nEnter file in which to save the key (/your_home_path/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /your_home_path/.ssh/id_rsa.\nYour public key has been saved in /your_home_path/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:YgZkAauw6YCWAWwvfiMgJ7zBGkVbFqgRxQ7hdet5nGY your_email@example.com\nThe key&apos;s randomart image is:\n+---[RSA 2048]----+\n|BO=++o           |\n|Bo++. .          |\n|oOo ..           |\n|+==...o .        |\n|X+.  o+ES        |\n|=X + o+.         |\n|.oX .            |\n|..               |\n|                 |\n+----[SHA256]-----+</code></pre><h1 id=\"服务器端流程\"><a href=\"#服务器端流程\" class=\"headerlink\" title=\"服务器端流程\"></a>服务器端流程</h1><p>创建普通用户<br>使用root用户操作以下命令创建普通用户：</p>\n<h2 id=\"创建用户并修改密码\"><a href=\"#创建用户并修改密码\" class=\"headerlink\" title=\"创建用户并修改密码\"></a>创建用户并修改密码</h2><pre><code>useradd admin\npasswd admin\nvi /etc/sudoers                                 # 增加用户su身份，编辑sudoers文件\nadmin ALL=(ALL:ALL) ALL                         # 在最底部加入这一行，保存退出</code></pre><h2 id=\"添加ssh-key公钥配置\"><a href=\"#添加ssh-key公钥配置\" class=\"headerlink\" title=\"添加ssh key公钥配置\"></a>添加ssh key公钥配置</h2><p>使用root用户操作以下命令创建存储密钥的文件夹及文件</p>\n<blockquote>\n<p><font color=red><strong>注意：第三步是最重要的一步！！！</strong></font></p>\n</blockquote>\n<pre><code>mkdir /home/admin/.ssh\nchmod 700 /home/admin/.ssh                       \nvi /home/admin/.ssh/authorized_keys            #创建authorized_keys文件，并将本地生成的id_rsa.pub的内容填入authorized_keys\nchmod 600 /home/admin/.ssh/authorized_keys     #设置authorized_keys权限\nchown -R admin:admin /home/admin/.ssh/         #修改用户组和用户所有权\nsystemctl stop sshd                            #暂停ssh服务\nsystemctl start sshd                           #启动ssh服务</code></pre><h2 id=\"设置SSH登录安全配置（可选步骤）\"><a href=\"#设置SSH登录安全配置（可选步骤）\" class=\"headerlink\" title=\"设置SSH登录安全配置（可选步骤）\"></a>设置SSH登录安全配置（可选步骤）</h2><blockquote>\n<p><strong>温馨提示：SSH登录安全配置建议，使用root用户操作以下命令</strong></p>\n</blockquote>\n<pre><code># 编辑SSH配置文件 \nvi /etc/ssh/sshd_config\nPermitRootLogin no                             # 禁用root账号登录，该配置可不修改，避免特殊情况下需要用到root\nPasswordAuthentication no                      # 禁用账号+密码登录\n# 保存退出后，重启ssh服务\nsystemctl stop sshd\nsystemctl start sshd</code></pre><h1 id=\"本地验证登录\"><a href=\"#本地验证登录\" class=\"headerlink\" title=\"本地验证登录\"></a>本地验证登录</h1><p>因为每次记ip很麻烦，推荐使用hosts映射ip，使用别名登录。</p>\n<h2 id=\"添加远端ip别名\"><a href=\"#添加远端ip别名\" class=\"headerlink\" title=\"添加远端ip别名\"></a>添加远端ip别名</h2><pre><code>vi /etc/hosts\nxxx.xxx.xxx.xxx   my-remote-server              # 添加远端ip及映射的别名：ip  别名</code></pre><h2 id=\"验证ssh免密登录\"><a href=\"#验证ssh免密登录\" class=\"headerlink\" title=\"验证ssh免密登录\"></a>验证ssh免密登录</h2><pre><code>ssh admin@xxx.xxx.xxx.xxx                       # ip远程登录\nssh admin@my-remote-server                      # 别名远程登录</code></pre>","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>安装Linux/Ubuntu的阿里云ECS默认情况下是使用账号+密码通过SSH登录的，并且默认账户是root，所以这里难免会有安全隐患。<br>因此这里记录一下：Linux/Ubuntu系统怎么设置普通用户（非root用户），本教程以admin用户为例，使用秘钥登录通过SSH登录远程服务器。</p>\n<h1 id=\"本地端流程\"><a href=\"#本地端流程\" class=\"headerlink\" title=\"本地端流程\"></a>本地端流程</h1><h2 id=\"检查本地SSH-Key\"><a href=\"#检查本地SSH-Key\" class=\"headerlink\" title=\"检查本地SSH Key\"></a>检查本地SSH Key</h2><p>检查本地是否已经存在SSH Key秘钥，输入下面的命令来检查本地是否已经存在秘钥，如果有下面结果则跳过该步，若没有那么接下来的步骤生成秘钥</p>\n<pre><code>$ ls -a ~/.ssh\n.        ..        authorized_keys    id_rsa        id_rsa.pub    known_hosts</code></pre><h2 id=\"生成本地SSH-Key秘钥\"><a href=\"#生成本地SSH-Key秘钥\" class=\"headerlink\" title=\"生成本地SSH Key秘钥\"></a>生成本地SSH Key秘钥</h2><p>输入以下命令，默认会在相应路径下（~/.ssh）生成id_rsa和id_rsa.pub两个文件，如下面代码所示</p>\n<pre><code># 注：若需要免密码登录则直接回车\n~$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;   \nEnter file in which to save the key (/your_home_path/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /your_home_path/.ssh/id_rsa.\nYour public key has been saved in /your_home_path/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:YgZkAauw6YCWAWwvfiMgJ7zBGkVbFqgRxQ7hdet5nGY your_email@example.com\nThe key&apos;s randomart image is:\n+---[RSA 2048]----+\n|BO=++o           |\n|Bo++. .          |\n|oOo ..           |\n|+==...o .        |\n|X+.  o+ES        |\n|=X + o+.         |\n|.oX .            |\n|..               |\n|                 |\n+----[SHA256]-----+</code></pre><h1 id=\"服务器端流程\"><a href=\"#服务器端流程\" class=\"headerlink\" title=\"服务器端流程\"></a>服务器端流程</h1><p>创建普通用户<br>使用root用户操作以下命令创建普通用户：</p>\n<h2 id=\"创建用户并修改密码\"><a href=\"#创建用户并修改密码\" class=\"headerlink\" title=\"创建用户并修改密码\"></a>创建用户并修改密码</h2><pre><code>useradd admin\npasswd admin\nvi /etc/sudoers                                 # 增加用户su身份，编辑sudoers文件\nadmin ALL=(ALL:ALL) ALL                         # 在最底部加入这一行，保存退出</code></pre><h2 id=\"添加ssh-key公钥配置\"><a href=\"#添加ssh-key公钥配置\" class=\"headerlink\" title=\"添加ssh key公钥配置\"></a>添加ssh key公钥配置</h2><p>使用root用户操作以下命令创建存储密钥的文件夹及文件</p>\n<blockquote>\n<p><font color=red><strong>注意：第三步是最重要的一步！！！</strong></font></p>\n</blockquote>\n<pre><code>mkdir /home/admin/.ssh\nchmod 700 /home/admin/.ssh                       \nvi /home/admin/.ssh/authorized_keys            #创建authorized_keys文件，并将本地生成的id_rsa.pub的内容填入authorized_keys\nchmod 600 /home/admin/.ssh/authorized_keys     #设置authorized_keys权限\nchown -R admin:admin /home/admin/.ssh/         #修改用户组和用户所有权\nsystemctl stop sshd                            #暂停ssh服务\nsystemctl start sshd                           #启动ssh服务</code></pre><h2 id=\"设置SSH登录安全配置（可选步骤）\"><a href=\"#设置SSH登录安全配置（可选步骤）\" class=\"headerlink\" title=\"设置SSH登录安全配置（可选步骤）\"></a>设置SSH登录安全配置（可选步骤）</h2><blockquote>\n<p><strong>温馨提示：SSH登录安全配置建议，使用root用户操作以下命令</strong></p>\n</blockquote>\n<pre><code># 编辑SSH配置文件 \nvi /etc/ssh/sshd_config\nPermitRootLogin no                             # 禁用root账号登录，该配置可不修改，避免特殊情况下需要用到root\nPasswordAuthentication no                      # 禁用账号+密码登录\n# 保存退出后，重启ssh服务\nsystemctl stop sshd\nsystemctl start sshd</code></pre><h1 id=\"本地验证登录\"><a href=\"#本地验证登录\" class=\"headerlink\" title=\"本地验证登录\"></a>本地验证登录</h1><p>因为每次记ip很麻烦，推荐使用hosts映射ip，使用别名登录。</p>\n<h2 id=\"添加远端ip别名\"><a href=\"#添加远端ip别名\" class=\"headerlink\" title=\"添加远端ip别名\"></a>添加远端ip别名</h2><pre><code>vi /etc/hosts\nxxx.xxx.xxx.xxx   my-remote-server              # 添加远端ip及映射的别名：ip  别名</code></pre><h2 id=\"验证ssh免密登录\"><a href=\"#验证ssh免密登录\" class=\"headerlink\" title=\"验证ssh免密登录\"></a>验证ssh免密登录</h2><pre><code>ssh admin@xxx.xxx.xxx.xxx                       # ip远程登录\nssh admin@my-remote-server                      # 别名远程登录</code></pre>"},{"title":"Docker之Redis Cluster搭建","abbrlink":41928529,"date":"2020-12-10T08:33:34.000Z","_content":"\n## 环境\n\nDocker 版本 19.03.8\n```\nMacBook-Pro-6:~ tanxinzheng$ docker -v\nDocker version 19.03.8, build afacb8b\n```\n\n## 搭建\n搭建的部署主要分为\n- 架构设计\n- 编写Docker Compose编排文件\n- 创建redis cluster配置文件\n- 启动服务容器\n- 创建Redis集群\n\n### 架构设计\nredis集群模式必须要有3个主节点3个从节点才能正常启动集群模式\n\n- 主节点端口：7000 | 7001 | 7002\n- 从节点端口：7003 | 7004 | 7005\n\n### Docker Compose\n为节省内存资源，主从节点都部署在单机实例中\n```\nversion: '2'\n\nservices:\n  cluster:\n    image: daocloud.io/redis\n    container_name: redis-cluster\n    # 添加该参数后服务后台运行后，容器不会自动退出\n    tty: true\n    restart: always\n    # linux环境下建议使用host模式\n    network_mode: host\n\n    volumes:\n      - ./data:/data\n      - ./config:/etc/redis  \n    ports:\n      - \"7000:7000\"\n      - \"7001:7001\"\n      - \"7002:7002\"\n      - \"7003:7003\"\n      - \"7004:7004\"\n      - \"7005:7005\"\n    ## 必须使用宿主机ip 作为集群总线ip，否则宿主机无法访问到容器内的redis集群ip \n    # 也可以加在配置文件中\n    #  --cluster-announce-ip 172.16.65.218 \n    command: \n      - /bin/bash \n      - -c \n      - |\n        redis-server /etc/redis/redis_cluster_7000.conf  --cluster-announce-ip 172.16.65.218 & \n        redis-server /etc/redis/redis_cluster_7001.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7002.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7003.conf  --cluster-announce-ip 172.16.65.218 & \n        redis-server /etc/redis/redis_cluster_7004.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7005.conf  --cluster-announce-ip 172.16.65.218 \n```\n### redis_700X.conf\n根据各端口修改配置中的端口号\n```\nport 7000\n# 绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1\nbind 0.0.0.0\n# 启用集群模式\ncluster-enabled yes\n# 集群节点文件\ncluster-config-file nodes_7000.conf\n# 指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录\ndir /data/7000/\n# 节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间\ncluster-node-timeout 5000\n# 集群广播ip\n#cluster-announce-ip 172.20.0.4\n#cluster-announce-port 7000\n# 开启AOF模式\nappendonly yes\n# 关闭保护模式\nprotected-mode no\n# 是否后台启动\ndaemonize no\n# pid file所在目录\npidfile /var/run/redis_7000.pid \n# 客户端访问密码\n# requirepass redis2020\n# 日志文件\nlogfile /var/log/redis_7001.log\n```\n\n## 启动Redis Cluster\n```\ndocker-compose up -d\n```\n\n### 创建Redis集群\n\n- 进入容器\n```\n$ docker exec -it redis-cluster /bin/bash\n```\n- 创建集群\n```\n$ redis-cli --cluster create 127.0.0.1:7000 \\\n                           127.0.0.1:7001 \\\n                           127.0.0.1:7002 \\\n                           127.0.0.1:7003 \\\n                           127.0.0.1:7004 \\\n                           127.0.0.1:7005 \\\n                           --cluster-replicas 1\n```\n\n## 查看集群状态\n\n### \n```\n## -c表示集群模式进入\nroot@docker-desktop:/data# redis-cli -c -h localhost -p 7000\n\n## 查看集群信息 cluster_state为ok则表示集群创建成功\nlocalhost:7000> cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:1\ncluster_current_epoch:6\ncluster_my_epoch:3\ncluster_stats_messages_ping_sent:5290\ncluster_stats_messages_pong_sent:5299\ncluster_stats_messages_update_sent:1\ncluster_stats_messages_sent:10590\ncluster_stats_messages_ping_received:5294\ncluster_stats_messages_pong_received:5290\ncluster_stats_messages_meet_received:5\ncluster_stats_messages_update_received:3\ncluster_stats_messages_received:10592\n\n## 查看集群节点信息\nlocalhost:7000> cluster nodes\n6b7f8c4767feb376a99e79068748253afcf6ea5a 127.0.0.1:7001@17001 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594235646 3 connected\n52b109a6491a2e4280b6a66642716939d0f46e89 127.0.0.1:7004@17004 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594236555 5 connected\ndf7dcbf82ecba0ff044f2715b052674e73ec1ca6 127.0.0.1:7000@17000 myself,slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594234000 1 connected\n51f5c9fb771a702933d8bc29fcd13eb41811e2bb 127.0.0.1:7005@17005 master - 0 1607594236000 6 connected\nef7fdf2421427d1da29da4c1dab9e8c26ca12854 127.0.0.1:7002@17002 master - 0 1607594236657 3 connected 0-16383\ncf7327c9ec3b374ebc6ba3f49c6bd5e0a7098601 127.0.0.1:7003@17003 master - 0 1607594235544 4 connected\n```\n\n## 参考\n- [1] [Redis Cluster](https://redis.io/topics/cluster-tutorial)","source":"_posts/redis-cluster.md","raw":"---\ntitle: Docker之Redis Cluster搭建\ntags:\n  - redis\n  - cluster\n  - docker\n  - docker-compose\nabbrlink: 41928529\ndate: 2020-12-10 16:33:34\n---\n\n## 环境\n\nDocker 版本 19.03.8\n```\nMacBook-Pro-6:~ tanxinzheng$ docker -v\nDocker version 19.03.8, build afacb8b\n```\n\n## 搭建\n搭建的部署主要分为\n- 架构设计\n- 编写Docker Compose编排文件\n- 创建redis cluster配置文件\n- 启动服务容器\n- 创建Redis集群\n\n### 架构设计\nredis集群模式必须要有3个主节点3个从节点才能正常启动集群模式\n\n- 主节点端口：7000 | 7001 | 7002\n- 从节点端口：7003 | 7004 | 7005\n\n### Docker Compose\n为节省内存资源，主从节点都部署在单机实例中\n```\nversion: '2'\n\nservices:\n  cluster:\n    image: daocloud.io/redis\n    container_name: redis-cluster\n    # 添加该参数后服务后台运行后，容器不会自动退出\n    tty: true\n    restart: always\n    # linux环境下建议使用host模式\n    network_mode: host\n\n    volumes:\n      - ./data:/data\n      - ./config:/etc/redis  \n    ports:\n      - \"7000:7000\"\n      - \"7001:7001\"\n      - \"7002:7002\"\n      - \"7003:7003\"\n      - \"7004:7004\"\n      - \"7005:7005\"\n    ## 必须使用宿主机ip 作为集群总线ip，否则宿主机无法访问到容器内的redis集群ip \n    # 也可以加在配置文件中\n    #  --cluster-announce-ip 172.16.65.218 \n    command: \n      - /bin/bash \n      - -c \n      - |\n        redis-server /etc/redis/redis_cluster_7000.conf  --cluster-announce-ip 172.16.65.218 & \n        redis-server /etc/redis/redis_cluster_7001.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7002.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7003.conf  --cluster-announce-ip 172.16.65.218 & \n        redis-server /etc/redis/redis_cluster_7004.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7005.conf  --cluster-announce-ip 172.16.65.218 \n```\n### redis_700X.conf\n根据各端口修改配置中的端口号\n```\nport 7000\n# 绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1\nbind 0.0.0.0\n# 启用集群模式\ncluster-enabled yes\n# 集群节点文件\ncluster-config-file nodes_7000.conf\n# 指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录\ndir /data/7000/\n# 节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间\ncluster-node-timeout 5000\n# 集群广播ip\n#cluster-announce-ip 172.20.0.4\n#cluster-announce-port 7000\n# 开启AOF模式\nappendonly yes\n# 关闭保护模式\nprotected-mode no\n# 是否后台启动\ndaemonize no\n# pid file所在目录\npidfile /var/run/redis_7000.pid \n# 客户端访问密码\n# requirepass redis2020\n# 日志文件\nlogfile /var/log/redis_7001.log\n```\n\n## 启动Redis Cluster\n```\ndocker-compose up -d\n```\n\n### 创建Redis集群\n\n- 进入容器\n```\n$ docker exec -it redis-cluster /bin/bash\n```\n- 创建集群\n```\n$ redis-cli --cluster create 127.0.0.1:7000 \\\n                           127.0.0.1:7001 \\\n                           127.0.0.1:7002 \\\n                           127.0.0.1:7003 \\\n                           127.0.0.1:7004 \\\n                           127.0.0.1:7005 \\\n                           --cluster-replicas 1\n```\n\n## 查看集群状态\n\n### \n```\n## -c表示集群模式进入\nroot@docker-desktop:/data# redis-cli -c -h localhost -p 7000\n\n## 查看集群信息 cluster_state为ok则表示集群创建成功\nlocalhost:7000> cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:1\ncluster_current_epoch:6\ncluster_my_epoch:3\ncluster_stats_messages_ping_sent:5290\ncluster_stats_messages_pong_sent:5299\ncluster_stats_messages_update_sent:1\ncluster_stats_messages_sent:10590\ncluster_stats_messages_ping_received:5294\ncluster_stats_messages_pong_received:5290\ncluster_stats_messages_meet_received:5\ncluster_stats_messages_update_received:3\ncluster_stats_messages_received:10592\n\n## 查看集群节点信息\nlocalhost:7000> cluster nodes\n6b7f8c4767feb376a99e79068748253afcf6ea5a 127.0.0.1:7001@17001 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594235646 3 connected\n52b109a6491a2e4280b6a66642716939d0f46e89 127.0.0.1:7004@17004 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594236555 5 connected\ndf7dcbf82ecba0ff044f2715b052674e73ec1ca6 127.0.0.1:7000@17000 myself,slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594234000 1 connected\n51f5c9fb771a702933d8bc29fcd13eb41811e2bb 127.0.0.1:7005@17005 master - 0 1607594236000 6 connected\nef7fdf2421427d1da29da4c1dab9e8c26ca12854 127.0.0.1:7002@17002 master - 0 1607594236657 3 connected 0-16383\ncf7327c9ec3b374ebc6ba3f49c6bd5e0a7098601 127.0.0.1:7003@17003 master - 0 1607594235544 4 connected\n```\n\n## 参考\n- [1] [Redis Cluster](https://redis.io/topics/cluster-tutorial)","slug":"redis-cluster","published":1,"updated":"2020-12-10T09:58:59.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kgb000dshcdgnaf64u4","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Docker 版本 19.03.8</p>\n<pre><code class=\"hljs plain\">MacBook-Pro-6:~ tanxinzheng$ docker -v\nDocker version 19.03.8, build afacb8b</code></pre>\n\n<h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><p>搭建的部署主要分为</p>\n<ul>\n<li>架构设计</li>\n<li>编写Docker Compose编排文件</li>\n<li>创建redis cluster配置文件</li>\n<li>启动服务容器</li>\n<li>创建Redis集群</li>\n</ul>\n<h3 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h3><p>redis集群模式必须要有3个主节点3个从节点才能正常启动集群模式</p>\n<ul>\n<li>主节点端口：7000 | 7001 | 7002</li>\n<li>从节点端口：7003 | 7004 | 7005</li>\n</ul>\n<h3 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h3><p>为节省内存资源，主从节点都部署在单机实例中</p>\n<pre><code class=\"hljs plain\">version: &#39;2&#39;\n\nservices:\n  cluster:\n    image: daocloud.io&#x2F;redis\n    container_name: redis-cluster\n    # 添加该参数后服务后台运行后，容器不会自动退出\n    tty: true\n    restart: always\n    # linux环境下建议使用host模式\n    network_mode: host\n\n    volumes:\n      - .&#x2F;data:&#x2F;data\n      - .&#x2F;config:&#x2F;etc&#x2F;redis  \n    ports:\n      - &quot;7000:7000&quot;\n      - &quot;7001:7001&quot;\n      - &quot;7002:7002&quot;\n      - &quot;7003:7003&quot;\n      - &quot;7004:7004&quot;\n      - &quot;7005:7005&quot;\n    ## 必须使用宿主机ip 作为集群总线ip，否则宿主机无法访问到容器内的redis集群ip \n    # 也可以加在配置文件中\n    #  --cluster-announce-ip 172.16.65.218 \n    command: \n      - &#x2F;bin&#x2F;bash \n      - -c \n      - |\n        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7000.conf  --cluster-announce-ip 172.16.65.218 &amp; \n        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7001.conf  --cluster-announce-ip 172.16.65.218 &amp;\n        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7002.conf  --cluster-announce-ip 172.16.65.218 &amp;\n        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7003.conf  --cluster-announce-ip 172.16.65.218 &amp; \n        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7004.conf  --cluster-announce-ip 172.16.65.218 &amp;\n        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7005.conf  --cluster-announce-ip 172.16.65.218</code></pre>\n<h3 id=\"redis-700X-conf\"><a href=\"#redis-700X-conf\" class=\"headerlink\" title=\"redis_700X.conf\"></a>redis_700X.conf</h3><p>根据各端口修改配置中的端口号</p>\n<pre><code class=\"hljs plain\">port 7000\n# 绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1\nbind 0.0.0.0\n# 启用集群模式\ncluster-enabled yes\n# 集群节点文件\ncluster-config-file nodes_7000.conf\n# 指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录\ndir &#x2F;data&#x2F;7000&#x2F;\n# 节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间\ncluster-node-timeout 5000\n# 集群广播ip\n#cluster-announce-ip 172.20.0.4\n#cluster-announce-port 7000\n# 开启AOF模式\nappendonly yes\n# 关闭保护模式\nprotected-mode no\n# 是否后台启动\ndaemonize no\n# pid file所在目录\npidfile &#x2F;var&#x2F;run&#x2F;redis_7000.pid \n# 客户端访问密码\n# requirepass redis2020\n# 日志文件\nlogfile &#x2F;var&#x2F;log&#x2F;redis_7001.log</code></pre>\n\n<h2 id=\"启动Redis-Cluster\"><a href=\"#启动Redis-Cluster\" class=\"headerlink\" title=\"启动Redis Cluster\"></a>启动Redis Cluster</h2><pre><code class=\"hljs plain\">docker-compose up -d</code></pre>\n\n<h3 id=\"创建Redis集群\"><a href=\"#创建Redis集群\" class=\"headerlink\" title=\"创建Redis集群\"></a>创建Redis集群</h3><ul>\n<li>进入容器<pre><code class=\"hljs plain\">$ docker exec -it redis-cluster &#x2F;bin&#x2F;bash</code></pre></li>\n<li>创建集群<pre><code class=\"hljs plain\">$ redis-cli --cluster create 127.0.0.1:7000 \\\n                           127.0.0.1:7001 \\\n                           127.0.0.1:7002 \\\n                           127.0.0.1:7003 \\\n                           127.0.0.1:7004 \\\n                           127.0.0.1:7005 \\\n                           --cluster-replicas 1</code></pre>\n\n</li>\n</ul>\n<h2 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><pre><code class=\"hljs plain\">## -c表示集群模式进入\nroot@docker-desktop:&#x2F;data# redis-cli -c -h localhost -p 7000\n\n## 查看集群信息 cluster_state为ok则表示集群创建成功\nlocalhost:7000&gt; cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:1\ncluster_current_epoch:6\ncluster_my_epoch:3\ncluster_stats_messages_ping_sent:5290\ncluster_stats_messages_pong_sent:5299\ncluster_stats_messages_update_sent:1\ncluster_stats_messages_sent:10590\ncluster_stats_messages_ping_received:5294\ncluster_stats_messages_pong_received:5290\ncluster_stats_messages_meet_received:5\ncluster_stats_messages_update_received:3\ncluster_stats_messages_received:10592\n\n## 查看集群节点信息\nlocalhost:7000&gt; cluster nodes\n6b7f8c4767feb376a99e79068748253afcf6ea5a 127.0.0.1:7001@17001 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594235646 3 connected\n52b109a6491a2e4280b6a66642716939d0f46e89 127.0.0.1:7004@17004 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594236555 5 connected\ndf7dcbf82ecba0ff044f2715b052674e73ec1ca6 127.0.0.1:7000@17000 myself,slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594234000 1 connected\n51f5c9fb771a702933d8bc29fcd13eb41811e2bb 127.0.0.1:7005@17005 master - 0 1607594236000 6 connected\nef7fdf2421427d1da29da4c1dab9e8c26ca12854 127.0.0.1:7002@17002 master - 0 1607594236657 3 connected 0-16383\ncf7327c9ec3b374ebc6ba3f49c6bd5e0a7098601 127.0.0.1:7003@17003 master - 0 1607594235544 4 connected</code></pre>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>[1] <a href=\"https://redis.io/topics/cluster-tutorial\" target=\"_blank\" rel=\"noopener\">Redis Cluster</a></li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Docker 版本 19.03.8</p>\n<pre><code class=\"hljs plain\">MacBook-Pro-6:~ tanxinzheng$ docker -v\nDocker version 19.03.8, build afacb8b</code></pre>\n\n<h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><p>搭建的部署主要分为</p>\n<ul>\n<li>架构设计</li>\n<li>编写Docker Compose编排文件</li>\n<li>创建redis cluster配置文件</li>\n<li>启动服务容器</li>\n<li>创建Redis集群</li>\n</ul>\n<h3 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h3><p>redis集群模式必须要有3个主节点3个从节点才能正常启动集群模式</p>\n<ul>\n<li>主节点端口：7000 | 7001 | 7002</li>\n<li>从节点端口：7003 | 7004 | 7005</li>\n</ul>\n<h3 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h3><p>为节省内存资源，主从节点都部署在单机实例中</p>\n<pre><code class=\"hljs plain\">version: &#39;2&#39;\n\nservices:\n  cluster:\n    image: daocloud.io&#x2F;redis\n    container_name: redis-cluster\n    # 添加该参数后服务后台运行后，容器不会自动退出\n    tty: true\n    restart: always\n    # linux环境下建议使用host模式\n    network_mode: host\n\n    volumes:\n      - .&#x2F;data:&#x2F;data\n      - .&#x2F;config:&#x2F;etc&#x2F;redis  \n    ports:\n      - &quot;7000:7000&quot;\n      - &quot;7001:7001&quot;\n      - &quot;7002:7002&quot;\n      - &quot;7003:7003&quot;\n      - &quot;7004:7004&quot;\n      - &quot;7005:7005&quot;\n    ## 必须使用宿主机ip 作为集群总线ip，否则宿主机无法访问到容器内的redis集群ip \n    # 也可以加在配置文件中\n    #  --cluster-announce-ip 172.16.65.218 \n    command: \n      - &#x2F;bin&#x2F;bash \n      - -c \n      - |\n        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7000.conf  --cluster-announce-ip 172.16.65.218 &amp; \n        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7001.conf  --cluster-announce-ip 172.16.65.218 &amp;\n        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7002.conf  --cluster-announce-ip 172.16.65.218 &amp;\n        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7003.conf  --cluster-announce-ip 172.16.65.218 &amp; \n        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7004.conf  --cluster-announce-ip 172.16.65.218 &amp;\n        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7005.conf  --cluster-announce-ip 172.16.65.218</code></pre>\n<h3 id=\"redis-700X-conf\"><a href=\"#redis-700X-conf\" class=\"headerlink\" title=\"redis_700X.conf\"></a>redis_700X.conf</h3><p>根据各端口修改配置中的端口号</p>\n<pre><code class=\"hljs plain\">port 7000\n# 绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1\nbind 0.0.0.0\n# 启用集群模式\ncluster-enabled yes\n# 集群节点文件\ncluster-config-file nodes_7000.conf\n# 指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录\ndir &#x2F;data&#x2F;7000&#x2F;\n# 节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间\ncluster-node-timeout 5000\n# 集群广播ip\n#cluster-announce-ip 172.20.0.4\n#cluster-announce-port 7000\n# 开启AOF模式\nappendonly yes\n# 关闭保护模式\nprotected-mode no\n# 是否后台启动\ndaemonize no\n# pid file所在目录\npidfile &#x2F;var&#x2F;run&#x2F;redis_7000.pid \n# 客户端访问密码\n# requirepass redis2020\n# 日志文件\nlogfile &#x2F;var&#x2F;log&#x2F;redis_7001.log</code></pre>\n\n<h2 id=\"启动Redis-Cluster\"><a href=\"#启动Redis-Cluster\" class=\"headerlink\" title=\"启动Redis Cluster\"></a>启动Redis Cluster</h2><pre><code class=\"hljs plain\">docker-compose up -d</code></pre>\n\n<h3 id=\"创建Redis集群\"><a href=\"#创建Redis集群\" class=\"headerlink\" title=\"创建Redis集群\"></a>创建Redis集群</h3><ul>\n<li>进入容器<pre><code class=\"hljs plain\">$ docker exec -it redis-cluster &#x2F;bin&#x2F;bash</code></pre></li>\n<li>创建集群<pre><code class=\"hljs plain\">$ redis-cli --cluster create 127.0.0.1:7000 \\\n                           127.0.0.1:7001 \\\n                           127.0.0.1:7002 \\\n                           127.0.0.1:7003 \\\n                           127.0.0.1:7004 \\\n                           127.0.0.1:7005 \\\n                           --cluster-replicas 1</code></pre>\n\n</li>\n</ul>\n<h2 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><pre><code class=\"hljs plain\">## -c表示集群模式进入\nroot@docker-desktop:&#x2F;data# redis-cli -c -h localhost -p 7000\n\n## 查看集群信息 cluster_state为ok则表示集群创建成功\nlocalhost:7000&gt; cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:1\ncluster_current_epoch:6\ncluster_my_epoch:3\ncluster_stats_messages_ping_sent:5290\ncluster_stats_messages_pong_sent:5299\ncluster_stats_messages_update_sent:1\ncluster_stats_messages_sent:10590\ncluster_stats_messages_ping_received:5294\ncluster_stats_messages_pong_received:5290\ncluster_stats_messages_meet_received:5\ncluster_stats_messages_update_received:3\ncluster_stats_messages_received:10592\n\n## 查看集群节点信息\nlocalhost:7000&gt; cluster nodes\n6b7f8c4767feb376a99e79068748253afcf6ea5a 127.0.0.1:7001@17001 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594235646 3 connected\n52b109a6491a2e4280b6a66642716939d0f46e89 127.0.0.1:7004@17004 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594236555 5 connected\ndf7dcbf82ecba0ff044f2715b052674e73ec1ca6 127.0.0.1:7000@17000 myself,slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594234000 1 connected\n51f5c9fb771a702933d8bc29fcd13eb41811e2bb 127.0.0.1:7005@17005 master - 0 1607594236000 6 connected\nef7fdf2421427d1da29da4c1dab9e8c26ca12854 127.0.0.1:7002@17002 master - 0 1607594236657 3 connected 0-16383\ncf7327c9ec3b374ebc6ba3f49c6bd5e0a7098601 127.0.0.1:7003@17003 master - 0 1607594235544 4 connected</code></pre>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>[1] <a href=\"https://redis.io/topics/cluster-tutorial\" target=\"_blank\" rel=\"noopener\">Redis Cluster</a></li>\n</ul>\n"},{"title":"【数据结构】八大数据结构简介","abbrlink":2827031203,"date":"2017-02-19T13:38:18.000Z","_content":"\n# 数据结构分类\n数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。\n常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：\n\n{% asset_img overview.png %}\n\n常见数据结构大致可分为三大类，如下所示\n- 线性表：顺序表、链表、栈和队列；\n- 树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；\n- 图存储结构\n\n## 优缺点对比表\n每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。\n\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n# 数组（Array）\n\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。\n\n    int[] data = new int[100]；\n    data[0]  = 1;\n\n## 优点\n- 按照索引查询元素速度快\n- 按照索引遍历数组方便\n\n## 缺点\n- 数组的大小固定后就无法扩容了\n- 数组只能存储一种类型的数据\n- 添加，删除的操作慢，因为要移动其他的元素。\n\n## 适用场景\n- 频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n# 栈（Stack）\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n{% asset_img stack.png %}\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n# 队列\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：\n{% asset_img queue.png %}\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n# 链表\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n{% asset_img linekdlist.jpg %}\n## 优点\n- 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n- 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；\n\n## 缺点\n- 因为含有大量的指针域，占用空间较大；\n- 查找元素需要遍历链表来查找，非常耗时。\n\n## 适用场景\n数据量较小，需要频繁增加，删除操作的场景\n\n# 树\n树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\n{% asset_img tree.png %}\n每个节点有零个或多个子节点；\n没有父节点的节点称为根节点；\n每一个非根节点有且只有一个父节点；\n除了根节点外，每个子节点可以分为多个不相交的子树；\n在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n- 即使某结点只有一个子树，也要区分左右子树。\n\n二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n扩展：\n二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。\n\n# 散列表\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n{% asset_img hashtable.jpg %}\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：\n\n从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。\n\n哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。\n\n# 堆\n{% asset_img heap.jpg %}\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n# 图\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n按照顶点指向的方向可分为无向图和有向图：\n\n图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。\n","source":"_drafts/data-structure-overview.md","raw":"---\ntitle: 【数据结构】八大数据结构简介\ntags:\n  - 数据结构\n  - 算法\nabbrlink: 2827031203\ndate: 2017-02-19 21:38:18\n---\n\n# 数据结构分类\n数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。\n常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：\n\n{% asset_img overview.png %}\n\n常见数据结构大致可分为三大类，如下所示\n- 线性表：顺序表、链表、栈和队列；\n- 树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；\n- 图存储结构\n\n## 优缺点对比表\n每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。\n\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n# 数组（Array）\n\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。\n\n    int[] data = new int[100]；\n    data[0]  = 1;\n\n## 优点\n- 按照索引查询元素速度快\n- 按照索引遍历数组方便\n\n## 缺点\n- 数组的大小固定后就无法扩容了\n- 数组只能存储一种类型的数据\n- 添加，删除的操作慢，因为要移动其他的元素。\n\n## 适用场景\n- 频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n# 栈（Stack）\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n{% asset_img stack.png %}\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n# 队列\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：\n{% asset_img queue.png %}\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n# 链表\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n{% asset_img linekdlist.jpg %}\n## 优点\n- 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n- 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；\n\n## 缺点\n- 因为含有大量的指针域，占用空间较大；\n- 查找元素需要遍历链表来查找，非常耗时。\n\n## 适用场景\n数据量较小，需要频繁增加，删除操作的场景\n\n# 树\n树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\n{% asset_img tree.png %}\n每个节点有零个或多个子节点；\n没有父节点的节点称为根节点；\n每一个非根节点有且只有一个父节点；\n除了根节点外，每个子节点可以分为多个不相交的子树；\n在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n- 即使某结点只有一个子树，也要区分左右子树。\n\n二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n扩展：\n二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。\n\n# 散列表\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n{% asset_img hashtable.jpg %}\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：\n\n从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。\n\n哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。\n\n# 堆\n{% asset_img heap.jpg %}\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n# 图\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n按照顶点指向的方向可分为无向图和有向图：\n\n图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。\n","slug":"data-structure-overview","published":0,"updated":"2020-11-10T05:41:11.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kh3000yshcdbplj49sj","content":"<h1 id=\"数据结构分类\"><a href=\"#数据结构分类\" class=\"headerlink\" title=\"数据结构分类\"></a>数据结构分类</h1><p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。<br>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：</p>\n\n\n<p>常见数据结构大致可分为三大类，如下所示</p>\n<ul>\n<li>线性表：顺序表、链表、栈和队列；</li>\n<li>树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；</li>\n<li>图存储结构</li>\n</ul>\n<h2 id=\"优缺点对比表\"><a href=\"#优缺点对比表\" class=\"headerlink\" title=\"优缺点对比表\"></a>优缺点对比表</h2><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p>\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n<h1 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h1><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\n<pre><code>int[] data = new int[100]；\ndata[0]  = 1;</code></pre><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>按照索引查询元素速度快</li>\n<li>按照索引遍历数组方便</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>数组的大小固定后就无法扩容了</li>\n<li>数组只能存储一种类型的数据</li>\n<li>添加，删除的操作慢，因为要移动其他的元素。</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>频繁查询，对存储空间要求不大，很少增加和删除的情况。</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p>\n\n<p>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</li>\n</ul>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ul>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>数据量较小，需要频繁增加，删除操作的场景</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>\n\n<p>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；<br>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。</p>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li>每个结点最多有两颗子树，结点的度最大为2。</li>\n<li>左子树和右子树是有顺序的，次序不能颠倒。</li>\n<li>即使某结点只有一个子树，也要区分左右子树。</li>\n</ul>\n<p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<p>扩展：<br>二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p>\n<p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>\n<p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1>\n<p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>按照顶点指向的方向可分为无向图和有向图：</p>\n<p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"数据结构分类\"><a href=\"#数据结构分类\" class=\"headerlink\" title=\"数据结构分类\"></a>数据结构分类</h1><p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。<br>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：</p>\n\n\n<p>常见数据结构大致可分为三大类，如下所示</p>\n<ul>\n<li>线性表：顺序表、链表、栈和队列；</li>\n<li>树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；</li>\n<li>图存储结构</li>\n</ul>\n<h2 id=\"优缺点对比表\"><a href=\"#优缺点对比表\" class=\"headerlink\" title=\"优缺点对比表\"></a>优缺点对比表</h2><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p>\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n<h1 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h1><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\n<pre><code>int[] data = new int[100]；\ndata[0]  = 1;</code></pre><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>按照索引查询元素速度快</li>\n<li>按照索引遍历数组方便</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>数组的大小固定后就无法扩容了</li>\n<li>数组只能存储一种类型的数据</li>\n<li>添加，删除的操作慢，因为要移动其他的元素。</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>频繁查询，对存储空间要求不大，很少增加和删除的情况。</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p>\n\n<p>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</li>\n</ul>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ul>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>数据量较小，需要频繁增加，删除操作的场景</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>\n\n<p>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；<br>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。</p>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li>每个结点最多有两颗子树，结点的度最大为2。</li>\n<li>左子树和右子树是有顺序的，次序不能颠倒。</li>\n<li>即使某结点只有一个子树，也要区分左右子树。</li>\n</ul>\n<p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<p>扩展：<br>二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p>\n<p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>\n<p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1>\n<p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>按照顶点指向的方向可分为无向图和有向图：</p>\n<p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>\n"},{"title":"【数据结构】八大数据结构简介","abbrlink":2827031203,"date":"2017-02-19T13:38:18.000Z","_content":"\n\n# 数据结构分类\n数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。\n常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：\n\n{% asset_img overview.png %}\n\n常见数据结构大致可分为三大类，如下所示\n- 线性表：顺序表、链表、栈和队列；\n- 树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；\n- 图存储结构\n\n## 优缺点对比表\n每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。\n\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n# 数组（Array）\n\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。\n\n    int[] data = new int[100]；\n    data[0]  = 1;\n\n## 优点\n- 按照索引查询元素速度快\n- 按照索引遍历数组方便\n\n## 缺点\n- 数组的大小固定后就无法扩容了\n- 数组只能存储一种类型的数据\n- 添加，删除的操作慢，因为要移动其他的元素。\n\n## 适用场景\n- 频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n# 栈（Stack）\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n{% asset_img stack.png %}\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n# 队列\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：\n{% asset_img queue.png %}\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n# 链表\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n{% asset_img linekdlist.jpg %}\n## 优点\n- 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n- 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；\n\n## 缺点\n- 因为含有大量的指针域，占用空间较大；\n- 查找元素需要遍历链表来查找，非常耗时。\n\n## 适用场景\n数据量较小，需要频繁增加，删除操作的场景\n\n# 树\n树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\n{% asset_img tree.png %}\n每个节点有零个或多个子节点；\n没有父节点的节点称为根节点；\n每一个非根节点有且只有一个父节点；\n除了根节点外，每个子节点可以分为多个不相交的子树；\n在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n- 即使某结点只有一个子树，也要区分左右子树。\n\n二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n扩展：\n二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。\n\n# 散列表\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n{% asset_img hashtable.jpg %}\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：\n\n从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。\n\n哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。\n\n# 堆\n{% asset_img heap.jpg %}\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n# 图\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n按照顶点指向的方向可分为无向图和有向图：\n\n图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。\n","source":"_posts/data-structure-overview.md","raw":"---\ntitle: 【数据结构】八大数据结构简介\ntags:\n  - 数据结构\n  - 算法\nabbrlink: 2827031203\ndate: 2017-02-19 21:38:18\n---\n\n\n# 数据结构分类\n数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。\n常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：\n\n{% asset_img overview.png %}\n\n常见数据结构大致可分为三大类，如下所示\n- 线性表：顺序表、链表、栈和队列；\n- 树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；\n- 图存储结构\n\n## 优缺点对比表\n每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。\n\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n# 数组（Array）\n\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。\n\n    int[] data = new int[100]；\n    data[0]  = 1;\n\n## 优点\n- 按照索引查询元素速度快\n- 按照索引遍历数组方便\n\n## 缺点\n- 数组的大小固定后就无法扩容了\n- 数组只能存储一种类型的数据\n- 添加，删除的操作慢，因为要移动其他的元素。\n\n## 适用场景\n- 频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n# 栈（Stack）\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n{% asset_img stack.png %}\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n# 队列\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：\n{% asset_img queue.png %}\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n# 链表\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n{% asset_img linekdlist.jpg %}\n## 优点\n- 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n- 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；\n\n## 缺点\n- 因为含有大量的指针域，占用空间较大；\n- 查找元素需要遍历链表来查找，非常耗时。\n\n## 适用场景\n数据量较小，需要频繁增加，删除操作的场景\n\n# 树\n树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\n{% asset_img tree.png %}\n每个节点有零个或多个子节点；\n没有父节点的节点称为根节点；\n每一个非根节点有且只有一个父节点；\n除了根节点外，每个子节点可以分为多个不相交的子树；\n在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n- 即使某结点只有一个子树，也要区分左右子树。\n\n二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n扩展：\n二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。\n\n# 散列表\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n{% asset_img hashtable.jpg %}\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：\n\n从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。\n\n哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。\n\n# 堆\n{% asset_img heap.jpg %}\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n# 图\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n按照顶点指向的方向可分为无向图和有向图：\n\n图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。\n","slug":"data-structure-overview","published":1,"updated":"2020-07-06T06:42:26.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kh50010shcdaksg9tb8","content":"<h1 id=\"数据结构分类\"><a href=\"#数据结构分类\" class=\"headerlink\" title=\"数据结构分类\"></a>数据结构分类</h1><p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。<br>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：</p>\n<img src=\"/posts/2827031203/index/overview.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>常见数据结构大致可分为三大类，如下所示</p>\n<ul>\n<li>线性表：顺序表、链表、栈和队列；</li>\n<li>树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；</li>\n<li>图存储结构</li>\n</ul>\n<h2 id=\"优缺点对比表\"><a href=\"#优缺点对比表\" class=\"headerlink\" title=\"优缺点对比表\"></a>优缺点对比表</h2><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p>\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n<h1 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h1><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\n<pre><code>int[] data = new int[100]；\ndata[0]  = 1;</code></pre><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>按照索引查询元素速度快</li>\n<li>按照索引遍历数组方便</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>数组的大小固定后就无法扩容了</li>\n<li>数组只能存储一种类型的数据</li>\n<li>添加，删除的操作慢，因为要移动其他的元素。</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>频繁查询，对存储空间要求不大，很少增加和删除的情况。</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n<img src=\"/posts/2827031203/index/stack.png\" srcset=\"/img/loading.gif\" class=\"\">\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p>\n<img src=\"/posts/2827031203/index/queue.png\" srcset=\"/img/loading.gif\" class=\"\">\n<p>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</li>\n</ul>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ul>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>数据量较小，需要频繁增加，删除操作的场景</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>\n<img src=\"/posts/2827031203/index/tree.png\" srcset=\"/img/loading.gif\" class=\"\">\n<p>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；<br>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。</p>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li>每个结点最多有两颗子树，结点的度最大为2。</li>\n<li>左子树和右子树是有顺序的，次序不能颠倒。</li>\n<li>即使某结点只有一个子树，也要区分左右子树。</li>\n</ul>\n<p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<p>扩展：<br>二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n<img src=\"/posts/2827031203/index/hashtable.jpg\" srcset=\"/img/loading.gif\" class=\"\">\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p>\n<p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>\n<p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><img src=\"/posts/2827031203/index/heap.jpg\" srcset=\"/img/loading.gif\" class=\"\">\n<p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>按照顶点指向的方向可分为无向图和有向图：</p>\n<p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"数据结构分类\"><a href=\"#数据结构分类\" class=\"headerlink\" title=\"数据结构分类\"></a>数据结构分类</h1><p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。<br>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：</p>\n<img src=\"/posts/2827031203/index/overview.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>常见数据结构大致可分为三大类，如下所示</p>\n<ul>\n<li>线性表：顺序表、链表、栈和队列；</li>\n<li>树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；</li>\n<li>图存储结构</li>\n</ul>\n<h2 id=\"优缺点对比表\"><a href=\"#优缺点对比表\" class=\"headerlink\" title=\"优缺点对比表\"></a>优缺点对比表</h2><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p>\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n<h1 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h1><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\n<pre><code>int[] data = new int[100]；\ndata[0]  = 1;</code></pre><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>按照索引查询元素速度快</li>\n<li>按照索引遍历数组方便</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>数组的大小固定后就无法扩容了</li>\n<li>数组只能存储一种类型的数据</li>\n<li>添加，删除的操作慢，因为要移动其他的元素。</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>频繁查询，对存储空间要求不大，很少增加和删除的情况。</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n<img src=\"/posts/2827031203/index/stack.png\" srcset=\"/img/loading.gif\" class=\"\">\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p>\n<img src=\"/posts/2827031203/index/queue.png\" srcset=\"/img/loading.gif\" class=\"\">\n<p>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</li>\n</ul>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ul>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>数据量较小，需要频繁增加，删除操作的场景</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>\n<img src=\"/posts/2827031203/index/tree.png\" srcset=\"/img/loading.gif\" class=\"\">\n<p>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；<br>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。</p>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li>每个结点最多有两颗子树，结点的度最大为2。</li>\n<li>左子树和右子树是有顺序的，次序不能颠倒。</li>\n<li>即使某结点只有一个子树，也要区分左右子树。</li>\n</ul>\n<p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<p>扩展：<br>二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n<img src=\"/posts/2827031203/index/hashtable.jpg\" srcset=\"/img/loading.gif\" class=\"\">\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p>\n<p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>\n<p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><img src=\"/posts/2827031203/index/heap.jpg\" srcset=\"/img/loading.gif\" class=\"\">\n<p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>按照顶点指向的方向可分为无向图和有向图：</p>\n<p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>\n"},{"title":"Java【基础篇之HashMap及hashcode】","abbrlink":2936205123,"date":"2019-10-10T02:12:00.000Z","index_img":"/img/java.jpeg","_content":"## 一、hashcode是什么\n要理解hashcode首先要理解hash表这个概念\n\n1. 哈希表\nhash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的hashcode是什么记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。\n简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。\n具有快速查找和插入操作的优点\n2. hashcode\nhashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置\n每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode\n## 二、hashcode的作用\n    HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的\n\n    对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。\n\n   在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题\n\n   如何判别在集合中是否已经存在该对象了？\n\n   首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。\n\n    这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。\n\n            所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。\n\n## 三、 hashCode()和equals()\nJava的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)\n\n1. equals方法\nObject类中equals()方法实现如下\n\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。\n\n虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定\n\n自反性：x.equals(x)必须返回true。\n对称性：x.equals(y)与y.equals(x)的返回值必须相等。\n传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。\n一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。\n非null：x不是null，y为null，则x.equals(y)必须为false。\n2. hashCode 方法\nObject类中hashCode()方法的声明如下：\n\npublic native int hashCode();\n可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。\n\n与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：\n\n（1）hashCode()在哈希表中起作用，如java.util.HashMap。\n（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。\n（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。\n（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。\n重写hashcode()的原则\n\n（1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。\n（2）hashCode()方法不能太过简单，否则哈希冲突过多。\n（3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能\nhashCode()重写方法\n\n《Effective Java》中提出了一种简单通用的hashCode算法：\n\n初始化一个整形变量，为此变量赋予一个非零的常数值，比如int result = 17;\n\n选取equals方法中用于比较的所有域（之所以只选择equals()中使用的域，是为了保证上述原则的第1条），然后针对每个域的属性进行计算：\n\n复制代码\n(1) 如果是boolean值，则计算f ? 1:0\n(2) 如果是bytecharshortint,则计算(int)f\n(3) 如果是long值，则计算(int)(f ^ (f >>> 32))\n(4) 如果是float值，则计算Float.floatToIntBits(f)\n(5) 如果是double值，则计算Double.doubleToLongBits(f)，然后返回的结果是long,再用规则(3)去处理long,得到int\n(6) 如果是对象应用，如果equals方法中采取递归调用的比较方式，那么hashCode中同样采取递归调用hashCode的方式。否则需要为这个域计算一个范式，比如当这个域的值为null的时候，那么hashCode 值为0\n(7) 如果是数组，那么需要为每个元素当做单独的域来处理。java.util.Arrays.hashCode方法包含了8种基本类型数组和引用数组的hashCode计算，算法同上。 \n复制代码\n最后，把每个域的散列码合并到对象的哈希码中。\n\n## 四、HashMap中的hash()函数\nHashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法\n```\nstatic final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n这段代码类似作用是为了增加hashcode的随机性\n\nkey.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。\n\nhashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个\"与\"操作\n\nstatic int indexFor(int h, int length) { return h & (length-1);}\n这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h & (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。\n  01111010 00111100 00100101\n& 00000000 00000000 00001111\n----------------------------------\n  00000000 00000000 00000101\n  //高位全部归零，只保留末四位 \nbut 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。\n\n这时候 “hash”函数作用就出来了\n\n右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。\n设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。\n根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。\nhashMap中 MAXIMUM_CAPACITY = 1 << 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了）","source":"_posts/hashcode.md","raw":"---\ntitle: Java【基础篇之HashMap及hashcode】\ntags:\n  - Java\nabbrlink: 2936205123\ndate: 2019-10-10 10:12:00\nindex_img: /img/java.jpeg\n---\n## 一、hashcode是什么\n要理解hashcode首先要理解hash表这个概念\n\n1. 哈希表\nhash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的hashcode是什么记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。\n简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。\n具有快速查找和插入操作的优点\n2. hashcode\nhashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置\n每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode\n## 二、hashcode的作用\n    HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的\n\n    对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。\n\n   在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题\n\n   如何判别在集合中是否已经存在该对象了？\n\n   首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。\n\n    这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。\n\n            所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。\n\n## 三、 hashCode()和equals()\nJava的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)\n\n1. equals方法\nObject类中equals()方法实现如下\n\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。\n\n虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定\n\n自反性：x.equals(x)必须返回true。\n对称性：x.equals(y)与y.equals(x)的返回值必须相等。\n传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。\n一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。\n非null：x不是null，y为null，则x.equals(y)必须为false。\n2. hashCode 方法\nObject类中hashCode()方法的声明如下：\n\npublic native int hashCode();\n可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。\n\n与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：\n\n（1）hashCode()在哈希表中起作用，如java.util.HashMap。\n（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。\n（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。\n（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。\n重写hashcode()的原则\n\n（1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。\n（2）hashCode()方法不能太过简单，否则哈希冲突过多。\n（3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能\nhashCode()重写方法\n\n《Effective Java》中提出了一种简单通用的hashCode算法：\n\n初始化一个整形变量，为此变量赋予一个非零的常数值，比如int result = 17;\n\n选取equals方法中用于比较的所有域（之所以只选择equals()中使用的域，是为了保证上述原则的第1条），然后针对每个域的属性进行计算：\n\n复制代码\n(1) 如果是boolean值，则计算f ? 1:0\n(2) 如果是bytecharshortint,则计算(int)f\n(3) 如果是long值，则计算(int)(f ^ (f >>> 32))\n(4) 如果是float值，则计算Float.floatToIntBits(f)\n(5) 如果是double值，则计算Double.doubleToLongBits(f)，然后返回的结果是long,再用规则(3)去处理long,得到int\n(6) 如果是对象应用，如果equals方法中采取递归调用的比较方式，那么hashCode中同样采取递归调用hashCode的方式。否则需要为这个域计算一个范式，比如当这个域的值为null的时候，那么hashCode 值为0\n(7) 如果是数组，那么需要为每个元素当做单独的域来处理。java.util.Arrays.hashCode方法包含了8种基本类型数组和引用数组的hashCode计算，算法同上。 \n复制代码\n最后，把每个域的散列码合并到对象的哈希码中。\n\n## 四、HashMap中的hash()函数\nHashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法\n```\nstatic final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n这段代码类似作用是为了增加hashcode的随机性\n\nkey.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。\n\nhashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个\"与\"操作\n\nstatic int indexFor(int h, int length) { return h & (length-1);}\n这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h & (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。\n  01111010 00111100 00100101\n& 00000000 00000000 00001111\n----------------------------------\n  00000000 00000000 00000101\n  //高位全部归零，只保留末四位 \nbut 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。\n\n这时候 “hash”函数作用就出来了\n\n右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。\n设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。\n根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。\nhashMap中 MAXIMUM_CAPACITY = 1 << 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了）","slug":"hashcode","published":1,"updated":"2020-04-18T11:40:38.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kh60012shcd2oub136z","content":"<h2 id=\"一、hashcode是什么\"><a href=\"#一、hashcode是什么\" class=\"headerlink\" title=\"一、hashcode是什么\"></a>一、hashcode是什么</h2><p>要理解hashcode首先要理解hash表这个概念</p>\n<ol>\n<li><p>哈希表<br>hash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的hashcode是什么记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。<br>简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。<br>具有快速查找和插入操作的优点</p>\n</li>\n<li><p>hashcode<br>hashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置<br>每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode</p>\n<h2 id=\"二、hashcode的作用\"><a href=\"#二、hashcode的作用\" class=\"headerlink\" title=\"二、hashcode的作用\"></a>二、hashcode的作用</h2><p> HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的</p>\n<p> 对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。</p>\n<p>在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题</p>\n<p>如何判别在集合中是否已经存在该对象了？</p>\n<p>首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。</p>\n<p> 这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。</p>\n<pre><code>所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。</code></pre></li>\n</ol>\n<h2 id=\"三、-hashCode-和equals\"><a href=\"#三、-hashCode-和equals\" class=\"headerlink\" title=\"三、 hashCode()和equals()\"></a>三、 hashCode()和equals()</h2><p>Java的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)</p>\n<ol>\n<li>equals方法<br>Object类中equals()方法实现如下</li>\n</ol>\n<pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">equals</span><span class=\"hljs-params\">(Object obj)</span> </span>&#123;\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span> == obj);\n&#125;</code></pre>\n<p>通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。</p>\n<p>虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定</p>\n<p>自反性：x.equals(x)必须返回true。<br>对称性：x.equals(y)与y.equals(x)的返回值必须相等。<br>传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。<br>一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。<br>非null：x不是null，y为null，则x.equals(y)必须为false。<br>2. hashCode 方法<br>Object类中hashCode()方法的声明如下：</p>\n<p>public native int hashCode();<br>可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。</p>\n<p>与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：</p>\n<p>（1）hashCode()在哈希表中起作用，如java.util.HashMap。<br>（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。<br>（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。<br>（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。<br>重写hashcode()的原则</p>\n<p>（1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。<br>（2）hashCode()方法不能太过简单，否则哈希冲突过多。<br>（3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能<br>hashCode()重写方法</p>\n<p>《Effective Java》中提出了一种简单通用的hashCode算法：</p>\n<p>初始化一个整形变量，为此变量赋予一个非零的常数值，比如int result = 17;</p>\n<p>选取equals方法中用于比较的所有域（之所以只选择equals()中使用的域，是为了保证上述原则的第1条），然后针对每个域的属性进行计算：</p>\n<p>复制代码<br>(1) 如果是boolean值，则计算f ? 1:0<br>(2) 如果是bytecharshortint,则计算(int)f<br>(3) 如果是long值，则计算(int)(f ^ (f &gt;&gt;&gt; 32))<br>(4) 如果是float值，则计算Float.floatToIntBits(f)<br>(5) 如果是double值，则计算Double.doubleToLongBits(f)，然后返回的结果是long,再用规则(3)去处理long,得到int<br>(6) 如果是对象应用，如果equals方法中采取递归调用的比较方式，那么hashCode中同样采取递归调用hashCode的方式。否则需要为这个域计算一个范式，比如当这个域的值为null的时候，那么hashCode 值为0<br>(7) 如果是数组，那么需要为每个元素当做单独的域来处理。java.util.Arrays.hashCode方法包含了8种基本类型数组和引用数组的hashCode计算，算法同上。<br>复制代码<br>最后，把每个域的散列码合并到对象的哈希码中。</p>\n<h2 id=\"四、HashMap中的hash-函数\"><a href=\"#四、HashMap中的hash-函数\" class=\"headerlink\" title=\"四、HashMap中的hash()函数\"></a>四、HashMap中的hash()函数</h2><p>HashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法</p>\n<pre><code class=\"hljs plain\">static final int hash(Object key) &#123;\n    int h;\n    return (key &#x3D;&#x3D; null) ? 0 : (h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);\n&#125;</code></pre>\n<p>这段代码类似作用是为了增加hashcode的随机性</p>\n<p>key.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。</p>\n<p>hashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个”与”操作</p>\n<p>static int indexFor(int h, int length) { return h &amp; (length-1);}<br>这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h &amp; (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。<br>  01111010 00111100 00100101<br>&amp; 00000000 00000000 00001111</p>\n<hr>\n<p>  00000000 00000000 00000101<br>  //高位全部归零，只保留末四位<br>but 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。</p>\n<p>这时候 “hash”函数作用就出来了</p>\n<p>右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。<br>设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。<br>根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。<br>hashMap中 MAXIMUM_CAPACITY = 1 &lt;&lt; 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了）</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"一、hashcode是什么\"><a href=\"#一、hashcode是什么\" class=\"headerlink\" title=\"一、hashcode是什么\"></a>一、hashcode是什么</h2><p>要理解hashcode首先要理解hash表这个概念</p>\n<ol>\n<li><p>哈希表<br>hash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的hashcode是什么记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。<br>简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。<br>具有快速查找和插入操作的优点</p>\n</li>\n<li><p>hashcode<br>hashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置<br>每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode</p>\n<h2 id=\"二、hashcode的作用\"><a href=\"#二、hashcode的作用\" class=\"headerlink\" title=\"二、hashcode的作用\"></a>二、hashcode的作用</h2><p> HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的</p>\n<p> 对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。</p>\n<p>在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题</p>\n<p>如何判别在集合中是否已经存在该对象了？</p>\n<p>首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。</p>\n<p> 这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。</p>\n<pre><code>所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。</code></pre></li>\n</ol>\n<h2 id=\"三、-hashCode-和equals\"><a href=\"#三、-hashCode-和equals\" class=\"headerlink\" title=\"三、 hashCode()和equals()\"></a>三、 hashCode()和equals()</h2><p>Java的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)</p>\n<ol>\n<li>equals方法<br>Object类中equals()方法实现如下</li>\n</ol>\n<pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">equals</span><span class=\"hljs-params\">(Object obj)</span> </span>&#123;\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span> == obj);\n&#125;</code></pre>\n<p>通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。</p>\n<p>虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定</p>\n<p>自反性：x.equals(x)必须返回true。<br>对称性：x.equals(y)与y.equals(x)的返回值必须相等。<br>传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。<br>一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。<br>非null：x不是null，y为null，则x.equals(y)必须为false。<br>2. hashCode 方法<br>Object类中hashCode()方法的声明如下：</p>\n<p>public native int hashCode();<br>可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。</p>\n<p>与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：</p>\n<p>（1）hashCode()在哈希表中起作用，如java.util.HashMap。<br>（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。<br>（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。<br>（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。<br>重写hashcode()的原则</p>\n<p>（1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。<br>（2）hashCode()方法不能太过简单，否则哈希冲突过多。<br>（3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能<br>hashCode()重写方法</p>\n<p>《Effective Java》中提出了一种简单通用的hashCode算法：</p>\n<p>初始化一个整形变量，为此变量赋予一个非零的常数值，比如int result = 17;</p>\n<p>选取equals方法中用于比较的所有域（之所以只选择equals()中使用的域，是为了保证上述原则的第1条），然后针对每个域的属性进行计算：</p>\n<p>复制代码<br>(1) 如果是boolean值，则计算f ? 1:0<br>(2) 如果是bytecharshortint,则计算(int)f<br>(3) 如果是long值，则计算(int)(f ^ (f &gt;&gt;&gt; 32))<br>(4) 如果是float值，则计算Float.floatToIntBits(f)<br>(5) 如果是double值，则计算Double.doubleToLongBits(f)，然后返回的结果是long,再用规则(3)去处理long,得到int<br>(6) 如果是对象应用，如果equals方法中采取递归调用的比较方式，那么hashCode中同样采取递归调用hashCode的方式。否则需要为这个域计算一个范式，比如当这个域的值为null的时候，那么hashCode 值为0<br>(7) 如果是数组，那么需要为每个元素当做单独的域来处理。java.util.Arrays.hashCode方法包含了8种基本类型数组和引用数组的hashCode计算，算法同上。<br>复制代码<br>最后，把每个域的散列码合并到对象的哈希码中。</p>\n<h2 id=\"四、HashMap中的hash-函数\"><a href=\"#四、HashMap中的hash-函数\" class=\"headerlink\" title=\"四、HashMap中的hash()函数\"></a>四、HashMap中的hash()函数</h2><p>HashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法</p>\n<pre><code class=\"hljs plain\">static final int hash(Object key) &#123;\n    int h;\n    return (key &#x3D;&#x3D; null) ? 0 : (h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);\n&#125;</code></pre>\n<p>这段代码类似作用是为了增加hashcode的随机性</p>\n<p>key.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。</p>\n<p>hashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个”与”操作</p>\n<p>static int indexFor(int h, int length) { return h &amp; (length-1);}<br>这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h &amp; (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。<br>  01111010 00111100 00100101<br>&amp; 00000000 00000000 00001111</p>\n<hr>\n<p>  00000000 00000000 00000101<br>  //高位全部归零，只保留末四位<br>but 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。</p>\n<p>这时候 “hash”函数作用就出来了</p>\n<p>右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。<br>设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。<br>根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。<br>hashMap中 MAXIMUM_CAPACITY = 1 &lt;&lt; 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了）</p>\n"},{"title":"JVM【性能调优篇】","index_img":"/img/java.jpeg","abbrlink":3097382278,"date":"2016-10-16T03:54:14.000Z","_content":"\n前面我们学习了整个JVM系列，最终目标的不仅仅是了解JVM的基础知识，也是为了进行JVM性能调优做准备。这篇文章带领大家学习JVM性能调优的知识。\n\n### 性能调优\n性能调优包含多个层次，比如：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。\n\n架构调优和代码调优是JVM调优的基础，其中架构调优是对系统影响最大的。\n\n性能调优基本上按照以下步骤进行：明确优化目标、发现性能瓶颈、性能调优、通过监控及数据统计工具获得数据、确认是否达到目标。\n\n### 何时进行JVM调优\n遇到以下情况，就需要考虑进行JVM调优了：\n- Heap内存（老年代）持续上涨达到设置的最大内存值；\n- Full GC 次数频繁；\n- GC 停顿时间过长（超过1秒）；\n- 应用出现OutOfMemory 等内存异常；\n- 应用中有使用本地缓存且占用大量内存空间；\n- 系统吞吐量与响应性能不高或下降。\n\n### JVM调优的基本原则\nJVM调优是一个手段，但并不一定所有问题都可以通过JVM进行调优解决，因此，在进行JVM调优时，我们要遵循一些原则：\n\n- 大多数的Java应用不需要进行JVM优化；\n- 大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；\n- 上线之前，应先考虑将机器的JVM参数设置到最优；\n- 减少创建对象的数量（代码层面）；\n- 减少使用全局变量和大对象（代码层面）；\n- 优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；\n- 分析GC情况优化代码比优化JVM参数更好（代码层面）；\n\n通过以上原则，我们发现，其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。\n\n### JVM调优目标\n调优的最终目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。\njvm调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量。\n\n- 延迟：GC低停顿和GC低频率；\n- 低内存占用；\n- 高吞吐量;\n\n其中，任何一个属性性能的提高，几乎都是以牺牲其他属性性能的损为代价的，不可兼得。具体根据在业务中的重要性确定。\n\n### JVM调优量化目标\n下面展示了一些JVM调优的量化目标参考实例：\n\n- Heap 内存使用率 <= 70%;\n- Old generation内存使用率<= 70%;\n- avgpause <= 1秒;\n- Full gc 次数0 或 avg pause interval >= 24小时 ;\n\n注意：不同应用的JVM调优量化目标是不一样的。\n\n### JVM调优的步骤\n一般情况下，JVM调优可通过以下步骤进行：\n\n- 分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；\n- 确定JVM调优量化目标；\n- 确定JVM调优参数（根据历史JVM参数来调整）；\n- 依次调优内存、延迟、吞吐量等指标；\n- 对比观察调优前后的差异；\n- 不断的分析和调整，直到找到合适的JVM参数配置；\n- 找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。\n\n以上操作步骤中，某些步骤是需要多次不断迭代完成的。一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。\n\n### JVM参数\nJVM调优最重要的工具就是JVM参数了。先来了解一下JVM参数相关内容。\n\n-XX 参数被称为不稳定参数，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。如果此类参数设置合理将大大提高JVM的性能及稳定性。\n\n不稳定参数语法规则包含以下内容。\n\n    布尔类型参数值：\n    -XX:+<option> '+'表示启用该选项\n    -XX:-<option> '-'表示关闭该选项\n    数字类型参数值：\n    -XX:<option>=<number>给选项设置一个数字类型值，可跟随单位，例如：'m'或'M'表示兆字节;'k'或'K'千字节;'g'或'G'千兆字节。32K与32768是相同大小的。\n    字符串类型参数值\n    -XX:<option>=<string>给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。例如：-XX:HeapDumpPath=./dump.core\n\n\n### JVM参数解析及调优\n比如以下参数示例：\n\n    -Xmx4g –Xms4g –Xmn1200m –Xss512k -XX:NewRatio=4 -XX:SurvivorRatio=8 -XX:PermSize=100m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=15\n\n上面为Java7及以前版本的示例，在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。这在前面章节中已经讲到。\n\n参数解析：\n```\n-Xmx4g：堆内存最大值为4GB。\n-Xms4g：初始化堆内存大小为4GB。\n-Xmn1200m：设置年轻代大小为1200MB。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。\n-Xss512k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。\n-XX:NewRatio=4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5\n-XX:SurvivorRatio=8：设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1/10\n-XX:PermSize=100m：初始化永久代大小为100MB。\n-XX:MaxPermSize=256m：设置持久代大小为256MB。\n-XX:MaxTenuringThreshold=15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n```\n新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。\n\n可调优参数：\n```\n-Xms：初始化堆内存大小，默认为物理内存的1/64(小于1GB)。\n-Xmx：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。\n-Xmn：新生代大小，包括Eden区与2个Survivor区。\n-XX:SurvivorRatio=1：Eden区与一个Survivor区比值为1:1。\n-XX:MaxDirectMemorySize=1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。\n-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。\n-XX:CMSInitiatingOccupancyFraction=60：老年代内存回收阈值，默认值为68。\n-XX:ConcGCThreads=4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。\n-XX:ParallelGCThreads=8：新生代并行收集器的线程数。\n-XX:MaxTenuringThreshold=10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n-XX:CMSFullGCsBeforeCompaction=4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。\n-XX:CMSMaxAbortablePrecleanTime=500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。\n```\n> 注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。\n\n在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。\n\n### 内存优化示例\n当JVM运行稳定之后，触发了FullGC我们一般会拿到如下信息:\n\nimage\n以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。\n\n    java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n    永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久带空间占用。\n    新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n    老年代：2-3倍FullGC后的老年代空间占用。\n\n基于以上规则，则对参数定义如下：\n```\njava -Xms373m -Xmx373m -Xmn140m -XX:PermSize=5m -XX:MaxPermSize=5m\n```\n\n### 延迟优化示例\n对延迟性优化，首先需要了解延迟性需求及可调优的指标有哪些。\n\n- 应用程序可接受的平均停滞时间: 此时间与测量的Minor\n- GC持续时间进行比较。可接受的Minor GC频率：Minor\n- GC的频率与可容忍的值进行比较。\n- 可接受的最大停顿时间:最大停顿时间与最差情况下FullGC的持续时间进行比较。\n- 可接受的最大停顿发生的频率：基本就是FullGC的频率。\n\n其中，平均停滞时间和最大停顿时间，对用户体验最为重要。对于上面的指标，相关数据采集包括：MinorGC的持续时间、统计MinorGC的次数、FullGC的最差持续时间、最差情况下，FullGC的频率。\n\nimage\n如上图，Minor GC的平均持续时间0.069秒，MinorGC的频率为0.389秒一次。\n\n新生代空间越大，Minor GC的GC时间越长，频率越低。如果想减少其持续时长，就需要减少其空间大小。如果想减小其频率，就需要加大其空间大小。\n\n这里以减少了新生代空间10%的大小，来减小延迟时间。在此过程中，应该保持老年代和持代的大小不变化。调优后的参数如下变化:\n```\njava -Xms359m -Xmx359m -Xmn126m -XX:PermSize=5m -XX:MaxPermSize=5m\n```\n### 吞吐量调优\n吞吐量调优主要是基于应用程序的吞吐量要求而来的，应用程序应该有一个综合的吞吐指标，这个指标基于整个应用的需求和测试而衍生出来的。\n\n评估当前吞吐量和目标差距是否巨大，如果在20%左右，可以修改参数，加大内存，再次从头调试，如果巨大就需要从整个应用层面来考虑，设计以及目标是否一致了，重新评估吞吐目标。\n\n> 对于垃圾收集器来说，提升吞吐量的性能调优的目标就是尽可能避免或者很少发生FullGC或者Stop-The-World压缩式垃圾收集（CMS），因为这两种方式都会造成应用程序吞吐降低。尽量在MinorGC 阶段回收更多的对象，避免对象提升过快到老年代。\n\n### 调优工具\n借助GCViewer日志分析工具，可以非常直观地分析出待调优点。可从以下几方面来分析：\n- Memory,分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；\n- Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；","source":"_posts/jvm.md","raw":"---\ntitle: JVM【性能调优篇】\ntags:\n  - Java\nindex_img: /img/java.jpeg\nabbrlink: 3097382278\ndate: 2016-10-16 11:54:14\n\n---\n\n前面我们学习了整个JVM系列，最终目标的不仅仅是了解JVM的基础知识，也是为了进行JVM性能调优做准备。这篇文章带领大家学习JVM性能调优的知识。\n\n### 性能调优\n性能调优包含多个层次，比如：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。\n\n架构调优和代码调优是JVM调优的基础，其中架构调优是对系统影响最大的。\n\n性能调优基本上按照以下步骤进行：明确优化目标、发现性能瓶颈、性能调优、通过监控及数据统计工具获得数据、确认是否达到目标。\n\n### 何时进行JVM调优\n遇到以下情况，就需要考虑进行JVM调优了：\n- Heap内存（老年代）持续上涨达到设置的最大内存值；\n- Full GC 次数频繁；\n- GC 停顿时间过长（超过1秒）；\n- 应用出现OutOfMemory 等内存异常；\n- 应用中有使用本地缓存且占用大量内存空间；\n- 系统吞吐量与响应性能不高或下降。\n\n### JVM调优的基本原则\nJVM调优是一个手段，但并不一定所有问题都可以通过JVM进行调优解决，因此，在进行JVM调优时，我们要遵循一些原则：\n\n- 大多数的Java应用不需要进行JVM优化；\n- 大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；\n- 上线之前，应先考虑将机器的JVM参数设置到最优；\n- 减少创建对象的数量（代码层面）；\n- 减少使用全局变量和大对象（代码层面）；\n- 优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；\n- 分析GC情况优化代码比优化JVM参数更好（代码层面）；\n\n通过以上原则，我们发现，其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。\n\n### JVM调优目标\n调优的最终目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。\njvm调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量。\n\n- 延迟：GC低停顿和GC低频率；\n- 低内存占用；\n- 高吞吐量;\n\n其中，任何一个属性性能的提高，几乎都是以牺牲其他属性性能的损为代价的，不可兼得。具体根据在业务中的重要性确定。\n\n### JVM调优量化目标\n下面展示了一些JVM调优的量化目标参考实例：\n\n- Heap 内存使用率 <= 70%;\n- Old generation内存使用率<= 70%;\n- avgpause <= 1秒;\n- Full gc 次数0 或 avg pause interval >= 24小时 ;\n\n注意：不同应用的JVM调优量化目标是不一样的。\n\n### JVM调优的步骤\n一般情况下，JVM调优可通过以下步骤进行：\n\n- 分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；\n- 确定JVM调优量化目标；\n- 确定JVM调优参数（根据历史JVM参数来调整）；\n- 依次调优内存、延迟、吞吐量等指标；\n- 对比观察调优前后的差异；\n- 不断的分析和调整，直到找到合适的JVM参数配置；\n- 找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。\n\n以上操作步骤中，某些步骤是需要多次不断迭代完成的。一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。\n\n### JVM参数\nJVM调优最重要的工具就是JVM参数了。先来了解一下JVM参数相关内容。\n\n-XX 参数被称为不稳定参数，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。如果此类参数设置合理将大大提高JVM的性能及稳定性。\n\n不稳定参数语法规则包含以下内容。\n\n    布尔类型参数值：\n    -XX:+<option> '+'表示启用该选项\n    -XX:-<option> '-'表示关闭该选项\n    数字类型参数值：\n    -XX:<option>=<number>给选项设置一个数字类型值，可跟随单位，例如：'m'或'M'表示兆字节;'k'或'K'千字节;'g'或'G'千兆字节。32K与32768是相同大小的。\n    字符串类型参数值\n    -XX:<option>=<string>给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。例如：-XX:HeapDumpPath=./dump.core\n\n\n### JVM参数解析及调优\n比如以下参数示例：\n\n    -Xmx4g –Xms4g –Xmn1200m –Xss512k -XX:NewRatio=4 -XX:SurvivorRatio=8 -XX:PermSize=100m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=15\n\n上面为Java7及以前版本的示例，在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。这在前面章节中已经讲到。\n\n参数解析：\n```\n-Xmx4g：堆内存最大值为4GB。\n-Xms4g：初始化堆内存大小为4GB。\n-Xmn1200m：设置年轻代大小为1200MB。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。\n-Xss512k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。\n-XX:NewRatio=4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5\n-XX:SurvivorRatio=8：设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1/10\n-XX:PermSize=100m：初始化永久代大小为100MB。\n-XX:MaxPermSize=256m：设置持久代大小为256MB。\n-XX:MaxTenuringThreshold=15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n```\n新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。\n\n可调优参数：\n```\n-Xms：初始化堆内存大小，默认为物理内存的1/64(小于1GB)。\n-Xmx：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。\n-Xmn：新生代大小，包括Eden区与2个Survivor区。\n-XX:SurvivorRatio=1：Eden区与一个Survivor区比值为1:1。\n-XX:MaxDirectMemorySize=1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。\n-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。\n-XX:CMSInitiatingOccupancyFraction=60：老年代内存回收阈值，默认值为68。\n-XX:ConcGCThreads=4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。\n-XX:ParallelGCThreads=8：新生代并行收集器的线程数。\n-XX:MaxTenuringThreshold=10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n-XX:CMSFullGCsBeforeCompaction=4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。\n-XX:CMSMaxAbortablePrecleanTime=500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。\n```\n> 注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。\n\n在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。\n\n### 内存优化示例\n当JVM运行稳定之后，触发了FullGC我们一般会拿到如下信息:\n\nimage\n以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。\n\n    java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n    永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久带空间占用。\n    新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n    老年代：2-3倍FullGC后的老年代空间占用。\n\n基于以上规则，则对参数定义如下：\n```\njava -Xms373m -Xmx373m -Xmn140m -XX:PermSize=5m -XX:MaxPermSize=5m\n```\n\n### 延迟优化示例\n对延迟性优化，首先需要了解延迟性需求及可调优的指标有哪些。\n\n- 应用程序可接受的平均停滞时间: 此时间与测量的Minor\n- GC持续时间进行比较。可接受的Minor GC频率：Minor\n- GC的频率与可容忍的值进行比较。\n- 可接受的最大停顿时间:最大停顿时间与最差情况下FullGC的持续时间进行比较。\n- 可接受的最大停顿发生的频率：基本就是FullGC的频率。\n\n其中，平均停滞时间和最大停顿时间，对用户体验最为重要。对于上面的指标，相关数据采集包括：MinorGC的持续时间、统计MinorGC的次数、FullGC的最差持续时间、最差情况下，FullGC的频率。\n\nimage\n如上图，Minor GC的平均持续时间0.069秒，MinorGC的频率为0.389秒一次。\n\n新生代空间越大，Minor GC的GC时间越长，频率越低。如果想减少其持续时长，就需要减少其空间大小。如果想减小其频率，就需要加大其空间大小。\n\n这里以减少了新生代空间10%的大小，来减小延迟时间。在此过程中，应该保持老年代和持代的大小不变化。调优后的参数如下变化:\n```\njava -Xms359m -Xmx359m -Xmn126m -XX:PermSize=5m -XX:MaxPermSize=5m\n```\n### 吞吐量调优\n吞吐量调优主要是基于应用程序的吞吐量要求而来的，应用程序应该有一个综合的吞吐指标，这个指标基于整个应用的需求和测试而衍生出来的。\n\n评估当前吞吐量和目标差距是否巨大，如果在20%左右，可以修改参数，加大内存，再次从头调试，如果巨大就需要从整个应用层面来考虑，设计以及目标是否一致了，重新评估吞吐目标。\n\n> 对于垃圾收集器来说，提升吞吐量的性能调优的目标就是尽可能避免或者很少发生FullGC或者Stop-The-World压缩式垃圾收集（CMS），因为这两种方式都会造成应用程序吞吐降低。尽量在MinorGC 阶段回收更多的对象，避免对象提升过快到老年代。\n\n### 调优工具\n借助GCViewer日志分析工具，可以非常直观地分析出待调优点。可从以下几方面来分析：\n- Memory,分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；\n- Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；","slug":"jvm","published":1,"updated":"2020-04-18T11:37:48.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kh70013shcd8buhfyhj","content":"<p>前面我们学习了整个JVM系列，最终目标的不仅仅是了解JVM的基础知识，也是为了进行JVM性能调优做准备。这篇文章带领大家学习JVM性能调优的知识。</p>\n<h3 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h3><p>性能调优包含多个层次，比如：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。</p>\n<p>架构调优和代码调优是JVM调优的基础，其中架构调优是对系统影响最大的。</p>\n<p>性能调优基本上按照以下步骤进行：明确优化目标、发现性能瓶颈、性能调优、通过监控及数据统计工具获得数据、确认是否达到目标。</p>\n<h3 id=\"何时进行JVM调优\"><a href=\"#何时进行JVM调优\" class=\"headerlink\" title=\"何时进行JVM调优\"></a>何时进行JVM调优</h3><p>遇到以下情况，就需要考虑进行JVM调优了：</p>\n<ul>\n<li>Heap内存（老年代）持续上涨达到设置的最大内存值；</li>\n<li>Full GC 次数频繁；</li>\n<li>GC 停顿时间过长（超过1秒）；</li>\n<li>应用出现OutOfMemory 等内存异常；</li>\n<li>应用中有使用本地缓存且占用大量内存空间；</li>\n<li>系统吞吐量与响应性能不高或下降。</li>\n</ul>\n<h3 id=\"JVM调优的基本原则\"><a href=\"#JVM调优的基本原则\" class=\"headerlink\" title=\"JVM调优的基本原则\"></a>JVM调优的基本原则</h3><p>JVM调优是一个手段，但并不一定所有问题都可以通过JVM进行调优解决，因此，在进行JVM调优时，我们要遵循一些原则：</p>\n<ul>\n<li>大多数的Java应用不需要进行JVM优化；</li>\n<li>大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；</li>\n<li>上线之前，应先考虑将机器的JVM参数设置到最优；</li>\n<li>减少创建对象的数量（代码层面）；</li>\n<li>减少使用全局变量和大对象（代码层面）；</li>\n<li>优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；</li>\n<li>分析GC情况优化代码比优化JVM参数更好（代码层面）；</li>\n</ul>\n<p>通过以上原则，我们发现，其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。</p>\n<h3 id=\"JVM调优目标\"><a href=\"#JVM调优目标\" class=\"headerlink\" title=\"JVM调优目标\"></a>JVM调优目标</h3><p>调优的最终目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。<br>jvm调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量。</p>\n<ul>\n<li>延迟：GC低停顿和GC低频率；</li>\n<li>低内存占用；</li>\n<li>高吞吐量;</li>\n</ul>\n<p>其中，任何一个属性性能的提高，几乎都是以牺牲其他属性性能的损为代价的，不可兼得。具体根据在业务中的重要性确定。</p>\n<h3 id=\"JVM调优量化目标\"><a href=\"#JVM调优量化目标\" class=\"headerlink\" title=\"JVM调优量化目标\"></a>JVM调优量化目标</h3><p>下面展示了一些JVM调优的量化目标参考实例：</p>\n<ul>\n<li>Heap 内存使用率 &lt;= 70%;</li>\n<li>Old generation内存使用率&lt;= 70%;</li>\n<li>avgpause &lt;= 1秒;</li>\n<li>Full gc 次数0 或 avg pause interval &gt;= 24小时 ;</li>\n</ul>\n<p>注意：不同应用的JVM调优量化目标是不一样的。</p>\n<h3 id=\"JVM调优的步骤\"><a href=\"#JVM调优的步骤\" class=\"headerlink\" title=\"JVM调优的步骤\"></a>JVM调优的步骤</h3><p>一般情况下，JVM调优可通过以下步骤进行：</p>\n<ul>\n<li>分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；</li>\n<li>确定JVM调优量化目标；</li>\n<li>确定JVM调优参数（根据历史JVM参数来调整）；</li>\n<li>依次调优内存、延迟、吞吐量等指标；</li>\n<li>对比观察调优前后的差异；</li>\n<li>不断的分析和调整，直到找到合适的JVM参数配置；</li>\n<li>找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。</li>\n</ul>\n<p>以上操作步骤中，某些步骤是需要多次不断迭代完成的。一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。</p>\n<h3 id=\"JVM参数\"><a href=\"#JVM参数\" class=\"headerlink\" title=\"JVM参数\"></a>JVM参数</h3><p>JVM调优最重要的工具就是JVM参数了。先来了解一下JVM参数相关内容。</p>\n<p>-XX 参数被称为不稳定参数，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。如果此类参数设置合理将大大提高JVM的性能及稳定性。</p>\n<p>不稳定参数语法规则包含以下内容。</p>\n<pre><code>布尔类型参数值：\n-XX:+&lt;option&gt; &apos;+&apos;表示启用该选项\n-XX:-&lt;option&gt; &apos;-&apos;表示关闭该选项\n数字类型参数值：\n-XX:&lt;option&gt;=&lt;number&gt;给选项设置一个数字类型值，可跟随单位，例如：&apos;m&apos;或&apos;M&apos;表示兆字节;&apos;k&apos;或&apos;K&apos;千字节;&apos;g&apos;或&apos;G&apos;千兆字节。32K与32768是相同大小的。\n字符串类型参数值\n-XX:&lt;option&gt;=&lt;string&gt;给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。例如：-XX:HeapDumpPath=./dump.core</code></pre><h3 id=\"JVM参数解析及调优\"><a href=\"#JVM参数解析及调优\" class=\"headerlink\" title=\"JVM参数解析及调优\"></a>JVM参数解析及调优</h3><p>比如以下参数示例：</p>\n<pre><code>-Xmx4g –Xms4g –Xmn1200m –Xss512k -XX:NewRatio=4 -XX:SurvivorRatio=8 -XX:PermSize=100m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=15</code></pre><p>上面为Java7及以前版本的示例，在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。这在前面章节中已经讲到。</p>\n<p>参数解析：</p>\n<pre><code class=\"hljs plain\">-Xmx4g：堆内存最大值为4GB。\n-Xms4g：初始化堆内存大小为4GB。\n-Xmn1200m：设置年轻代大小为1200MB。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3&#x2F;8。\n-Xss512k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。\n-XX:NewRatio&#x3D;4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1&#x2F;5\n-XX:SurvivorRatio&#x3D;8：设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1&#x2F;10\n-XX:PermSize&#x3D;100m：初始化永久代大小为100MB。\n-XX:MaxPermSize&#x3D;256m：设置持久代大小为256MB。\n-XX:MaxTenuringThreshold&#x3D;15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</code></pre>\n<p>新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。</p>\n<p>可调优参数：</p>\n<pre><code class=\"hljs plain\">-Xms：初始化堆内存大小，默认为物理内存的1&#x2F;64(小于1GB)。\n-Xmx：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。\n-Xmn：新生代大小，包括Eden区与2个Survivor区。\n-XX:SurvivorRatio&#x3D;1：Eden区与一个Survivor区比值为1:1。\n-XX:MaxDirectMemorySize&#x3D;1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。\n-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。\n-XX:CMSInitiatingOccupancyFraction&#x3D;60：老年代内存回收阈值，默认值为68。\n-XX:ConcGCThreads&#x3D;4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。\n-XX:ParallelGCThreads&#x3D;8：新生代并行收集器的线程数。\n-XX:MaxTenuringThreshold&#x3D;10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n-XX:CMSFullGCsBeforeCompaction&#x3D;4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。\n-XX:CMSMaxAbortablePrecleanTime&#x3D;500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。</code></pre>\n<blockquote>\n<p>注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。</p>\n</blockquote>\n<p>在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。</p>\n<h3 id=\"内存优化示例\"><a href=\"#内存优化示例\" class=\"headerlink\" title=\"内存优化示例\"></a>内存优化示例</h3><p>当JVM运行稳定之后，触发了FullGC我们一般会拿到如下信息:</p>\n<p>image<br>以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。</p>\n<pre><code>java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久带空间占用。\n新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n老年代：2-3倍FullGC后的老年代空间占用。</code></pre><p>基于以上规则，则对参数定义如下：</p>\n<pre><code class=\"hljs plain\">java -Xms373m -Xmx373m -Xmn140m -XX:PermSize&#x3D;5m -XX:MaxPermSize&#x3D;5m</code></pre>\n\n<h3 id=\"延迟优化示例\"><a href=\"#延迟优化示例\" class=\"headerlink\" title=\"延迟优化示例\"></a>延迟优化示例</h3><p>对延迟性优化，首先需要了解延迟性需求及可调优的指标有哪些。</p>\n<ul>\n<li>应用程序可接受的平均停滞时间: 此时间与测量的Minor</li>\n<li>GC持续时间进行比较。可接受的Minor GC频率：Minor</li>\n<li>GC的频率与可容忍的值进行比较。</li>\n<li>可接受的最大停顿时间:最大停顿时间与最差情况下FullGC的持续时间进行比较。</li>\n<li>可接受的最大停顿发生的频率：基本就是FullGC的频率。</li>\n</ul>\n<p>其中，平均停滞时间和最大停顿时间，对用户体验最为重要。对于上面的指标，相关数据采集包括：MinorGC的持续时间、统计MinorGC的次数、FullGC的最差持续时间、最差情况下，FullGC的频率。</p>\n<p>image<br>如上图，Minor GC的平均持续时间0.069秒，MinorGC的频率为0.389秒一次。</p>\n<p>新生代空间越大，Minor GC的GC时间越长，频率越低。如果想减少其持续时长，就需要减少其空间大小。如果想减小其频率，就需要加大其空间大小。</p>\n<p>这里以减少了新生代空间10%的大小，来减小延迟时间。在此过程中，应该保持老年代和持代的大小不变化。调优后的参数如下变化:</p>\n<pre><code class=\"hljs plain\">java -Xms359m -Xmx359m -Xmn126m -XX:PermSize&#x3D;5m -XX:MaxPermSize&#x3D;5m</code></pre>\n<h3 id=\"吞吐量调优\"><a href=\"#吞吐量调优\" class=\"headerlink\" title=\"吞吐量调优\"></a>吞吐量调优</h3><p>吞吐量调优主要是基于应用程序的吞吐量要求而来的，应用程序应该有一个综合的吞吐指标，这个指标基于整个应用的需求和测试而衍生出来的。</p>\n<p>评估当前吞吐量和目标差距是否巨大，如果在20%左右，可以修改参数，加大内存，再次从头调试，如果巨大就需要从整个应用层面来考虑，设计以及目标是否一致了，重新评估吞吐目标。</p>\n<blockquote>\n<p>对于垃圾收集器来说，提升吞吐量的性能调优的目标就是尽可能避免或者很少发生FullGC或者Stop-The-World压缩式垃圾收集（CMS），因为这两种方式都会造成应用程序吞吐降低。尽量在MinorGC 阶段回收更多的对象，避免对象提升过快到老年代。</p>\n</blockquote>\n<h3 id=\"调优工具\"><a href=\"#调优工具\" class=\"headerlink\" title=\"调优工具\"></a>调优工具</h3><p>借助GCViewer日志分析工具，可以非常直观地分析出待调优点。可从以下几方面来分析：</p>\n<ul>\n<li>Memory,分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；</li>\n<li>Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>前面我们学习了整个JVM系列，最终目标的不仅仅是了解JVM的基础知识，也是为了进行JVM性能调优做准备。这篇文章带领大家学习JVM性能调优的知识。</p>\n<h3 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h3><p>性能调优包含多个层次，比如：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。</p>\n<p>架构调优和代码调优是JVM调优的基础，其中架构调优是对系统影响最大的。</p>\n<p>性能调优基本上按照以下步骤进行：明确优化目标、发现性能瓶颈、性能调优、通过监控及数据统计工具获得数据、确认是否达到目标。</p>\n<h3 id=\"何时进行JVM调优\"><a href=\"#何时进行JVM调优\" class=\"headerlink\" title=\"何时进行JVM调优\"></a>何时进行JVM调优</h3><p>遇到以下情况，就需要考虑进行JVM调优了：</p>\n<ul>\n<li>Heap内存（老年代）持续上涨达到设置的最大内存值；</li>\n<li>Full GC 次数频繁；</li>\n<li>GC 停顿时间过长（超过1秒）；</li>\n<li>应用出现OutOfMemory 等内存异常；</li>\n<li>应用中有使用本地缓存且占用大量内存空间；</li>\n<li>系统吞吐量与响应性能不高或下降。</li>\n</ul>\n<h3 id=\"JVM调优的基本原则\"><a href=\"#JVM调优的基本原则\" class=\"headerlink\" title=\"JVM调优的基本原则\"></a>JVM调优的基本原则</h3><p>JVM调优是一个手段，但并不一定所有问题都可以通过JVM进行调优解决，因此，在进行JVM调优时，我们要遵循一些原则：</p>\n<ul>\n<li>大多数的Java应用不需要进行JVM优化；</li>\n<li>大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；</li>\n<li>上线之前，应先考虑将机器的JVM参数设置到最优；</li>\n<li>减少创建对象的数量（代码层面）；</li>\n<li>减少使用全局变量和大对象（代码层面）；</li>\n<li>优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；</li>\n<li>分析GC情况优化代码比优化JVM参数更好（代码层面）；</li>\n</ul>\n<p>通过以上原则，我们发现，其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。</p>\n<h3 id=\"JVM调优目标\"><a href=\"#JVM调优目标\" class=\"headerlink\" title=\"JVM调优目标\"></a>JVM调优目标</h3><p>调优的最终目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。<br>jvm调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量。</p>\n<ul>\n<li>延迟：GC低停顿和GC低频率；</li>\n<li>低内存占用；</li>\n<li>高吞吐量;</li>\n</ul>\n<p>其中，任何一个属性性能的提高，几乎都是以牺牲其他属性性能的损为代价的，不可兼得。具体根据在业务中的重要性确定。</p>\n<h3 id=\"JVM调优量化目标\"><a href=\"#JVM调优量化目标\" class=\"headerlink\" title=\"JVM调优量化目标\"></a>JVM调优量化目标</h3><p>下面展示了一些JVM调优的量化目标参考实例：</p>\n<ul>\n<li>Heap 内存使用率 &lt;= 70%;</li>\n<li>Old generation内存使用率&lt;= 70%;</li>\n<li>avgpause &lt;= 1秒;</li>\n<li>Full gc 次数0 或 avg pause interval &gt;= 24小时 ;</li>\n</ul>\n<p>注意：不同应用的JVM调优量化目标是不一样的。</p>\n<h3 id=\"JVM调优的步骤\"><a href=\"#JVM调优的步骤\" class=\"headerlink\" title=\"JVM调优的步骤\"></a>JVM调优的步骤</h3><p>一般情况下，JVM调优可通过以下步骤进行：</p>\n<ul>\n<li>分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；</li>\n<li>确定JVM调优量化目标；</li>\n<li>确定JVM调优参数（根据历史JVM参数来调整）；</li>\n<li>依次调优内存、延迟、吞吐量等指标；</li>\n<li>对比观察调优前后的差异；</li>\n<li>不断的分析和调整，直到找到合适的JVM参数配置；</li>\n<li>找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。</li>\n</ul>\n<p>以上操作步骤中，某些步骤是需要多次不断迭代完成的。一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。</p>\n<h3 id=\"JVM参数\"><a href=\"#JVM参数\" class=\"headerlink\" title=\"JVM参数\"></a>JVM参数</h3><p>JVM调优最重要的工具就是JVM参数了。先来了解一下JVM参数相关内容。</p>\n<p>-XX 参数被称为不稳定参数，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。如果此类参数设置合理将大大提高JVM的性能及稳定性。</p>\n<p>不稳定参数语法规则包含以下内容。</p>\n<pre><code>布尔类型参数值：\n-XX:+&lt;option&gt; &apos;+&apos;表示启用该选项\n-XX:-&lt;option&gt; &apos;-&apos;表示关闭该选项\n数字类型参数值：\n-XX:&lt;option&gt;=&lt;number&gt;给选项设置一个数字类型值，可跟随单位，例如：&apos;m&apos;或&apos;M&apos;表示兆字节;&apos;k&apos;或&apos;K&apos;千字节;&apos;g&apos;或&apos;G&apos;千兆字节。32K与32768是相同大小的。\n字符串类型参数值\n-XX:&lt;option&gt;=&lt;string&gt;给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。例如：-XX:HeapDumpPath=./dump.core</code></pre><h3 id=\"JVM参数解析及调优\"><a href=\"#JVM参数解析及调优\" class=\"headerlink\" title=\"JVM参数解析及调优\"></a>JVM参数解析及调优</h3><p>比如以下参数示例：</p>\n<pre><code>-Xmx4g –Xms4g –Xmn1200m –Xss512k -XX:NewRatio=4 -XX:SurvivorRatio=8 -XX:PermSize=100m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=15</code></pre><p>上面为Java7及以前版本的示例，在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。这在前面章节中已经讲到。</p>\n<p>参数解析：</p>\n<pre><code class=\"hljs plain\">-Xmx4g：堆内存最大值为4GB。\n-Xms4g：初始化堆内存大小为4GB。\n-Xmn1200m：设置年轻代大小为1200MB。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3&#x2F;8。\n-Xss512k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。\n-XX:NewRatio&#x3D;4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1&#x2F;5\n-XX:SurvivorRatio&#x3D;8：设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1&#x2F;10\n-XX:PermSize&#x3D;100m：初始化永久代大小为100MB。\n-XX:MaxPermSize&#x3D;256m：设置持久代大小为256MB。\n-XX:MaxTenuringThreshold&#x3D;15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</code></pre>\n<p>新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。</p>\n<p>可调优参数：</p>\n<pre><code class=\"hljs plain\">-Xms：初始化堆内存大小，默认为物理内存的1&#x2F;64(小于1GB)。\n-Xmx：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。\n-Xmn：新生代大小，包括Eden区与2个Survivor区。\n-XX:SurvivorRatio&#x3D;1：Eden区与一个Survivor区比值为1:1。\n-XX:MaxDirectMemorySize&#x3D;1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。\n-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。\n-XX:CMSInitiatingOccupancyFraction&#x3D;60：老年代内存回收阈值，默认值为68。\n-XX:ConcGCThreads&#x3D;4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。\n-XX:ParallelGCThreads&#x3D;8：新生代并行收集器的线程数。\n-XX:MaxTenuringThreshold&#x3D;10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n-XX:CMSFullGCsBeforeCompaction&#x3D;4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。\n-XX:CMSMaxAbortablePrecleanTime&#x3D;500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。</code></pre>\n<blockquote>\n<p>注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。</p>\n</blockquote>\n<p>在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。</p>\n<h3 id=\"内存优化示例\"><a href=\"#内存优化示例\" class=\"headerlink\" title=\"内存优化示例\"></a>内存优化示例</h3><p>当JVM运行稳定之后，触发了FullGC我们一般会拿到如下信息:</p>\n<p>image<br>以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。</p>\n<pre><code>java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久带空间占用。\n新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n老年代：2-3倍FullGC后的老年代空间占用。</code></pre><p>基于以上规则，则对参数定义如下：</p>\n<pre><code class=\"hljs plain\">java -Xms373m -Xmx373m -Xmn140m -XX:PermSize&#x3D;5m -XX:MaxPermSize&#x3D;5m</code></pre>\n\n<h3 id=\"延迟优化示例\"><a href=\"#延迟优化示例\" class=\"headerlink\" title=\"延迟优化示例\"></a>延迟优化示例</h3><p>对延迟性优化，首先需要了解延迟性需求及可调优的指标有哪些。</p>\n<ul>\n<li>应用程序可接受的平均停滞时间: 此时间与测量的Minor</li>\n<li>GC持续时间进行比较。可接受的Minor GC频率：Minor</li>\n<li>GC的频率与可容忍的值进行比较。</li>\n<li>可接受的最大停顿时间:最大停顿时间与最差情况下FullGC的持续时间进行比较。</li>\n<li>可接受的最大停顿发生的频率：基本就是FullGC的频率。</li>\n</ul>\n<p>其中，平均停滞时间和最大停顿时间，对用户体验最为重要。对于上面的指标，相关数据采集包括：MinorGC的持续时间、统计MinorGC的次数、FullGC的最差持续时间、最差情况下，FullGC的频率。</p>\n<p>image<br>如上图，Minor GC的平均持续时间0.069秒，MinorGC的频率为0.389秒一次。</p>\n<p>新生代空间越大，Minor GC的GC时间越长，频率越低。如果想减少其持续时长，就需要减少其空间大小。如果想减小其频率，就需要加大其空间大小。</p>\n<p>这里以减少了新生代空间10%的大小，来减小延迟时间。在此过程中，应该保持老年代和持代的大小不变化。调优后的参数如下变化:</p>\n<pre><code class=\"hljs plain\">java -Xms359m -Xmx359m -Xmn126m -XX:PermSize&#x3D;5m -XX:MaxPermSize&#x3D;5m</code></pre>\n<h3 id=\"吞吐量调优\"><a href=\"#吞吐量调优\" class=\"headerlink\" title=\"吞吐量调优\"></a>吞吐量调优</h3><p>吞吐量调优主要是基于应用程序的吞吐量要求而来的，应用程序应该有一个综合的吞吐指标，这个指标基于整个应用的需求和测试而衍生出来的。</p>\n<p>评估当前吞吐量和目标差距是否巨大，如果在20%左右，可以修改参数，加大内存，再次从头调试，如果巨大就需要从整个应用层面来考虑，设计以及目标是否一致了，重新评估吞吐目标。</p>\n<blockquote>\n<p>对于垃圾收集器来说，提升吞吐量的性能调优的目标就是尽可能避免或者很少发生FullGC或者Stop-The-World压缩式垃圾收集（CMS），因为这两种方式都会造成应用程序吞吐降低。尽量在MinorGC 阶段回收更多的对象，避免对象提升过快到老年代。</p>\n</blockquote>\n<h3 id=\"调优工具\"><a href=\"#调优工具\" class=\"headerlink\" title=\"调优工具\"></a>调优工具</h3><p>借助GCViewer日志分析工具，可以非常直观地分析出待调优点。可从以下几方面来分析：</p>\n<ul>\n<li>Memory,分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；</li>\n<li>Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；</li>\n</ul>\n"},{"title":"Spring Cloud 微服务架构全链路实践","index_img":"/img/spring-cloud.jpeg","abbrlink":1879991184,"date":"2016-08-15T16:04:12.000Z","_content":"\nJava 微服务框架选型（Dubbo 和 Spring Cloud）\n\n{% asset_img 1.png %}\n\n目前公司使用的 Spring Cloud 整个技术组件，基本包含了上面图中所包含的，不得不说，Spring Cloud 整个生态真的很强大，使用起来也很方便有效。\n\n后面有时间再针对每个组件进行使用解读，这篇文章主要说下 Spring Cloud 架构的链路图，顺便把自己的思路整理下来，以备查阅。\n\n{% asset_img 2.png %}\n\n# 网关请求流程\n\n在 Spring Cloud 整个组件库中，Spring Cloud Zuul 是最容易被忽视，但也是最重要的，Spring Cloud Zuul 可以和 Eureka 注册中心集成，我们目前使用 Spring Cloud Zuul 的功能如下：\n- Filter 过滤器\n- Router 路由\n- Ribbon 负载均衡\n- Hystrix 熔断\n- Retry 重试\n有些功能是 Spring Cloud Zuul 自带的，比如 Filter 和 Router，有些是结合 Spring Cloud 其他组件，比如 Ribbon 和 Hystrix。\n\n这里重点介绍下 Filter 过滤器，分为四个过滤类型：\n- pre：Zuul 转发请求之前执行，我们目前的实现是AccessTokenFilter，用于 oAuth2.0 JWT 的授权验证。\n- route：Zuul 路由时执行，目前项目没用到。\n- post：Zuul 路由转发后执行，也就是已经请求成功了后端服务，我们目前的实现是CustomResponseFilter，用于统一请求格式的封装，比如 code/msg/data 等。\n- error：以上过滤器发生错误时执行，我们目前的实现是CustomErrorFilter，用于拦截过滤器执行的出现的错误，然后统一格式封装返回，另外，error 过滤器好像并不能捕获后端服务执行出现的错误。\n\n另外，关于 oAuth2.0 JWT 的授权验证，实现的方式有两种：\n- 授权的配置在后端服务中（每个服务都需要当作 Resource Server 进行配置，需要配置公钥，接口的授权具体配置在注解中），Zuul 只做转发，并不进行授权的验证。\n- 授权的配置在 Zuul 中，也就是把 Zuul 当作 Resource Server，后端服务不需要进行任何处理，Zuul 中具体的实现就是AccessTokenFilter，里面的逻辑是手动解析 JWT，然后判断是否正确，以及解析出用户信息/Scope/Role，然后根据当前的请求 API，对授权 Map 中的配置进行匹配，如果匹配错误，直接抛出 401 授权错误。\n我们目前采用的是第二种方式，这两种方式都有利有弊，关键在于自己的取舍，为什么采用第二种方式？目的就是发挥 Zuul 的作用，对外网关进行统一授权验证。\n\n关于授权 Map，里面存储了所有服务接口的配置，示例配置：\n```\nprivate static final Map ROUTE_MAPS;\nstatic {\n    ROUTE_MAPS = new HashMap();\n    ROUTE_MAPS.put(\"eureka-client/home\", \"read:ROLE_ADMIN\");\n    ROUTE_MAPS.put(\"eureka-client/user\", \"read:ROLE_ADMIN\");\n    ROUTE_MAPS.put(\"eureka-client/error\", \"read:ROLE_ADMIN\");\n}\n```\n\n\n这是我们目前的配置，是一个静态的 Map，后面会存储在 Spring Cloud Config 配置中心，Zuul 启动时进行加载，利用 Spring Cloud Bus 动态刷新。\n\n关于 Zuul 网关，其实还有很多需要说的，后面有机会再进行针对说明。\n\n# Eureka 服务治理\n\n{% asset_img 3.png %}\n\nEureka 遵循的是 AP 原则（服务可用性和分区容错性），是服务治理最理想的遵循 CAP 分布式原则。\n\nEureka 集群中的节点是彼此平级，不像 Consul 有 master/worker 之分，集群中的 Eureka 节点彼此两两注册，所以，Eureka 集群最好部署三个节点，这也是我们目前的部署方式。\n\n另外，Eureka 的自我保护机制，可以参考这篇文章。\n\n服务之间的相互调用，负载有两种使用方式：\n- Feign：基于声明式，顾名思义，就是需要定义接口，就像我们平常使用对象调用一样。\n- Ribbon：软负载，通过往 RestTemplate 中注入负载 Handler，然后通过负载算法选取调用（通过 Eureka 获取服务注册信息）。\n我们目前打算使用 Ribbon 负载方式，为什么？看下面代码就知道了：\n\n```\nrestTemplate.getForObject(\"http://eureka-client/hello\", String.class);\n```\n\n# Config 配置中心\n\n{% asset_img 4.png %}\n\n我们目前配置中心使用的是 Spring Cloud Config，当然你也可以使用功能更强大的 Polly（携程开源），但 Config 目前也能满足我们的需求，存储仓库我们现在使用的是 Git。\n\nConfig 配置中心提供了数据加密功能，你可以使用 RSA 的加密方式，这样存储在 Git 中的配置都是密文形式，Config Client 获取加密配置的时候，Config Server 会自动进行解密返回。\n\n配置中心的使用场景，我们目前主要是两个地方：\n\n- 项目启动的配置信息，比如数据库的连接字符串等。\n- 业务服务的配置信息，也就是业务相关的配置。\n\n另外，需要说明的是，默认情况下，如果 Git 中的配置更新了，Config Client 不会进行更新配置，我们目前的解决方式是，使用 Spring Cloud Bus 进行动态刷新配置（Config Server 中配置），具体的流程：\n1. Git 中添加 WebHooks 脚本，比如curl -X POST http://manager1:8180/bus/refresh，当 Git 仓库中的配置更新后，自动执行。\n2. Config Server 中配置 Spring Cloud Bus，接受 Git 的配置刷新请求，然后利用 RabbitMQ 广播通知所有的 Config Client 订阅方，刷新配置信息。\n\n# Hystrix 监控\n\n{% asset_img 5.png %}\n\nHystrix 主要是用于服务熔断/降级/隔离处理，Hystrix 配置在调用方，当被调用方服务不可用时，触发 Hystrix 熔断，会执行指定的 Fallback 方法，进行特殊处理。\n\n我之前以为，Hystrix 熔断的触发条件是服务不可用，也就是服务请求超时（比如服务挂掉了），但我自己测试了下，服务出现 500 错误，也会触发 Hystrix 熔断，而且会自动忽略 Hystrix 的超时时间设置。\n\n我们目前使用 Hystrix，主要有两个地方：\n- 内部服务调用：可以对某个 API 接口进行熔断处理。\n- Zuul 网关使用：就是当 Zuul 路由转发调用时，但有个局限性，就是只能对服务进行熔断，并不能针对某个 API 接口熔断。\n\n上面图中，主要画的是 Hystrix 的监控流程，我们目前主要使用 RabbitMQ 进行采集传输，turbine-server 进行数据流的聚合，hystrix-dashboard 进行图形化的展示。\n\n# 服务调用链路\n\n{% asset_img 6.png %}\n\n服务调用链路的概念，就是当服务请求发起时，记录整个请求链路的数据，以备查询。\n\n目前市面上，几乎所有服务调用链路的实现，理论基础都是基于 Google Dapper 的那篇论文，其中最重要的概念就是 traceId 和 spanId。\ntraceId 记录整个服务链路的 ID，由首次请求方创建，服务链路中唯一。\nspanId 记录当前服务块的 ID，由当前服务方创建。\nparentId 记录上一个请求服务的 spanId。\n下面我描述下，我们目前的服务调用链路过程：\nH5 发起请求，到 Zuul 网关，Zuul 创建全局的 traceId 和自己的 spanId，然后携带这些数据到业务服务 A，并利用 Spring Cloud Sluth 传输到 RabbitMQ。\n业务服务 A，接收到 Zuul 传输的 traceId 和 spanId，然后把 Zuul 的 spanId 设置成 parentId，并生成自己的 spanId，然后携带这些数据到业务服务 B，并利用 Spring Cloud Sluth 传输到 RabbitMQ。\n....\n上面图中，详细说明了整个服务调用链路的过程，这边再说下使用的技术栈：\nSpring Cloud Sluth：和 SkyWalking 的探针概念比较类似，每个服务都进行配置，收集当然服务的请求数据（traceId 和 spanId），然后利用stream-sluth和binder-rabbit组件，将请求数据传输到 RabbitMQ。\nSpring Cloud Zipkin：主要用于请求链路的 UI 展示，Zipkin 会从 RabbitMQ 读取请求数据，然后存储到 ElasticSearch 中，然后下次显示直接从 ElasticSearch 中读取。\nKibana：Kibana 也可以显示 ElasticSearch 中的请求数据，只不过不是图形化的，需要索引配置创建。\n\n# ELK 日志链路\n\n{% asset_img 7.png  %}\n\nELK 可以参考下之前的几篇文章：\nELK 架构之 Elasticsearch 和 Kibana 安装配置\nELK 架构之 Logstash 和 Filebeat 安装配置\nELK 架构之 Logstash 和 Filebeat 配置使用（采集过滤）\nELK 架构之 Elasticsearch、Kibana、Logstash 和 Filebeat 安装配置汇总（6.2.4 版本）\n上面图中已经很详细介绍了下 ELK 的流程，ELK 默认技术栈里是没有 Filebeat 的，Logstash 用作日志收集的时候，CPU 和内存会占用资源比较大，所以我们使用轻量化的 Filebeat 进行日志的收集，Filebeat 部署在每个业务服务所在的服务器，然后将收集到的日志数据传输到 Logstash，Logstash 可以部署两到三台服务器上，用作日志的过滤和分析工作，然后再将处理后的日志数据，传输到 ElasticSearch 存储。\n\n# 统一格式返回\n\n{% asset_img 8.png %}\n\n","source":"_posts/spring-cloud-learning.md","raw":"---\ntitle: Spring Cloud 微服务架构全链路实践\ntags:\n  - Spring\n  - Java\nindex_img: /img/spring-cloud.jpeg\nabbrlink: 1879991184\ndate: 2016-08-16 00:04:12\n---\n\nJava 微服务框架选型（Dubbo 和 Spring Cloud）\n\n{% asset_img 1.png %}\n\n目前公司使用的 Spring Cloud 整个技术组件，基本包含了上面图中所包含的，不得不说，Spring Cloud 整个生态真的很强大，使用起来也很方便有效。\n\n后面有时间再针对每个组件进行使用解读，这篇文章主要说下 Spring Cloud 架构的链路图，顺便把自己的思路整理下来，以备查阅。\n\n{% asset_img 2.png %}\n\n# 网关请求流程\n\n在 Spring Cloud 整个组件库中，Spring Cloud Zuul 是最容易被忽视，但也是最重要的，Spring Cloud Zuul 可以和 Eureka 注册中心集成，我们目前使用 Spring Cloud Zuul 的功能如下：\n- Filter 过滤器\n- Router 路由\n- Ribbon 负载均衡\n- Hystrix 熔断\n- Retry 重试\n有些功能是 Spring Cloud Zuul 自带的，比如 Filter 和 Router，有些是结合 Spring Cloud 其他组件，比如 Ribbon 和 Hystrix。\n\n这里重点介绍下 Filter 过滤器，分为四个过滤类型：\n- pre：Zuul 转发请求之前执行，我们目前的实现是AccessTokenFilter，用于 oAuth2.0 JWT 的授权验证。\n- route：Zuul 路由时执行，目前项目没用到。\n- post：Zuul 路由转发后执行，也就是已经请求成功了后端服务，我们目前的实现是CustomResponseFilter，用于统一请求格式的封装，比如 code/msg/data 等。\n- error：以上过滤器发生错误时执行，我们目前的实现是CustomErrorFilter，用于拦截过滤器执行的出现的错误，然后统一格式封装返回，另外，error 过滤器好像并不能捕获后端服务执行出现的错误。\n\n另外，关于 oAuth2.0 JWT 的授权验证，实现的方式有两种：\n- 授权的配置在后端服务中（每个服务都需要当作 Resource Server 进行配置，需要配置公钥，接口的授权具体配置在注解中），Zuul 只做转发，并不进行授权的验证。\n- 授权的配置在 Zuul 中，也就是把 Zuul 当作 Resource Server，后端服务不需要进行任何处理，Zuul 中具体的实现就是AccessTokenFilter，里面的逻辑是手动解析 JWT，然后判断是否正确，以及解析出用户信息/Scope/Role，然后根据当前的请求 API，对授权 Map 中的配置进行匹配，如果匹配错误，直接抛出 401 授权错误。\n我们目前采用的是第二种方式，这两种方式都有利有弊，关键在于自己的取舍，为什么采用第二种方式？目的就是发挥 Zuul 的作用，对外网关进行统一授权验证。\n\n关于授权 Map，里面存储了所有服务接口的配置，示例配置：\n```\nprivate static final Map ROUTE_MAPS;\nstatic {\n    ROUTE_MAPS = new HashMap();\n    ROUTE_MAPS.put(\"eureka-client/home\", \"read:ROLE_ADMIN\");\n    ROUTE_MAPS.put(\"eureka-client/user\", \"read:ROLE_ADMIN\");\n    ROUTE_MAPS.put(\"eureka-client/error\", \"read:ROLE_ADMIN\");\n}\n```\n\n\n这是我们目前的配置，是一个静态的 Map，后面会存储在 Spring Cloud Config 配置中心，Zuul 启动时进行加载，利用 Spring Cloud Bus 动态刷新。\n\n关于 Zuul 网关，其实还有很多需要说的，后面有机会再进行针对说明。\n\n# Eureka 服务治理\n\n{% asset_img 3.png %}\n\nEureka 遵循的是 AP 原则（服务可用性和分区容错性），是服务治理最理想的遵循 CAP 分布式原则。\n\nEureka 集群中的节点是彼此平级，不像 Consul 有 master/worker 之分，集群中的 Eureka 节点彼此两两注册，所以，Eureka 集群最好部署三个节点，这也是我们目前的部署方式。\n\n另外，Eureka 的自我保护机制，可以参考这篇文章。\n\n服务之间的相互调用，负载有两种使用方式：\n- Feign：基于声明式，顾名思义，就是需要定义接口，就像我们平常使用对象调用一样。\n- Ribbon：软负载，通过往 RestTemplate 中注入负载 Handler，然后通过负载算法选取调用（通过 Eureka 获取服务注册信息）。\n我们目前打算使用 Ribbon 负载方式，为什么？看下面代码就知道了：\n\n```\nrestTemplate.getForObject(\"http://eureka-client/hello\", String.class);\n```\n\n# Config 配置中心\n\n{% asset_img 4.png %}\n\n我们目前配置中心使用的是 Spring Cloud Config，当然你也可以使用功能更强大的 Polly（携程开源），但 Config 目前也能满足我们的需求，存储仓库我们现在使用的是 Git。\n\nConfig 配置中心提供了数据加密功能，你可以使用 RSA 的加密方式，这样存储在 Git 中的配置都是密文形式，Config Client 获取加密配置的时候，Config Server 会自动进行解密返回。\n\n配置中心的使用场景，我们目前主要是两个地方：\n\n- 项目启动的配置信息，比如数据库的连接字符串等。\n- 业务服务的配置信息，也就是业务相关的配置。\n\n另外，需要说明的是，默认情况下，如果 Git 中的配置更新了，Config Client 不会进行更新配置，我们目前的解决方式是，使用 Spring Cloud Bus 进行动态刷新配置（Config Server 中配置），具体的流程：\n1. Git 中添加 WebHooks 脚本，比如curl -X POST http://manager1:8180/bus/refresh，当 Git 仓库中的配置更新后，自动执行。\n2. Config Server 中配置 Spring Cloud Bus，接受 Git 的配置刷新请求，然后利用 RabbitMQ 广播通知所有的 Config Client 订阅方，刷新配置信息。\n\n# Hystrix 监控\n\n{% asset_img 5.png %}\n\nHystrix 主要是用于服务熔断/降级/隔离处理，Hystrix 配置在调用方，当被调用方服务不可用时，触发 Hystrix 熔断，会执行指定的 Fallback 方法，进行特殊处理。\n\n我之前以为，Hystrix 熔断的触发条件是服务不可用，也就是服务请求超时（比如服务挂掉了），但我自己测试了下，服务出现 500 错误，也会触发 Hystrix 熔断，而且会自动忽略 Hystrix 的超时时间设置。\n\n我们目前使用 Hystrix，主要有两个地方：\n- 内部服务调用：可以对某个 API 接口进行熔断处理。\n- Zuul 网关使用：就是当 Zuul 路由转发调用时，但有个局限性，就是只能对服务进行熔断，并不能针对某个 API 接口熔断。\n\n上面图中，主要画的是 Hystrix 的监控流程，我们目前主要使用 RabbitMQ 进行采集传输，turbine-server 进行数据流的聚合，hystrix-dashboard 进行图形化的展示。\n\n# 服务调用链路\n\n{% asset_img 6.png %}\n\n服务调用链路的概念，就是当服务请求发起时，记录整个请求链路的数据，以备查询。\n\n目前市面上，几乎所有服务调用链路的实现，理论基础都是基于 Google Dapper 的那篇论文，其中最重要的概念就是 traceId 和 spanId。\ntraceId 记录整个服务链路的 ID，由首次请求方创建，服务链路中唯一。\nspanId 记录当前服务块的 ID，由当前服务方创建。\nparentId 记录上一个请求服务的 spanId。\n下面我描述下，我们目前的服务调用链路过程：\nH5 发起请求，到 Zuul 网关，Zuul 创建全局的 traceId 和自己的 spanId，然后携带这些数据到业务服务 A，并利用 Spring Cloud Sluth 传输到 RabbitMQ。\n业务服务 A，接收到 Zuul 传输的 traceId 和 spanId，然后把 Zuul 的 spanId 设置成 parentId，并生成自己的 spanId，然后携带这些数据到业务服务 B，并利用 Spring Cloud Sluth 传输到 RabbitMQ。\n....\n上面图中，详细说明了整个服务调用链路的过程，这边再说下使用的技术栈：\nSpring Cloud Sluth：和 SkyWalking 的探针概念比较类似，每个服务都进行配置，收集当然服务的请求数据（traceId 和 spanId），然后利用stream-sluth和binder-rabbit组件，将请求数据传输到 RabbitMQ。\nSpring Cloud Zipkin：主要用于请求链路的 UI 展示，Zipkin 会从 RabbitMQ 读取请求数据，然后存储到 ElasticSearch 中，然后下次显示直接从 ElasticSearch 中读取。\nKibana：Kibana 也可以显示 ElasticSearch 中的请求数据，只不过不是图形化的，需要索引配置创建。\n\n# ELK 日志链路\n\n{% asset_img 7.png  %}\n\nELK 可以参考下之前的几篇文章：\nELK 架构之 Elasticsearch 和 Kibana 安装配置\nELK 架构之 Logstash 和 Filebeat 安装配置\nELK 架构之 Logstash 和 Filebeat 配置使用（采集过滤）\nELK 架构之 Elasticsearch、Kibana、Logstash 和 Filebeat 安装配置汇总（6.2.4 版本）\n上面图中已经很详细介绍了下 ELK 的流程，ELK 默认技术栈里是没有 Filebeat 的，Logstash 用作日志收集的时候，CPU 和内存会占用资源比较大，所以我们使用轻量化的 Filebeat 进行日志的收集，Filebeat 部署在每个业务服务所在的服务器，然后将收集到的日志数据传输到 Logstash，Logstash 可以部署两到三台服务器上，用作日志的过滤和分析工作，然后再将处理后的日志数据，传输到 ElasticSearch 存储。\n\n# 统一格式返回\n\n{% asset_img 8.png %}\n\n","slug":"spring-cloud-learning","published":1,"updated":"2020-04-18T11:38:31.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiip5kh80014shcdgr7rd28m","content":"<p>Java 微服务框架选型（Dubbo 和 Spring Cloud）</p>\n<img src=\"/posts/1879991184/index/1.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>目前公司使用的 Spring Cloud 整个技术组件，基本包含了上面图中所包含的，不得不说，Spring Cloud 整个生态真的很强大，使用起来也很方便有效。</p>\n<p>后面有时间再针对每个组件进行使用解读，这篇文章主要说下 Spring Cloud 架构的链路图，顺便把自己的思路整理下来，以备查阅。</p>\n<img src=\"/posts/1879991184/index/2.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<h1 id=\"网关请求流程\"><a href=\"#网关请求流程\" class=\"headerlink\" title=\"网关请求流程\"></a>网关请求流程</h1><p>在 Spring Cloud 整个组件库中，Spring Cloud Zuul 是最容易被忽视，但也是最重要的，Spring Cloud Zuul 可以和 Eureka 注册中心集成，我们目前使用 Spring Cloud Zuul 的功能如下：</p>\n<ul>\n<li>Filter 过滤器</li>\n<li>Router 路由</li>\n<li>Ribbon 负载均衡</li>\n<li>Hystrix 熔断</li>\n<li>Retry 重试<br>有些功能是 Spring Cloud Zuul 自带的，比如 Filter 和 Router，有些是结合 Spring Cloud 其他组件，比如 Ribbon 和 Hystrix。</li>\n</ul>\n<p>这里重点介绍下 Filter 过滤器，分为四个过滤类型：</p>\n<ul>\n<li>pre：Zuul 转发请求之前执行，我们目前的实现是AccessTokenFilter，用于 oAuth2.0 JWT 的授权验证。</li>\n<li>route：Zuul 路由时执行，目前项目没用到。</li>\n<li>post：Zuul 路由转发后执行，也就是已经请求成功了后端服务，我们目前的实现是CustomResponseFilter，用于统一请求格式的封装，比如 code/msg/data 等。</li>\n<li>error：以上过滤器发生错误时执行，我们目前的实现是CustomErrorFilter，用于拦截过滤器执行的出现的错误，然后统一格式封装返回，另外，error 过滤器好像并不能捕获后端服务执行出现的错误。</li>\n</ul>\n<p>另外，关于 oAuth2.0 JWT 的授权验证，实现的方式有两种：</p>\n<ul>\n<li>授权的配置在后端服务中（每个服务都需要当作 Resource Server 进行配置，需要配置公钥，接口的授权具体配置在注解中），Zuul 只做转发，并不进行授权的验证。</li>\n<li>授权的配置在 Zuul 中，也就是把 Zuul 当作 Resource Server，后端服务不需要进行任何处理，Zuul 中具体的实现就是AccessTokenFilter，里面的逻辑是手动解析 JWT，然后判断是否正确，以及解析出用户信息/Scope/Role，然后根据当前的请求 API，对授权 Map 中的配置进行匹配，如果匹配错误，直接抛出 401 授权错误。<br>我们目前采用的是第二种方式，这两种方式都有利有弊，关键在于自己的取舍，为什么采用第二种方式？目的就是发挥 Zuul 的作用，对外网关进行统一授权验证。</li>\n</ul>\n<p>关于授权 Map，里面存储了所有服务接口的配置，示例配置：</p>\n<pre><code class=\"hljs plain\">private static final Map ROUTE_MAPS;\nstatic &#123;\n    ROUTE_MAPS &#x3D; new HashMap();\n    ROUTE_MAPS.put(&quot;eureka-client&#x2F;home&quot;, &quot;read:ROLE_ADMIN&quot;);\n    ROUTE_MAPS.put(&quot;eureka-client&#x2F;user&quot;, &quot;read:ROLE_ADMIN&quot;);\n    ROUTE_MAPS.put(&quot;eureka-client&#x2F;error&quot;, &quot;read:ROLE_ADMIN&quot;);\n&#125;</code></pre>\n\n\n<p>这是我们目前的配置，是一个静态的 Map，后面会存储在 Spring Cloud Config 配置中心，Zuul 启动时进行加载，利用 Spring Cloud Bus 动态刷新。</p>\n<p>关于 Zuul 网关，其实还有很多需要说的，后面有机会再进行针对说明。</p>\n<h1 id=\"Eureka-服务治理\"><a href=\"#Eureka-服务治理\" class=\"headerlink\" title=\"Eureka 服务治理\"></a>Eureka 服务治理</h1><img src=\"/posts/1879991184/index/3.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>Eureka 遵循的是 AP 原则（服务可用性和分区容错性），是服务治理最理想的遵循 CAP 分布式原则。</p>\n<p>Eureka 集群中的节点是彼此平级，不像 Consul 有 master/worker 之分，集群中的 Eureka 节点彼此两两注册，所以，Eureka 集群最好部署三个节点，这也是我们目前的部署方式。</p>\n<p>另外，Eureka 的自我保护机制，可以参考这篇文章。</p>\n<p>服务之间的相互调用，负载有两种使用方式：</p>\n<ul>\n<li>Feign：基于声明式，顾名思义，就是需要定义接口，就像我们平常使用对象调用一样。</li>\n<li>Ribbon：软负载，通过往 RestTemplate 中注入负载 Handler，然后通过负载算法选取调用（通过 Eureka 获取服务注册信息）。<br>我们目前打算使用 Ribbon 负载方式，为什么？看下面代码就知道了：</li>\n</ul>\n<pre><code class=\"hljs plain\">restTemplate.getForObject(&quot;http:&#x2F;&#x2F;eureka-client&#x2F;hello&quot;, String.class);</code></pre>\n\n<h1 id=\"Config-配置中心\"><a href=\"#Config-配置中心\" class=\"headerlink\" title=\"Config 配置中心\"></a>Config 配置中心</h1><img src=\"/posts/1879991184/index/4.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>我们目前配置中心使用的是 Spring Cloud Config，当然你也可以使用功能更强大的 Polly（携程开源），但 Config 目前也能满足我们的需求，存储仓库我们现在使用的是 Git。</p>\n<p>Config 配置中心提供了数据加密功能，你可以使用 RSA 的加密方式，这样存储在 Git 中的配置都是密文形式，Config Client 获取加密配置的时候，Config Server 会自动进行解密返回。</p>\n<p>配置中心的使用场景，我们目前主要是两个地方：</p>\n<ul>\n<li>项目启动的配置信息，比如数据库的连接字符串等。</li>\n<li>业务服务的配置信息，也就是业务相关的配置。</li>\n</ul>\n<p>另外，需要说明的是，默认情况下，如果 Git 中的配置更新了，Config Client 不会进行更新配置，我们目前的解决方式是，使用 Spring Cloud Bus 进行动态刷新配置（Config Server 中配置），具体的流程：</p>\n<ol>\n<li>Git 中添加 WebHooks 脚本，比如curl -X POST <a href=\"http://manager1:8180/bus/refresh，当\" target=\"_blank\" rel=\"noopener\">http://manager1:8180/bus/refresh，当</a> Git 仓库中的配置更新后，自动执行。</li>\n<li>Config Server 中配置 Spring Cloud Bus，接受 Git 的配置刷新请求，然后利用 RabbitMQ 广播通知所有的 Config Client 订阅方，刷新配置信息。</li>\n</ol>\n<h1 id=\"Hystrix-监控\"><a href=\"#Hystrix-监控\" class=\"headerlink\" title=\"Hystrix 监控\"></a>Hystrix 监控</h1><img src=\"/posts/1879991184/index/5.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>Hystrix 主要是用于服务熔断/降级/隔离处理，Hystrix 配置在调用方，当被调用方服务不可用时，触发 Hystrix 熔断，会执行指定的 Fallback 方法，进行特殊处理。</p>\n<p>我之前以为，Hystrix 熔断的触发条件是服务不可用，也就是服务请求超时（比如服务挂掉了），但我自己测试了下，服务出现 500 错误，也会触发 Hystrix 熔断，而且会自动忽略 Hystrix 的超时时间设置。</p>\n<p>我们目前使用 Hystrix，主要有两个地方：</p>\n<ul>\n<li>内部服务调用：可以对某个 API 接口进行熔断处理。</li>\n<li>Zuul 网关使用：就是当 Zuul 路由转发调用时，但有个局限性，就是只能对服务进行熔断，并不能针对某个 API 接口熔断。</li>\n</ul>\n<p>上面图中，主要画的是 Hystrix 的监控流程，我们目前主要使用 RabbitMQ 进行采集传输，turbine-server 进行数据流的聚合，hystrix-dashboard 进行图形化的展示。</p>\n<h1 id=\"服务调用链路\"><a href=\"#服务调用链路\" class=\"headerlink\" title=\"服务调用链路\"></a>服务调用链路</h1><img src=\"/posts/1879991184/index/6.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>服务调用链路的概念，就是当服务请求发起时，记录整个请求链路的数据，以备查询。</p>\n<p>目前市面上，几乎所有服务调用链路的实现，理论基础都是基于 Google Dapper 的那篇论文，其中最重要的概念就是 traceId 和 spanId。<br>traceId 记录整个服务链路的 ID，由首次请求方创建，服务链路中唯一。<br>spanId 记录当前服务块的 ID，由当前服务方创建。<br>parentId 记录上一个请求服务的 spanId。<br>下面我描述下，我们目前的服务调用链路过程：<br>H5 发起请求，到 Zuul 网关，Zuul 创建全局的 traceId 和自己的 spanId，然后携带这些数据到业务服务 A，并利用 Spring Cloud Sluth 传输到 RabbitMQ。<br>业务服务 A，接收到 Zuul 传输的 traceId 和 spanId，然后把 Zuul 的 spanId 设置成 parentId，并生成自己的 spanId，然后携带这些数据到业务服务 B，并利用 Spring Cloud Sluth 传输到 RabbitMQ。<br>….<br>上面图中，详细说明了整个服务调用链路的过程，这边再说下使用的技术栈：<br>Spring Cloud Sluth：和 SkyWalking 的探针概念比较类似，每个服务都进行配置，收集当然服务的请求数据（traceId 和 spanId），然后利用stream-sluth和binder-rabbit组件，将请求数据传输到 RabbitMQ。<br>Spring Cloud Zipkin：主要用于请求链路的 UI 展示，Zipkin 会从 RabbitMQ 读取请求数据，然后存储到 ElasticSearch 中，然后下次显示直接从 ElasticSearch 中读取。<br>Kibana：Kibana 也可以显示 ElasticSearch 中的请求数据，只不过不是图形化的，需要索引配置创建。</p>\n<h1 id=\"ELK-日志链路\"><a href=\"#ELK-日志链路\" class=\"headerlink\" title=\"ELK 日志链路\"></a>ELK 日志链路</h1><img src=\"/posts/1879991184/index/7.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>ELK 可以参考下之前的几篇文章：<br>ELK 架构之 Elasticsearch 和 Kibana 安装配置<br>ELK 架构之 Logstash 和 Filebeat 安装配置<br>ELK 架构之 Logstash 和 Filebeat 配置使用（采集过滤）<br>ELK 架构之 Elasticsearch、Kibana、Logstash 和 Filebeat 安装配置汇总（6.2.4 版本）<br>上面图中已经很详细介绍了下 ELK 的流程，ELK 默认技术栈里是没有 Filebeat 的，Logstash 用作日志收集的时候，CPU 和内存会占用资源比较大，所以我们使用轻量化的 Filebeat 进行日志的收集，Filebeat 部署在每个业务服务所在的服务器，然后将收集到的日志数据传输到 Logstash，Logstash 可以部署两到三台服务器上，用作日志的过滤和分析工作，然后再将处理后的日志数据，传输到 ElasticSearch 存储。</p>\n<h1 id=\"统一格式返回\"><a href=\"#统一格式返回\" class=\"headerlink\" title=\"统一格式返回\"></a>统一格式返回</h1><img src=\"/posts/1879991184/index/8.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/apple-touch-icon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Github Gist","bg_color":false,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":true,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#2f4154","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#ebedef","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":true,"autoplay":true,"loop":"all","order":"random","theme":"#b7daff","volume":0.2,"songs":[{"name":"Memories","artist":"Maroon 5","url":"/music/memories.mp3","cover":"/music/Memories-Maroon 5.jpg"},{"name":"Someone You Loved","artist":"Lewis Capaldi","url":"/music/someone you loved.mp3","cover":"/music/Someone You Loved-Lewis Capaldi.jpg"},{"name":"Simple Song","artist":"Passenger","url":"/music/Simple Song.mp3","cover":"/music/Passenger.jpg"},{"name":"Sketch Plane","artist":"Cam Kelley","url":"/music/M800002kitDY3lqvHN.mp3","cover":"/music/Sketch Plane-Cam Kelley.jpg"}]},"reward":{"enable":true,"text":"感谢大爷的咖啡☕️","alipay":"/img/alipay.jpg","wechatpay":"/img/wechatpay.jpg"},"version":{"check":true},"navbar":{"blog_title":null,"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/index.html","icon":"iconfont icon-archive-fill"},{"key":"tag","link":"/tags/index.html","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/index.html","icon":"iconfont icon-user-fill"},{"key":"links","link":"/links/index.html","icon":"iconfont icon-link-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":true,"icp_text":"湘ICP备20010696号-1","police_text":null,"police_code":null,"police_icon":null}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/banner.jpg","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"/img/default_thumbnail.jpg","slogan":{"enable":true,"text":null},"hitokoto":{"enable":true},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/banner.jpg","banner_img_height":70,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"dddd, MMMM Do YYYY, h:mm a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":false,"format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于："},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":6},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://zh.wikipedia.org/wiki/Wikipedia:CC_BY-SA_3.0%E5%8D%8F%E8%AE%AE%E6%96%87%E6%9C%AC\" rel=\"nofollow noopener\">CC BY-SA 3.0协议</a> 。转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"comments":{"enable":true,"type":"gitalk"},"image_zoom":{"enable":true},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null},"gitalk":{"enable":true,"clientID":"646b996eb5ffb5eaf34d","clientSecret":"9154e13bd5869e2811b3852e07545337eb10e735","repo":"tanxinzheng.github.io","owner":"tanxinzheng","admin":"tanxinzheng","id":"tanxinzheng","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null,"mathJax":false},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"~拉菲~","introduce":"程序猿 / 户外达人","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/tanxinzheng"},{"class":"iconfont icon-linkedin-fill","link":"https://www.linkedin.com/in/tanxinzheng"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Changelog","intro":"主题更新日志","link":"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/Changelog.md","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p>Java 微服务框架选型（Dubbo 和 Spring Cloud）</p>\n<img src=\"/posts/1879991184/index/1.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>目前公司使用的 Spring Cloud 整个技术组件，基本包含了上面图中所包含的，不得不说，Spring Cloud 整个生态真的很强大，使用起来也很方便有效。</p>\n<p>后面有时间再针对每个组件进行使用解读，这篇文章主要说下 Spring Cloud 架构的链路图，顺便把自己的思路整理下来，以备查阅。</p>\n<img src=\"/posts/1879991184/index/2.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<h1 id=\"网关请求流程\"><a href=\"#网关请求流程\" class=\"headerlink\" title=\"网关请求流程\"></a>网关请求流程</h1><p>在 Spring Cloud 整个组件库中，Spring Cloud Zuul 是最容易被忽视，但也是最重要的，Spring Cloud Zuul 可以和 Eureka 注册中心集成，我们目前使用 Spring Cloud Zuul 的功能如下：</p>\n<ul>\n<li>Filter 过滤器</li>\n<li>Router 路由</li>\n<li>Ribbon 负载均衡</li>\n<li>Hystrix 熔断</li>\n<li>Retry 重试<br>有些功能是 Spring Cloud Zuul 自带的，比如 Filter 和 Router，有些是结合 Spring Cloud 其他组件，比如 Ribbon 和 Hystrix。</li>\n</ul>\n<p>这里重点介绍下 Filter 过滤器，分为四个过滤类型：</p>\n<ul>\n<li>pre：Zuul 转发请求之前执行，我们目前的实现是AccessTokenFilter，用于 oAuth2.0 JWT 的授权验证。</li>\n<li>route：Zuul 路由时执行，目前项目没用到。</li>\n<li>post：Zuul 路由转发后执行，也就是已经请求成功了后端服务，我们目前的实现是CustomResponseFilter，用于统一请求格式的封装，比如 code/msg/data 等。</li>\n<li>error：以上过滤器发生错误时执行，我们目前的实现是CustomErrorFilter，用于拦截过滤器执行的出现的错误，然后统一格式封装返回，另外，error 过滤器好像并不能捕获后端服务执行出现的错误。</li>\n</ul>\n<p>另外，关于 oAuth2.0 JWT 的授权验证，实现的方式有两种：</p>\n<ul>\n<li>授权的配置在后端服务中（每个服务都需要当作 Resource Server 进行配置，需要配置公钥，接口的授权具体配置在注解中），Zuul 只做转发，并不进行授权的验证。</li>\n<li>授权的配置在 Zuul 中，也就是把 Zuul 当作 Resource Server，后端服务不需要进行任何处理，Zuul 中具体的实现就是AccessTokenFilter，里面的逻辑是手动解析 JWT，然后判断是否正确，以及解析出用户信息/Scope/Role，然后根据当前的请求 API，对授权 Map 中的配置进行匹配，如果匹配错误，直接抛出 401 授权错误。<br>我们目前采用的是第二种方式，这两种方式都有利有弊，关键在于自己的取舍，为什么采用第二种方式？目的就是发挥 Zuul 的作用，对外网关进行统一授权验证。</li>\n</ul>\n<p>关于授权 Map，里面存储了所有服务接口的配置，示例配置：</p>\n<pre><code class=\"hljs plain\">private static final Map ROUTE_MAPS;\nstatic &#123;\n    ROUTE_MAPS &#x3D; new HashMap();\n    ROUTE_MAPS.put(&quot;eureka-client&#x2F;home&quot;, &quot;read:ROLE_ADMIN&quot;);\n    ROUTE_MAPS.put(&quot;eureka-client&#x2F;user&quot;, &quot;read:ROLE_ADMIN&quot;);\n    ROUTE_MAPS.put(&quot;eureka-client&#x2F;error&quot;, &quot;read:ROLE_ADMIN&quot;);\n&#125;</code></pre>\n\n\n<p>这是我们目前的配置，是一个静态的 Map，后面会存储在 Spring Cloud Config 配置中心，Zuul 启动时进行加载，利用 Spring Cloud Bus 动态刷新。</p>\n<p>关于 Zuul 网关，其实还有很多需要说的，后面有机会再进行针对说明。</p>\n<h1 id=\"Eureka-服务治理\"><a href=\"#Eureka-服务治理\" class=\"headerlink\" title=\"Eureka 服务治理\"></a>Eureka 服务治理</h1><img src=\"/posts/1879991184/index/3.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>Eureka 遵循的是 AP 原则（服务可用性和分区容错性），是服务治理最理想的遵循 CAP 分布式原则。</p>\n<p>Eureka 集群中的节点是彼此平级，不像 Consul 有 master/worker 之分，集群中的 Eureka 节点彼此两两注册，所以，Eureka 集群最好部署三个节点，这也是我们目前的部署方式。</p>\n<p>另外，Eureka 的自我保护机制，可以参考这篇文章。</p>\n<p>服务之间的相互调用，负载有两种使用方式：</p>\n<ul>\n<li>Feign：基于声明式，顾名思义，就是需要定义接口，就像我们平常使用对象调用一样。</li>\n<li>Ribbon：软负载，通过往 RestTemplate 中注入负载 Handler，然后通过负载算法选取调用（通过 Eureka 获取服务注册信息）。<br>我们目前打算使用 Ribbon 负载方式，为什么？看下面代码就知道了：</li>\n</ul>\n<pre><code class=\"hljs plain\">restTemplate.getForObject(&quot;http:&#x2F;&#x2F;eureka-client&#x2F;hello&quot;, String.class);</code></pre>\n\n<h1 id=\"Config-配置中心\"><a href=\"#Config-配置中心\" class=\"headerlink\" title=\"Config 配置中心\"></a>Config 配置中心</h1><img src=\"/posts/1879991184/index/4.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>我们目前配置中心使用的是 Spring Cloud Config，当然你也可以使用功能更强大的 Polly（携程开源），但 Config 目前也能满足我们的需求，存储仓库我们现在使用的是 Git。</p>\n<p>Config 配置中心提供了数据加密功能，你可以使用 RSA 的加密方式，这样存储在 Git 中的配置都是密文形式，Config Client 获取加密配置的时候，Config Server 会自动进行解密返回。</p>\n<p>配置中心的使用场景，我们目前主要是两个地方：</p>\n<ul>\n<li>项目启动的配置信息，比如数据库的连接字符串等。</li>\n<li>业务服务的配置信息，也就是业务相关的配置。</li>\n</ul>\n<p>另外，需要说明的是，默认情况下，如果 Git 中的配置更新了，Config Client 不会进行更新配置，我们目前的解决方式是，使用 Spring Cloud Bus 进行动态刷新配置（Config Server 中配置），具体的流程：</p>\n<ol>\n<li>Git 中添加 WebHooks 脚本，比如curl -X POST <a href=\"http://manager1:8180/bus/refresh，当\" target=\"_blank\" rel=\"noopener\">http://manager1:8180/bus/refresh，当</a> Git 仓库中的配置更新后，自动执行。</li>\n<li>Config Server 中配置 Spring Cloud Bus，接受 Git 的配置刷新请求，然后利用 RabbitMQ 广播通知所有的 Config Client 订阅方，刷新配置信息。</li>\n</ol>\n<h1 id=\"Hystrix-监控\"><a href=\"#Hystrix-监控\" class=\"headerlink\" title=\"Hystrix 监控\"></a>Hystrix 监控</h1><img src=\"/posts/1879991184/index/5.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>Hystrix 主要是用于服务熔断/降级/隔离处理，Hystrix 配置在调用方，当被调用方服务不可用时，触发 Hystrix 熔断，会执行指定的 Fallback 方法，进行特殊处理。</p>\n<p>我之前以为，Hystrix 熔断的触发条件是服务不可用，也就是服务请求超时（比如服务挂掉了），但我自己测试了下，服务出现 500 错误，也会触发 Hystrix 熔断，而且会自动忽略 Hystrix 的超时时间设置。</p>\n<p>我们目前使用 Hystrix，主要有两个地方：</p>\n<ul>\n<li>内部服务调用：可以对某个 API 接口进行熔断处理。</li>\n<li>Zuul 网关使用：就是当 Zuul 路由转发调用时，但有个局限性，就是只能对服务进行熔断，并不能针对某个 API 接口熔断。</li>\n</ul>\n<p>上面图中，主要画的是 Hystrix 的监控流程，我们目前主要使用 RabbitMQ 进行采集传输，turbine-server 进行数据流的聚合，hystrix-dashboard 进行图形化的展示。</p>\n<h1 id=\"服务调用链路\"><a href=\"#服务调用链路\" class=\"headerlink\" title=\"服务调用链路\"></a>服务调用链路</h1><img src=\"/posts/1879991184/index/6.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>服务调用链路的概念，就是当服务请求发起时，记录整个请求链路的数据，以备查询。</p>\n<p>目前市面上，几乎所有服务调用链路的实现，理论基础都是基于 Google Dapper 的那篇论文，其中最重要的概念就是 traceId 和 spanId。<br>traceId 记录整个服务链路的 ID，由首次请求方创建，服务链路中唯一。<br>spanId 记录当前服务块的 ID，由当前服务方创建。<br>parentId 记录上一个请求服务的 spanId。<br>下面我描述下，我们目前的服务调用链路过程：<br>H5 发起请求，到 Zuul 网关，Zuul 创建全局的 traceId 和自己的 spanId，然后携带这些数据到业务服务 A，并利用 Spring Cloud Sluth 传输到 RabbitMQ。<br>业务服务 A，接收到 Zuul 传输的 traceId 和 spanId，然后把 Zuul 的 spanId 设置成 parentId，并生成自己的 spanId，然后携带这些数据到业务服务 B，并利用 Spring Cloud Sluth 传输到 RabbitMQ。<br>….<br>上面图中，详细说明了整个服务调用链路的过程，这边再说下使用的技术栈：<br>Spring Cloud Sluth：和 SkyWalking 的探针概念比较类似，每个服务都进行配置，收集当然服务的请求数据（traceId 和 spanId），然后利用stream-sluth和binder-rabbit组件，将请求数据传输到 RabbitMQ。<br>Spring Cloud Zipkin：主要用于请求链路的 UI 展示，Zipkin 会从 RabbitMQ 读取请求数据，然后存储到 ElasticSearch 中，然后下次显示直接从 ElasticSearch 中读取。<br>Kibana：Kibana 也可以显示 ElasticSearch 中的请求数据，只不过不是图形化的，需要索引配置创建。</p>\n<h1 id=\"ELK-日志链路\"><a href=\"#ELK-日志链路\" class=\"headerlink\" title=\"ELK 日志链路\"></a>ELK 日志链路</h1><img src=\"/posts/1879991184/index/7.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n<p>ELK 可以参考下之前的几篇文章：<br>ELK 架构之 Elasticsearch 和 Kibana 安装配置<br>ELK 架构之 Logstash 和 Filebeat 安装配置<br>ELK 架构之 Logstash 和 Filebeat 配置使用（采集过滤）<br>ELK 架构之 Elasticsearch、Kibana、Logstash 和 Filebeat 安装配置汇总（6.2.4 版本）<br>上面图中已经很详细介绍了下 ELK 的流程，ELK 默认技术栈里是没有 Filebeat 的，Logstash 用作日志收集的时候，CPU 和内存会占用资源比较大，所以我们使用轻量化的 Filebeat 进行日志的收集，Filebeat 部署在每个业务服务所在的服务器，然后将收集到的日志数据传输到 Logstash，Logstash 可以部署两到三台服务器上，用作日志的过滤和分析工作，然后再将处理后的日志数据，传输到 ElasticSearch 存储。</p>\n<h1 id=\"统一格式返回\"><a href=\"#统一格式返回\" class=\"headerlink\" title=\"统一格式返回\"></a>统一格式返回</h1><img src=\"/posts/1879991184/index/8.png\" srcset=\"/img/loading.gif\" class=\"\">\n\n"}],"PostAsset":[{"_id":"source/_posts/spring-cloud-learning/1.png","slug":"1.png","post":"ckiip5kh80014shcdgr7rd28m","modified":1,"renderable":0},{"_id":"source/_posts/spring-cloud-learning/2.png","slug":"2.png","post":"ckiip5kh80014shcdgr7rd28m","modified":1,"renderable":0},{"_id":"source/_posts/data-structure-overview/hashtable.jpg","post":"ckiip5kh50010shcdaksg9tb8","slug":"hashtable.jpg","modified":1,"renderable":1},{"_id":"source/_posts/data-structure-overview/heap.jpg","post":"ckiip5kh50010shcdaksg9tb8","slug":"heap.jpg","modified":1,"renderable":1},{"_id":"source/_posts/data-structure-overview/linkedlist.jpg","post":"ckiip5kh50010shcdaksg9tb8","slug":"linkedlist.jpg","modified":1,"renderable":1},{"_id":"source/_posts/data-structure-overview/overview.png","post":"ckiip5kh50010shcdaksg9tb8","slug":"overview.png","modified":1,"renderable":1},{"_id":"source/_posts/data-structure-overview/queue.png","post":"ckiip5kh50010shcdaksg9tb8","slug":"queue.png","modified":1,"renderable":1},{"_id":"source/_posts/data-structure-overview/stack.png","post":"ckiip5kh50010shcdaksg9tb8","slug":"stack.png","modified":1,"renderable":1},{"_id":"source/_posts/data-structure-overview/tree.png","slug":"tree.png","post":"ckiip5kh50010shcdaksg9tb8","modified":1,"renderable":0},{"_id":"source/_posts/spring-cloud-learning/3.png","post":"ckiip5kh80014shcdgr7rd28m","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/spring-cloud-learning/4.png","post":"ckiip5kh80014shcdgr7rd28m","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/spring-cloud-learning/5.png","post":"ckiip5kh80014shcdgr7rd28m","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/spring-cloud-learning/6.png","post":"ckiip5kh80014shcdgr7rd28m","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/spring-cloud-learning/7.png","post":"ckiip5kh80014shcdgr7rd28m","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/spring-cloud-learning/8.png","slug":"8.png","post":"ckiip5kh80014shcdgr7rd28m","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckiip5kfr0000shcd06k8hm4a","tag_id":"ckiip5kfz0004shcd2nyiecjq","_id":"ckiip5kg60009shcd2a8kdqkb"},{"post_id":"ckiip5kfy0002shcdc17o9v80","tag_id":"ckiip5kg30008shcd8qfadjq3","_id":"ckiip5kgb000eshcddi7pe3p4"},{"post_id":"ckiip5kg20006shcd50fjgykf","tag_id":"ckiip5kg9000cshcd1d0abo1d","_id":"ckiip5kgd000hshcd5cwm2wm5"},{"post_id":"ckiip5kg20006shcd50fjgykf","tag_id":"ckiip5kgd000fshcddkl2c6nm","_id":"ckiip5kgd000ishcdae5edbqu"},{"post_id":"ckiip5kg20007shcdd2c5hxhm","tag_id":"ckiip5kgd000gshcd4r10bvko","_id":"ckiip5kgf000kshcdb8vlgwa5"},{"post_id":"ckiip5kg6000ashcd2l54cuue","tag_id":"ckiip5kgd000gshcd4r10bvko","_id":"ckiip5kgg000nshcdcfubd5br"},{"post_id":"ckiip5kg6000ashcd2l54cuue","tag_id":"ckiip5kgf000lshcdgotzcwj2","_id":"ckiip5kgg000oshcdegts8rrj"},{"post_id":"ckiip5kg8000bshcd0b5nejj9","tag_id":"ckiip5kgd000fshcddkl2c6nm","_id":"ckiip5kgg000qshcd23tl8on5"},{"post_id":"ckiip5kgb000dshcdgnaf64u4","tag_id":"ckiip5kgg000pshcdhkhhbd9v","_id":"ckiip5kgh000ushcde5gq5d0m"},{"post_id":"ckiip5kgb000dshcdgnaf64u4","tag_id":"ckiip5kgg000rshcd6nhdbfun","_id":"ckiip5kgh000vshcd50y0hxxy"},{"post_id":"ckiip5kgb000dshcdgnaf64u4","tag_id":"ckiip5kgg000sshcda1nt38ym","_id":"ckiip5kgh000wshcd4jw3b0al"},{"post_id":"ckiip5kgb000dshcdgnaf64u4","tag_id":"ckiip5kgh000tshcdcx1g40ia","_id":"ckiip5kgh000xshcda179c9s1"},{"post_id":"ckiip5kh3000yshcdbplj49sj","tag_id":"ckiip5kfz0004shcd2nyiecjq","_id":"ckiip5kh90016shcd0y1u05bg"},{"post_id":"ckiip5kh3000yshcdbplj49sj","tag_id":"ckiip5kh60011shcdfou5bsmw","_id":"ckiip5kha0017shcd6iur1nqj"},{"post_id":"ckiip5kh50010shcdaksg9tb8","tag_id":"ckiip5kfz0004shcd2nyiecjq","_id":"ckiip5kha0019shcdho7eabbc"},{"post_id":"ckiip5kh50010shcdaksg9tb8","tag_id":"ckiip5kh60011shcdfou5bsmw","_id":"ckiip5kha001ashcd69ptggiv"},{"post_id":"ckiip5kh60012shcd2oub136z","tag_id":"ckiip5kha0018shcdegxmeb4d","_id":"ckiip5khb001cshcdbianappv"},{"post_id":"ckiip5kh70013shcd8buhfyhj","tag_id":"ckiip5kha0018shcdegxmeb4d","_id":"ckiip5khb001eshcd1cxk8ooe"},{"post_id":"ckiip5kh80014shcdgr7rd28m","tag_id":"ckiip5khb001dshcd53dp8kuc","_id":"ckiip5khc001gshcd65vofaqz"},{"post_id":"ckiip5kh80014shcdgr7rd28m","tag_id":"ckiip5kha0018shcdegxmeb4d","_id":"ckiip5khd001hshcdcwg426of"}],"Tag":[{"name":"数据结构","_id":"ckiip5kfz0004shcd2nyiecjq"},{"name":"MySQL","_id":"ckiip5kg30008shcd8qfadjq3"},{"name":"Mac","_id":"ckiip5kg9000cshcd1d0abo1d"},{"name":"Linux","_id":"ckiip5kgd000fshcddkl2c6nm"},{"name":"Hexo","_id":"ckiip5kgd000gshcd4r10bvko"},{"name":"Github","_id":"ckiip5kgf000lshcdgotzcwj2"},{"name":"redis","_id":"ckiip5kgg000pshcdhkhhbd9v"},{"name":"cluster","_id":"ckiip5kgg000rshcd6nhdbfun"},{"name":"docker","_id":"ckiip5kgg000sshcda1nt38ym"},{"name":"docker-compose","_id":"ckiip5kgh000tshcdcx1g40ia"},{"name":"算法","_id":"ckiip5kh60011shcdfou5bsmw"},{"name":"Java","_id":"ckiip5kha0018shcdegxmeb4d"},{"name":"Spring","_id":"ckiip5khb001dshcd53dp8kuc"}]}}