{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/img/720430-20181226134250810-1685533200.png","path":"img/720430-20181226134250810-1685533200.png","modified":0,"renderable":0},{"_id":"source/img/720430-20181226134259735-1931086473.png","path":"img/720430-20181226134259735-1931086473.png","modified":0,"renderable":0},{"_id":"source/img/720430-20181226134308841-1109691453.png","path":"img/720430-20181226134308841-1109691453.png","modified":0,"renderable":0},{"_id":"source/img/720430-20181226134321094-1025894099.png","path":"img/720430-20181226134321094-1025894099.png","modified":0,"renderable":0},{"_id":"source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":0},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":0},{"_id":"source/img/banner.jpg","path":"img/banner.jpg","modified":0,"renderable":0},{"_id":"source/img/default.png","path":"img/default.png","modified":0,"renderable":0},{"_id":"source/img/default_thumbnail.jpg","path":"img/default_thumbnail.jpg","modified":0,"renderable":0},{"_id":"source/img/docker.png","path":"img/docker.png","modified":0,"renderable":0},{"_id":"source/img/hexo-github-action.jpg","path":"img/hexo-github-action.jpg","modified":0,"renderable":0},{"_id":"source/img/hexo.jpeg","path":"img/hexo.jpeg","modified":0,"renderable":0},{"_id":"source/img/image-20201216105335033.png","path":"img/image-20201216105335033.png","modified":0,"renderable":0},{"_id":"source/img/image-20201216105708714.png","path":"img/image-20201216105708714.png","modified":0,"renderable":0},{"_id":"source/img/image-20201217231236527.png","path":"img/image-20201217231236527.png","modified":0,"renderable":0},{"_id":"source/img/image-20201217232318516.png","path":"img/image-20201217232318516.png","modified":0,"renderable":0},{"_id":"source/img/image-20201217232602098.png","path":"img/image-20201217232602098.png","modified":0,"renderable":0},{"_id":"source/img/image-20201217232654936.png","path":"img/image-20201217232654936.png","modified":0,"renderable":0},{"_id":"source/img/image-20201217232930044.png","path":"img/image-20201217232930044.png","modified":0,"renderable":0},{"_id":"source/img/image-20201217233140546.png","path":"img/image-20201217233140546.png","modified":0,"renderable":0},{"_id":"source/img/image-20201217233418235.png","path":"img/image-20201217233418235.png","modified":0,"renderable":0},{"_id":"source/img/image-20201217233631334.png","path":"img/image-20201217233631334.png","modified":0,"renderable":0},{"_id":"source/img/image-20201217233848143.png","path":"img/image-20201217233848143.png","modified":0,"renderable":0},{"_id":"source/img/image-20201217234030155.png","path":"img/image-20201217234030155.png","modified":0,"renderable":0},{"_id":"source/img/java.jpeg","path":"img/java.jpeg","modified":0,"renderable":0},{"_id":"source/img/linux.jpeg","path":"img/linux.jpeg","modified":0,"renderable":0},{"_id":"source/img/spring-cloud.jpeg","path":"img/spring-cloud.jpeg","modified":0,"renderable":0},{"_id":"source/img/wechatpay.jpg","path":"img/wechatpay.jpg","modified":0,"renderable":0},{"_id":"source/img/banner2.jpg","path":"img/banner2.jpg","modified":0,"renderable":0},{"_id":"source/BingSiteAuth.xml","path":"BingSiteAuth.xml","modified":0,"renderable":0}],"Cache":[{"_id":"source/_drafts/data-structure-overview.md","hash":"8e62d3430872252129f49dfb35ec0393639c8d52","modified":1608303883610},{"_id":"source/_data/link.yml","hash":"9b3ea89453f1705a88d8731732b50dbb4a4d44c5","modified":1608303883608},{"_id":"source/_drafts/.DS_Store","hash":"23507b682cc6652f55072d30d75a60e9cb45d8c5","modified":1587395061901},{"_id":"source/_drafts/hashtable-learning.md","hash":"20fe5a8d6df2f11df53c89337da5af0e8b2ad7bb","modified":1608303883610},{"_id":"source/404.html","hash":"651f5594772adaefc5344a226d2b61bc0a690dec","modified":1608316996497},{"_id":"source/_drafts/mac-brew-update.md","hash":"b1408da4560eabea43b36e3e97381e54ed6e361d","modified":1608303883610},{"_id":"source/_drafts/mysql-index-learning.md","hash":"c248755d9a1e7d405e7a7cc569aeecea5a0d8221","modified":1608303883610},{"_id":"source/_drafts/tools-list.md","hash":"da96cdc6fae3e3cbb78982e28c19e8aed6e33aa8","modified":1608303883610},{"_id":"source/about/index.md","hash":"3f3301052c0376bd404895f423008ad0b1e7a447","modified":1608303883635},{"_id":"source/books/index.md","hash":"f489b54c33cf2b0daa5ec52d1fe9ca25e34cf634","modified":1608303883636},{"_id":"source/_posts/redis-cluster.md","hash":"09bed1c905eb6ca8579ca88dce68a59389fab752","modified":1608303883624},{"_id":"source/categories/index.md","hash":"a5311a4e409b8649a3c87de92291ec9716f58c05","modified":1608303883636},{"_id":"source/_posts/data-structure-overview.md","hash":"ecfa1dfd981edfdc4f7deb5d320ba067a348813f","modified":1608303883611},{"_id":"source/img/hexo-github-action.jpg","hash":"518d9efbbbc5f270f54775083e3ad5d397fa3256","modified":1587209572791},{"_id":"source/img/hexo.jpeg","hash":"adaaf4d9ebaea9c4a43bb90187368967a48f8888","modified":1587209427211},{"_id":"source/img/image-20201217231236527.png","hash":"e66cedf158ce9491995bda51e5e4c8c1c51066e8","modified":1608253611361},{"_id":"source/img/image-20201217232318516.png","hash":"792fb92a1ba654f2176e8dcb763d35b207fd5f33","modified":1608253611361},{"_id":"source/img/image-20201217232602098.png","hash":"a018b25f1f78c28a8b4cea7d183fb63eb4458e29","modified":1608253611362},{"_id":"source/img/image-20201217232654936.png","hash":"810ab508ce5ff4db9c75297ff006a350ca2c57b0","modified":1608253611362},{"_id":"source/img/image-20201217233631334.png","hash":"721945659da8217c52a7036e560a81d5c0f957df","modified":1608253611366},{"_id":"source/img/spring-cloud.jpeg","hash":"7d01a6e80f2aa14cedb2e429cde591df5a526ea4","modified":1587209893814},{"_id":"source/links/index.md","hash":"8b84e5dde6cc6c8b60e04565a1be4b4212fc1c96","modified":1608303883663},{"_id":"source/img/linux.jpeg","hash":"b437e6194f139a064d3e096f9fd4a107ef02dde8","modified":1587209976005},{"_id":"source/movies/index.md","hash":"60aa9ecf8917dc2a1eac01a5eb0bce545538834e","modified":1608303883663},{"_id":"source/music/Memories-Maroon 5.jpg","hash":"782d0e6854c8823f40e9ae04d3903eceece3f66e","modified":1587214223762},{"_id":"source/music/Passenger.jpg","hash":"3351e31cd4d73ffcaf420f8328f4571ecea3625e","modified":1587226672228},{"_id":"source/music/Sketch Plane-Cam Kelley.jpg","hash":"2faabd0f61fb058d5d370f073ee0fd596f6b009a","modified":1587226985422},{"_id":"source/music/Someone You Loved-Lewis Capaldi.jpg","hash":"aa2ae6acaf6c5ab8f4fbb588f8563622a4c0c809","modified":1587226271670},{"_id":"source/tags/index.md","hash":"a230a4bc0b387696957b87ae1f8b2f91549cc04e","modified":1608303883664},{"_id":"source/_posts/data-structure-overview/hashtable.jpg","hash":"0228ea21bac82c01fdd0d9da4053897d32cb0666","modified":1587397138090},{"_id":"source/_posts/data-structure-overview/linkedlist.jpg","hash":"a0e88d4b9e0f3b8fdf986a7264a82e8b5c65b52f","modified":1587390835301},{"_id":"source/_posts/data-structure-overview/heap.jpg","hash":"906ce5bed102dd1cb26e16f716793267fbe53add","modified":1587396978777},{"_id":"source/_posts/data-structure-overview/queue.png","hash":"2471e04cc8484d3796e670340ad0fa8e43232477","modified":1587390713990},{"_id":"source/_posts/git/git添加ssh密钥.md","hash":"971eea17419bbfffec0b229300e136c9a09ea0fa","modified":1608303883616},{"_id":"source/_posts/hexo/Hexo主题插件推荐.md","hash":"5300e28049b9a5b54f83e2bee0be0d305bdaf966","modified":1608253611359},{"_id":"source/_posts/git/github访问加速.md","hash":"8c280c3049b29d76cf5f2d2a13a11dc829dd74c6","modified":1608304671426},{"_id":"source/_posts/hexo/NexT主题自定义配置.md","hash":"819afbf54d79d4420e3af98d5272884c552c0c9b","modified":1608316684345},{"_id":"source/_posts/hexo/hexo写作.md","hash":"304f59cc707745b1c93b0c803efa6c97f4f1c6dc","modified":1608315185347},{"_id":"source/_posts/hexo/基于Github Action工作流自动部署Hexo.md","hash":"b597fcc9ef758082ae7e8aaa6587f2ea346a8aed","modified":1608358895491},{"_id":"source/_posts/hexo/hexo命令.md","hash":"16caa18a6a44fc66de48c0462b1aa0c2915ca82a","modified":1608303883617},{"_id":"source/_posts/java/hashcode.md","hash":"7bdca96c559b1c33ecd7c06ceb210335399c0202","modified":1608303883618},{"_id":"source/_posts/java/jvm.md","hash":"0e17431a920bbff4196fbba8165c4cd3e0721bc9","modified":1608303883618},{"_id":"source/_posts/linux/Linux之SSH免密登录.md","hash":"864c47724845c9002a2441d6145fa4387df7973a","modified":1608303883619},{"_id":"source/_posts/linux/linux与k8s的区别.md","hash":"4bdb129779a64b7d855f4e3055b281bbccb4438a","modified":1608303883622},{"_id":"source/_posts/linux/Linux查看内存使用量.md","hash":"868f8582151605c315b639442293db94f8804978","modified":1608303883619},{"_id":"source/_posts/markdown/Markdown导出带目录的html文件.md","hash":"6b67eaa36cf40033c508b89a1e33c60d6e8bf7ef","modified":1608316717666},{"_id":"source/_posts/markdown/Markdown模板汇总.md","hash":"e16dc85e9c6d8521db2f6a3f947d9f096e817956","modified":1608303883624},{"_id":"source/_posts/mac/Mac系统下升级node版本.md","hash":"6e36ce2c2ae9c0e00fe2eafb8e891b87100a0556","modified":1608303883623},{"_id":"source/_posts/中间件/https教程.md","hash":"f9d2307278cd872ca95dce3e594566928549a15e","modified":1608303883635},{"_id":"source/_posts/spring/spring-cloud-learning.md","hash":"75f242806173e5b1b2bc5d17ac16c21fa4cc110a","modified":1608356576906},{"_id":"source/layout/_partials/footer.swig","hash":"9b2d179984b337f39cdbf7c7fb1410e027be599c","modified":1608303883663},{"_id":"source/_posts/中间件/kafka入门教程.md","hash":"f56eeb46203d99b1e6265022d6081c2c10644210","modified":1608303883635},{"_id":"source/_posts/linux/linux命令/Linux命令killall.md","hash":"1e5e0361c233f5f720a91bb36ce3862e2836d4e2","modified":1608303883622},{"_id":"source/_posts/linux/linux命令/Linux命令systemd.md","hash":"64467de032898db921264efcc8010a6bb9128bbc","modified":1608303883623},{"_id":"source/_posts/中间件/https教程.assets/image-20201217231236527.png","hash":"e66cedf158ce9491995bda51e5e4c8c1c51066e8","modified":1608253611360},{"_id":"source/img/720430-20181226134259735-1931086473.png","hash":"70db176711e85e6ba1b6031a59b00125412492d0","modified":1608000634423},{"_id":"source/img/720430-20181226134250810-1685533200.png","hash":"3b3b78ddd2fb1927cadbac96bfdfcdf829c080fb","modified":1608000639183},{"_id":"source/img/image-20201217233140546.png","hash":"0d59319a58f158325f6f06b652380d4446f2e822","modified":1608253611364},{"_id":"source/img/image-20201217232930044.png","hash":"f5a55885100d3982fbfcf2f31a8932d8d5382f6f","modified":1608253611363},{"_id":"source/img/wechatpay.jpg","hash":"8547ff093d704c77131abe7bda9aa69ae723eac0","modified":1587266940841},{"_id":"source/img/image-20201217233848143.png","hash":"8d00995231a4227ac4cd45f67327d35bacb1b52e","modified":1608253611367},{"_id":"source/img/image-20201217234030155.png","hash":"15c4c2b9bc8ccdd50ae864917cd4163067c5ebf2","modified":1608253611368},{"_id":"source/_posts/data-structure-overview/stack.png","hash":"3736ff92eaad9a88e52c47e393513bff93b84988","modified":1587390633727},{"_id":"source/_posts/data-structure-overview/overview.png","hash":"e7ec9f16e9f389f7a20eb04f747fd0f86a8daacf","modified":1587306802908},{"_id":"source/_posts/linux/linux与k8s的区别.assets/720430-20181226134259735-1931086473.png","hash":"70db176711e85e6ba1b6031a59b00125412492d0","modified":1608000634423},{"_id":"source/_posts/linux/linux与k8s的区别.assets/720430-20181226134250810-1685533200.png","hash":"3b3b78ddd2fb1927cadbac96bfdfcdf829c080fb","modified":1608000639183},{"_id":"source/_posts/spring/spring-cloud-learning/5.png","hash":"30f94353204cebe861c2d857e61a270a0d39d98d","modified":1586971414944},{"_id":"source/img/alipay.jpg","hash":"d0589052ca92dc36723d0e122c0998dc829c8660","modified":1587266986049},{"_id":"source/img/avatar.png","hash":"61964f92efc9440d16847b1d5e5342c7d3a7a0b2","modified":1587140393984},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1608303883665},{"_id":"themes/butterfly/README.md","hash":"4d0b23ad00caadaa717555cb8fd37d272eeaeca0","modified":1608303883665},{"_id":"themes/butterfly/README_CN.md","hash":"37062b0e965b9070a42f06283d597d895c8aa9e3","modified":1608303883665},{"_id":"themes/butterfly/package.json","hash":"3de369e085b5a39cfda46604f34be74ed6f7ac6d","modified":1608303883683},{"_id":"themes/butterfly/.github/stale.yml","hash":"7a131b8aa4936fbcedea3517299e1cdc1bcbcaab","modified":1608303883665},{"_id":"source/_posts/spring/spring-cloud-learning/7.png","hash":"4aebce32a523b2488b4c749ffa08632aee12f82e","modified":1586971414950},{"_id":"themes/butterfly/languages/default.yml","hash":"690fae93ee2e578e9085e988654ddb013d2fffd9","modified":1608303883666},{"_id":"themes/butterfly/languages/en.yml","hash":"948f4a29cd5fafdc46ad2008f60929acf76be2a3","modified":1608303883666},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"3a02788767ed6a751e1c350ec620354b50ac86b9","modified":1608303883666},{"_id":"themes/butterfly/layout/404.pug","hash":"10ce9b0764d975460069bf116bfceaaeb9691d3a","modified":1608303883667},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1608303883667},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"600ac62a76344d012c2b776e570a5e21c66683a8","modified":1608303883666},{"_id":"themes/butterfly/layout/category.pug","hash":"90e56274a7c853f6f30337011f9c9d6d035950dc","modified":1608303883667},{"_id":"themes/butterfly/_config.yml","hash":"6bccff896ba21db8fd030867b4c68ed958a7e7c2","modified":1608303883666},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1608303883683},{"_id":"themes/butterfly/layout/page.pug","hash":"76536c903cabc8e4619759e3a8b6a384c0518716","modified":1608303883683},{"_id":"themes/butterfly/layout/post.pug","hash":"0277577f7fce2b830259e29d3a2a82f35addbf78","modified":1608303883683},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1608303883683},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0b7979a908ebe8c350d73b6731f0be3e29d401c2","modified":1608303883664},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"b41123ce5f0ccfa9e06a68b9f3cb59ba040a049a","modified":1608303883664},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1608303883665},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"924e1fefc81f33f165a5fa9856712a98e7c83ad5","modified":1608303883667},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"780566ea9155df8f503af4e80ec7eff10e00859a","modified":1608303883668},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"012e46f5130a2ff312c28a4fcdc060195f92efde","modified":1608303883672},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"66b14189a1913119ff5927c0b933b5c73fb37f48","modified":1608303883673},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"86b2a4d500542fe764fdc5ff71cf029604325930","modified":1608303883673},{"_id":"themes/butterfly/scripts/events/404.js","hash":"5f6127ede7d139891208340b5cf5bf9314e4be7d","modified":1608303883684},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"d36ce54746a582a542ef520f926894c036a8f8ee","modified":1608303883667},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6006ae4885ad82bd41ffd0f1734bde94d442c9ff","modified":1608303883671},{"_id":"themes/butterfly/scripts/events/init.js","hash":"f7ab55363d05c945569d9ac4afc889f9706308c6","modified":1608303883684},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1608303883684},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"1e2ac4d26df7cd18a92f1404329f8eb1c388dc18","modified":1608303883684},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"dbce193ba170e004790550fe4694de8e29b299b9","modified":1608303883684},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"d9cdeecfb0098ad9bf4814ea2f95167b637e015d","modified":1608303883685},{"_id":"themes/butterfly/layout/includes/footer-badge.pug","hash":"e87f330e8d2dea5cbb9201dce1950160ee9cb040","modified":1608265778087},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"ff3815e6923f248501ed76aebfa6e8e083edb9f7","modified":1608303883685},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"f42b2358a44d91ef6c853ce75f23af6e8d3ff423","modified":1608303883685},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"0745597f4ffadde037e57e0f66f7d984dc576dc6","modified":1608303883685},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"54c0c9c6d4d4ca754680cd24d7e204a745a6eec0","modified":1608303883685},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ffbe625f184116e442648c8416ea58614a1cef8","modified":1608303883685},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1608303883686},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1608303883686},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1608303883686},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1608303883686},{"_id":"themes/butterfly/source/css/index.styl","hash":"74f6e2a97d8b83e74375cfdc57818d19762c8ae5","modified":1608303883695},{"_id":"source/img/720430-20181226134308841-1109691453.png","hash":"0880d9cf41fe327f3004a893a5eaa6ea382f9ea3","modified":1607994274085},{"_id":"themes/butterfly/source/css/var.styl","hash":"ae8193bd0107c823b8d2a123f1c301084c9c227a","modified":1608303883695},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1608253891531},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1608253891531},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1608303883696},{"_id":"themes/butterfly/source/js/main.js","hash":"cbc4d7e84f0a963769efd70c8075dcae2aeccf99","modified":1608303883697},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1608253891531},{"_id":"themes/butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1608253891531},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1608303883698},{"_id":"themes/butterfly/source/js/utils.js","hash":"ba7e672a7bed2aefb9174e8122d92a643814272a","modified":1608303883698},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"25fdae675275d2cefe427c6b5c3f73ed72c6bfbf","modified":1608303883668},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"afe703c766b8717d119379ee27037481f1165af8","modified":1608303883668},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"767b425f97e74a98002f4a435e36e8ec27e8a994","modified":1608303883668},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1608303883668},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"e33b993af0bfc521334dac8e3c8a227dfbf9fcaa","modified":1608303883668},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1608303883669},{"_id":"themes/butterfly/layout/includes/head/js.pug","hash":"473059d3a4a63fa95ea4d2ca71ae16c003502e0a","modified":1608303883669},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"c22d6e416c05cfa4153095a067e99716eabdcbd1","modified":1608303883669},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1608303883669},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"9a6f8211cdcb4aa87ccb5fa4f62b89c245412c94","modified":1608303883670},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"1ddbd09e1902da7fa4bf7824654f132e41622c42","modified":1608303883669},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"d22d4c98028272dfc6c2e721e469f572a6b62ed3","modified":1608303883670},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"0060598ca1cf25619bdb110ea2c83c690e4d2939","modified":1608303883670},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"a9a8ed40a258e6ee0a049fae50bcf5040604b63b","modified":1608303883670},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1608303883670},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1608303883671},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"81a34e9d642a68e77650609601a8096c6445daef","modified":1608303883671},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"90b5c2600569f8cf769c5fb3a37c12536f71e375","modified":1608303883671},{"_id":"themes/butterfly/layout/includes/page/artitalk.pug","hash":"f1476d8b05d81e572556f246ac2212085cbdf792","modified":1608303883672},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2beb27e33e4492fa80e88c37dcb7a3ffd7da9e24","modified":1608303883671},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1608303883672},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1608303883672},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"7e7832aafdf5ca50e71a039ad3fc98d8ef6e7d30","modified":1608303883672},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"d9b96f24c2439f263a606fd38a5517bd4bb162b7","modified":1608303883673},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1608303883672},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1608303883673},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1608303883674},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"21a7f17ff457c0cf8747f0847dee6df675482574","modified":1608303883679},{"_id":"themes/butterfly/layout/includes/third-party/baidu_push.pug","hash":"d3490e78bd2569423dc1844b9db0fbb6cd855022","modified":1608303883674},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"38504aec959c050c082db1c5aeaf99345f97bbee","modified":1608303883679},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1608303883677},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"e0e8bf00ef7a0a62ea2265bd5e4a33d0edab5946","modified":1608303883681},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1608303883681},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1608303883679},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"a72b8e82b99ba79903eaa53478bbd8f4ba4412e1","modified":1608303883681},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"851514d1200d1dbc99268b190c03d3bd83ba68d5","modified":1608303883681},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"9066634f04443953e5c4e1b563e79ab6218983de","modified":1608303883681},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"1c8eb5752cc6d42b384d7e363e66ece3f742f479","modified":1608303883681},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"1b48347561b6d068f3c720802dd9223a8d1971a5","modified":1608303883682},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"41790dac9780bebe95a2be2d7e327bd98be362d3","modified":1608303883682},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"e00568eb9a3c9ff005e1fbd505042081884a552a","modified":1608303883682},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"3a8e63d6c9f74578c55b96e3888adbf9928dad0a","modified":1608303883682},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8df2824b78b28d12da61a82a0da995b3116673a3","modified":1608303883682},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"966c31e7c57dbc543bb94e6f3802c4738c79ba47","modified":1608303883682},{"_id":"themes/butterfly/source/css/_custom/custom.styl","hash":"26aeab7d01957aff6ce6dce1319a404c34bbc1bd","modified":1608263518670},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"56ce639b394ba195207ee00f5a2d6f22926b403f","modified":1608303883687},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"18474102233847c9452c7eb1048df58dfd33c962","modified":1608303883687},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3f0b8699f529f0842c3b101006f60cb7933c16ff","modified":1608303883689},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"d67ecb6c950e802a9c73975b13cab44f899eb192","modified":1608303883687},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"8a59aa7c185d89b437c0f529d57381dc21ff06ed","modified":1608303883689},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"84c14368d3fab66d5fb7d03678766274e2e0d84f","modified":1608303883689},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"bfc4b9d8df66593c11c9ae78899f54e69785ca90","modified":1608303883690},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1608303883689},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1608303883690},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"9e66e9672eb6d60950024d5f73cb7b925b2549b2","modified":1608303883690},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"c4ae9292d6b7e42943b1b11e109ed560dc3a7753","modified":1608303883691},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1608303883690},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"ba391266cd967fa96109677455dd6701292afd52","modified":1608303883691},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"6c74997b89984db3696572efc7cbafdf59ce7803","modified":1608303883691},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d6149c50ad33b3feb3da8a9d0b9e6557d1137210","modified":1608303883691},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"e00d34774a0d5644bae9989f0e89743b5f9e2ea5","modified":1608303883691},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"0cb678f991af06015804eaebafa8e983b0dcc3de","modified":1608303883692},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"78ef182c0f6711c8491a8ee421b708c8f2a63c30","modified":1608303883691},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"17f2d47f93cb91e1f5d5c046fcd649d4c54f0107","modified":1608303883692},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"573d3834d15768f9a6f70b86d28d9a9c44764e89","modified":1608303883692},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4058ab759577efe280d5e38902be39054ed4b471","modified":1608303883693},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1608303883692},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1608303883692},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"3c7a7efbb14d8ce6538f612992aa1a62fd278991","modified":1608303883693},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1608303883693},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"75c87cb69b2eb2a219eec9447cd79282ef612a68","modified":1608303883693},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"a470029a157fbb8406ff72322a75ef63d6675431","modified":1608303883693},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"202b01db6ef3cca9e5a173e1a0dadfee8854a849","modified":1608303883693},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"92aa84cdec97729c86ba4674a355496eb37c986a","modified":1608303883694},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"5fe4235c038ed128819bd6918cd0781b372b598e","modified":1608303883694},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6c12a03e26ca5d538537d472657d3d03a7fcbb87","modified":1608303883694},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1608303883694},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1608303883694},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1608303883694},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1608303883695},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1608303883695},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1608303883698},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3234942decaa1fde5b872766d4943a2e8cb9ef72","modified":1608303883698},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1608303883674},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1608303883674},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1608303883674},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1608303883674},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1608303883675},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1608303883675},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"663a298253eddb5126ca1a6139d69c7097ffb52e","modified":1608303883675},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"47d5367d8308a5a134058f9f63c33c75890960f8","modified":1608303883675},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"9b6b7b589ef7a8109d88ba439b2d8baf7286b961","modified":1608303883675},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"a8d8be37236400508e97f75615f03cedccacddfb","modified":1608303883675},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"91f269cdec593209950506b8b65e938ca3d0372a","modified":1608303883676},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"6f4829a8e08c3bd36e96477efdbe552c85a7350b","modified":1608303883676},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1608303883676},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"776b71dd76a900b1bdf8e6e6fdf94e82bbe7e2b1","modified":1608303883676},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1608303883676},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"c8245cbb908c64430470b0ef2887d468ef77189c","modified":1608303883677},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"0322d640fd6a91853dec3ad39cc24c9b1291322b","modified":1608303883677},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"407d88e4af099d5f1a3f44623ec276c999219ec3","modified":1608303883677},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"6f92311afe60ca5f44055016db9cecce8fb2dc62","modified":1608303883677},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1608303883678},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"732f4ebf7a1be1c94917dec426acaa494348c0ef","modified":1608303883678},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"7ced4e62fc669b00c30bf5ffe814bd30d963a490","modified":1608303883678},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"6ba8915b0da215f306f0b055f0484d23eb26c84d","modified":1608303883678},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/leancloud.pug","hash":"d78d0bd454f6bea611a55601807e63e107dfb60c","modified":1608303883679},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"b187ee9721cfa864208af3e51a8b0d72fc5aa6ea","modified":1608303883679},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1608303883680},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1608303883680},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1608303883680},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1608303883680},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1608303883680},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"0622e955f3d2efef457f61d0cec0408376bd180a","modified":1608303883680},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1608303883680},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"1b2dc0ef768c9be9f18d1c1f93d88f916482c5df","modified":1608303883688},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"ba3bdf02a6c78b15eada95638173a11445dac7ac","modified":1608303883688},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"ebae44a37ac143f4e35523ebd6809371958fb930","modified":1608303883688},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1608303883688},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"c1747b8641303a1d9472ec94f2bc654885feb270","modified":1608303883688},{"_id":"source/img/image-20201217233418235.png","hash":"134e0969bb0e94f3929fd8261b45a074ca899fb2","modified":1608253611366},{"_id":"source/_posts/spring/spring-cloud-learning/1.png","hash":"abab5dc7c34d169807ac7a7b6d7cbf73638e63a6","modified":1586971414936},{"_id":"source/_posts/spring/spring-cloud-learning/2.png","hash":"5302d6db6520be044a4103187168145dd2eb3dfa","modified":1586971414938},{"_id":"source/_posts/spring/spring-cloud-learning/3.png","hash":"3ebf0ed986d4e4aa1fc327ca85b771b05745bb90","modified":1586971414940},{"_id":"source/_posts/spring/spring-cloud-learning/4.png","hash":"52162d3dc7ec73d75afa5c3b7fbd801a719d58bc","modified":1586971414942},{"_id":"source/_posts/spring/spring-cloud-learning/6.png","hash":"2bbcf8a0560d84d6aa8b5cf3b4e139609d365247","modified":1586971414947},{"_id":"source/img/default_thumbnail.jpg","hash":"1783f9565a6bc13dd2a0446d5385d27def19cac6","modified":1587140393989},{"_id":"source/img/docker.png","hash":"0880d9cf41fe327f3004a893a5eaa6ea382f9ea3","modified":1607994274087},{"_id":"source/_posts/linux/linux与k8s的区别.assets/720430-20181226134308841-1109691453.png","hash":"0880d9cf41fe327f3004a893a5eaa6ea382f9ea3","modified":1607994274085},{"_id":"source/_posts/linux/linux与k8s的区别.assets/720430-20181226134440039-355719052.png","hash":"c8fa2724b824af9e565c8ec3c909fad02e8cc9a3","modified":1607994274085},{"_id":"source/img/java.jpeg","hash":"b100e3b0e45ffdd57ca87d4976647ed2f4c09c80","modified":1587209849081},{"_id":"source/img/default.png","hash":"2e84eaeeb1f33c366bf05fa74539847da27a8560","modified":1587140393988},{"_id":"source/img/720430-20181226134321094-1025894099.png","hash":"fa897d20e20a15d6fb1a829904dae6455056c1ff","modified":1608000866884},{"_id":"source/img/image-20201216105708714.png","hash":"9f100544d56128ecb5b41039e228ccdae4e7a284","modified":1608087428714},{"_id":"source/_posts/spring/spring-cloud-learning/8.png","hash":"66162d84f9e742607a6036b69ec666fc0e700769","modified":1586971414956},{"_id":"source/_posts/data-structure-overview/tree.png","hash":"640752cff95dfa31c304680cbc1b1c7c2523425f","modified":1587396551826},{"_id":"source/img/image-20201216105335033.png","hash":"2c81de397db83a350c526a75ebb5cf2f1a1f7d5b","modified":1608087215033},{"_id":"source/img/banner.jpg","hash":"f73654d2ed2732a2931daa8a632bb22c1e89082b","modified":1587140393986},{"_id":"source/music/someone you loved.mp3","hash":"efce34463dd02fad2e7ee1cdfc151ae559d0297e","modified":1587226210654},{"_id":"source/music/memories.mp3","hash":"14ff8bfb41da43a206c262ea1ad1f95584a742de","modified":1587214124318},{"_id":"source/music/Simple Song.mp3","hash":"9c9e1c647434b14c9c67cfa0ad88d2ecb38ce842","modified":1587226600398},{"_id":"source/music/M800002kitDY3lqvHN.mp3","hash":"fd8a8d6c574ed2bd1373e3b4e6782ed3a035e008","modified":1587226977548},{"_id":"source/_posts/mac/Mac命令生成crt证书.md","hash":"1d69679aa9ed3c60769cb7ad57c1c141d89200bc","modified":1608303883623},{"_id":"source/_posts/mac/Mac命令生成pem证书.md","hash":"0e58a7866c87f2ac34b71ff73e0a1917d8799a78","modified":1608303883623},{"_id":"themes/butterfly/source/css/_layout/footer_badge.styl","hash":"dc2fffffebae7b254a4d69ce9d28c2c6b134df42","modified":1608303883690},{"_id":"source/.DS_Store","hash":"d2ee64bc83a9ab7a3240a6f1a78a7ad5e26ca267","modified":1608295905559},{"_id":"source/img/banner2.jpg","hash":"62df397913f137c5030743d68f839e0f80fd23c8","modified":1608282316821},{"_id":"source/archives/index.md","hash":"df1c2a852be81f5c15913a010edd7bdced42e392","modified":1608294137151},{"_id":"source/todo/index.md","hash":"a50eeaa7cbcb3dd039a7848d6a9bf0be8e59a6e6","modified":1608305561787},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1608295914129},{"_id":"source/todos/index.md","hash":"bb445665e6d1aa775ca588a3b281c98c94f6db03","modified":1608306531685},{"_id":"source/_posts/技术/spring/spring-cloud-learning.md","hash":"ec03cdddd2755e4445aa71e1201c1f61d59a90e8","modified":1608306899868},{"_id":"source/_posts/技术/spring/spring-cloud-learning/5.png","hash":"30f94353204cebe861c2d857e61a270a0d39d98d","modified":1608306899875},{"_id":"source/_posts/技术/spring/spring-cloud-learning/7.png","hash":"4aebce32a523b2488b4c749ffa08632aee12f82e","modified":1608306899875},{"_id":"source/_posts/技术/spring/spring-cloud-learning/6.png","hash":"2bbcf8a0560d84d6aa8b5cf3b4e139609d365247","modified":1608306899876},{"_id":"source/_posts/技术/spring/spring-cloud-learning/3.png","hash":"3ebf0ed986d4e4aa1fc327ca85b771b05745bb90","modified":1608306899875},{"_id":"source/_posts/技术/spring/spring-cloud-learning/1.png","hash":"abab5dc7c34d169807ac7a7b6d7cbf73638e63a6","modified":1608306899873},{"_id":"source/_posts/技术/spring/spring-cloud-learning/2.png","hash":"5302d6db6520be044a4103187168145dd2eb3dfa","modified":1608306899875},{"_id":"source/_posts/技术/spring/spring-cloud-learning/4.png","hash":"52162d3dc7ec73d75afa5c3b7fbd801a719d58bc","modified":1608306899876},{"_id":"source/_posts/技术/spring/spring-cloud-learning/8.png","hash":"66162d84f9e742607a6036b69ec666fc0e700769","modified":1608306899879},{"_id":"source/_posts/技术/linux/Linux之SSH免密登录.md","hash":"864c47724845c9002a2441d6145fa4387df7973a","modified":1608306913492},{"_id":"source/_posts/技术/linux/Linux查看内存使用量.md","hash":"868f8582151605c315b639442293db94f8804978","modified":1608306913493},{"_id":"source/_posts/技术/linux/linux与k8s的区别.md","hash":"4bdb129779a64b7d855f4e3055b281bbccb4438a","modified":1608306913493},{"_id":"source/_posts/技术/linux/linux命令/Linux命令killall.md","hash":"1e5e0361c233f5f720a91bb36ce3862e2836d4e2","modified":1608306913497},{"_id":"source/_posts/技术/linux/linux命令/Linux命令systemd.md","hash":"64467de032898db921264efcc8010a6bb9128bbc","modified":1608306913497},{"_id":"source/_posts/技术/linux/linux与k8s的区别.assets/720430-20181226134250810-1685533200.png","hash":"3b3b78ddd2fb1927cadbac96bfdfcdf829c080fb","modified":1608306913497},{"_id":"source/_posts/技术/linux/linux与k8s的区别.assets/720430-20181226134259735-1931086473.png","hash":"70db176711e85e6ba1b6031a59b00125412492d0","modified":1608306913497},{"_id":"source/_posts/技术/linux/linux与k8s的区别.assets/720430-20181226134308841-1109691453.png","hash":"0880d9cf41fe327f3004a893a5eaa6ea382f9ea3","modified":1608306913503},{"_id":"source/_posts/技术/linux/linux与k8s的区别.assets/720430-20181226134440039-355719052.png","hash":"c8fa2724b824af9e565c8ec3c909fad02e8cc9a3","modified":1608306913503},{"_id":"source/_posts/todos.md","hash":"b7aa893bf6fbe0ec933e197739406903d8182df5","modified":1608306634143},{"_id":"source/_posts/技术/data-structure-overview.md","hash":"86d249713795d03817635fd5247bfc0c5d9638d4","modified":1608356848153},{"_id":"source/_posts/技术/redis-cluster.md","hash":"09bed1c905eb6ca8579ca88dce68a59389fab752","modified":1608303883624},{"_id":"source/BingSiteAuth.xml","hash":"edf8a00778a364244213b8cd364542a568af235b","modified":1608365316459},{"_id":"public/atom.xml","hash":"a434ff2ab6b5ce2bc674fceed815d96f2fa9d73c","modified":1608365465414},{"_id":"public/search.xml","hash":"43c74a6f1ca5bcbe3638a0fb7a6594625bf2fc9e","modified":1608365465414},{"_id":"public/sitemap.xml","hash":"cce950e1d778711577038239eb981c5d8e2c7d4b","modified":1608365465414},{"_id":"public/about/index.html","hash":"b623264431357c853a4b4d168949dc5968a0f4a0","modified":1608365465414},{"_id":"public/404.html","hash":"babb8650b8a9958dfaf25a9faeaaac147f15ed29","modified":1608365465414},{"_id":"public/books/index.html","hash":"aaa2895c95709e07a3c32cc4cbe5f5e3f3e8f4c6","modified":1608365465414},{"_id":"public/categories/index.html","hash":"9d1276168d9a90bf4045be448b27178b90d639f7","modified":1608365465414},{"_id":"public/links/index.html","hash":"b124b8e72d77d4298298fc29e67ef8fb6991261b","modified":1608365465414},{"_id":"public/movies/index.html","hash":"c75bb8049e90e70b5e2343c46f9e78f943b415af","modified":1608365465414},{"_id":"public/tags/index.html","hash":"bf3362761b84259aedad79eb74db3f3cbf48756b","modified":1608365465414},{"_id":"public/todos/index.html","hash":"50247b26287629c8d87074ebd2cab02f6e7f0f94","modified":1608365465414},{"_id":"public/posts/1026478353/index.html","hash":"dba86936be29d689b763c9f578df6d6251442aec","modified":1608365465414},{"_id":"public/posts/3858194484/index.html","hash":"3b8570436be91118a3c7444c5ab723e022dde1aa","modified":1608365465414},{"_id":"public/posts/1345941684/index.html","hash":"03a63e0293f1c73c36c236e826d146916c4bf906","modified":1608365465414},{"_id":"public/posts/3878378061/index.html","hash":"5b8327fdd7e6e0f7fa08d029d04533b2725427fe","modified":1608365465414},{"_id":"public/posts/2628717197/index.html","hash":"02012314153cca02fee25cecec99abdaea2e81e9","modified":1608365465414},{"_id":"public/posts/3878378062/index.html","hash":"ad6ee15d22f6dfcc056a5f0d50a341dfcef6c358","modified":1608365465414},{"_id":"public/posts/41928511/index.html","hash":"9eabcf5a8e0864590d2ec50e5386020b4089945c","modified":1608365465414},{"_id":"public/posts/41928510/index.html","hash":"d7fc51885205945b4628b7b21f43f7b363b5abf9","modified":1608365465414},{"_id":"public/posts/1125805289/index.html","hash":"0288404450b599ed46664aa8d6b9de798ca5bab7","modified":1608365465414},{"_id":"public/posts/41928529/index.html","hash":"0a99df06183793845ca5d253227dcbc495f59751","modified":1608365465414},{"_id":"public/posts/2231850037/index.html","hash":"db7d24f6776df474eb0b6850623fe3d5dfc5a76f","modified":1608365465414},{"_id":"public/posts/2936205123/index.html","hash":"e27abdf288dd410f30f64574d4325ed4f8e9a3be","modified":1608365465414},{"_id":"public/posts/250724270/index.html","hash":"f5de83552137835acabb531ef14ce4f1bafb564f","modified":1608365465414},{"_id":"public/posts/250724269/index.html","hash":"896da25ece52d4e521a081c4f14cdf0b31144a50","modified":1608365465414},{"_id":"public/posts/1125805293/index.html","hash":"ab055d36c42a10bbfd150af1f24b1a43d24ad618","modified":1608365465414},{"_id":"public/posts/1026478354/index.html","hash":"ed6140328962cc77612af7a077a2656250299dbf","modified":1608365465414},{"_id":"public/posts/3058308324/index.html","hash":"127346296caa1439c0b11900e133ff7bc1c575b7","modified":1608365465414},{"_id":"public/posts/2578104319/index.html","hash":"7fde1f8b5ab099c069303e91aa8446f2aaf4878a","modified":1608365465414},{"_id":"public/posts/2578104314/index.html","hash":"202b1905e9916d019de3e4f8262633d2b132d755","modified":1608365465414},{"_id":"public/posts/3058308323/index.html","hash":"833e7a21018cbd2407f2bb9aa6506c68d1212442","modified":1608365465414},{"_id":"public/posts/2827031203/index.html","hash":"4baa0f60226bc6cbe01a911166534f91a0f3933e","modified":1608365465414},{"_id":"public/posts/3097382278/index.html","hash":"da62756d14cab9f832855fa54014b85064ea125c","modified":1608365465414},{"_id":"public/posts/1879991184/index.html","hash":"eea44c00840b66304138d5e57ada9ca8f4ddbeda","modified":1608365465414},{"_id":"public/archives/index.html","hash":"522a6bafda1a6723749420ad4bbd4563e5c3ea89","modified":1608365465414},{"_id":"public/archives/page/2/index.html","hash":"5c23ef76cd641030b6c684e6d6f06a025dc85d68","modified":1608365465414},{"_id":"public/archives/page/3/index.html","hash":"6f2fcd143067f7140764d69ea1063d7264979e89","modified":1608365465414},{"_id":"public/archives/2016/index.html","hash":"170a68e69002fcb0e7da9a8680d24e9090dbb1d5","modified":1608365465414},{"_id":"public/archives/2016/08/index.html","hash":"d50c4315870cf73bef336c89b66a689daacc52e3","modified":1608365465414},{"_id":"public/archives/2016/10/index.html","hash":"11176312ae97b5ee6caa88513eb92e8bd1272568","modified":1608365465414},{"_id":"public/archives/2017/index.html","hash":"20d6318eff62395d94e2cee5232e591f8a66a5f4","modified":1608365465414},{"_id":"public/archives/2017/02/index.html","hash":"dac57c41d3b02c254035e824376ba42910981600","modified":1608365465414},{"_id":"public/archives/2017/03/index.html","hash":"a65c4383240f9b9db0b1808bb218f2b39f9962c5","modified":1608365465414},{"_id":"public/archives/2017/08/index.html","hash":"97a844c85e938aa9a0107153feb3de9445b67383","modified":1608365465414},{"_id":"public/archives/2017/10/index.html","hash":"db495b845afe6ac39860c5082b5ee49b1d4057be","modified":1608365465414},{"_id":"public/archives/2017/12/index.html","hash":"fe515563a34cf51131d3a462e340d0dc235de899","modified":1608365465414},{"_id":"public/archives/2018/index.html","hash":"91b078e205043b0271f98a95a01c9bb1c263bdc3","modified":1608365465414},{"_id":"public/archives/2018/04/index.html","hash":"2000ba5e4f98ffb54e9a2bc48c64835eb3940e07","modified":1608365465414},{"_id":"public/archives/2018/12/index.html","hash":"2b84d7660b136ced802f9669635b6e640327df7b","modified":1608365465414},{"_id":"public/archives/2019/index.html","hash":"20d9bdb5a8a20453771640e52104b657c13a675a","modified":1608365465414},{"_id":"public/archives/2019/10/index.html","hash":"33fbe398068610c6a3404684e7d933e894fda344","modified":1608365465414},{"_id":"public/archives/2020/index.html","hash":"237edb8ca60770d8742d7a800692038c6e6ba942","modified":1608365465414},{"_id":"public/archives/2020/page/2/index.html","hash":"9ef72e041823e24f9f3cad8774454a64cf8ba673","modified":1608365465414},{"_id":"public/archives/2020/04/index.html","hash":"20a0a4e6428d118e55b7540fbd978369fb295a4d","modified":1608365465414},{"_id":"public/archives/2020/12/index.html","hash":"d2f728e0511560d43547badcd38adbb9eab637a5","modified":1608365465414},{"_id":"public/archives/2020/12/page/2/index.html","hash":"57adb58c19f978980d6804e057fe57893541fb65","modified":1608365465414},{"_id":"public/games/index.html","hash":"c9f1b30b7fdd9b64cb388a6c218c3f33e1d98f0b","modified":1608365465414},{"_id":"public/categories/技术/index.html","hash":"bf18bebdcdada5c8ef50366b5e8fc092350ce293","modified":1608365465414},{"_id":"public/categories/博客/index.html","hash":"2eafb952d5262e849de0c73f40ddb233abd51253","modified":1608365465414},{"_id":"public/categories/写作/index.html","hash":"a123ce3f5319cb895371b7a6377dff94da732da0","modified":1608365465414},{"_id":"public/categories/理-理论学习/index.html","hash":"8fe5003fdd376f861dba1adb0c8b5bd7810f2b2b","modified":1608365465414},{"_id":"public/index.html","hash":"cc38a3cefe1e83cfffc2e9ced327bf0ca91c2914","modified":1608365465414},{"_id":"public/page/2/index.html","hash":"94efad719299cbc85e20fcbea42a13b67d121f5d","modified":1608365465414},{"_id":"public/page/3/index.html","hash":"a18406a17a9b9ea80ca02ae94c158098f29f4f4c","modified":1608365465414},{"_id":"public/tags/数据结构/index.html","hash":"e11bd448c26c0206a5664a71f6130ec26e50c02f","modified":1608365465414},{"_id":"public/tags/算法/index.html","hash":"fdfa46938ffaae5fbb7ae0534f01250bf1f63342","modified":1608365465414},{"_id":"public/tags/Mac/index.html","hash":"ec0759ee6723fa05785285a9b66ebb08ecea80a0","modified":1608365465414},{"_id":"public/tags/Linux/index.html","hash":"5c3ec22dc18ef7491e2f488cb10e4abe5bc70479","modified":1608365465414},{"_id":"public/tags/redis/index.html","hash":"71251c010fcf5f8614f6e2c09af53678b8161ef1","modified":1608365465414},{"_id":"public/tags/cluster/index.html","hash":"3f87e8842e472bcdfb2a9237ce63bb3094d4c90e","modified":1608365465414},{"_id":"public/tags/docker/index.html","hash":"b22cea016ab523c5001d5a3d742396a8bd41d77b","modified":1608365465414},{"_id":"public/tags/docker-compose/index.html","hash":"ab981da9cab097b25c62550dc5b230b722e267c7","modified":1608365465414},{"_id":"public/tags/git/index.html","hash":"673be0cfeda8437e1ac057a7a039d71f2f5df31e","modified":1608365465414},{"_id":"public/tags/github/index.html","hash":"451416352201de85a9e9e352acfb985879b5a704","modified":1608365465414},{"_id":"public/tags/Hexo/index.html","hash":"4e704c4f21da1aaea28f344a8fa1cb54fe1adb5a","modified":1608365465414},{"_id":"public/tags/Github/index.html","hash":"38184cea48da51a36f4e99fd8c58b0d1529f8664","modified":1608365465414},{"_id":"public/tags/Java/index.html","hash":"4c6986478429e6a35b5dee892382f5ae3cbca102","modified":1608365465414},{"_id":"public/tags/Docker/index.html","hash":"48c3288cfc0a51b34068f2ed1be6faa04bb53314","modified":1608365465414},{"_id":"public/tags/mac/index.html","hash":"6d93f250508b98d8658f0c3f96d0ee1916c684c0","modified":1608365465414},{"_id":"public/tags/node/index.html","hash":"19dd5489db084a9c71ecf2a544faa38a3835c697","modified":1608365465414},{"_id":"public/tags/Markdown/index.html","hash":"740481b4395d3ec25332e874021f462ce05ace87","modified":1608365465414},{"_id":"public/tags/Spring/index.html","hash":"d986627c1dd64a3b59bcf8d0038c2c1dfac256b3","modified":1608365465414},{"_id":"public/tags/Spring-Cloud/index.html","hash":"3e66a78fe3f9c286c01865ae8d90ee12ea384120","modified":1608365465414},{"_id":"public/tags/https/index.html","hash":"d62d439913bcdba8e7233129c2957bfda7b50a20","modified":1608365465414},{"_id":"public/tags/ssl/index.html","hash":"1db52f85a17a35ed3778ad209d067808e253e1a3","modified":1608365465414},{"_id":"public/tags/NexT/index.html","hash":"554b7c3859a617f1735b087a0843e638b6126faa","modified":1608365465414},{"_id":"public/tags/Kafka/index.html","hash":"e71ca5aa6aa68e210f8631846deaf62f3e0f2313","modified":1608365465414},{"_id":"public/tags/Centos/index.html","hash":"fe563e039090004bf5b4fe55627b1119b685faaf","modified":1608365465414},{"_id":"public/tags/RAS/index.html","hash":"c370baed6bcb7ed1639aebdb2e80c8b8027e464f","modified":1608365465414},{"_id":"public/BingSiteAuth.xml","hash":"edf8a00778a364244213b8cd364542a568af235b","modified":1608365465414},{"_id":"public/posts/1879991184/index/5.png","hash":"30f94353204cebe861c2d857e61a270a0d39d98d","modified":1608365465414},{"_id":"public/posts/1879991184/index/7.png","hash":"4aebce32a523b2488b4c749ffa08632aee12f82e","modified":1608365465414},{"_id":"public/posts/1879991184/index/1.png","hash":"abab5dc7c34d169807ac7a7b6d7cbf73638e63a6","modified":1608365465414},{"_id":"public/posts/1879991184/index/3.png","hash":"3ebf0ed986d4e4aa1fc327ca85b771b05745bb90","modified":1608365465414},{"_id":"public/posts/1879991184/index/2.png","hash":"5302d6db6520be044a4103187168145dd2eb3dfa","modified":1608365465414},{"_id":"public/posts/1879991184/index/4.png","hash":"52162d3dc7ec73d75afa5c3b7fbd801a719d58bc","modified":1608365465414},{"_id":"public/posts/1879991184/index/6.png","hash":"2bbcf8a0560d84d6aa8b5cf3b4e139609d365247","modified":1608365465414},{"_id":"public/posts/1879991184/index/8.png","hash":"66162d84f9e742607a6036b69ec666fc0e700769","modified":1608365465414}],"Category":[{"name":"技术","_id":"ckitw8kmt000h88cd654jdbtq"},{"name":"hexo","_id":"ckitw8kmy000w88cdb9tj3lhz"},{"name":"博客","_id":"ckitw8kn0001288cd1qr969xr"},{"name":"写作","_id":"ckitw8kn8001n88cd7um0eqt3"},{"name":"1.域.业务领域","_id":"ckiuhdwui000qioxc03j04gmx"},{"name":"2.术.解决方案","parent":"ckiuhdwui000qioxc03j04gmx","_id":"ckiuhdwuj000rioxccbwqho1w"},{"name":"3.技.技术研究","parent":"ckiuhdwuj000rioxccbwqho1w","_id":"ckiuhdwuj000sioxcbrtf01ui"},{"name":"4.阵.技术应用","parent":"ckiuhdwuj000sioxcbrtf01ui","_id":"ckiuhdwuk000tioxcg6es0466"},{"name":"5.法.手段方法","parent":"ckiuhdwuk000tioxcg6es0466","_id":"ckiuhdwuk000uioxchpjuboi8"},{"name":"6.理.理论学习","parent":"ckiuhdwuk000uioxchpjuboi8","_id":"ckiuhdwuk000vioxc4thwgdga"},{"name":"7.器.工具使用","parent":"ckiuhdwuk000vioxc4thwgdga","_id":"ckiuhdwul000wioxcejv316ou"},{"name":"A.杂.杂七杂八","parent":"ckiuhdwul000wioxcejv316ou","_id":"ckiuhdwul000xioxc8nwp45y6"},{"name":"理.理论学习","_id":"ckiv9blyd00051gxc1omg4zj7"}],"Data":[{"_id":"link","data":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"https://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"https://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2020-12-18T18:43:16.497Z","updated":"2020-12-18T18:43:16.497Z","path":"404.html","_id":"ckitw8kma000088cd3koa9ydi","title":"","comments":1,"layout":"page","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"https://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"https://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"树洞 | About Me","date":"2018-04-16T05:01:39.000Z","type":"about","_content":"\n","source":"about/index.md","raw":"---\ntitle: 树洞 | About Me\ndate: 2018-04-16 13:01:39\ntype: about\n---\n\n","updated":"2020-12-18T15:04:43.635Z","path":"about/index.html","_id":"ckitw8kmf000288cdfimfd7mk","comments":1,"layout":"page","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"books","layout":"books","date":"2020-12-16T10:20:04.000Z","_content":"","source":"books/index.md","raw":"---\ntitle: books\nlayout: books\ndate: 2020-12-16 18:20:04\n---\n","updated":"2020-12-18T15:04:43.636Z","path":"books/index.html","_id":"ckitw8kmh000588cda8ev2qwa","comments":1,"content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"分类 | Categories","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类 | Categories\ntype: \"categories\"\ncomments: false\n---","date":"2020-12-18T15:04:43.636Z","updated":"2020-12-18T15:04:43.636Z","path":"categories/index.html","_id":"ckitw8kmj000788cd42zkeo8x","layout":"page","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"友链 | My Friends","type":"link","date":"2020-12-15T17:10:05.000Z","_content":"\n## 交个朋友呗\n若需申请友链，请按如下格式留言。（请保证头像链接有效）\n> Blog 名字： TanXZ\n> Blog 地址： https://www.tanxz.com\n> Blog 头像： https://www.tanxz.com/img/avatar.png\n> Blog 简介： 业精于勤，荒于嬉。","source":"links/index.md","raw":"---\ntitle: 友链 | My Friends\ntype: link\ndate: 2020-12-16 01:10:05\n---\n\n## 交个朋友呗\n若需申请友链，请按如下格式留言。（请保证头像链接有效）\n> Blog 名字： TanXZ\n> Blog 地址： https://www.tanxz.com\n> Blog 头像： https://www.tanxz.com/img/avatar.png\n> Blog 简介： 业精于勤，荒于嬉。","updated":"2020-12-18T15:04:43.663Z","path":"links/index.html","_id":"ckitw8kmk000988cd3hbndoqf","comments":1,"layout":"page","content":"<h2 id=\"交个朋友呗\"><a href=\"#交个朋友呗\" class=\"headerlink\" title=\"交个朋友呗\"></a>交个朋友呗</h2><p>若需申请友链，请按如下格式留言。（请保证头像链接有效）</p>\n<blockquote>\n<p>Blog 名字： TanXZ<br>Blog 地址： <a href=\"https://www.tanxz.com\">https://www.tanxz.com</a><br>Blog 头像： <a href=\"https://www.tanxz.com/img/avatar.png\">https://www.tanxz.com/img/avatar.png</a><br>Blog 简介： 业精于勤，荒于嬉。</p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"交个朋友呗\"><a href=\"#交个朋友呗\" class=\"headerlink\" title=\"交个朋友呗\"></a>交个朋友呗</h2><p>若需申请友链，请按如下格式留言。（请保证头像链接有效）</p>\n<blockquote>\n<p>Blog 名字： TanXZ<br>Blog 地址： <a href=\"https://www.tanxz.com\">https://www.tanxz.com</a><br>Blog 头像： <a href=\"https://www.tanxz.com/img/avatar.png\">https://www.tanxz.com/img/avatar.png</a><br>Blog 简介： 业精于勤，荒于嬉。</p>\n</blockquote>\n"},{"title":"movies","date":"2020-12-16T10:20:10.000Z","_content":"","source":"movies/index.md","raw":"---\ntitle: movies\ndate: 2020-12-16 18:20:10\n---\n","updated":"2020-12-18T15:04:43.663Z","path":"movies/index.html","_id":"ckitw8kmq000c88cd1vbq19qn","comments":1,"layout":"page","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"标签 | Tags","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签 | Tags\ntype: tags\ncomments: false\n---","date":"2020-12-18T15:04:43.664Z","updated":"2020-12-18T15:04:43.664Z","path":"tags/index.html","_id":"ckitw8kmr000e88cd1zcp5t9m","layout":"page","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"待办事项","date":"2020-12-18T15:40:25.000Z","updated":"2020-12-18T15:48:51.685Z","type":"post","comments":1,"description":"今日事，今日毕。","keywords":null,"top_img":null,"mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"_content":"\n\n## 近期待办事项清单\n- [ ] 搭建博客：规范化历史文章","source":"todos/index.md","raw":"---\ntitle: 待办事项\ndate: 2020-12-18 23:40:25\nupdated:\ntype: post\ncomments:\ndescription: 今日事，今日毕。\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n\n\n## 近期待办事项清单\n- [ ] 搭建博客：规范化历史文章","path":"todos/index.html","_id":"ckiufvu250001ekxcgfzu8djx","layout":"page","content":"<h2 id=\"近期待办事项清单\"><a href=\"#近期待办事项清单\" class=\"headerlink\" title=\"近期待办事项清单\"></a>近期待办事项清单</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 搭建博客：规范化历史文章</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"近期待办事项清单\"><a href=\"#近期待办事项清单\" class=\"headerlink\" title=\"近期待办事项清单\"></a>近期待办事项清单</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 搭建博客：规范化历史文章</li>\n</ul>\n"}],"Post":[{"title":"【数据结构】八大数据结构简介","abbrlink":2827031203,"date":"2017-02-19T13:38:18.000Z","_content":"\n# 数据结构分类\n数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。\n常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：\n\n{% asset_img overview.png %}\n\n常见数据结构大致可分为三大类，如下所示\n- 线性表：顺序表、链表、栈和队列；\n- 树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；\n- 图存储结构\n\n## 优缺点对比表\n每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。\n\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n# 数组（Array）\n\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。\n\n    int[] data = new int[100]；\n    data[0]  = 1;\n\n## 优点\n- 按照索引查询元素速度快\n- 按照索引遍历数组方便\n\n## 缺点\n- 数组的大小固定后就无法扩容了\n- 数组只能存储一种类型的数据\n- 添加，删除的操作慢，因为要移动其他的元素。\n\n## 适用场景\n- 频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n# 栈（Stack）\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n{% asset_img stack.png %}\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n# 队列\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：\n{% asset_img queue.png %}\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n# 链表\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n{% asset_img linekdlist.jpg %}\n## 优点\n- 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n- 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；\n\n## 缺点\n- 因为含有大量的指针域，占用空间较大；\n- 查找元素需要遍历链表来查找，非常耗时。\n\n## 适用场景\n数据量较小，需要频繁增加，删除操作的场景\n\n# 树\n树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\n{% asset_img tree.png %}\n每个节点有零个或多个子节点；\n没有父节点的节点称为根节点；\n每一个非根节点有且只有一个父节点；\n除了根节点外，每个子节点可以分为多个不相交的子树；\n在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n- 即使某结点只有一个子树，也要区分左右子树。\n\n二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n扩展：\n二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。\n\n# 散列表\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n{% asset_img hashtable.jpg %}\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：\n\n从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。\n\n哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。\n\n# 堆\n{% asset_img heap.jpg %}\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n# 图\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n按照顶点指向的方向可分为无向图和有向图：\n\n图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。\n","source":"_drafts/data-structure-overview.md","raw":"---\ntitle: 【数据结构】八大数据结构简介\ntags:\n  - 数据结构\n  - 算法\nabbrlink: 2827031203\ndate: 2017-02-19 21:38:18\n---\n\n# 数据结构分类\n数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。\n常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：\n\n{% asset_img overview.png %}\n\n常见数据结构大致可分为三大类，如下所示\n- 线性表：顺序表、链表、栈和队列；\n- 树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；\n- 图存储结构\n\n## 优缺点对比表\n每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。\n\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n# 数组（Array）\n\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。\n\n    int[] data = new int[100]；\n    data[0]  = 1;\n\n## 优点\n- 按照索引查询元素速度快\n- 按照索引遍历数组方便\n\n## 缺点\n- 数组的大小固定后就无法扩容了\n- 数组只能存储一种类型的数据\n- 添加，删除的操作慢，因为要移动其他的元素。\n\n## 适用场景\n- 频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n# 栈（Stack）\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n{% asset_img stack.png %}\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n# 队列\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：\n{% asset_img queue.png %}\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n# 链表\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n{% asset_img linekdlist.jpg %}\n## 优点\n- 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n- 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；\n\n## 缺点\n- 因为含有大量的指针域，占用空间较大；\n- 查找元素需要遍历链表来查找，非常耗时。\n\n## 适用场景\n数据量较小，需要频繁增加，删除操作的场景\n\n# 树\n树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\n{% asset_img tree.png %}\n每个节点有零个或多个子节点；\n没有父节点的节点称为根节点；\n每一个非根节点有且只有一个父节点；\n除了根节点外，每个子节点可以分为多个不相交的子树；\n在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n- 即使某结点只有一个子树，也要区分左右子树。\n\n二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n扩展：\n二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。\n\n# 散列表\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n{% asset_img hashtable.jpg %}\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：\n\n从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。\n\n哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。\n\n# 堆\n{% asset_img heap.jpg %}\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n# 图\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n按照顶点指向的方向可分为无向图和有向图：\n\n图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。\n","slug":"data-structure-overview","published":0,"updated":"2020-12-18T15:04:43.610Z","_id":"ckitw8kmd000188cd1ixy7g16","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"数据结构分类\"><a href=\"#数据结构分类\" class=\"headerlink\" title=\"数据结构分类\"></a>数据结构分类</h1><p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。<br>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：</p>\n\n\n<p>常见数据结构大致可分为三大类，如下所示</p>\n<ul>\n<li>线性表：顺序表、链表、栈和队列；</li>\n<li>树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；</li>\n<li>图存储结构</li>\n</ul>\n<h2 id=\"优缺点对比表\"><a href=\"#优缺点对比表\" class=\"headerlink\" title=\"优缺点对比表\"></a>优缺点对比表</h2><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p>\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n<h1 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h1><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\n<pre><code>int[] data = new int[100]；\ndata[0]  = 1;</code></pre><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>按照索引查询元素速度快</li>\n<li>按照索引遍历数组方便</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>数组的大小固定后就无法扩容了</li>\n<li>数组只能存储一种类型的数据</li>\n<li>添加，删除的操作慢，因为要移动其他的元素。</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>频繁查询，对存储空间要求不大，很少增加和删除的情况。</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p>\n\n<p>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</li>\n</ul>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ul>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>数据量较小，需要频繁增加，删除操作的场景</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>\n\n<p>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；<br>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。</p>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li>每个结点最多有两颗子树，结点的度最大为2。</li>\n<li>左子树和右子树是有顺序的，次序不能颠倒。</li>\n<li>即使某结点只有一个子树，也要区分左右子树。</li>\n</ul>\n<p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<p>扩展：<br>二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p>\n<p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>\n<p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1>\n<p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>按照顶点指向的方向可分为无向图和有向图：</p>\n<p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"数据结构分类\"><a href=\"#数据结构分类\" class=\"headerlink\" title=\"数据结构分类\"></a>数据结构分类</h1><p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。<br>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：</p>\n\n\n<p>常见数据结构大致可分为三大类，如下所示</p>\n<ul>\n<li>线性表：顺序表、链表、栈和队列；</li>\n<li>树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；</li>\n<li>图存储结构</li>\n</ul>\n<h2 id=\"优缺点对比表\"><a href=\"#优缺点对比表\" class=\"headerlink\" title=\"优缺点对比表\"></a>优缺点对比表</h2><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p>\n<table>\n    <tr>\n        <td>数据结构</td>\n        <td>优点</td>\n        <td>缺点</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n<h1 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h1><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\n<pre><code>int[] data = new int[100]；\ndata[0]  = 1;</code></pre><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>按照索引查询元素速度快</li>\n<li>按照索引遍历数组方便</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>数组的大小固定后就无法扩容了</li>\n<li>数组只能存储一种类型的数据</li>\n<li>添加，删除的操作慢，因为要移动其他的元素。</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>频繁查询，对存储空间要求不大，很少增加和删除的情况。</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p>\n\n<p>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</li>\n</ul>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ul>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>数据量较小，需要频繁增加，删除操作的场景</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>\n\n<p>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；<br>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。</p>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li>每个结点最多有两颗子树，结点的度最大为2。</li>\n<li>左子树和右子树是有顺序的，次序不能颠倒。</li>\n<li>即使某结点只有一个子树，也要区分左右子树。</li>\n</ul>\n<p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<p>扩展：<br>二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p>\n<p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>\n<p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1>\n<p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>按照顶点指向的方向可分为无向图和有向图：</p>\n<p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>\n"},{"title":"【数据结构】之哈希表（散列表）","abbrlink":3309293362,"date":"2020-04-19T13:17:16.000Z","_content":"\n# 什么是哈希表？\n哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n记录的存储位置=f(关键字)\n\n这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。\n\n哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。）\n    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。\n\n## 参考\n[参考文章](https://blog.csdn.net/duan19920101/article/details/51579136?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2)","source":"_drafts/hashtable-learning.md","raw":"---\ntitle: 【数据结构】之哈希表（散列表）\nabbrlink: 3309293362\ndate: 2020-04-19 21:17:16\ntags:\n  - 数据结构\n---\n\n# 什么是哈希表？\n哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n记录的存储位置=f(关键字)\n\n这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。\n\n哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。）\n    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。\n\n## 参考\n[参考文章](https://blog.csdn.net/duan19920101/article/details/51579136?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2)","slug":"hashtable-learning","published":0,"updated":"2020-12-18T15:04:43.610Z","_id":"ckitw8kmg000388cd69zf0ax6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是哈希表？\"><a href=\"#什么是哈希表？\" class=\"headerlink\" title=\"什么是哈希表？\"></a>什么是哈希表？</h1><p>哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>记录的存储位置=f(关键字)</p>\n<p>这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。</p>\n<p>哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。）<br>    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/duan19920101/article/details/51579136?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2\">参考文章</a></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"什么是哈希表？\"><a href=\"#什么是哈希表？\" class=\"headerlink\" title=\"什么是哈希表？\"></a>什么是哈希表？</h1><p>哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>记录的存储位置=f(关键字)</p>\n<p>这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。</p>\n<p>哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。）<br>    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/duan19920101/article/details/51579136?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2\">参考文章</a></p>\n"},{"title":"MacOS平台brew update卡死","abbrlink":2155797608,"date":"2020-04-19T04:24:47.000Z","_content":"\n","source":"_drafts/mac-brew-update.md","raw":"---\ntitle: MacOS平台brew update卡死\nabbrlink: 2155797608\ndate: 2020-04-19 12:24:47\ntags:\n  - Mac\n  - Linux\n---\n\n","slug":"mac-brew-update","published":0,"updated":"2020-12-18T15:04:43.610Z","_id":"ckitw8kmi000688cdf0ftbzav","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"【MySQL】索引及分页详解","abbrlink":780159822,"date":"2018-07-19T13:38:18.000Z","_content":"\n# 什么是索引\n索引是数据表中一列或多列的值进行排序的一种数据结构。故此，索引本质就是数据结构。这也是为什么每次数据表建立索引都需要设置在列字段上的原因。\n\n\n# 常用的索引结构是什么\n## 参考\n# https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw","source":"_drafts/mysql-index-learning.md","raw":"---\ntitle: 【MySQL】索引及分页详解\ntags:\n  - MySQL\nabbrlink: 780159822\ndate: 2018-07-19 21:38:18\n---\n\n# 什么是索引\n索引是数据表中一列或多列的值进行排序的一种数据结构。故此，索引本质就是数据结构。这也是为什么每次数据表建立索引都需要设置在列字段上的原因。\n\n\n# 常用的索引结构是什么\n## 参考\n# https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw","slug":"mysql-index-learning","published":0,"updated":"2020-12-18T15:04:43.610Z","_id":"ckitw8kmk000888cdf0wa8b4v","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是索引\"><a href=\"#什么是索引\" class=\"headerlink\" title=\"什么是索引\"></a>什么是索引</h1><p>索引是数据表中一列或多列的值进行排序的一种数据结构。故此，索引本质就是数据结构。这也是为什么每次数据表建立索引都需要设置在列字段上的原因。</p>\n<h1 id=\"常用的索引结构是什么\"><a href=\"#常用的索引结构是什么\" class=\"headerlink\" title=\"常用的索引结构是什么\"></a>常用的索引结构是什么</h1><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><h1 id=\"https-mp-weixin-qq-com-s-5Yl6H6up9ntZq6l8qxiogw\"><a href=\"#https-mp-weixin-qq-com-s-5Yl6H6up9ntZq6l8qxiogw\" class=\"headerlink\" title=\"https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw\"></a><a href=\"https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw\">https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw</a></h1>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"什么是索引\"><a href=\"#什么是索引\" class=\"headerlink\" title=\"什么是索引\"></a>什么是索引</h1><p>索引是数据表中一列或多列的值进行排序的一种数据结构。故此，索引本质就是数据结构。这也是为什么每次数据表建立索引都需要设置在列字段上的原因。</p>\n<h1 id=\"常用的索引结构是什么\"><a href=\"#常用的索引结构是什么\" class=\"headerlink\" title=\"常用的索引结构是什么\"></a>常用的索引结构是什么</h1><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><h1 id=\"https-mp-weixin-qq-com-s-5Yl6H6up9ntZq6l8qxiogw\"><a href=\"#https-mp-weixin-qq-com-s-5Yl6H6up9ntZq6l8qxiogw\" class=\"headerlink\" title=\"https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw\"></a><a href=\"https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw\">https://mp.weixin.qq.com/s/5Yl6H6up9ntZq6l8qxiogw</a></h1>"},{"title":"tools-list","abbrlink":189015225,"_content":"","source":"_drafts/tools-list.md","raw":"---\ntitle: tools-list\nabbrlink: 189015225\ntags:\n---\n","slug":"tools-list","published":0,"date":"2020-12-18T15:04:43.610Z","updated":"2020-12-18T15:04:43.610Z","_id":"ckitw8kml000a88cdbqq9951l","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"title":"Github访问加速设置","abbrlink":41928511,"date":"2020-12-10T14:33:34.000Z","_content":"\n### 原理概述\n\n众所周知，由于github服务站点在美国，国内访问速度时好时坏，而通过DNS域名解析后速度更慢，所以我们可以直接通过设置hosts的域名对应的实际ip直接访问ip绕过域名解析，速度可以快到飞起，OK，进入正题。\n\n\n\n#### 域名DNS解析IP\n\n##### DNS解析域名对应ip\n\n- 访问https://www.ping.cn/dns/\n\n![image-20201216105335033](../../img/image-20201216105335033.png)\n\n- 找到当前网络运营商、解析时间最小的对应IP\n\n  ![image-20201216105708714](../../img/image-20201216105708714.png)\n\n##### Mac系统下命令查询域名对应ip\n\n_这种方式查询出来的ip，无法保证ip的访问速度，推荐使用第一种方式。_\n\n```\nMacBook-Pro-6:~ tanxinzheng$ nslookup www.github.com\nServer:\t\t114.114.114.114\nAddress:\t114.114.114.114#53\n\nNon-authoritative answer:\nwww.github.com\tcanonical name = github.com.\nName:\tgithub.com\nAddress: 13.250.177.223\n```\n\n#### 修改hosts映射Github域名\n\n管理员模式下编辑hosts\n\n- Mac系统在 /etc/hosts\n\n- Windows系统在 C:/windows/System/etc/hosts\n\n将映射代码添加在hosts文件尾部（该ip为上海地区的最小解析时间，请大家实际情况修改）\n\n_注：若需要加快github访问不只是单纯的需要映射github.com域名_\n\n```\n# github ip\n13.229.188.59 \t\tgithub.com\n52.128.23.153\t\tgithubusercontent.com\n```\n\n#### 刷新本地DNS解析缓存\n\n- Windows\n\n  ```cmd\n  ipconfig /flushdns\n  ```\n\n- Mac\n\n  ```shell\n  sudo killall -HUP mDNSResponder\n  ```\n\n- Linux\n\n  ```shell\n  sudo /etc/init.d/networking restart\n  ```\n\n  ","source":"_posts/git/github访问加速.md","raw":"---\ntitle: Github访问加速设置\ntags:\n  - git\n  - github\ncategories: 技术\nabbrlink: 41928511\ndate: 2020-12-10 22:33:34\n---\n\n### 原理概述\n\n众所周知，由于github服务站点在美国，国内访问速度时好时坏，而通过DNS域名解析后速度更慢，所以我们可以直接通过设置hosts的域名对应的实际ip直接访问ip绕过域名解析，速度可以快到飞起，OK，进入正题。\n\n\n\n#### 域名DNS解析IP\n\n##### DNS解析域名对应ip\n\n- 访问https://www.ping.cn/dns/\n\n![image-20201216105335033](../../img/image-20201216105335033.png)\n\n- 找到当前网络运营商、解析时间最小的对应IP\n\n  ![image-20201216105708714](../../img/image-20201216105708714.png)\n\n##### Mac系统下命令查询域名对应ip\n\n_这种方式查询出来的ip，无法保证ip的访问速度，推荐使用第一种方式。_\n\n```\nMacBook-Pro-6:~ tanxinzheng$ nslookup www.github.com\nServer:\t\t114.114.114.114\nAddress:\t114.114.114.114#53\n\nNon-authoritative answer:\nwww.github.com\tcanonical name = github.com.\nName:\tgithub.com\nAddress: 13.250.177.223\n```\n\n#### 修改hosts映射Github域名\n\n管理员模式下编辑hosts\n\n- Mac系统在 /etc/hosts\n\n- Windows系统在 C:/windows/System/etc/hosts\n\n将映射代码添加在hosts文件尾部（该ip为上海地区的最小解析时间，请大家实际情况修改）\n\n_注：若需要加快github访问不只是单纯的需要映射github.com域名_\n\n```\n# github ip\n13.229.188.59 \t\tgithub.com\n52.128.23.153\t\tgithubusercontent.com\n```\n\n#### 刷新本地DNS解析缓存\n\n- Windows\n\n  ```cmd\n  ipconfig /flushdns\n  ```\n\n- Mac\n\n  ```shell\n  sudo killall -HUP mDNSResponder\n  ```\n\n- Linux\n\n  ```shell\n  sudo /etc/init.d/networking restart\n  ```\n\n  ","slug":"git/github访问加速","published":1,"updated":"2020-12-18T15:17:51.426Z","_id":"ckitw8kmu000j88cdgz7y0bz5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"原理概述\"><a href=\"#原理概述\" class=\"headerlink\" title=\"原理概述\"></a>原理概述</h3><p>众所周知，由于github服务站点在美国，国内访问速度时好时坏，而通过DNS域名解析后速度更慢，所以我们可以直接通过设置hosts的域名对应的实际ip直接访问ip绕过域名解析，速度可以快到飞起，OK，进入正题。</p>\n<h4 id=\"域名DNS解析IP\"><a href=\"#域名DNS解析IP\" class=\"headerlink\" title=\"域名DNS解析IP\"></a>域名DNS解析IP</h4><h5 id=\"DNS解析域名对应ip\"><a href=\"#DNS解析域名对应ip\" class=\"headerlink\" title=\"DNS解析域名对应ip\"></a>DNS解析域名对应ip</h5><ul>\n<li>访问<a href=\"https://www.ping.cn/dns/\">https://www.ping.cn/dns/</a></li>\n</ul>\n<p><img src=\"../../img/image-20201216105335033.png\" alt=\"image-20201216105335033\"></p>\n<ul>\n<li><p>找到当前网络运营商、解析时间最小的对应IP</p>\n<p><img src=\"../../img/image-20201216105708714.png\" alt=\"image-20201216105708714\"></p>\n</li>\n</ul>\n<h5 id=\"Mac系统下命令查询域名对应ip\"><a href=\"#Mac系统下命令查询域名对应ip\" class=\"headerlink\" title=\"Mac系统下命令查询域名对应ip\"></a>Mac系统下命令查询域名对应ip</h5><p><em>这种方式查询出来的ip，无法保证ip的访问速度，推荐使用第一种方式。</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">MacBook-Pro-6:~ tanxinzheng$ nslookup www.github.com<br>Server:\t\t114.114.114.114<br>Address:\t114.114.114.114#53<br><br>Non-authoritative answer:<br>www.github.com\tcanonical name &#x3D; github.com.<br>Name:\tgithub.com<br>Address: 13.250.177.223<br></code></pre></td></tr></table></figure>\n<h4 id=\"修改hosts映射Github域名\"><a href=\"#修改hosts映射Github域名\" class=\"headerlink\" title=\"修改hosts映射Github域名\"></a>修改hosts映射Github域名</h4><p>管理员模式下编辑hosts</p>\n<ul>\n<li><p>Mac系统在 /etc/hosts</p>\n</li>\n<li><p>Windows系统在 C:/windows/System/etc/hosts</p>\n</li>\n</ul>\n<p>将映射代码添加在hosts文件尾部（该ip为上海地区的最小解析时间，请大家实际情况修改）</p>\n<p><em>注：若需要加快github访问不只是单纯的需要映射github.com域名</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># github ip<br>13.229.188.59 \t\tgithub.com<br>52.128.23.153\t\tgithubusercontent.com<br></code></pre></td></tr></table></figure>\n<h4 id=\"刷新本地DNS解析缓存\"><a href=\"#刷新本地DNS解析缓存\" class=\"headerlink\" title=\"刷新本地DNS解析缓存\"></a>刷新本地DNS解析缓存</h4><ul>\n<li><p>Windows</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\"><span class=\"hljs-built_in\">ipconfig</span> /flushdns<br></code></pre></td></tr></table></figure></li>\n<li><p>Mac</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo killall -HUP mDNSResponder<br></code></pre></td></tr></table></figure></li>\n<li><p>Linux</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo /etc/init.d/networking restart<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h3 id=\"原理概述\"><a href=\"#原理概述\" class=\"headerlink\" title=\"原理概述\"></a>原理概述</h3><p>众所周知，由于github服务站点在美国，国内访问速度时好时坏，而通过DNS域名解析后速度更慢，所以我们可以直接通过设置hosts的域名对应的实际ip直接访问ip绕过域名解析，速度可以快到飞起，OK，进入正题。</p>\n<h4 id=\"域名DNS解析IP\"><a href=\"#域名DNS解析IP\" class=\"headerlink\" title=\"域名DNS解析IP\"></a>域名DNS解析IP</h4><h5 id=\"DNS解析域名对应ip\"><a href=\"#DNS解析域名对应ip\" class=\"headerlink\" title=\"DNS解析域名对应ip\"></a>DNS解析域名对应ip</h5><ul>\n<li>访问<a href=\"https://www.ping.cn/dns/\">https://www.ping.cn/dns/</a></li>\n</ul>\n<p><img src=\"../../img/image-20201216105335033.png\" alt=\"image-20201216105335033\"></p>\n<ul>\n<li><p>找到当前网络运营商、解析时间最小的对应IP</p>\n<p><img src=\"../../img/image-20201216105708714.png\" alt=\"image-20201216105708714\"></p>\n</li>\n</ul>\n<h5 id=\"Mac系统下命令查询域名对应ip\"><a href=\"#Mac系统下命令查询域名对应ip\" class=\"headerlink\" title=\"Mac系统下命令查询域名对应ip\"></a>Mac系统下命令查询域名对应ip</h5><p><em>这种方式查询出来的ip，无法保证ip的访问速度，推荐使用第一种方式。</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">MacBook-Pro-6:~ tanxinzheng$ nslookup www.github.com<br>Server:\t\t114.114.114.114<br>Address:\t114.114.114.114#53<br><br>Non-authoritative answer:<br>www.github.com\tcanonical name &#x3D; github.com.<br>Name:\tgithub.com<br>Address: 13.250.177.223<br></code></pre></td></tr></table></figure>\n<h4 id=\"修改hosts映射Github域名\"><a href=\"#修改hosts映射Github域名\" class=\"headerlink\" title=\"修改hosts映射Github域名\"></a>修改hosts映射Github域名</h4><p>管理员模式下编辑hosts</p>\n<ul>\n<li><p>Mac系统在 /etc/hosts</p>\n</li>\n<li><p>Windows系统在 C:/windows/System/etc/hosts</p>\n</li>\n</ul>\n<p>将映射代码添加在hosts文件尾部（该ip为上海地区的最小解析时间，请大家实际情况修改）</p>\n<p><em>注：若需要加快github访问不只是单纯的需要映射github.com域名</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># github ip<br>13.229.188.59 \t\tgithub.com<br>52.128.23.153\t\tgithubusercontent.com<br></code></pre></td></tr></table></figure>\n<h4 id=\"刷新本地DNS解析缓存\"><a href=\"#刷新本地DNS解析缓存\" class=\"headerlink\" title=\"刷新本地DNS解析缓存\"></a>刷新本地DNS解析缓存</h4><ul>\n<li><p>Windows</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\"><span class=\"hljs-built_in\">ipconfig</span> /flushdns<br></code></pre></td></tr></table></figure></li>\n<li><p>Mac</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo killall -HUP mDNSResponder<br></code></pre></td></tr></table></figure></li>\n<li><p>Linux</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo /etc/init.d/networking restart<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Windows下git配置ssh密钥","abbrlink":41928510,"date":"2020-12-10T14:33:34.000Z","_content":"\n\n\n#### 检查用户.SSH目录\n\n若存在则直接使用已生成的ssh公私密钥，跳过生成SSH公私密钥步骤\n\n**若需要免密提交则要保证生成的ssh公私密钥是未输入密码的**\n\n```\nPS C:\\Users\\tanxz\\.ssh> ls\n\n    目录: C:\\Users\\tanxz\\.ssh\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----        2020/12/16      0:31           1679 id_rsa\n-a----        2020/12/16      0:31            402 id_rsa.pub\n-a----        2020/12/16      0:34            185 known_hosts\n```\n\n#### 生成SSH公私密钥\n\n```c++\nC:\\Users\\tanxz> ssh-keygen -t rsa -C \"tanxinzheng@139.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (C:\\Users\\tanxz/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in C:\\Users\\tanxz/.ssh/id_rsa.\nYour public key has been saved in C:\\Users\\tanxz/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:9BM2DGD4+BKfyMjWhrP0b4xdHlk4I9JG/dJB0BwR0Nc tanxinzheng@139.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n|     .oo+B=+ .   |\n|    ... .o= . E  |\n|     =  .+=o     |\n|    + =.=o+o     |\n| . = B oS*o      |\n|  B * + +  .     |\n| o = = o .       |\n|  . o + .        |\n|     o.          |\n+----[SHA256]-----+\n```\n\n#### 添加SSH公钥到github和gitee\n\n打开.ssh目录下的id_rsa.pub文件，复制里面的内容，到github和gitee设置中找到的SSH key的信息，添加即可。\n\n#### 测试是否ssh密钥是否有效\n\n```\nC:\\Users\\tanxz\\.ssh> ssh -T git@github.com\nHi tanxinzheng! You've successfully authenticated, but GitHub does not provide shell access.\nPS C:\\Users\\tanxz\\.ssh> ssh -T git@gitee.com\nHi tanxinzheng! You've successfully authenticated, but GITEE.COM does not provide shell access.\n```\n\n若显示以上信息，恭喜你以后终于不用输入密码了！！：）\n\n","source":"_posts/git/git添加ssh密钥.md","raw":"---\ntitle: Windows下git配置ssh密钥\ntags:\n  - git\ncategories: 技术\nabbrlink: 41928510\ndate: 2020-12-10 22:33:34\n---\n\n\n\n#### 检查用户.SSH目录\n\n若存在则直接使用已生成的ssh公私密钥，跳过生成SSH公私密钥步骤\n\n**若需要免密提交则要保证生成的ssh公私密钥是未输入密码的**\n\n```\nPS C:\\Users\\tanxz\\.ssh> ls\n\n    目录: C:\\Users\\tanxz\\.ssh\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----        2020/12/16      0:31           1679 id_rsa\n-a----        2020/12/16      0:31            402 id_rsa.pub\n-a----        2020/12/16      0:34            185 known_hosts\n```\n\n#### 生成SSH公私密钥\n\n```c++\nC:\\Users\\tanxz> ssh-keygen -t rsa -C \"tanxinzheng@139.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (C:\\Users\\tanxz/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in C:\\Users\\tanxz/.ssh/id_rsa.\nYour public key has been saved in C:\\Users\\tanxz/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:9BM2DGD4+BKfyMjWhrP0b4xdHlk4I9JG/dJB0BwR0Nc tanxinzheng@139.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n|     .oo+B=+ .   |\n|    ... .o= . E  |\n|     =  .+=o     |\n|    + =.=o+o     |\n| . = B oS*o      |\n|  B * + +  .     |\n| o = = o .       |\n|  . o + .        |\n|     o.          |\n+----[SHA256]-----+\n```\n\n#### 添加SSH公钥到github和gitee\n\n打开.ssh目录下的id_rsa.pub文件，复制里面的内容，到github和gitee设置中找到的SSH key的信息，添加即可。\n\n#### 测试是否ssh密钥是否有效\n\n```\nC:\\Users\\tanxz\\.ssh> ssh -T git@github.com\nHi tanxinzheng! You've successfully authenticated, but GitHub does not provide shell access.\nPS C:\\Users\\tanxz\\.ssh> ssh -T git@gitee.com\nHi tanxinzheng! You've successfully authenticated, but GITEE.COM does not provide shell access.\n```\n\n若显示以上信息，恭喜你以后终于不用输入密码了！！：）\n\n","slug":"git/git添加ssh密钥","published":1,"updated":"2020-12-18T15:04:43.616Z","_id":"ckitw8kmu000l88cd1h2b5b11","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"检查用户-SSH目录\"><a href=\"#检查用户-SSH目录\" class=\"headerlink\" title=\"检查用户.SSH目录\"></a>检查用户.SSH目录</h4><p>若存在则直接使用已生成的ssh公私密钥，跳过生成SSH公私密钥步骤</p>\n<p><strong>若需要免密提交则要保证生成的ssh公私密钥是未输入密码的</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">PS C:\\Users\\tanxz\\.ssh&gt; ls<br><br>    目录: C:\\Users\\tanxz\\.ssh<br><br><br>Mode                 LastWriteTime         Length Name<br>----                 -------------         ------ ----<br>-a----        2020&#x2F;12&#x2F;16      0:31           1679 id_rsa<br>-a----        2020&#x2F;12&#x2F;16      0:31            402 id_rsa.pub<br>-a----        2020&#x2F;12&#x2F;16      0:34            185 known_hosts<br></code></pre></td></tr></table></figure>\n<h4 id=\"生成SSH公私密钥\"><a href=\"#生成SSH公私密钥\" class=\"headerlink\" title=\"生成SSH公私密钥\"></a>生成SSH公私密钥</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">C:\\Users\\tanxz&gt; ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;tanxinzheng@139.com&quot;</span><br>Generating <span class=\"hljs-keyword\">public</span>/<span class=\"hljs-keyword\">private</span> rsa key <span class=\"hljs-built_in\">pair</span>.<br><span class=\"hljs-function\">Enter file in which to save the <span class=\"hljs-title\">key</span> <span class=\"hljs-params\">(C:\\Users\\tanxz/.ssh/id_rsa)</span>:</span><br><span class=\"hljs-function\">Enter <span class=\"hljs-title\">passphrase</span> <span class=\"hljs-params\">(empty <span class=\"hljs-keyword\">for</span> no passphrase)</span>:</span><br><span class=\"hljs-function\">Enter same passphrase again:</span><br>Your identification has been saved in C:\\Users\\tanxz/.ssh/id_rsa.<br>Your <span class=\"hljs-keyword\">public</span> key has been saved in C:\\Users\\tanxz/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:<span class=\"hljs-number\">9B</span>M2DGD4+BKfyMjWhrP0b4xdHlk4I9JG/dJB0BwR0Nc tanxinzheng@<span class=\"hljs-number\">139.</span>com<br>The key<span class=\"hljs-number\">&#x27;</span>s randomart image is:<br>+---[RSA <span class=\"hljs-number\">2048</span>]----+<br>|     .oo+B=+ .   |<br>|    ... .o= . E  |<br>|     =  .+=o     |<br>|    + =.=o+o     |<br>| . = B oS*o      |<br>|  B * + +  .     |<br>| o = = o .       |<br>|  . o + .        |<br>|     o.          |<br>+----[SHA256]-----+<br></code></pre></td></tr></table></figure>\n<h4 id=\"添加SSH公钥到github和gitee\"><a href=\"#添加SSH公钥到github和gitee\" class=\"headerlink\" title=\"添加SSH公钥到github和gitee\"></a>添加SSH公钥到github和gitee</h4><p>打开.ssh目录下的id_rsa.pub文件，复制里面的内容，到github和gitee设置中找到的SSH key的信息，添加即可。</p>\n<h4 id=\"测试是否ssh密钥是否有效\"><a href=\"#测试是否ssh密钥是否有效\" class=\"headerlink\" title=\"测试是否ssh密钥是否有效\"></a>测试是否ssh密钥是否有效</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">C:\\Users\\tanxz\\.ssh&gt; ssh -T git@github.com<br>Hi tanxinzheng! You&#39;ve successfully authenticated, but GitHub does not provide shell access.<br>PS C:\\Users\\tanxz\\.ssh&gt; ssh -T git@gitee.com<br>Hi tanxinzheng! You&#39;ve successfully authenticated, but GITEE.COM does not provide shell access.<br></code></pre></td></tr></table></figure>\n<p>若显示以上信息，恭喜你以后终于不用输入密码了！！：）</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h4 id=\"检查用户-SSH目录\"><a href=\"#检查用户-SSH目录\" class=\"headerlink\" title=\"检查用户.SSH目录\"></a>检查用户.SSH目录</h4><p>若存在则直接使用已生成的ssh公私密钥，跳过生成SSH公私密钥步骤</p>\n<p><strong>若需要免密提交则要保证生成的ssh公私密钥是未输入密码的</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">PS C:\\Users\\tanxz\\.ssh&gt; ls<br><br>    目录: C:\\Users\\tanxz\\.ssh<br><br><br>Mode                 LastWriteTime         Length Name<br>----                 -------------         ------ ----<br>-a----        2020&#x2F;12&#x2F;16      0:31           1679 id_rsa<br>-a----        2020&#x2F;12&#x2F;16      0:31            402 id_rsa.pub<br>-a----        2020&#x2F;12&#x2F;16      0:34            185 known_hosts<br></code></pre></td></tr></table></figure>\n<h4 id=\"生成SSH公私密钥\"><a href=\"#生成SSH公私密钥\" class=\"headerlink\" title=\"生成SSH公私密钥\"></a>生成SSH公私密钥</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">C:\\Users\\tanxz&gt; ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;tanxinzheng@139.com&quot;</span><br>Generating <span class=\"hljs-keyword\">public</span>/<span class=\"hljs-keyword\">private</span> rsa key <span class=\"hljs-built_in\">pair</span>.<br><span class=\"hljs-function\">Enter file in which to save the <span class=\"hljs-title\">key</span> <span class=\"hljs-params\">(C:\\Users\\tanxz/.ssh/id_rsa)</span>:</span><br><span class=\"hljs-function\">Enter <span class=\"hljs-title\">passphrase</span> <span class=\"hljs-params\">(empty <span class=\"hljs-keyword\">for</span> no passphrase)</span>:</span><br><span class=\"hljs-function\">Enter same passphrase again:</span><br>Your identification has been saved in C:\\Users\\tanxz/.ssh/id_rsa.<br>Your <span class=\"hljs-keyword\">public</span> key has been saved in C:\\Users\\tanxz/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:<span class=\"hljs-number\">9B</span>M2DGD4+BKfyMjWhrP0b4xdHlk4I9JG/dJB0BwR0Nc tanxinzheng@<span class=\"hljs-number\">139.</span>com<br>The key<span class=\"hljs-number\">&#x27;</span>s randomart image is:<br>+---[RSA <span class=\"hljs-number\">2048</span>]----+<br>|     .oo+B=+ .   |<br>|    ... .o= . E  |<br>|     =  .+=o     |<br>|    + =.=o+o     |<br>| . = B oS*o      |<br>|  B * + +  .     |<br>| o = = o .       |<br>|  . o + .        |<br>|     o.          |<br>+----[SHA256]-----+<br></code></pre></td></tr></table></figure>\n<h4 id=\"添加SSH公钥到github和gitee\"><a href=\"#添加SSH公钥到github和gitee\" class=\"headerlink\" title=\"添加SSH公钥到github和gitee\"></a>添加SSH公钥到github和gitee</h4><p>打开.ssh目录下的id_rsa.pub文件，复制里面的内容，到github和gitee设置中找到的SSH key的信息，添加即可。</p>\n<h4 id=\"测试是否ssh密钥是否有效\"><a href=\"#测试是否ssh密钥是否有效\" class=\"headerlink\" title=\"测试是否ssh密钥是否有效\"></a>测试是否ssh密钥是否有效</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">C:\\Users\\tanxz\\.ssh&gt; ssh -T git@github.com<br>Hi tanxinzheng! You&#39;ve successfully authenticated, but GitHub does not provide shell access.<br>PS C:\\Users\\tanxz\\.ssh&gt; ssh -T git@gitee.com<br>Hi tanxinzheng! You&#39;ve successfully authenticated, but GITEE.COM does not provide shell access.<br></code></pre></td></tr></table></figure>\n<p>若显示以上信息，恭喜你以后终于不用输入密码了！！：）</p>\n"},{"title":"Hexo搭建博客：如何使用Hexo写作","index_img":"/img/hexo.jpeg","abbrlink":3878378061,"_content":"\n> 这篇文章将讲解如果使用hexo命令生成页面、文章及如何配置文章模板等操作。\n\n你可以执行下列命令来创建一篇新文章或者新的页面。\n\n```\n$ hexo new [layout] <title>\n```\n\n您可以在命令中指定文章的布局（layout），默认为 `post`，可以通过修改 `_config.yml` 中的 `default_layout` 参数来指定默认布局。\n\n### 布局（Layout）\n\nHexo 有三种默认布局：`post`、`page` 和 `draft`。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 `post` 相同，都将储存到 `source/_posts` 文件夹。\n\n| 布局    | 路径             |\n| :------ | :--------------- |\n| `post`  | `source/_posts`  |\n| `page`  | `source`         |\n| `draft` | `source/_drafts` |\n\n> Disabling layout\n>\n> If you don’t want an article (post/page) to be processed with a theme, set `layout: false` in its front-matter. Refer to [this section](https://hexo.io/zh-cn/docs/front-matter#布局) for more details.\n\n### 文件名称\n\nHexo 默认以标题做为文件名称，但您可编辑 `new_post_name` 参数来改变默认的文件名称，举例来说，设为 `:year-:month-:day-:title.md` 可让您更方便的通过日期来管理文章。\n\n| 变量       | 描述                                |\n| :--------- | :---------------------------------- |\n| `:title`   | 标题（小写，空格将会被替换为短杠）  |\n| `:year`    | 建立的年份，比如， `2015`           |\n| `:month`   | 建立的月份（有前导零），比如， `04` |\n| `:i_month` | 建立的月份（无前导零），比如， `4`  |\n| `:day`     | 建立的日期（有前导零），比如， `07` |\n| `:i_day`   | 建立的日期（无前导零），比如， `7`  |\n\n### 草稿\n\n刚刚提到了 Hexo 的一种特殊布局：`draft`，这种布局在建立时会被保存到 `source/_drafts` 文件夹，您可通过 `publish` 命令将草稿移动到 `source/_posts` 文件夹，该命令的使用方式与 `new` 十分类似，您也可在命令中指定 `layout` 来指定布局。\n\n```\n$ hexo publish [layout] <title>\n```\n\n草稿默认不会显示在页面中，您可在执行时加上 `--draft` 参数，或是把 `render_drafts` 参数设为 `true` 来预览草稿。\n\n### 模版（Scaffold）\n\n在新建文章时，Hexo 会根据 `scaffolds` 文件夹内相对应的文件来建立文件，例如：\n\n```\n$ hexo new photo \"My Gallery\"\n```\n\n在执行这行指令时，Hexo 会尝试在 `scaffolds` 文件夹中寻找 `photo.md`，并根据其内容建立文章，以下是您可以在模版中使用的变量：\n\n| 变量     | 描述         |\n| :------- | :----------- |\n| `layout` | 布局         |\n| `title`  | 标题         |\n| `date`   | 文件建立日期 |\n\n### 支持的格式\n\nHexo 支持以任何格式书写文章，只要安装了相应的渲染插件。\n\n例如，Hexo 默认安装了 `hexo-renderer-marked` 和 `hexo-renderer-ejs`，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 `hexo-renderer-pug`，你甚至可以用 Pug 模板语言书写文章。\n\n只需要将文章的扩展名从 `md` 改成 `ejs`，Hexo 就会使用 `hexo-renderer-ejs` 渲染这个文件，其他格式同理。","source":"_posts/hexo/hexo写作.md","raw":"---\ntitle: Hexo搭建博客：如何使用Hexo写作\ncategories: 博客\ntags:\n  - Hexo\nindex_img: /img/hexo.jpeg\nabbrlink: 3878378061\n---\n\n> 这篇文章将讲解如果使用hexo命令生成页面、文章及如何配置文章模板等操作。\n\n你可以执行下列命令来创建一篇新文章或者新的页面。\n\n```\n$ hexo new [layout] <title>\n```\n\n您可以在命令中指定文章的布局（layout），默认为 `post`，可以通过修改 `_config.yml` 中的 `default_layout` 参数来指定默认布局。\n\n### 布局（Layout）\n\nHexo 有三种默认布局：`post`、`page` 和 `draft`。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 `post` 相同，都将储存到 `source/_posts` 文件夹。\n\n| 布局    | 路径             |\n| :------ | :--------------- |\n| `post`  | `source/_posts`  |\n| `page`  | `source`         |\n| `draft` | `source/_drafts` |\n\n> Disabling layout\n>\n> If you don’t want an article (post/page) to be processed with a theme, set `layout: false` in its front-matter. Refer to [this section](https://hexo.io/zh-cn/docs/front-matter#布局) for more details.\n\n### 文件名称\n\nHexo 默认以标题做为文件名称，但您可编辑 `new_post_name` 参数来改变默认的文件名称，举例来说，设为 `:year-:month-:day-:title.md` 可让您更方便的通过日期来管理文章。\n\n| 变量       | 描述                                |\n| :--------- | :---------------------------------- |\n| `:title`   | 标题（小写，空格将会被替换为短杠）  |\n| `:year`    | 建立的年份，比如， `2015`           |\n| `:month`   | 建立的月份（有前导零），比如， `04` |\n| `:i_month` | 建立的月份（无前导零），比如， `4`  |\n| `:day`     | 建立的日期（有前导零），比如， `07` |\n| `:i_day`   | 建立的日期（无前导零），比如， `7`  |\n\n### 草稿\n\n刚刚提到了 Hexo 的一种特殊布局：`draft`，这种布局在建立时会被保存到 `source/_drafts` 文件夹，您可通过 `publish` 命令将草稿移动到 `source/_posts` 文件夹，该命令的使用方式与 `new` 十分类似，您也可在命令中指定 `layout` 来指定布局。\n\n```\n$ hexo publish [layout] <title>\n```\n\n草稿默认不会显示在页面中，您可在执行时加上 `--draft` 参数，或是把 `render_drafts` 参数设为 `true` 来预览草稿。\n\n### 模版（Scaffold）\n\n在新建文章时，Hexo 会根据 `scaffolds` 文件夹内相对应的文件来建立文件，例如：\n\n```\n$ hexo new photo \"My Gallery\"\n```\n\n在执行这行指令时，Hexo 会尝试在 `scaffolds` 文件夹中寻找 `photo.md`，并根据其内容建立文章，以下是您可以在模版中使用的变量：\n\n| 变量     | 描述         |\n| :------- | :----------- |\n| `layout` | 布局         |\n| `title`  | 标题         |\n| `date`   | 文件建立日期 |\n\n### 支持的格式\n\nHexo 支持以任何格式书写文章，只要安装了相应的渲染插件。\n\n例如，Hexo 默认安装了 `hexo-renderer-marked` 和 `hexo-renderer-ejs`，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 `hexo-renderer-pug`，你甚至可以用 Pug 模板语言书写文章。\n\n只需要将文章的扩展名从 `md` 改成 `ejs`，Hexo 就会使用 `hexo-renderer-ejs` 渲染这个文件，其他格式同理。","slug":"hexo/hexo写作","published":1,"date":"2020-12-18T15:04:43.617Z","updated":"2020-12-18T18:13:05.347Z","_id":"ckitw8kmx000r88cd4a7me2qd","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>这篇文章将讲解如果使用hexo命令生成页面、文章及如何配置文章模板等操作。</p>\n</blockquote>\n<p>你可以执行下列命令来创建一篇新文章或者新的页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure>\n<p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p>\n<h3 id=\"布局（Layout）\"><a href=\"#布局（Layout）\" class=\"headerlink\" title=\"布局（Layout）\"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">布局</th>\n<th align=\"left\">路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>post</code></td>\n<td align=\"left\"><code>source/_posts</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>page</code></td>\n<td align=\"left\"><code>source</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>draft</code></td>\n<td align=\"left\"><code>source/_drafts</code></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Disabling layout</p>\n<p>If you don’t want an article (post/page) to be processed with a theme, set <code>layout: false</code> in its front-matter. Refer to <a href=\"https://hexo.io/zh-cn/docs/front-matter#布局\">this section</a> for more details.</p>\n</blockquote>\n<h3 id=\"文件名称\"><a href=\"#文件名称\" class=\"headerlink\" title=\"文件名称\"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">变量</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>:title</code></td>\n<td align=\"left\">标题（小写，空格将会被替换为短杠）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:year</code></td>\n<td align=\"left\">建立的年份，比如， <code>2015</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:month</code></td>\n<td align=\"left\">建立的月份（有前导零），比如， <code>04</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:i_month</code></td>\n<td align=\"left\">建立的月份（无前导零），比如， <code>4</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:day</code></td>\n<td align=\"left\">建立的日期（有前导零），比如， <code>07</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:i_day</code></td>\n<td align=\"left\">建立的日期（无前导零），比如， <code>7</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"草稿\"><a href=\"#草稿\" class=\"headerlink\" title=\"草稿\"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo publish [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure>\n<p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p>\n<h3 id=\"模版（Scaffold）\"><a href=\"#模版（Scaffold）\" class=\"headerlink\" title=\"模版（Scaffold）\"></a>模版（Scaffold）</h3><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo new photo &quot;My Gallery&quot;<br></code></pre></td></tr></table></figure>\n<p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">变量</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>layout</code></td>\n<td align=\"left\">布局</td>\n</tr>\n<tr>\n<td align=\"left\"><code>title</code></td>\n<td align=\"left\">标题</td>\n</tr>\n<tr>\n<td align=\"left\"><code>date</code></td>\n<td align=\"left\">文件建立日期</td>\n</tr>\n</tbody></table>\n<h3 id=\"支持的格式\"><a href=\"#支持的格式\" class=\"headerlink\" title=\"支持的格式\"></a>支持的格式</h3><p>Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p>\n<p>例如，Hexo 默认安装了 <code>hexo-renderer-marked</code> 和 <code>hexo-renderer-ejs</code>，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 <code>hexo-renderer-pug</code>，你甚至可以用 Pug 模板语言书写文章。</p>\n<p>只需要将文章的扩展名从 <code>md</code> 改成 <code>ejs</code>，Hexo 就会使用 <code>hexo-renderer-ejs</code> 渲染这个文件，其他格式同理。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<blockquote>\n<p>这篇文章将讲解如果使用hexo命令生成页面、文章及如何配置文章模板等操作。</p>\n</blockquote>\n<p>你可以执行下列命令来创建一篇新文章或者新的页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure>\n<p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p>\n<h3 id=\"布局（Layout）\"><a href=\"#布局（Layout）\" class=\"headerlink\" title=\"布局（Layout）\"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">布局</th>\n<th align=\"left\">路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>post</code></td>\n<td align=\"left\"><code>source/_posts</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>page</code></td>\n<td align=\"left\"><code>source</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>draft</code></td>\n<td align=\"left\"><code>source/_drafts</code></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Disabling layout</p>\n<p>If you don’t want an article (post/page) to be processed with a theme, set <code>layout: false</code> in its front-matter. Refer to <a href=\"https://hexo.io/zh-cn/docs/front-matter#布局\">this section</a> for more details.</p>\n</blockquote>\n<h3 id=\"文件名称\"><a href=\"#文件名称\" class=\"headerlink\" title=\"文件名称\"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">变量</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>:title</code></td>\n<td align=\"left\">标题（小写，空格将会被替换为短杠）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>:year</code></td>\n<td align=\"left\">建立的年份，比如， <code>2015</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:month</code></td>\n<td align=\"left\">建立的月份（有前导零），比如， <code>04</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:i_month</code></td>\n<td align=\"left\">建立的月份（无前导零），比如， <code>4</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:day</code></td>\n<td align=\"left\">建立的日期（有前导零），比如， <code>07</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>:i_day</code></td>\n<td align=\"left\">建立的日期（无前导零），比如， <code>7</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"草稿\"><a href=\"#草稿\" class=\"headerlink\" title=\"草稿\"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo publish [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure>\n<p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p>\n<h3 id=\"模版（Scaffold）\"><a href=\"#模版（Scaffold）\" class=\"headerlink\" title=\"模版（Scaffold）\"></a>模版（Scaffold）</h3><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo new photo &quot;My Gallery&quot;<br></code></pre></td></tr></table></figure>\n<p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">变量</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>layout</code></td>\n<td align=\"left\">布局</td>\n</tr>\n<tr>\n<td align=\"left\"><code>title</code></td>\n<td align=\"left\">标题</td>\n</tr>\n<tr>\n<td align=\"left\"><code>date</code></td>\n<td align=\"left\">文件建立日期</td>\n</tr>\n</tbody></table>\n<h3 id=\"支持的格式\"><a href=\"#支持的格式\" class=\"headerlink\" title=\"支持的格式\"></a>支持的格式</h3><p>Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p>\n<p>例如，Hexo 默认安装了 <code>hexo-renderer-marked</code> 和 <code>hexo-renderer-ejs</code>，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 <code>hexo-renderer-pug</code>，你甚至可以用 Pug 模板语言书写文章。</p>\n<p>只需要将文章的扩展名从 <code>md</code> 改成 <code>ejs</code>，Hexo 就会使用 <code>hexo-renderer-ejs</code> 渲染这个文件，其他格式同理。</p>\n"},{"title":"Hexo搭建博客：Hexo常用命令","index_img":"/img/hexo.jpeg","abbrlink":2628717197,"_content":"\n> 本文章将讲解在搭建Hexo博客过程中的常用命令及命令的参数说明\n\n<!-- more -->\n\n## init\n\n```shell\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\nThis command is a shortcut that runs the following steps:\n\n1. Git clone [hexo-starter](https://github.com/hexojs/hexo-starter) including [hexo-theme-landscape](https://github.com/hexojs/hexo-theme-landscape) into the current directory or a target folder if specified.\n2. Install dependencies using a package manager: [Yarn 1](https://classic.yarnpkg.com/lang/en/), [pnpm](https://pnpm.js.org/) or [npm](https://docs.npmjs.com/cli/install), whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with [Node.js](https://hexo.io/docs/#Install-Node-js) by default.\n\n## new\n\n```xml\n$ hexo new [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](https://hexo.io/zh-cn/docs/configuration) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n```\n$ hexo new \"post title with whitespace\"\n```\n\n| 参数              | 描述                                          |\n| :---------------- | :-------------------------------------------- |\n| `-p`, `--path`    | 自定义新文章的路径                            |\n| `-r`, `--replace` | 如果存在同名文章，将其替换                    |\n| `-s`, `--slug`    | 文章的 Slug，作为新文章的文件名和发布后的 URL |\n\n默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 `index.md` 文件。你可以使用 `--path` 参数来覆盖上述行为、自行决定文件的目录：\n\n```\nhexo new page --path about/me \"About me\"\n```\n\n以上命令会创建一个 `source/about/me.md` 文件，同时 Front Matter 中的 title 为 `\"About me\"`\n\n注意！title 是必须指定的！如果你这么做并不能达到你的目的：\n\n```\nhexo new page --path about/me\n```\n\n此时 Hexo 会创建 `source/_posts/about/me.md`，同时 `me.md` 的 Front Matter 中的 title 为 `\"page\"`。这是因为在上述命令中，hexo-cli 将 `page` 视为指定文章的标题、并采用默认的 `layout`。\n\n## generate\n\n```\n$ hexo generate\n```\n\n生成静态文件。\n\n| 选项                  | 描述                                                         |\n| :-------------------- | :----------------------------------------------------------- |\n| `-d`, `--deploy`      | 文件生成后立即部署网站                                       |\n| `-w`, `--watch`       | 监视文件变动                                                 |\n| `-b`, `--bail`        | 生成过程中如果发生任何未处理的异常则抛出异常                 |\n| `-f`, `--force`       | 强制重新生成文件 Hexo 引入了差分机制，如果 `public` 目录存在，那么 `hexo g` 只会重新生成改动的文件。 使用该参数的效果接近 `hexo clean && hexo generate` |\n| `-c`, `--concurrency` | 最大同时生成文件的数量，默认无限制                           |\n\n该命令可以简写为\n\n```\n$ hexo g\n```\n\n## publish\n\n```\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n## server\n\n```\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n| 选项             | 描述                           |\n| :--------------- | :----------------------------- |\n| `-p`, `--port`   | 重设端口                       |\n| `-s`, `--static` | 只使用静态文件                 |\n| `-l`, `--log`    | 启动日记记录，使用覆盖记录格式 |\n\n## deploy\n\n```\n$ hexo deploy\n```\n\n部署网站。\n\n| 参数               | 描述                     |\n| :----------------- | :----------------------- |\n| `-g`, `--generate` | 部署之前预先生成静态文件 |\n\n该命令可以简写为：\n\n```\n$ hexo d\n```\n\n## render\n\n```\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n| 参数             | 描述         |\n| :--------------- | :----------- |\n| `-o`, `--output` | 设置输出路径 |\n\n## migrate\n\n```\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](https://hexo.io/zh-cn/docs/migration)。\n\n## clean\n\n```\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n\n## list\n\n```\n$ hexo list <type>\n```\n\n列出网站资料。\n\n## version\n\n```\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n## 选项\n\n### 安全模式\n\n```\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n\n```\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n### 简洁模式\n\n```\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n### 自定义配置文件的路径\n\n```\n# 使用 custom.yml 代替默认的 _config.yml\n$ hexo server --config custom.yml\n\n# 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高\n$ hexo generate --config custom.yml,custom2.json,custom3.yml\n```\n\n自定义配置文件的路径，指定这个参数后将不再使用默认的 `_config.yml`。\n你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：\n\n```\n# 使用 custom.yml 代替默认的 _config.yml\n$ hexo server --config custom.yml\n\n# 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json\n$ hexo generate --config custom.yml,custom2.json,custom3.yml\n```\n\n当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 `_multiconfig.yml`。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。\n\n### 显示草稿\n\n```\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n\n```\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。","source":"_posts/hexo/hexo命令.md","raw":"---\ntitle: Hexo搭建博客：Hexo常用命令\ncategories: 博客\ntags:\n  - Hexo\nindex_img: /img/hexo.jpeg\nabbrlink: 2628717197\n---\n\n> 本文章将讲解在搭建Hexo博客过程中的常用命令及命令的参数说明\n\n<!-- more -->\n\n## init\n\n```shell\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\nThis command is a shortcut that runs the following steps:\n\n1. Git clone [hexo-starter](https://github.com/hexojs/hexo-starter) including [hexo-theme-landscape](https://github.com/hexojs/hexo-theme-landscape) into the current directory or a target folder if specified.\n2. Install dependencies using a package manager: [Yarn 1](https://classic.yarnpkg.com/lang/en/), [pnpm](https://pnpm.js.org/) or [npm](https://docs.npmjs.com/cli/install), whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with [Node.js](https://hexo.io/docs/#Install-Node-js) by default.\n\n## new\n\n```xml\n$ hexo new [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](https://hexo.io/zh-cn/docs/configuration) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n```\n$ hexo new \"post title with whitespace\"\n```\n\n| 参数              | 描述                                          |\n| :---------------- | :-------------------------------------------- |\n| `-p`, `--path`    | 自定义新文章的路径                            |\n| `-r`, `--replace` | 如果存在同名文章，将其替换                    |\n| `-s`, `--slug`    | 文章的 Slug，作为新文章的文件名和发布后的 URL |\n\n默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 `index.md` 文件。你可以使用 `--path` 参数来覆盖上述行为、自行决定文件的目录：\n\n```\nhexo new page --path about/me \"About me\"\n```\n\n以上命令会创建一个 `source/about/me.md` 文件，同时 Front Matter 中的 title 为 `\"About me\"`\n\n注意！title 是必须指定的！如果你这么做并不能达到你的目的：\n\n```\nhexo new page --path about/me\n```\n\n此时 Hexo 会创建 `source/_posts/about/me.md`，同时 `me.md` 的 Front Matter 中的 title 为 `\"page\"`。这是因为在上述命令中，hexo-cli 将 `page` 视为指定文章的标题、并采用默认的 `layout`。\n\n## generate\n\n```\n$ hexo generate\n```\n\n生成静态文件。\n\n| 选项                  | 描述                                                         |\n| :-------------------- | :----------------------------------------------------------- |\n| `-d`, `--deploy`      | 文件生成后立即部署网站                                       |\n| `-w`, `--watch`       | 监视文件变动                                                 |\n| `-b`, `--bail`        | 生成过程中如果发生任何未处理的异常则抛出异常                 |\n| `-f`, `--force`       | 强制重新生成文件 Hexo 引入了差分机制，如果 `public` 目录存在，那么 `hexo g` 只会重新生成改动的文件。 使用该参数的效果接近 `hexo clean && hexo generate` |\n| `-c`, `--concurrency` | 最大同时生成文件的数量，默认无限制                           |\n\n该命令可以简写为\n\n```\n$ hexo g\n```\n\n## publish\n\n```\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n## server\n\n```\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n| 选项             | 描述                           |\n| :--------------- | :----------------------------- |\n| `-p`, `--port`   | 重设端口                       |\n| `-s`, `--static` | 只使用静态文件                 |\n| `-l`, `--log`    | 启动日记记录，使用覆盖记录格式 |\n\n## deploy\n\n```\n$ hexo deploy\n```\n\n部署网站。\n\n| 参数               | 描述                     |\n| :----------------- | :----------------------- |\n| `-g`, `--generate` | 部署之前预先生成静态文件 |\n\n该命令可以简写为：\n\n```\n$ hexo d\n```\n\n## render\n\n```\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n| 参数             | 描述         |\n| :--------------- | :----------- |\n| `-o`, `--output` | 设置输出路径 |\n\n## migrate\n\n```\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](https://hexo.io/zh-cn/docs/migration)。\n\n## clean\n\n```\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n\n## list\n\n```\n$ hexo list <type>\n```\n\n列出网站资料。\n\n## version\n\n```\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n## 选项\n\n### 安全模式\n\n```\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n\n```\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n### 简洁模式\n\n```\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n### 自定义配置文件的路径\n\n```\n# 使用 custom.yml 代替默认的 _config.yml\n$ hexo server --config custom.yml\n\n# 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高\n$ hexo generate --config custom.yml,custom2.json,custom3.yml\n```\n\n自定义配置文件的路径，指定这个参数后将不再使用默认的 `_config.yml`。\n你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：\n\n```\n# 使用 custom.yml 代替默认的 _config.yml\n$ hexo server --config custom.yml\n\n# 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json\n$ hexo generate --config custom.yml,custom2.json,custom3.yml\n```\n\n当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 `_multiconfig.yml`。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。\n\n### 显示草稿\n\n```\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n\n```\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。","slug":"hexo/hexo命令","published":1,"date":"2020-12-18T15:04:43.617Z","updated":"2020-12-18T15:04:43.617Z","_id":"ckitw8kmy000u88cderck1g5r","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本文章将讲解在搭建Hexo博客过程中的常用命令及命令的参数说明</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> hexo init [folder]</span><br></code></pre></td></tr></table></figure>\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<p>This command is a shortcut that runs the following steps:</p>\n<ol>\n<li>Git clone <a href=\"https://github.com/hexojs/hexo-starter\">hexo-starter</a> including <a href=\"https://github.com/hexojs/hexo-theme-landscape\">hexo-theme-landscape</a> into the current directory or a target folder if specified.</li>\n<li>Install dependencies using a package manager: <a href=\"https://classic.yarnpkg.com/lang/en/\">Yarn 1</a>, <a href=\"https://pnpm.js.org/\">pnpm</a> or <a href=\"https://docs.npmjs.com/cli/install\">npm</a>, whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with <a href=\"https://hexo.io/docs/#Install-Node-js\">Node.js</a> by default.</li>\n</ol>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">$ hexo new [layout] <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href=\"https://hexo.io/zh-cn/docs/configuration\">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo new &quot;post title with whitespace&quot;<br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-p</code>, <code>--path</code></td>\n<td align=\"left\">自定义新文章的路径</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-r</code>, <code>--replace</code></td>\n<td align=\"left\">如果存在同名文章，将其替换</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--slug</code></td>\n<td align=\"left\">文章的 Slug，作为新文章的文件名和发布后的 URL</td>\n</tr>\n</tbody></table>\n<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">hexo new page --path about&#x2F;me &quot;About me&quot;<br></code></pre></td></tr></table></figure>\n<p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p>\n<p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">hexo new page --path about&#x2F;me<br></code></pre></td></tr></table></figure>\n<p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p>\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo generate<br></code></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-d</code>, <code>--deploy</code></td>\n<td align=\"left\">文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-w</code>, <code>--watch</code></td>\n<td align=\"left\">监视文件变动</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-b</code>, <code>--bail</code></td>\n<td align=\"left\">生成过程中如果发生任何未处理的异常则抛出异常</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-f</code>, <code>--force</code></td>\n<td align=\"left\">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>-c</code>, <code>--concurrency</code></td>\n<td align=\"left\">最大同时生成文件的数量，默认无限制</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo g<br></code></pre></td></tr></table></figure>\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo publish [layout] &lt;filename&gt;<br></code></pre></td></tr></table></figure>\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo server<br></code></pre></td></tr></table></figure>\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-p</code>, <code>--port</code></td>\n<td align=\"left\">重设端口</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--static</code></td>\n<td align=\"left\">只使用静态文件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-l</code>, <code>--log</code></td>\n<td align=\"left\">启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody></table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-g</code>, <code>--generate</code></td>\n<td align=\"left\">部署之前预先生成静态文件</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo d<br></code></pre></td></tr></table></figure>\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure>\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-o</code>, <code>--output</code></td>\n<td align=\"left\">设置输出路径</td>\n</tr>\n</tbody></table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo migrate &lt;type&gt;<br></code></pre></td></tr></table></figure>\n<p>从其他博客系统 <a href=\"https://hexo.io/zh-cn/docs/migration\">迁移内容</a>。</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo clean<br></code></pre></td></tr></table></figure>\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo list &lt;type&gt;<br></code></pre></td></tr></table></figure>\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo version<br></code></pre></td></tr></table></figure>\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo --safe<br></code></pre></td></tr></table></figure>\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo --debug<br></code></pre></td></tr></table></figure>\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo --silent<br></code></pre></td></tr></table></figure>\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># 使用 custom.yml 代替默认的 _config.yml<br>$ hexo server --config custom.yml<br><br># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高<br>$ hexo generate --config custom.yml,custom2.json,custom3.yml<br></code></pre></td></tr></table></figure>\n<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># 使用 custom.yml 代替默认的 _config.yml<br>$ hexo server --config custom.yml<br><br># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json<br>$ hexo generate --config custom.yml,custom2.json,custom3.yml<br></code></pre></td></tr></table></figure>\n<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo --draft<br></code></pre></td></tr></table></figure>\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd<br></code></pre></td></tr></table></figure>\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"<blockquote>\n<p>本文章将讲解在搭建Hexo博客过程中的常用命令及命令的参数说明</p>\n</blockquote>","more":"<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> hexo init [folder]</span><br></code></pre></td></tr></table></figure>\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<p>This command is a shortcut that runs the following steps:</p>\n<ol>\n<li>Git clone <a href=\"https://github.com/hexojs/hexo-starter\">hexo-starter</a> including <a href=\"https://github.com/hexojs/hexo-theme-landscape\">hexo-theme-landscape</a> into the current directory or a target folder if specified.</li>\n<li>Install dependencies using a package manager: <a href=\"https://classic.yarnpkg.com/lang/en/\">Yarn 1</a>, <a href=\"https://pnpm.js.org/\">pnpm</a> or <a href=\"https://docs.npmjs.com/cli/install\">npm</a>, whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with <a href=\"https://hexo.io/docs/#Install-Node-js\">Node.js</a> by default.</li>\n</ol>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">$ hexo new [layout] <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href=\"https://hexo.io/zh-cn/docs/configuration\">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo new &quot;post title with whitespace&quot;<br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-p</code>, <code>--path</code></td>\n<td align=\"left\">自定义新文章的路径</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-r</code>, <code>--replace</code></td>\n<td align=\"left\">如果存在同名文章，将其替换</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--slug</code></td>\n<td align=\"left\">文章的 Slug，作为新文章的文件名和发布后的 URL</td>\n</tr>\n</tbody></table>\n<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">hexo new page --path about&#x2F;me &quot;About me&quot;<br></code></pre></td></tr></table></figure>\n<p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p>\n<p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">hexo new page --path about&#x2F;me<br></code></pre></td></tr></table></figure>\n<p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p>\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo generate<br></code></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-d</code>, <code>--deploy</code></td>\n<td align=\"left\">文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-w</code>, <code>--watch</code></td>\n<td align=\"left\">监视文件变动</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-b</code>, <code>--bail</code></td>\n<td align=\"left\">生成过程中如果发生任何未处理的异常则抛出异常</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-f</code>, <code>--force</code></td>\n<td align=\"left\">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>-c</code>, <code>--concurrency</code></td>\n<td align=\"left\">最大同时生成文件的数量，默认无限制</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo g<br></code></pre></td></tr></table></figure>\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo publish [layout] &lt;filename&gt;<br></code></pre></td></tr></table></figure>\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo server<br></code></pre></td></tr></table></figure>\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-p</code>, <code>--port</code></td>\n<td align=\"left\">重设端口</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--static</code></td>\n<td align=\"left\">只使用静态文件</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-l</code>, <code>--log</code></td>\n<td align=\"left\">启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody></table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-g</code>, <code>--generate</code></td>\n<td align=\"left\">部署之前预先生成静态文件</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo d<br></code></pre></td></tr></table></figure>\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure>\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>-o</code>, <code>--output</code></td>\n<td align=\"left\">设置输出路径</td>\n</tr>\n</tbody></table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo migrate &lt;type&gt;<br></code></pre></td></tr></table></figure>\n<p>从其他博客系统 <a href=\"https://hexo.io/zh-cn/docs/migration\">迁移内容</a>。</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo clean<br></code></pre></td></tr></table></figure>\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo list &lt;type&gt;<br></code></pre></td></tr></table></figure>\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo version<br></code></pre></td></tr></table></figure>\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo --safe<br></code></pre></td></tr></table></figure>\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo --debug<br></code></pre></td></tr></table></figure>\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo --silent<br></code></pre></td></tr></table></figure>\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># 使用 custom.yml 代替默认的 _config.yml<br>$ hexo server --config custom.yml<br><br># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高<br>$ hexo generate --config custom.yml,custom2.json,custom3.yml<br></code></pre></td></tr></table></figure>\n<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># 使用 custom.yml 代替默认的 _config.yml<br>$ hexo server --config custom.yml<br><br># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json<br>$ hexo generate --config custom.yml,custom2.json,custom3.yml<br></code></pre></td></tr></table></figure>\n<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo --draft<br></code></pre></td></tr></table></figure>\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd<br></code></pre></td></tr></table></figure>\n<p>自定义当前工作目录（Current working directory）的路径。</p>"},{"title":"Hexo搭建博客：基于Github Action工作流自动部署Hexo","index_img":"/img/hexo-github-action.jpg","abbrlink":2231850037,"date":"2020-04-16T03:54:14.000Z","_content":"\n# Hexo搭建\n这段就pass了，只要这篇主要讲解Github Action部署\n\n# 创建github ssh 私钥和公钥\n在本地运行如下命令生成id_rsa和id_rsa.pub文件，一路回车，不要输入密码！！！不要输入密码！！！不要输入密码！！！（被这个坑的我想哭T_T，一直验证不通过）\n```cmd\n$ ssh-keygen -t rsa -C \"tanxinzheng@139.com\" #此处修改为你github的注册邮箱\n```\n\n# Github设置\n- 将id_rsa私钥放入项目的settings/secures配置中\n- 将id_rsa.pub公钥填入账号的settings/SSH keys配置中\n\n# 创建Github Action工作流脚本\n\n在项目该目录下创建~./.github/workflows/main.yml文件，将下面的配置信息填入，并修改自己的信息即可\n\n```yml\nname: CI\n# 触发执行的操作和分支名称\non:\n  push:\n    branches:\n      - generate-source\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v1\n        with:\n          # 分支号\n          ref: generate-source\n      - name: Use Node.js ${{ matrix.node_version }}\n        uses: actions/setup-node@v1\n        with:\n          version: ${{ matrix.node_version }}\n      - name: Setup hexo\n        env:\n          ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_PRI }}\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.email \"tanxinzheng@139.com\"\n          git config --global user.name \"tanxinzheng\"\n          npm install hexo-cli -g\n          npm install\n      - name: Hexo deploy\n        run: |\n          hexo clean\n          hexo d\n```\n\n# Github Action执行部署\n在Github Action页面执行即可，push之后会自动部署。","source":"_posts/hexo/基于Github Action工作流自动部署Hexo.md","raw":"---\ntitle: Hexo搭建博客：基于Github Action工作流自动部署Hexo\ncategories: \n\t- \n\t- 博客\ntags:\n  - Hexo\n  - Github\nindex_img: /img/hexo-github-action.jpg\nabbrlink: 2231850037\ndate: 2020-04-16 11:54:14\n---\n\n# Hexo搭建\n这段就pass了，只要这篇主要讲解Github Action部署\n\n# 创建github ssh 私钥和公钥\n在本地运行如下命令生成id_rsa和id_rsa.pub文件，一路回车，不要输入密码！！！不要输入密码！！！不要输入密码！！！（被这个坑的我想哭T_T，一直验证不通过）\n```cmd\n$ ssh-keygen -t rsa -C \"tanxinzheng@139.com\" #此处修改为你github的注册邮箱\n```\n\n# Github设置\n- 将id_rsa私钥放入项目的settings/secures配置中\n- 将id_rsa.pub公钥填入账号的settings/SSH keys配置中\n\n# 创建Github Action工作流脚本\n\n在项目该目录下创建~./.github/workflows/main.yml文件，将下面的配置信息填入，并修改自己的信息即可\n\n```yml\nname: CI\n# 触发执行的操作和分支名称\non:\n  push:\n    branches:\n      - generate-source\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v1\n        with:\n          # 分支号\n          ref: generate-source\n      - name: Use Node.js ${{ matrix.node_version }}\n        uses: actions/setup-node@v1\n        with:\n          version: ${{ matrix.node_version }}\n      - name: Setup hexo\n        env:\n          ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_PRI }}\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.email \"tanxinzheng@139.com\"\n          git config --global user.name \"tanxinzheng\"\n          npm install hexo-cli -g\n          npm install\n      - name: Hexo deploy\n        run: |\n          hexo clean\n          hexo d\n```\n\n# Github Action执行部署\n在Github Action页面执行即可，push之后会自动部署。","slug":"hexo/基于Github Action工作流自动部署Hexo","published":1,"updated":"2020-12-19T06:21:35.491Z","_id":"ckitw8kmy000x88cd1eby9kkr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Hexo搭建\"><a href=\"#Hexo搭建\" class=\"headerlink\" title=\"Hexo搭建\"></a>Hexo搭建</h1><p>这段就pass了，只要这篇主要讲解Github Action部署</p>\n<h1 id=\"创建github-ssh-私钥和公钥\"><a href=\"#创建github-ssh-私钥和公钥\" class=\"headerlink\" title=\"创建github ssh 私钥和公钥\"></a>创建github ssh 私钥和公钥</h1><p>在本地运行如下命令生成id_rsa和id_rsa.pub文件，一路回车，不要输入密码！！！不要输入密码！！！不要输入密码！！！（被这个坑的我想哭T_T，一直验证不通过）</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">$ ssh-keygen -t rsa -C &quot;tanxinzheng@<span class=\"hljs-number\">139</span>.com&quot; #此处修改为你github的注册邮箱<br></code></pre></td></tr></table></figure>\n<h1 id=\"Github设置\"><a href=\"#Github设置\" class=\"headerlink\" title=\"Github设置\"></a>Github设置</h1><ul>\n<li>将id_rsa私钥放入项目的settings/secures配置中</li>\n<li>将id_rsa.pub公钥填入账号的settings/SSH keys配置中</li>\n</ul>\n<h1 id=\"创建Github-Action工作流脚本\"><a href=\"#创建Github-Action工作流脚本\" class=\"headerlink\" title=\"创建Github Action工作流脚本\"></a>创建Github Action工作流脚本</h1><p>在项目该目录下创建~./.github/workflows/main.yml文件，将下面的配置信息填入，并修改自己的信息即可</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">CI</span><br><span class=\"hljs-comment\"># 触发执行的操作和分支名称</span><br><span class=\"hljs-attr\">on:</span><br>  <span class=\"hljs-attr\">push:</span><br>    <span class=\"hljs-attr\">branches:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">generate-source</span><br><span class=\"hljs-attr\">jobs:</span><br>  <span class=\"hljs-attr\">build:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span> <span class=\"hljs-string\">source</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v1</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-comment\"># 分支号</span><br>          <span class=\"hljs-attr\">ref:</span> <span class=\"hljs-string\">generate-source</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Use</span> <span class=\"hljs-string\">Node.js</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">matrix.node_version</span> <span class=\"hljs-string\">&#125;&#125;</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v1</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">matrix.node_version</span> <span class=\"hljs-string\">&#125;&#125;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Setup</span> <span class=\"hljs-string\">hexo</span><br>        <span class=\"hljs-attr\">env:</span><br>          <span class=\"hljs-attr\">ACTION_DEPLOY_KEY:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HEXO_DEPLOY_PRI</span> <span class=\"hljs-string\">&#125;&#125;</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br>          <span class=\"hljs-string\">mkdir</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">~/.ssh/</span><br>          <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$ACTION_DEPLOY_KEY&quot;</span> <span class=\"hljs-string\">&gt;</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span><br>          <span class=\"hljs-string\">chmod</span> <span class=\"hljs-number\">600</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span><br>          <span class=\"hljs-string\">ssh-keyscan</span> <span class=\"hljs-string\">github.com</span> <span class=\"hljs-string\">&gt;&gt;</span> <span class=\"hljs-string\">~/.ssh/known_hosts</span><br>          <span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">--global</span> <span class=\"hljs-string\">user.email</span> <span class=\"hljs-string\">&quot;tanxinzheng@139.com&quot;</span><br>          <span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">--global</span> <span class=\"hljs-string\">user.name</span> <span class=\"hljs-string\">&quot;tanxinzheng&quot;</span><br>          <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span> <span class=\"hljs-string\">hexo-cli</span> <span class=\"hljs-string\">-g</span><br>          <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Hexo</span> <span class=\"hljs-string\">deploy</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br>          <span class=\"hljs-string\">hexo</span> <span class=\"hljs-string\">clean</span><br>          <span class=\"hljs-string\">hexo</span> <span class=\"hljs-string\">d</span><br></code></pre></td></tr></table></figure>\n<h1 id=\"Github-Action执行部署\"><a href=\"#Github-Action执行部署\" class=\"headerlink\" title=\"Github Action执行部署\"></a>Github Action执行部署</h1><p>在Github Action页面执行即可，push之后会自动部署。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"Hexo搭建\"><a href=\"#Hexo搭建\" class=\"headerlink\" title=\"Hexo搭建\"></a>Hexo搭建</h1><p>这段就pass了，只要这篇主要讲解Github Action部署</p>\n<h1 id=\"创建github-ssh-私钥和公钥\"><a href=\"#创建github-ssh-私钥和公钥\" class=\"headerlink\" title=\"创建github ssh 私钥和公钥\"></a>创建github ssh 私钥和公钥</h1><p>在本地运行如下命令生成id_rsa和id_rsa.pub文件，一路回车，不要输入密码！！！不要输入密码！！！不要输入密码！！！（被这个坑的我想哭T_T，一直验证不通过）</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">$ ssh-keygen -t rsa -C &quot;tanxinzheng@<span class=\"hljs-number\">139</span>.com&quot; #此处修改为你github的注册邮箱<br></code></pre></td></tr></table></figure>\n<h1 id=\"Github设置\"><a href=\"#Github设置\" class=\"headerlink\" title=\"Github设置\"></a>Github设置</h1><ul>\n<li>将id_rsa私钥放入项目的settings/secures配置中</li>\n<li>将id_rsa.pub公钥填入账号的settings/SSH keys配置中</li>\n</ul>\n<h1 id=\"创建Github-Action工作流脚本\"><a href=\"#创建Github-Action工作流脚本\" class=\"headerlink\" title=\"创建Github Action工作流脚本\"></a>创建Github Action工作流脚本</h1><p>在项目该目录下创建~./.github/workflows/main.yml文件，将下面的配置信息填入，并修改自己的信息即可</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">CI</span><br><span class=\"hljs-comment\"># 触发执行的操作和分支名称</span><br><span class=\"hljs-attr\">on:</span><br>  <span class=\"hljs-attr\">push:</span><br>    <span class=\"hljs-attr\">branches:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">generate-source</span><br><span class=\"hljs-attr\">jobs:</span><br>  <span class=\"hljs-attr\">build:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span> <span class=\"hljs-string\">source</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v1</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-comment\"># 分支号</span><br>          <span class=\"hljs-attr\">ref:</span> <span class=\"hljs-string\">generate-source</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Use</span> <span class=\"hljs-string\">Node.js</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">matrix.node_version</span> <span class=\"hljs-string\">&#125;&#125;</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v1</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">matrix.node_version</span> <span class=\"hljs-string\">&#125;&#125;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Setup</span> <span class=\"hljs-string\">hexo</span><br>        <span class=\"hljs-attr\">env:</span><br>          <span class=\"hljs-attr\">ACTION_DEPLOY_KEY:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HEXO_DEPLOY_PRI</span> <span class=\"hljs-string\">&#125;&#125;</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br>          <span class=\"hljs-string\">mkdir</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">~/.ssh/</span><br>          <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$ACTION_DEPLOY_KEY&quot;</span> <span class=\"hljs-string\">&gt;</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span><br>          <span class=\"hljs-string\">chmod</span> <span class=\"hljs-number\">600</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span><br>          <span class=\"hljs-string\">ssh-keyscan</span> <span class=\"hljs-string\">github.com</span> <span class=\"hljs-string\">&gt;&gt;</span> <span class=\"hljs-string\">~/.ssh/known_hosts</span><br>          <span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">--global</span> <span class=\"hljs-string\">user.email</span> <span class=\"hljs-string\">&quot;tanxinzheng@139.com&quot;</span><br>          <span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">--global</span> <span class=\"hljs-string\">user.name</span> <span class=\"hljs-string\">&quot;tanxinzheng&quot;</span><br>          <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span> <span class=\"hljs-string\">hexo-cli</span> <span class=\"hljs-string\">-g</span><br>          <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Hexo</span> <span class=\"hljs-string\">deploy</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br>          <span class=\"hljs-string\">hexo</span> <span class=\"hljs-string\">clean</span><br>          <span class=\"hljs-string\">hexo</span> <span class=\"hljs-string\">d</span><br></code></pre></td></tr></table></figure>\n<h1 id=\"Github-Action执行部署\"><a href=\"#Github-Action执行部署\" class=\"headerlink\" title=\"Github Action执行部署\"></a>Github Action执行部署</h1><p>在Github Action页面执行即可，push之后会自动部署。</p>\n"},{"title":"Java【基础篇之HashMap及hashcode】","abbrlink":2936205123,"date":"2019-10-10T02:12:00.000Z","index_img":"/img/java.jpeg","_content":"## 一、hashcode是什么\n要理解hashcode首先要理解hash表这个概念\n\n1. 哈希表\nhash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的hashcode是什么记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。\n简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。\n具有快速查找和插入操作的优点\n2. hashcode\nhashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置\n每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode\n## 二、hashcode的作用\n    HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的\n\n    对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。\n\n   在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题\n\n   如何判别在集合中是否已经存在该对象了？\n\n   首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。\n\n    这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。\n\n            所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。\n\n## 三、 hashCode()和equals()\nJava的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)\n\n1. equals方法\nObject类中equals()方法实现如下\n\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。\n\n虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定\n\n自反性：x.equals(x)必须返回true。\n对称性：x.equals(y)与y.equals(x)的返回值必须相等。\n传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。\n一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。\n非null：x不是null，y为null，则x.equals(y)必须为false。\n2. hashCode 方法\nObject类中hashCode()方法的声明如下：\n\npublic native int hashCode();\n可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。\n\n与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：\n\n（1）hashCode()在哈希表中起作用，如java.util.HashMap。\n（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。\n（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。\n（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。\n重写hashcode()的原则\n\n（1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。\n（2）hashCode()方法不能太过简单，否则哈希冲突过多。\n（3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能\nhashCode()重写方法\n\n《Effective Java》中提出了一种简单通用的hashCode算法：\n\n初始化一个整形变量，为此变量赋予一个非零的常数值，比如int result = 17;\n\n选取equals方法中用于比较的所有域（之所以只选择equals()中使用的域，是为了保证上述原则的第1条），然后针对每个域的属性进行计算：\n\n复制代码\n(1) 如果是boolean值，则计算f ? 1:0\n(2) 如果是bytecharshortint,则计算(int)f\n(3) 如果是long值，则计算(int)(f ^ (f >>> 32))\n(4) 如果是float值，则计算Float.floatToIntBits(f)\n(5) 如果是double值，则计算Double.doubleToLongBits(f)，然后返回的结果是long,再用规则(3)去处理long,得到int\n(6) 如果是对象应用，如果equals方法中采取递归调用的比较方式，那么hashCode中同样采取递归调用hashCode的方式。否则需要为这个域计算一个范式，比如当这个域的值为null的时候，那么hashCode 值为0\n(7) 如果是数组，那么需要为每个元素当做单独的域来处理。java.util.Arrays.hashCode方法包含了8种基本类型数组和引用数组的hashCode计算，算法同上。 \n复制代码\n最后，把每个域的散列码合并到对象的哈希码中。\n\n## 四、HashMap中的hash()函数\nHashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法\n```\nstatic final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n这段代码类似作用是为了增加hashcode的随机性\n\nkey.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。\n\nhashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个\"与\"操作\n\nstatic int indexFor(int h, int length) { return h & (length-1);}\n这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h & (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。\n  01111010 00111100 00100101\n& 00000000 00000000 00001111\n----------------------------------\n  00000000 00000000 00000101\n  //高位全部归零，只保留末四位 \nbut 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。\n\n这时候 “hash”函数作用就出来了\n\n右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。\n设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。\n根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。\nhashMap中 MAXIMUM_CAPACITY = 1 << 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了）","source":"_posts/java/hashcode.md","raw":"---\ntitle: Java【基础篇之HashMap及hashcode】\ntags:\n  - Java\nabbrlink: 2936205123\ndate: 2019-10-10 10:12:00\nindex_img: /img/java.jpeg\n---\n## 一、hashcode是什么\n要理解hashcode首先要理解hash表这个概念\n\n1. 哈希表\nhash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的hashcode是什么记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。\n简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。\n具有快速查找和插入操作的优点\n2. hashcode\nhashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置\n每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode\n## 二、hashcode的作用\n    HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的\n\n    对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。\n\n   在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题\n\n   如何判别在集合中是否已经存在该对象了？\n\n   首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。\n\n    这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。\n\n            所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。\n\n## 三、 hashCode()和equals()\nJava的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)\n\n1. equals方法\nObject类中equals()方法实现如下\n\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。\n\n虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定\n\n自反性：x.equals(x)必须返回true。\n对称性：x.equals(y)与y.equals(x)的返回值必须相等。\n传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。\n一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。\n非null：x不是null，y为null，则x.equals(y)必须为false。\n2. hashCode 方法\nObject类中hashCode()方法的声明如下：\n\npublic native int hashCode();\n可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。\n\n与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：\n\n（1）hashCode()在哈希表中起作用，如java.util.HashMap。\n（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。\n（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。\n（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。\n重写hashcode()的原则\n\n（1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。\n（2）hashCode()方法不能太过简单，否则哈希冲突过多。\n（3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能\nhashCode()重写方法\n\n《Effective Java》中提出了一种简单通用的hashCode算法：\n\n初始化一个整形变量，为此变量赋予一个非零的常数值，比如int result = 17;\n\n选取equals方法中用于比较的所有域（之所以只选择equals()中使用的域，是为了保证上述原则的第1条），然后针对每个域的属性进行计算：\n\n复制代码\n(1) 如果是boolean值，则计算f ? 1:0\n(2) 如果是bytecharshortint,则计算(int)f\n(3) 如果是long值，则计算(int)(f ^ (f >>> 32))\n(4) 如果是float值，则计算Float.floatToIntBits(f)\n(5) 如果是double值，则计算Double.doubleToLongBits(f)，然后返回的结果是long,再用规则(3)去处理long,得到int\n(6) 如果是对象应用，如果equals方法中采取递归调用的比较方式，那么hashCode中同样采取递归调用hashCode的方式。否则需要为这个域计算一个范式，比如当这个域的值为null的时候，那么hashCode 值为0\n(7) 如果是数组，那么需要为每个元素当做单独的域来处理。java.util.Arrays.hashCode方法包含了8种基本类型数组和引用数组的hashCode计算，算法同上。 \n复制代码\n最后，把每个域的散列码合并到对象的哈希码中。\n\n## 四、HashMap中的hash()函数\nHashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法\n```\nstatic final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n这段代码类似作用是为了增加hashcode的随机性\n\nkey.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。\n\nhashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个\"与\"操作\n\nstatic int indexFor(int h, int length) { return h & (length-1);}\n这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h & (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。\n  01111010 00111100 00100101\n& 00000000 00000000 00001111\n----------------------------------\n  00000000 00000000 00000101\n  //高位全部归零，只保留末四位 \nbut 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。\n\n这时候 “hash”函数作用就出来了\n\n右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。\n设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。\n根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。\nhashMap中 MAXIMUM_CAPACITY = 1 << 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了）","slug":"java/hashcode","published":1,"updated":"2020-12-18T15:04:43.618Z","_id":"ckitw8kmz001088cdaxuq25b4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、hashcode是什么\"><a href=\"#一、hashcode是什么\" class=\"headerlink\" title=\"一、hashcode是什么\"></a>一、hashcode是什么</h2><p>要理解hashcode首先要理解hash表这个概念</p>\n<ol>\n<li><p>哈希表<br>hash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的hashcode是什么记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。<br>简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。<br>具有快速查找和插入操作的优点</p>\n</li>\n<li><p>hashcode<br>hashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置<br>每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode</p>\n<h2 id=\"二、hashcode的作用\"><a href=\"#二、hashcode的作用\" class=\"headerlink\" title=\"二、hashcode的作用\"></a>二、hashcode的作用</h2><p> HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的</p>\n<p> 对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。</p>\n<p>在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题</p>\n<p>如何判别在集合中是否已经存在该对象了？</p>\n<p>首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。</p>\n<p> 这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。</p>\n<pre><code>所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。</code></pre></li>\n</ol>\n<h2 id=\"三、-hashCode-和equals\"><a href=\"#三、-hashCode-和equals\" class=\"headerlink\" title=\"三、 hashCode()和equals()\"></a>三、 hashCode()和equals()</h2><p>Java的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)</p>\n<ol>\n<li>equals方法<br>Object类中equals()方法实现如下</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">equals</span><span class=\"hljs-params\">(Object obj)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span> == obj);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。</p>\n<p>虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定</p>\n<p>自反性：x.equals(x)必须返回true。<br>对称性：x.equals(y)与y.equals(x)的返回值必须相等。<br>传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。<br>一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。<br>非null：x不是null，y为null，则x.equals(y)必须为false。<br>2. hashCode 方法<br>Object类中hashCode()方法的声明如下：</p>\n<p>public native int hashCode();<br>可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。</p>\n<p>与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：</p>\n<p>（1）hashCode()在哈希表中起作用，如java.util.HashMap。<br>（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。<br>（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。<br>（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。<br>重写hashcode()的原则</p>\n<p>（1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。<br>（2）hashCode()方法不能太过简单，否则哈希冲突过多。<br>（3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能<br>hashCode()重写方法</p>\n<p>《Effective Java》中提出了一种简单通用的hashCode算法：</p>\n<p>初始化一个整形变量，为此变量赋予一个非零的常数值，比如int result = 17;</p>\n<p>选取equals方法中用于比较的所有域（之所以只选择equals()中使用的域，是为了保证上述原则的第1条），然后针对每个域的属性进行计算：</p>\n<p>复制代码<br>(1) 如果是boolean值，则计算f ? 1:0<br>(2) 如果是bytecharshortint,则计算(int)f<br>(3) 如果是long值，则计算(int)(f ^ (f &gt;&gt;&gt; 32))<br>(4) 如果是float值，则计算Float.floatToIntBits(f)<br>(5) 如果是double值，则计算Double.doubleToLongBits(f)，然后返回的结果是long,再用规则(3)去处理long,得到int<br>(6) 如果是对象应用，如果equals方法中采取递归调用的比较方式，那么hashCode中同样采取递归调用hashCode的方式。否则需要为这个域计算一个范式，比如当这个域的值为null的时候，那么hashCode 值为0<br>(7) 如果是数组，那么需要为每个元素当做单独的域来处理。java.util.Arrays.hashCode方法包含了8种基本类型数组和引用数组的hashCode计算，算法同上。<br>复制代码<br>最后，把每个域的散列码合并到对象的哈希码中。</p>\n<h2 id=\"四、HashMap中的hash-函数\"><a href=\"#四、HashMap中的hash-函数\" class=\"headerlink\" title=\"四、HashMap中的hash()函数\"></a>四、HashMap中的hash()函数</h2><p>HashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">static final int hash(Object key) &#123;<br>    int h;<br>    return (key &#x3D;&#x3D; null) ? 0 : (h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这段代码类似作用是为了增加hashcode的随机性</p>\n<p>key.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。</p>\n<p>hashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个”与”操作</p>\n<p>static int indexFor(int h, int length) { return h &amp; (length-1);}<br>这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h &amp; (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。<br>  01111010 00111100 00100101<br>&amp; 00000000 00000000 00001111</p>\n<hr>\n<p>  00000000 00000000 00000101<br>  //高位全部归零，只保留末四位<br>but 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。</p>\n<p>这时候 “hash”函数作用就出来了</p>\n<p>右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。<br>设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。<br>根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。<br>hashMap中 MAXIMUM_CAPACITY = 1 &lt;&lt; 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了）</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"一、hashcode是什么\"><a href=\"#一、hashcode是什么\" class=\"headerlink\" title=\"一、hashcode是什么\"></a>一、hashcode是什么</h2><p>要理解hashcode首先要理解hash表这个概念</p>\n<ol>\n<li><p>哈希表<br>hash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br>给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的hashcode是什么记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。<br>简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。<br>具有快速查找和插入操作的优点</p>\n</li>\n<li><p>hashcode<br>hashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置<br>每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode</p>\n<h2 id=\"二、hashcode的作用\"><a href=\"#二、hashcode的作用\" class=\"headerlink\" title=\"二、hashcode的作用\"></a>二、hashcode的作用</h2><p> HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的</p>\n<p> 对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。</p>\n<p>在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题</p>\n<p>如何判别在集合中是否已经存在该对象了？</p>\n<p>首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。</p>\n<p> 这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。</p>\n<pre><code>所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。</code></pre></li>\n</ol>\n<h2 id=\"三、-hashCode-和equals\"><a href=\"#三、-hashCode-和equals\" class=\"headerlink\" title=\"三、 hashCode()和equals()\"></a>三、 hashCode()和equals()</h2><p>Java的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)</p>\n<ol>\n<li>equals方法<br>Object类中equals()方法实现如下</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">equals</span><span class=\"hljs-params\">(Object obj)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span> == obj);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。</p>\n<p>虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定</p>\n<p>自反性：x.equals(x)必须返回true。<br>对称性：x.equals(y)与y.equals(x)的返回值必须相等。<br>传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。<br>一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。<br>非null：x不是null，y为null，则x.equals(y)必须为false。<br>2. hashCode 方法<br>Object类中hashCode()方法的声明如下：</p>\n<p>public native int hashCode();<br>可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。</p>\n<p>与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：</p>\n<p>（1）hashCode()在哈希表中起作用，如java.util.HashMap。<br>（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。<br>（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。<br>（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。<br>重写hashcode()的原则</p>\n<p>（1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。<br>（2）hashCode()方法不能太过简单，否则哈希冲突过多。<br>（3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能<br>hashCode()重写方法</p>\n<p>《Effective Java》中提出了一种简单通用的hashCode算法：</p>\n<p>初始化一个整形变量，为此变量赋予一个非零的常数值，比如int result = 17;</p>\n<p>选取equals方法中用于比较的所有域（之所以只选择equals()中使用的域，是为了保证上述原则的第1条），然后针对每个域的属性进行计算：</p>\n<p>复制代码<br>(1) 如果是boolean值，则计算f ? 1:0<br>(2) 如果是bytecharshortint,则计算(int)f<br>(3) 如果是long值，则计算(int)(f ^ (f &gt;&gt;&gt; 32))<br>(4) 如果是float值，则计算Float.floatToIntBits(f)<br>(5) 如果是double值，则计算Double.doubleToLongBits(f)，然后返回的结果是long,再用规则(3)去处理long,得到int<br>(6) 如果是对象应用，如果equals方法中采取递归调用的比较方式，那么hashCode中同样采取递归调用hashCode的方式。否则需要为这个域计算一个范式，比如当这个域的值为null的时候，那么hashCode 值为0<br>(7) 如果是数组，那么需要为每个元素当做单独的域来处理。java.util.Arrays.hashCode方法包含了8种基本类型数组和引用数组的hashCode计算，算法同上。<br>复制代码<br>最后，把每个域的散列码合并到对象的哈希码中。</p>\n<h2 id=\"四、HashMap中的hash-函数\"><a href=\"#四、HashMap中的hash-函数\" class=\"headerlink\" title=\"四、HashMap中的hash()函数\"></a>四、HashMap中的hash()函数</h2><p>HashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">static final int hash(Object key) &#123;<br>    int h;<br>    return (key &#x3D;&#x3D; null) ? 0 : (h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这段代码类似作用是为了增加hashcode的随机性</p>\n<p>key.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。</p>\n<p>hashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个”与”操作</p>\n<p>static int indexFor(int h, int length) { return h &amp; (length-1);}<br>这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h &amp; (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。<br>  01111010 00111100 00100101<br>&amp; 00000000 00000000 00001111</p>\n<hr>\n<p>  00000000 00000000 00000101<br>  //高位全部归零，只保留末四位<br>but 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。</p>\n<p>这时候 “hash”函数作用就出来了</p>\n<p>右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。<br>设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。<br>根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。<br>hashMap中 MAXIMUM_CAPACITY = 1 &lt;&lt; 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了）</p>\n"},{"title":"JVM【性能调优篇】","index_img":"/img/java.jpeg","abbrlink":3097382278,"date":"2016-10-16T03:54:14.000Z","_content":"\n前面我们学习了整个JVM系列，最终目标的不仅仅是了解JVM的基础知识，也是为了进行JVM性能调优做准备。这篇文章带领大家学习JVM性能调优的知识。\n\n### 性能调优\n性能调优包含多个层次，比如：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。\n\n架构调优和代码调优是JVM调优的基础，其中架构调优是对系统影响最大的。\n\n性能调优基本上按照以下步骤进行：明确优化目标、发现性能瓶颈、性能调优、通过监控及数据统计工具获得数据、确认是否达到目标。\n\n### 何时进行JVM调优\n遇到以下情况，就需要考虑进行JVM调优了：\n- Heap内存（老年代）持续上涨达到设置的最大内存值；\n- Full GC 次数频繁；\n- GC 停顿时间过长（超过1秒）；\n- 应用出现OutOfMemory 等内存异常；\n- 应用中有使用本地缓存且占用大量内存空间；\n- 系统吞吐量与响应性能不高或下降。\n\n### JVM调优的基本原则\nJVM调优是一个手段，但并不一定所有问题都可以通过JVM进行调优解决，因此，在进行JVM调优时，我们要遵循一些原则：\n\n- 大多数的Java应用不需要进行JVM优化；\n- 大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；\n- 上线之前，应先考虑将机器的JVM参数设置到最优；\n- 减少创建对象的数量（代码层面）；\n- 减少使用全局变量和大对象（代码层面）；\n- 优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；\n- 分析GC情况优化代码比优化JVM参数更好（代码层面）；\n\n通过以上原则，我们发现，其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。\n\n### JVM调优目标\n调优的最终目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。\njvm调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量。\n\n- 延迟：GC低停顿和GC低频率；\n- 低内存占用；\n- 高吞吐量;\n\n其中，任何一个属性性能的提高，几乎都是以牺牲其他属性性能的损为代价的，不可兼得。具体根据在业务中的重要性确定。\n\n### JVM调优量化目标\n下面展示了一些JVM调优的量化目标参考实例：\n\n- Heap 内存使用率 <= 70%;\n- Old generation内存使用率<= 70%;\n- avgpause <= 1秒;\n- Full gc 次数0 或 avg pause interval >= 24小时 ;\n\n注意：不同应用的JVM调优量化目标是不一样的。\n\n### JVM调优的步骤\n一般情况下，JVM调优可通过以下步骤进行：\n\n- 分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；\n- 确定JVM调优量化目标；\n- 确定JVM调优参数（根据历史JVM参数来调整）；\n- 依次调优内存、延迟、吞吐量等指标；\n- 对比观察调优前后的差异；\n- 不断的分析和调整，直到找到合适的JVM参数配置；\n- 找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。\n\n以上操作步骤中，某些步骤是需要多次不断迭代完成的。一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。\n\n### JVM参数\nJVM调优最重要的工具就是JVM参数了。先来了解一下JVM参数相关内容。\n\n-XX 参数被称为不稳定参数，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。如果此类参数设置合理将大大提高JVM的性能及稳定性。\n\n不稳定参数语法规则包含以下内容。\n\n    布尔类型参数值：\n    -XX:+<option> '+'表示启用该选项\n    -XX:-<option> '-'表示关闭该选项\n    数字类型参数值：\n    -XX:<option>=<number>给选项设置一个数字类型值，可跟随单位，例如：'m'或'M'表示兆字节;'k'或'K'千字节;'g'或'G'千兆字节。32K与32768是相同大小的。\n    字符串类型参数值\n    -XX:<option>=<string>给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。例如：-XX:HeapDumpPath=./dump.core\n\n\n### JVM参数解析及调优\n比如以下参数示例：\n\n    -Xmx4g –Xms4g –Xmn1200m –Xss512k -XX:NewRatio=4 -XX:SurvivorRatio=8 -XX:PermSize=100m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=15\n\n上面为Java7及以前版本的示例，在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。这在前面章节中已经讲到。\n\n参数解析：\n```\n-Xmx4g：堆内存最大值为4GB。\n-Xms4g：初始化堆内存大小为4GB。\n-Xmn1200m：设置年轻代大小为1200MB。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。\n-Xss512k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。\n-XX:NewRatio=4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5\n-XX:SurvivorRatio=8：设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1/10\n-XX:PermSize=100m：初始化永久代大小为100MB。\n-XX:MaxPermSize=256m：设置持久代大小为256MB。\n-XX:MaxTenuringThreshold=15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n```\n新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。\n\n可调优参数：\n```\n-Xms：初始化堆内存大小，默认为物理内存的1/64(小于1GB)。\n-Xmx：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。\n-Xmn：新生代大小，包括Eden区与2个Survivor区。\n-XX:SurvivorRatio=1：Eden区与一个Survivor区比值为1:1。\n-XX:MaxDirectMemorySize=1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。\n-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。\n-XX:CMSInitiatingOccupancyFraction=60：老年代内存回收阈值，默认值为68。\n-XX:ConcGCThreads=4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。\n-XX:ParallelGCThreads=8：新生代并行收集器的线程数。\n-XX:MaxTenuringThreshold=10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n-XX:CMSFullGCsBeforeCompaction=4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。\n-XX:CMSMaxAbortablePrecleanTime=500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。\n```\n> 注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。\n\n在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。\n\n### 内存优化示例\n当JVM运行稳定之后，触发了FullGC我们一般会拿到如下信息:\n\nimage\n以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。\n\n    java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n    永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久带空间占用。\n    新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n    老年代：2-3倍FullGC后的老年代空间占用。\n\n基于以上规则，则对参数定义如下：\n```\njava -Xms373m -Xmx373m -Xmn140m -XX:PermSize=5m -XX:MaxPermSize=5m\n```\n\n### 延迟优化示例\n对延迟性优化，首先需要了解延迟性需求及可调优的指标有哪些。\n\n- 应用程序可接受的平均停滞时间: 此时间与测量的Minor\n- GC持续时间进行比较。可接受的Minor GC频率：Minor\n- GC的频率与可容忍的值进行比较。\n- 可接受的最大停顿时间:最大停顿时间与最差情况下FullGC的持续时间进行比较。\n- 可接受的最大停顿发生的频率：基本就是FullGC的频率。\n\n其中，平均停滞时间和最大停顿时间，对用户体验最为重要。对于上面的指标，相关数据采集包括：MinorGC的持续时间、统计MinorGC的次数、FullGC的最差持续时间、最差情况下，FullGC的频率。\n\nimage\n如上图，Minor GC的平均持续时间0.069秒，MinorGC的频率为0.389秒一次。\n\n新生代空间越大，Minor GC的GC时间越长，频率越低。如果想减少其持续时长，就需要减少其空间大小。如果想减小其频率，就需要加大其空间大小。\n\n这里以减少了新生代空间10%的大小，来减小延迟时间。在此过程中，应该保持老年代和持代的大小不变化。调优后的参数如下变化:\n```\njava -Xms359m -Xmx359m -Xmn126m -XX:PermSize=5m -XX:MaxPermSize=5m\n```\n### 吞吐量调优\n吞吐量调优主要是基于应用程序的吞吐量要求而来的，应用程序应该有一个综合的吞吐指标，这个指标基于整个应用的需求和测试而衍生出来的。\n\n评估当前吞吐量和目标差距是否巨大，如果在20%左右，可以修改参数，加大内存，再次从头调试，如果巨大就需要从整个应用层面来考虑，设计以及目标是否一致了，重新评估吞吐目标。\n\n> 对于垃圾收集器来说，提升吞吐量的性能调优的目标就是尽可能避免或者很少发生FullGC或者Stop-The-World压缩式垃圾收集（CMS），因为这两种方式都会造成应用程序吞吐降低。尽量在MinorGC 阶段回收更多的对象，避免对象提升过快到老年代。\n\n### 调优工具\n借助GCViewer日志分析工具，可以非常直观地分析出待调优点。可从以下几方面来分析：\n- Memory,分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；\n- Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；","source":"_posts/java/jvm.md","raw":"---\ntitle: JVM【性能调优篇】\ntags:\n  - Java\nindex_img: /img/java.jpeg\nabbrlink: 3097382278\ndate: 2016-10-16 11:54:14\n\n---\n\n前面我们学习了整个JVM系列，最终目标的不仅仅是了解JVM的基础知识，也是为了进行JVM性能调优做准备。这篇文章带领大家学习JVM性能调优的知识。\n\n### 性能调优\n性能调优包含多个层次，比如：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。\n\n架构调优和代码调优是JVM调优的基础，其中架构调优是对系统影响最大的。\n\n性能调优基本上按照以下步骤进行：明确优化目标、发现性能瓶颈、性能调优、通过监控及数据统计工具获得数据、确认是否达到目标。\n\n### 何时进行JVM调优\n遇到以下情况，就需要考虑进行JVM调优了：\n- Heap内存（老年代）持续上涨达到设置的最大内存值；\n- Full GC 次数频繁；\n- GC 停顿时间过长（超过1秒）；\n- 应用出现OutOfMemory 等内存异常；\n- 应用中有使用本地缓存且占用大量内存空间；\n- 系统吞吐量与响应性能不高或下降。\n\n### JVM调优的基本原则\nJVM调优是一个手段，但并不一定所有问题都可以通过JVM进行调优解决，因此，在进行JVM调优时，我们要遵循一些原则：\n\n- 大多数的Java应用不需要进行JVM优化；\n- 大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；\n- 上线之前，应先考虑将机器的JVM参数设置到最优；\n- 减少创建对象的数量（代码层面）；\n- 减少使用全局变量和大对象（代码层面）；\n- 优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；\n- 分析GC情况优化代码比优化JVM参数更好（代码层面）；\n\n通过以上原则，我们发现，其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。\n\n### JVM调优目标\n调优的最终目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。\njvm调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量。\n\n- 延迟：GC低停顿和GC低频率；\n- 低内存占用；\n- 高吞吐量;\n\n其中，任何一个属性性能的提高，几乎都是以牺牲其他属性性能的损为代价的，不可兼得。具体根据在业务中的重要性确定。\n\n### JVM调优量化目标\n下面展示了一些JVM调优的量化目标参考实例：\n\n- Heap 内存使用率 <= 70%;\n- Old generation内存使用率<= 70%;\n- avgpause <= 1秒;\n- Full gc 次数0 或 avg pause interval >= 24小时 ;\n\n注意：不同应用的JVM调优量化目标是不一样的。\n\n### JVM调优的步骤\n一般情况下，JVM调优可通过以下步骤进行：\n\n- 分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；\n- 确定JVM调优量化目标；\n- 确定JVM调优参数（根据历史JVM参数来调整）；\n- 依次调优内存、延迟、吞吐量等指标；\n- 对比观察调优前后的差异；\n- 不断的分析和调整，直到找到合适的JVM参数配置；\n- 找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。\n\n以上操作步骤中，某些步骤是需要多次不断迭代完成的。一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。\n\n### JVM参数\nJVM调优最重要的工具就是JVM参数了。先来了解一下JVM参数相关内容。\n\n-XX 参数被称为不稳定参数，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。如果此类参数设置合理将大大提高JVM的性能及稳定性。\n\n不稳定参数语法规则包含以下内容。\n\n    布尔类型参数值：\n    -XX:+<option> '+'表示启用该选项\n    -XX:-<option> '-'表示关闭该选项\n    数字类型参数值：\n    -XX:<option>=<number>给选项设置一个数字类型值，可跟随单位，例如：'m'或'M'表示兆字节;'k'或'K'千字节;'g'或'G'千兆字节。32K与32768是相同大小的。\n    字符串类型参数值\n    -XX:<option>=<string>给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。例如：-XX:HeapDumpPath=./dump.core\n\n\n### JVM参数解析及调优\n比如以下参数示例：\n\n    -Xmx4g –Xms4g –Xmn1200m –Xss512k -XX:NewRatio=4 -XX:SurvivorRatio=8 -XX:PermSize=100m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=15\n\n上面为Java7及以前版本的示例，在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。这在前面章节中已经讲到。\n\n参数解析：\n```\n-Xmx4g：堆内存最大值为4GB。\n-Xms4g：初始化堆内存大小为4GB。\n-Xmn1200m：设置年轻代大小为1200MB。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。\n-Xss512k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。\n-XX:NewRatio=4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5\n-XX:SurvivorRatio=8：设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1/10\n-XX:PermSize=100m：初始化永久代大小为100MB。\n-XX:MaxPermSize=256m：设置持久代大小为256MB。\n-XX:MaxTenuringThreshold=15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n```\n新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。\n\n可调优参数：\n```\n-Xms：初始化堆内存大小，默认为物理内存的1/64(小于1GB)。\n-Xmx：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。\n-Xmn：新生代大小，包括Eden区与2个Survivor区。\n-XX:SurvivorRatio=1：Eden区与一个Survivor区比值为1:1。\n-XX:MaxDirectMemorySize=1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。\n-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。\n-XX:CMSInitiatingOccupancyFraction=60：老年代内存回收阈值，默认值为68。\n-XX:ConcGCThreads=4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。\n-XX:ParallelGCThreads=8：新生代并行收集器的线程数。\n-XX:MaxTenuringThreshold=10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n-XX:CMSFullGCsBeforeCompaction=4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。\n-XX:CMSMaxAbortablePrecleanTime=500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。\n```\n> 注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。\n\n在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。\n\n### 内存优化示例\n当JVM运行稳定之后，触发了FullGC我们一般会拿到如下信息:\n\nimage\n以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。\n\n    java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n    永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久带空间占用。\n    新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n    老年代：2-3倍FullGC后的老年代空间占用。\n\n基于以上规则，则对参数定义如下：\n```\njava -Xms373m -Xmx373m -Xmn140m -XX:PermSize=5m -XX:MaxPermSize=5m\n```\n\n### 延迟优化示例\n对延迟性优化，首先需要了解延迟性需求及可调优的指标有哪些。\n\n- 应用程序可接受的平均停滞时间: 此时间与测量的Minor\n- GC持续时间进行比较。可接受的Minor GC频率：Minor\n- GC的频率与可容忍的值进行比较。\n- 可接受的最大停顿时间:最大停顿时间与最差情况下FullGC的持续时间进行比较。\n- 可接受的最大停顿发生的频率：基本就是FullGC的频率。\n\n其中，平均停滞时间和最大停顿时间，对用户体验最为重要。对于上面的指标，相关数据采集包括：MinorGC的持续时间、统计MinorGC的次数、FullGC的最差持续时间、最差情况下，FullGC的频率。\n\nimage\n如上图，Minor GC的平均持续时间0.069秒，MinorGC的频率为0.389秒一次。\n\n新生代空间越大，Minor GC的GC时间越长，频率越低。如果想减少其持续时长，就需要减少其空间大小。如果想减小其频率，就需要加大其空间大小。\n\n这里以减少了新生代空间10%的大小，来减小延迟时间。在此过程中，应该保持老年代和持代的大小不变化。调优后的参数如下变化:\n```\njava -Xms359m -Xmx359m -Xmn126m -XX:PermSize=5m -XX:MaxPermSize=5m\n```\n### 吞吐量调优\n吞吐量调优主要是基于应用程序的吞吐量要求而来的，应用程序应该有一个综合的吞吐指标，这个指标基于整个应用的需求和测试而衍生出来的。\n\n评估当前吞吐量和目标差距是否巨大，如果在20%左右，可以修改参数，加大内存，再次从头调试，如果巨大就需要从整个应用层面来考虑，设计以及目标是否一致了，重新评估吞吐目标。\n\n> 对于垃圾收集器来说，提升吞吐量的性能调优的目标就是尽可能避免或者很少发生FullGC或者Stop-The-World压缩式垃圾收集（CMS），因为这两种方式都会造成应用程序吞吐降低。尽量在MinorGC 阶段回收更多的对象，避免对象提升过快到老年代。\n\n### 调优工具\n借助GCViewer日志分析工具，可以非常直观地分析出待调优点。可从以下几方面来分析：\n- Memory,分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；\n- Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；","slug":"java/jvm","published":1,"updated":"2020-12-18T15:04:43.618Z","_id":"ckitw8kn1001488cd75l5c52c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前面我们学习了整个JVM系列，最终目标的不仅仅是了解JVM的基础知识，也是为了进行JVM性能调优做准备。这篇文章带领大家学习JVM性能调优的知识。</p>\n<h3 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h3><p>性能调优包含多个层次，比如：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。</p>\n<p>架构调优和代码调优是JVM调优的基础，其中架构调优是对系统影响最大的。</p>\n<p>性能调优基本上按照以下步骤进行：明确优化目标、发现性能瓶颈、性能调优、通过监控及数据统计工具获得数据、确认是否达到目标。</p>\n<h3 id=\"何时进行JVM调优\"><a href=\"#何时进行JVM调优\" class=\"headerlink\" title=\"何时进行JVM调优\"></a>何时进行JVM调优</h3><p>遇到以下情况，就需要考虑进行JVM调优了：</p>\n<ul>\n<li>Heap内存（老年代）持续上涨达到设置的最大内存值；</li>\n<li>Full GC 次数频繁；</li>\n<li>GC 停顿时间过长（超过1秒）；</li>\n<li>应用出现OutOfMemory 等内存异常；</li>\n<li>应用中有使用本地缓存且占用大量内存空间；</li>\n<li>系统吞吐量与响应性能不高或下降。</li>\n</ul>\n<h3 id=\"JVM调优的基本原则\"><a href=\"#JVM调优的基本原则\" class=\"headerlink\" title=\"JVM调优的基本原则\"></a>JVM调优的基本原则</h3><p>JVM调优是一个手段，但并不一定所有问题都可以通过JVM进行调优解决，因此，在进行JVM调优时，我们要遵循一些原则：</p>\n<ul>\n<li>大多数的Java应用不需要进行JVM优化；</li>\n<li>大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；</li>\n<li>上线之前，应先考虑将机器的JVM参数设置到最优；</li>\n<li>减少创建对象的数量（代码层面）；</li>\n<li>减少使用全局变量和大对象（代码层面）；</li>\n<li>优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；</li>\n<li>分析GC情况优化代码比优化JVM参数更好（代码层面）；</li>\n</ul>\n<p>通过以上原则，我们发现，其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。</p>\n<h3 id=\"JVM调优目标\"><a href=\"#JVM调优目标\" class=\"headerlink\" title=\"JVM调优目标\"></a>JVM调优目标</h3><p>调优的最终目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。<br>jvm调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量。</p>\n<ul>\n<li>延迟：GC低停顿和GC低频率；</li>\n<li>低内存占用；</li>\n<li>高吞吐量;</li>\n</ul>\n<p>其中，任何一个属性性能的提高，几乎都是以牺牲其他属性性能的损为代价的，不可兼得。具体根据在业务中的重要性确定。</p>\n<h3 id=\"JVM调优量化目标\"><a href=\"#JVM调优量化目标\" class=\"headerlink\" title=\"JVM调优量化目标\"></a>JVM调优量化目标</h3><p>下面展示了一些JVM调优的量化目标参考实例：</p>\n<ul>\n<li>Heap 内存使用率 &lt;= 70%;</li>\n<li>Old generation内存使用率&lt;= 70%;</li>\n<li>avgpause &lt;= 1秒;</li>\n<li>Full gc 次数0 或 avg pause interval &gt;= 24小时 ;</li>\n</ul>\n<p>注意：不同应用的JVM调优量化目标是不一样的。</p>\n<h3 id=\"JVM调优的步骤\"><a href=\"#JVM调优的步骤\" class=\"headerlink\" title=\"JVM调优的步骤\"></a>JVM调优的步骤</h3><p>一般情况下，JVM调优可通过以下步骤进行：</p>\n<ul>\n<li>分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；</li>\n<li>确定JVM调优量化目标；</li>\n<li>确定JVM调优参数（根据历史JVM参数来调整）；</li>\n<li>依次调优内存、延迟、吞吐量等指标；</li>\n<li>对比观察调优前后的差异；</li>\n<li>不断的分析和调整，直到找到合适的JVM参数配置；</li>\n<li>找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。</li>\n</ul>\n<p>以上操作步骤中，某些步骤是需要多次不断迭代完成的。一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。</p>\n<h3 id=\"JVM参数\"><a href=\"#JVM参数\" class=\"headerlink\" title=\"JVM参数\"></a>JVM参数</h3><p>JVM调优最重要的工具就是JVM参数了。先来了解一下JVM参数相关内容。</p>\n<p>-XX 参数被称为不稳定参数，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。如果此类参数设置合理将大大提高JVM的性能及稳定性。</p>\n<p>不稳定参数语法规则包含以下内容。</p>\n<pre><code>布尔类型参数值：\n-XX:+&lt;option&gt; &apos;+&apos;表示启用该选项\n-XX:-&lt;option&gt; &apos;-&apos;表示关闭该选项\n数字类型参数值：\n-XX:&lt;option&gt;=&lt;number&gt;给选项设置一个数字类型值，可跟随单位，例如：&apos;m&apos;或&apos;M&apos;表示兆字节;&apos;k&apos;或&apos;K&apos;千字节;&apos;g&apos;或&apos;G&apos;千兆字节。32K与32768是相同大小的。\n字符串类型参数值\n-XX:&lt;option&gt;=&lt;string&gt;给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。例如：-XX:HeapDumpPath=./dump.core</code></pre><h3 id=\"JVM参数解析及调优\"><a href=\"#JVM参数解析及调优\" class=\"headerlink\" title=\"JVM参数解析及调优\"></a>JVM参数解析及调优</h3><p>比如以下参数示例：</p>\n<pre><code>-Xmx4g –Xms4g –Xmn1200m –Xss512k -XX:NewRatio=4 -XX:SurvivorRatio=8 -XX:PermSize=100m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=15</code></pre><p>上面为Java7及以前版本的示例，在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。这在前面章节中已经讲到。</p>\n<p>参数解析：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">-Xmx4g：堆内存最大值为4GB。<br>-Xms4g：初始化堆内存大小为4GB。<br>-Xmn1200m：设置年轻代大小为1200MB。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3&#x2F;8。<br>-Xss512k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。<br>-XX:NewRatio&#x3D;4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1&#x2F;5<br>-XX:SurvivorRatio&#x3D;8：设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1&#x2F;10<br>-XX:PermSize&#x3D;100m：初始化永久代大小为100MB。<br>-XX:MaxPermSize&#x3D;256m：设置持久代大小为256MB。<br>-XX:MaxTenuringThreshold&#x3D;15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。<br></code></pre></td></tr></table></figure>\n<p>新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。</p>\n<p>可调优参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">-Xms：初始化堆内存大小，默认为物理内存的1&#x2F;64(小于1GB)。<br>-Xmx：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。<br>-Xmn：新生代大小，包括Eden区与2个Survivor区。<br>-XX:SurvivorRatio&#x3D;1：Eden区与一个Survivor区比值为1:1。<br>-XX:MaxDirectMemorySize&#x3D;1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。<br>-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。<br>-XX:CMSInitiatingOccupancyFraction&#x3D;60：老年代内存回收阈值，默认值为68。<br>-XX:ConcGCThreads&#x3D;4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。<br>-XX:ParallelGCThreads&#x3D;8：新生代并行收集器的线程数。<br>-XX:MaxTenuringThreshold&#x3D;10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。<br>-XX:CMSFullGCsBeforeCompaction&#x3D;4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。<br>-XX:CMSMaxAbortablePrecleanTime&#x3D;500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。</p>\n</blockquote>\n<p>在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。</p>\n<h3 id=\"内存优化示例\"><a href=\"#内存优化示例\" class=\"headerlink\" title=\"内存优化示例\"></a>内存优化示例</h3><p>当JVM运行稳定之后，触发了FullGC我们一般会拿到如下信息:</p>\n<p>image<br>以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。</p>\n<pre><code>java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久带空间占用。\n新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n老年代：2-3倍FullGC后的老年代空间占用。</code></pre><p>基于以上规则，则对参数定义如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">java -Xms373m -Xmx373m -Xmn140m -XX:PermSize&#x3D;5m -XX:MaxPermSize&#x3D;5m<br></code></pre></td></tr></table></figure>\n<h3 id=\"延迟优化示例\"><a href=\"#延迟优化示例\" class=\"headerlink\" title=\"延迟优化示例\"></a>延迟优化示例</h3><p>对延迟性优化，首先需要了解延迟性需求及可调优的指标有哪些。</p>\n<ul>\n<li>应用程序可接受的平均停滞时间: 此时间与测量的Minor</li>\n<li>GC持续时间进行比较。可接受的Minor GC频率：Minor</li>\n<li>GC的频率与可容忍的值进行比较。</li>\n<li>可接受的最大停顿时间:最大停顿时间与最差情况下FullGC的持续时间进行比较。</li>\n<li>可接受的最大停顿发生的频率：基本就是FullGC的频率。</li>\n</ul>\n<p>其中，平均停滞时间和最大停顿时间，对用户体验最为重要。对于上面的指标，相关数据采集包括：MinorGC的持续时间、统计MinorGC的次数、FullGC的最差持续时间、最差情况下，FullGC的频率。</p>\n<p>image<br>如上图，Minor GC的平均持续时间0.069秒，MinorGC的频率为0.389秒一次。</p>\n<p>新生代空间越大，Minor GC的GC时间越长，频率越低。如果想减少其持续时长，就需要减少其空间大小。如果想减小其频率，就需要加大其空间大小。</p>\n<p>这里以减少了新生代空间10%的大小，来减小延迟时间。在此过程中，应该保持老年代和持代的大小不变化。调优后的参数如下变化:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">java -Xms359m -Xmx359m -Xmn126m -XX:PermSize&#x3D;5m -XX:MaxPermSize&#x3D;5m<br></code></pre></td></tr></table></figure>\n<h3 id=\"吞吐量调优\"><a href=\"#吞吐量调优\" class=\"headerlink\" title=\"吞吐量调优\"></a>吞吐量调优</h3><p>吞吐量调优主要是基于应用程序的吞吐量要求而来的，应用程序应该有一个综合的吞吐指标，这个指标基于整个应用的需求和测试而衍生出来的。</p>\n<p>评估当前吞吐量和目标差距是否巨大，如果在20%左右，可以修改参数，加大内存，再次从头调试，如果巨大就需要从整个应用层面来考虑，设计以及目标是否一致了，重新评估吞吐目标。</p>\n<blockquote>\n<p>对于垃圾收集器来说，提升吞吐量的性能调优的目标就是尽可能避免或者很少发生FullGC或者Stop-The-World压缩式垃圾收集（CMS），因为这两种方式都会造成应用程序吞吐降低。尽量在MinorGC 阶段回收更多的对象，避免对象提升过快到老年代。</p>\n</blockquote>\n<h3 id=\"调优工具\"><a href=\"#调优工具\" class=\"headerlink\" title=\"调优工具\"></a>调优工具</h3><p>借助GCViewer日志分析工具，可以非常直观地分析出待调优点。可从以下几方面来分析：</p>\n<ul>\n<li>Memory,分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；</li>\n<li>Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>前面我们学习了整个JVM系列，最终目标的不仅仅是了解JVM的基础知识，也是为了进行JVM性能调优做准备。这篇文章带领大家学习JVM性能调优的知识。</p>\n<h3 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h3><p>性能调优包含多个层次，比如：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。</p>\n<p>架构调优和代码调优是JVM调优的基础，其中架构调优是对系统影响最大的。</p>\n<p>性能调优基本上按照以下步骤进行：明确优化目标、发现性能瓶颈、性能调优、通过监控及数据统计工具获得数据、确认是否达到目标。</p>\n<h3 id=\"何时进行JVM调优\"><a href=\"#何时进行JVM调优\" class=\"headerlink\" title=\"何时进行JVM调优\"></a>何时进行JVM调优</h3><p>遇到以下情况，就需要考虑进行JVM调优了：</p>\n<ul>\n<li>Heap内存（老年代）持续上涨达到设置的最大内存值；</li>\n<li>Full GC 次数频繁；</li>\n<li>GC 停顿时间过长（超过1秒）；</li>\n<li>应用出现OutOfMemory 等内存异常；</li>\n<li>应用中有使用本地缓存且占用大量内存空间；</li>\n<li>系统吞吐量与响应性能不高或下降。</li>\n</ul>\n<h3 id=\"JVM调优的基本原则\"><a href=\"#JVM调优的基本原则\" class=\"headerlink\" title=\"JVM调优的基本原则\"></a>JVM调优的基本原则</h3><p>JVM调优是一个手段，但并不一定所有问题都可以通过JVM进行调优解决，因此，在进行JVM调优时，我们要遵循一些原则：</p>\n<ul>\n<li>大多数的Java应用不需要进行JVM优化；</li>\n<li>大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；</li>\n<li>上线之前，应先考虑将机器的JVM参数设置到最优；</li>\n<li>减少创建对象的数量（代码层面）；</li>\n<li>减少使用全局变量和大对象（代码层面）；</li>\n<li>优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；</li>\n<li>分析GC情况优化代码比优化JVM参数更好（代码层面）；</li>\n</ul>\n<p>通过以上原则，我们发现，其实最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。</p>\n<h3 id=\"JVM调优目标\"><a href=\"#JVM调优目标\" class=\"headerlink\" title=\"JVM调优目标\"></a>JVM调优目标</h3><p>调优的最终目的都是为了令应用程序使用最小的硬件消耗来承载更大的吞吐。<br>jvm调优主要是针对垃圾收集器的收集性能优化，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量。</p>\n<ul>\n<li>延迟：GC低停顿和GC低频率；</li>\n<li>低内存占用；</li>\n<li>高吞吐量;</li>\n</ul>\n<p>其中，任何一个属性性能的提高，几乎都是以牺牲其他属性性能的损为代价的，不可兼得。具体根据在业务中的重要性确定。</p>\n<h3 id=\"JVM调优量化目标\"><a href=\"#JVM调优量化目标\" class=\"headerlink\" title=\"JVM调优量化目标\"></a>JVM调优量化目标</h3><p>下面展示了一些JVM调优的量化目标参考实例：</p>\n<ul>\n<li>Heap 内存使用率 &lt;= 70%;</li>\n<li>Old generation内存使用率&lt;= 70%;</li>\n<li>avgpause &lt;= 1秒;</li>\n<li>Full gc 次数0 或 avg pause interval &gt;= 24小时 ;</li>\n</ul>\n<p>注意：不同应用的JVM调优量化目标是不一样的。</p>\n<h3 id=\"JVM调优的步骤\"><a href=\"#JVM调优的步骤\" class=\"headerlink\" title=\"JVM调优的步骤\"></a>JVM调优的步骤</h3><p>一般情况下，JVM调优可通过以下步骤进行：</p>\n<ul>\n<li>分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；</li>\n<li>确定JVM调优量化目标；</li>\n<li>确定JVM调优参数（根据历史JVM参数来调整）；</li>\n<li>依次调优内存、延迟、吞吐量等指标；</li>\n<li>对比观察调优前后的差异；</li>\n<li>不断的分析和调整，直到找到合适的JVM参数配置；</li>\n<li>找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。</li>\n</ul>\n<p>以上操作步骤中，某些步骤是需要多次不断迭代完成的。一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。</p>\n<h3 id=\"JVM参数\"><a href=\"#JVM参数\" class=\"headerlink\" title=\"JVM参数\"></a>JVM参数</h3><p>JVM调优最重要的工具就是JVM参数了。先来了解一下JVM参数相关内容。</p>\n<p>-XX 参数被称为不稳定参数，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。如果此类参数设置合理将大大提高JVM的性能及稳定性。</p>\n<p>不稳定参数语法规则包含以下内容。</p>\n<pre><code>布尔类型参数值：\n-XX:+&lt;option&gt; &apos;+&apos;表示启用该选项\n-XX:-&lt;option&gt; &apos;-&apos;表示关闭该选项\n数字类型参数值：\n-XX:&lt;option&gt;=&lt;number&gt;给选项设置一个数字类型值，可跟随单位，例如：&apos;m&apos;或&apos;M&apos;表示兆字节;&apos;k&apos;或&apos;K&apos;千字节;&apos;g&apos;或&apos;G&apos;千兆字节。32K与32768是相同大小的。\n字符串类型参数值\n-XX:&lt;option&gt;=&lt;string&gt;给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。例如：-XX:HeapDumpPath=./dump.core</code></pre><h3 id=\"JVM参数解析及调优\"><a href=\"#JVM参数解析及调优\" class=\"headerlink\" title=\"JVM参数解析及调优\"></a>JVM参数解析及调优</h3><p>比如以下参数示例：</p>\n<pre><code>-Xmx4g –Xms4g –Xmn1200m –Xss512k -XX:NewRatio=4 -XX:SurvivorRatio=8 -XX:PermSize=100m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=15</code></pre><p>上面为Java7及以前版本的示例，在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。这在前面章节中已经讲到。</p>\n<p>参数解析：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">-Xmx4g：堆内存最大值为4GB。<br>-Xms4g：初始化堆内存大小为4GB。<br>-Xmn1200m：设置年轻代大小为1200MB。增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3&#x2F;8。<br>-Xss512k：设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。<br>-XX:NewRatio&#x3D;4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1&#x2F;5<br>-XX:SurvivorRatio&#x3D;8：设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1&#x2F;10<br>-XX:PermSize&#x3D;100m：初始化永久代大小为100MB。<br>-XX:MaxPermSize&#x3D;256m：设置持久代大小为256MB。<br>-XX:MaxTenuringThreshold&#x3D;15：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。<br></code></pre></td></tr></table></figure>\n<p>新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。</p>\n<p>可调优参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">-Xms：初始化堆内存大小，默认为物理内存的1&#x2F;64(小于1GB)。<br>-Xmx：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。<br>-Xmn：新生代大小，包括Eden区与2个Survivor区。<br>-XX:SurvivorRatio&#x3D;1：Eden区与一个Survivor区比值为1:1。<br>-XX:MaxDirectMemorySize&#x3D;1G：直接内存。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。<br>-XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。<br>-XX:CMSInitiatingOccupancyFraction&#x3D;60：老年代内存回收阈值，默认值为68。<br>-XX:ConcGCThreads&#x3D;4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。<br>-XX:ParallelGCThreads&#x3D;8：新生代并行收集器的线程数。<br>-XX:MaxTenuringThreshold&#x3D;10：设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。<br>-XX:CMSFullGCsBeforeCompaction&#x3D;4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。<br>-XX:CMSMaxAbortablePrecleanTime&#x3D;500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。</p>\n</blockquote>\n<p>在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。</p>\n<h3 id=\"内存优化示例\"><a href=\"#内存优化示例\" class=\"headerlink\" title=\"内存优化示例\"></a>内存优化示例</h3><p>当JVM运行稳定之后，触发了FullGC我们一般会拿到如下信息:</p>\n<p>image<br>以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。</p>\n<pre><code>java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久带空间占用。\n新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n老年代：2-3倍FullGC后的老年代空间占用。</code></pre><p>基于以上规则，则对参数定义如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">java -Xms373m -Xmx373m -Xmn140m -XX:PermSize&#x3D;5m -XX:MaxPermSize&#x3D;5m<br></code></pre></td></tr></table></figure>\n<h3 id=\"延迟优化示例\"><a href=\"#延迟优化示例\" class=\"headerlink\" title=\"延迟优化示例\"></a>延迟优化示例</h3><p>对延迟性优化，首先需要了解延迟性需求及可调优的指标有哪些。</p>\n<ul>\n<li>应用程序可接受的平均停滞时间: 此时间与测量的Minor</li>\n<li>GC持续时间进行比较。可接受的Minor GC频率：Minor</li>\n<li>GC的频率与可容忍的值进行比较。</li>\n<li>可接受的最大停顿时间:最大停顿时间与最差情况下FullGC的持续时间进行比较。</li>\n<li>可接受的最大停顿发生的频率：基本就是FullGC的频率。</li>\n</ul>\n<p>其中，平均停滞时间和最大停顿时间，对用户体验最为重要。对于上面的指标，相关数据采集包括：MinorGC的持续时间、统计MinorGC的次数、FullGC的最差持续时间、最差情况下，FullGC的频率。</p>\n<p>image<br>如上图，Minor GC的平均持续时间0.069秒，MinorGC的频率为0.389秒一次。</p>\n<p>新生代空间越大，Minor GC的GC时间越长，频率越低。如果想减少其持续时长，就需要减少其空间大小。如果想减小其频率，就需要加大其空间大小。</p>\n<p>这里以减少了新生代空间10%的大小，来减小延迟时间。在此过程中，应该保持老年代和持代的大小不变化。调优后的参数如下变化:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">java -Xms359m -Xmx359m -Xmn126m -XX:PermSize&#x3D;5m -XX:MaxPermSize&#x3D;5m<br></code></pre></td></tr></table></figure>\n<h3 id=\"吞吐量调优\"><a href=\"#吞吐量调优\" class=\"headerlink\" title=\"吞吐量调优\"></a>吞吐量调优</h3><p>吞吐量调优主要是基于应用程序的吞吐量要求而来的，应用程序应该有一个综合的吞吐指标，这个指标基于整个应用的需求和测试而衍生出来的。</p>\n<p>评估当前吞吐量和目标差距是否巨大，如果在20%左右，可以修改参数，加大内存，再次从头调试，如果巨大就需要从整个应用层面来考虑，设计以及目标是否一致了，重新评估吞吐目标。</p>\n<blockquote>\n<p>对于垃圾收集器来说，提升吞吐量的性能调优的目标就是尽可能避免或者很少发生FullGC或者Stop-The-World压缩式垃圾收集（CMS），因为这两种方式都会造成应用程序吞吐降低。尽量在MinorGC 阶段回收更多的对象，避免对象提升过快到老年代。</p>\n</blockquote>\n<h3 id=\"调优工具\"><a href=\"#调优工具\" class=\"headerlink\" title=\"调优工具\"></a>调优工具</h3><p>借助GCViewer日志分析工具，可以非常直观地分析出待调优点。可从以下几方面来分析：</p>\n<ul>\n<li>Memory,分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；</li>\n<li>Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；</li>\n</ul>\n"},{"title":"Mac系统下升级node版本","abbrlink":1345941684,"description":"如何在Mac系统下升级node版本","_content":"\n\n\n#### 第一步：使用npm安装n模块\n\nn模块是专门用来管理nodejs版本的，名字就叫n执行命令\n\n````\nnpm install -g n\n````\n#### 第二步：使用n模块升级node\n\n*第一种是升级到最新版本*\n\n```\nsudo n latest\n```\n\n*第二种是升级到稳定版本（建议用稳定版本）*\n\n`sudo n stable`\n\n安装成功！（若版本未切换成功则进入第三步手动修改环境变量）\n\n```\nnode -v\nv11.10.1\n```\n\n最后升级npm到最新版本：\n\n```\nsudo npm install npm@latest -g\n```\n\n#### 第三步：修改NODE_HOME环境变量\n\n```shell\nsudo vi /etc/profile\n+\nexport NODE_HOME=/usr/local/n/versions/node/12.0.0\nexport PATH=$NODE_HOME/bin:$PATH\n```\n\n激活环境变量\n\n```\nsource /etc/profile\n```","source":"_posts/mac/Mac系统下升级node版本.md","raw":"---\ntitle: Mac系统下升级node版本\nabbrlink: 1345941684\ntags:\n\t- mac\n\t- node\ndescription: 如何在Mac系统下升级node版本\n---\n\n\n\n#### 第一步：使用npm安装n模块\n\nn模块是专门用来管理nodejs版本的，名字就叫n执行命令\n\n````\nnpm install -g n\n````\n#### 第二步：使用n模块升级node\n\n*第一种是升级到最新版本*\n\n```\nsudo n latest\n```\n\n*第二种是升级到稳定版本（建议用稳定版本）*\n\n`sudo n stable`\n\n安装成功！（若版本未切换成功则进入第三步手动修改环境变量）\n\n```\nnode -v\nv11.10.1\n```\n\n最后升级npm到最新版本：\n\n```\nsudo npm install npm@latest -g\n```\n\n#### 第三步：修改NODE_HOME环境变量\n\n```shell\nsudo vi /etc/profile\n+\nexport NODE_HOME=/usr/local/n/versions/node/12.0.0\nexport PATH=$NODE_HOME/bin:$PATH\n```\n\n激活环境变量\n\n```\nsource /etc/profile\n```","slug":"mac/Mac系统下升级node版本","published":1,"date":"2020-12-18T15:04:43.623Z","updated":"2020-12-18T15:04:43.623Z","_id":"ckitw8kn4001i88cddze9e821","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"第一步：使用npm安装n模块\"><a href=\"#第一步：使用npm安装n模块\" class=\"headerlink\" title=\"第一步：使用npm安装n模块\"></a>第一步：使用npm安装n模块</h4><p>n模块是专门用来管理nodejs版本的，名字就叫n执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npm install -g n<br></code></pre></td></tr></table></figure>\n<h4 id=\"第二步：使用n模块升级node\"><a href=\"#第二步：使用n模块升级node\" class=\"headerlink\" title=\"第二步：使用n模块升级node\"></a>第二步：使用n模块升级node</h4><p><em>第一种是升级到最新版本</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">sudo n latest<br></code></pre></td></tr></table></figure>\n<p><em>第二种是升级到稳定版本（建议用稳定版本）</em></p>\n<p><code>sudo n stable</code></p>\n<p>安装成功！（若版本未切换成功则进入第三步手动修改环境变量）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">node -v<br>v11.10.1<br></code></pre></td></tr></table></figure>\n<p>最后升级npm到最新版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">sudo npm install npm@latest -g<br></code></pre></td></tr></table></figure>\n<h4 id=\"第三步：修改NODE-HOME环境变量\"><a href=\"#第三步：修改NODE-HOME环境变量\" class=\"headerlink\" title=\"第三步：修改NODE_HOME环境变量\"></a>第三步：修改NODE_HOME环境变量</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo vi /etc/profile<br>+<br>export NODE_HOME=/usr/local/n/versions/node/12.0.0<br>export PATH=$NODE_HOME/bin:$PATH<br></code></pre></td></tr></table></figure>\n<p>激活环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">source &#x2F;etc&#x2F;profile<br></code></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h4 id=\"第一步：使用npm安装n模块\"><a href=\"#第一步：使用npm安装n模块\" class=\"headerlink\" title=\"第一步：使用npm安装n模块\"></a>第一步：使用npm安装n模块</h4><p>n模块是专门用来管理nodejs版本的，名字就叫n执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npm install -g n<br></code></pre></td></tr></table></figure>\n<h4 id=\"第二步：使用n模块升级node\"><a href=\"#第二步：使用n模块升级node\" class=\"headerlink\" title=\"第二步：使用n模块升级node\"></a>第二步：使用n模块升级node</h4><p><em>第一种是升级到最新版本</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">sudo n latest<br></code></pre></td></tr></table></figure>\n<p><em>第二种是升级到稳定版本（建议用稳定版本）</em></p>\n<p><code>sudo n stable</code></p>\n<p>安装成功！（若版本未切换成功则进入第三步手动修改环境变量）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">node -v<br>v11.10.1<br></code></pre></td></tr></table></figure>\n<p>最后升级npm到最新版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">sudo npm install npm@latest -g<br></code></pre></td></tr></table></figure>\n<h4 id=\"第三步：修改NODE-HOME环境变量\"><a href=\"#第三步：修改NODE-HOME环境变量\" class=\"headerlink\" title=\"第三步：修改NODE_HOME环境变量\"></a>第三步：修改NODE_HOME环境变量</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo vi /etc/profile<br>+<br>export NODE_HOME=/usr/local/n/versions/node/12.0.0<br>export PATH=$NODE_HOME/bin:$PATH<br></code></pre></td></tr></table></figure>\n<p>激活环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">source &#x2F;etc&#x2F;profile<br></code></pre></td></tr></table></figure>"},{"title":"Markdown导出带目录的html文件","abbrlink":3058308324,"date":"2017-10-15T04:10:23.000Z","_content":"\n## 安装插件\n\n使用下面命令进行全局安装：\n\n```\nnpm install -g i5ting_toc\n```\n\n------\n\n## 插件用法\n\n安装好 i5ting_toc 后，就可以使用简单的命令了。比如输入`i5ting_toc -h`查看插件用法，如下图示：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905160156342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70)\n\n------\n\n## md 文件转 html 文件\n\n**这里我在本地给大家演示一遍。**\n\n- 进入md文件所在目录\n\n如下图示：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905160538563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70)\n\n- 输入命令`i5ting_toc -f index.md -o`\n\n如下图示：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905160831569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70)\n\n命令执行完后，md文件目录下生成了一个preview文件夹，我们需要的html文件夹就在里面，然后直接浏览器打开这个html即可。如下图示：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905161030886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905161108879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70)\n\n希望本文对各位同学能有所帮助！","source":"_posts/markdown/Markdown导出带目录的html文件.md","raw":"---\ntitle: Markdown导出带目录的html文件\ncategories: 写作\ntags:\n\t- Markdown\nabbrlink: 3058308324\ndate: 2017-10-15 12:10:23\n---\n\n## 安装插件\n\n使用下面命令进行全局安装：\n\n```\nnpm install -g i5ting_toc\n```\n\n------\n\n## 插件用法\n\n安装好 i5ting_toc 后，就可以使用简单的命令了。比如输入`i5ting_toc -h`查看插件用法，如下图示：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905160156342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70)\n\n------\n\n## md 文件转 html 文件\n\n**这里我在本地给大家演示一遍。**\n\n- 进入md文件所在目录\n\n如下图示：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905160538563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70)\n\n- 输入命令`i5ting_toc -f index.md -o`\n\n如下图示：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905160831569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70)\n\n命令执行完后，md文件目录下生成了一个preview文件夹，我们需要的html文件夹就在里面，然后直接浏览器打开这个html即可。如下图示：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905161030886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190905161108879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70)\n\n希望本文对各位同学能有所帮助！","slug":"markdown/Markdown导出带目录的html文件","published":1,"updated":"2020-12-18T18:38:37.666Z","_id":"ckitw8kn6001j88cddi9qeirh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>使用下面命令进行全局安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npm install -g i5ting_toc<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"插件用法\"><a href=\"#插件用法\" class=\"headerlink\" title=\"插件用法\"></a>插件用法</h2><p>安装好 i5ting_toc 后，就可以使用简单的命令了。比如输入<code>i5ting_toc -h</code>查看插件用法，如下图示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905160156342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h2 id=\"md-文件转-html-文件\"><a href=\"#md-文件转-html-文件\" class=\"headerlink\" title=\"md 文件转 html 文件\"></a>md 文件转 html 文件</h2><p><strong>这里我在本地给大家演示一遍。</strong></p>\n<ul>\n<li>进入md文件所在目录</li>\n</ul>\n<p>如下图示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905160538563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>输入命令<code>i5ting_toc -f index.md -o</code></li>\n</ul>\n<p>如下图示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905160831569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>命令执行完后，md文件目录下生成了一个preview文件夹，我们需要的html文件夹就在里面，然后直接浏览器打开这个html即可。如下图示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905161030886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905161108879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>希望本文对各位同学能有所帮助！</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>使用下面命令进行全局安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npm install -g i5ting_toc<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"插件用法\"><a href=\"#插件用法\" class=\"headerlink\" title=\"插件用法\"></a>插件用法</h2><p>安装好 i5ting_toc 后，就可以使用简单的命令了。比如输入<code>i5ting_toc -h</code>查看插件用法，如下图示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905160156342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h2 id=\"md-文件转-html-文件\"><a href=\"#md-文件转-html-文件\" class=\"headerlink\" title=\"md 文件转 html 文件\"></a>md 文件转 html 文件</h2><p><strong>这里我在本地给大家演示一遍。</strong></p>\n<ul>\n<li>进入md文件所在目录</li>\n</ul>\n<p>如下图示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905160538563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>输入命令<code>i5ting_toc -f index.md -o</code></li>\n</ul>\n<p>如下图示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905160831569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>命令执行完后，md文件目录下生成了一个preview文件夹，我们需要的html文件夹就在里面，然后直接浏览器打开这个html即可。如下图示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905161030886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190905161108879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG56b3VxaQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>希望本文对各位同学能有所帮助！</p>\n"},{"title":"Markdown之Cmd Markdown编辑阅读器","description":"在这篇Markdown文章中，你讲学习到Markdown的各类语法及展示效果","abbrlink":3058308323,"date":"2017-03-15T06:10:23.000Z","_content":"\n# 欢迎使用 Cmd Markdown 编辑阅读器\n\n------\n\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 高效绘制 [甘特图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图)\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n### 7. 绘制表格\n\n| 项目   |   价格 | 数量 |\n| ------ | -----: | :--: |\n| 计算机 | \\$1600 |  5   |\n| 手机   |   \\$12 |  12  |\n| 管线   |    \\$1 | 234  |\n\n### 8. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右侧的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2016 年 07月 07日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference","source":"_posts/markdown/Markdown模板汇总.md","raw":"---\ntitle: Markdown之Cmd Markdown编辑阅读器\ncategories: 写作\ntags:\n\t- Markdown\ndescription: 在这篇Markdown文章中，你讲学习到Markdown的各类语法及展示效果\nabbrlink: 3058308323\ndate: 2017-03-15 14:10:23\n---\n\n# 欢迎使用 Cmd Markdown 编辑阅读器\n\n------\n\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 高效绘制 [甘特图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图)\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n### 7. 绘制表格\n\n| 项目   |   价格 | 数量 |\n| ------ | -----: | :--: |\n| 计算机 | \\$1600 |  5   |\n| 手机   |   \\$12 |  12  |\n| 管线   |    \\$1 | 234  |\n\n### 8. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右侧的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2016 年 07月 07日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference","slug":"markdown/Markdown模板汇总","published":1,"updated":"2020-12-18T15:04:43.624Z","_id":"ckitw8kn7001m88cd27osbbk5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"欢迎使用-Cmd-Markdown-编辑阅读器\"><a href=\"#欢迎使用-Cmd-Markdown-编辑阅读器\" class=\"headerlink\" title=\"欢迎使用 Cmd Markdown 编辑阅读器\"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr>\n<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日记，杂文，所见所想</li>\n<li>撰写发布技术文稿（代码支持）</li>\n<li>撰写发布学术论文（LaTeX 公式支持）</li>\n</ul>\n</blockquote>\n<p><img src=\"https://www.zybuluo.com/static/img/logo.png\" alt=\"cmd-markdown-logo\"></p>\n<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>\n<h3 id=\"Windows-Mac-Linux-全平台客户端\"><a href=\"#Windows-Mac-Linux-全平台客户端\" class=\"headerlink\" title=\"Windows/Mac/Linux 全平台客户端\"></a><a href=\"https://www.zybuluo.com/cmd/\">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>\n<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>\n<h3 id=\"1-制作一份待办事宜-Todo-列表\"><a href=\"#1-制作一份待办事宜-Todo-列表\" class=\"headerlink\" title=\"1. 制作一份待办事宜 Todo 列表\"></a>1. 制作一份待办事宜 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表\">Todo 列表</a></h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 支持以 PDF 格式导出文稿</li>\n<li><input disabled=\"\" type=\"checkbox\"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 新增 Todo 列表功能</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 修复 LaTex 公式渲染问题</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 新增 LaTex 公式编号功能</li>\n</ul>\n<h3 id=\"2-书写一个质能守恒公式-LaTeX\"><a href=\"#2-书写一个质能守恒公式-LaTeX\" class=\"headerlink\" title=\"2. 书写一个质能守恒公式[^LaTeX]\"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>\n<h3 id=\"3-高亮一段代码-code\"><a href=\"#3-高亮一段代码-code\" class=\"headerlink\" title=\"3. 高亮一段代码[^code]\"></a>3. 高亮一段代码[^code]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">@requires_authorization</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SomeClass</span>:</span><br>    <span class=\"hljs-keyword\">pass</span><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-comment\"># A comment</span><br>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;hello world&#x27;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"4-高效绘制-流程图\"><a href=\"#4-高效绘制-流程图\" class=\"headerlink\" title=\"4. 高效绘制 流程图\"></a>4. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\">流程图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs flow\">st&#x3D;&gt;start: Start<br>op&#x3D;&gt;operation: Your Operation<br>cond&#x3D;&gt;condition: Yes or No?<br>e&#x3D;&gt;end<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br></code></pre></td></tr></table></figure>\n<h3 id=\"5-高效绘制-序列图\"><a href=\"#5-高效绘制-序列图\" class=\"headerlink\" title=\"5. 高效绘制 序列图\"></a>5. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\">序列图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs seq\">Alice-&gt;Bob: Hello Bob, how are you?<br>Note right of Bob: Bob thinks<br>Bob--&gt;Alice: I am good thanks!<br></code></pre></td></tr></table></figure>\n<h3 id=\"6-高效绘制-甘特图\"><a href=\"#6-高效绘制-甘特图\" class=\"headerlink\" title=\"6. 高效绘制 甘特图\"></a>6. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图\">甘特图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gantt\">title 项目开发流程<br>section 项目确定<br>    需求分析       :a1, 2016-06-22, 3d<br>    可行性报告     :after a1, 5d<br>    概念验证       : 5d<br>section 项目实施<br>    概要设计      :2016-07-05  , 5d<br>    详细设计      :2016-07-08, 10d<br>    编码          :2016-07-15, 10d<br>    测试          :2016-07-22, 5d<br>section 发布验收<br>    发布: 2d<br>    验收: 3d<br></code></pre></td></tr></table></figure>\n<h3 id=\"7-绘制表格\"><a href=\"#7-绘制表格\" class=\"headerlink\" title=\"7. 绘制表格\"></a>7. 绘制表格</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>计算机</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<h3 id=\"8-更详细语法说明\"><a href=\"#8-更详细语法说明\" class=\"headerlink\" title=\"8. 更详细语法说明\"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>\n<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>\n<hr>\n<h2 id=\"什么是-Cmd-Markdown\"><a href=\"#什么是-Cmd-Markdown\" class=\"headerlink\" title=\"什么是 Cmd Markdown\"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>\n<h3 id=\"1-实时同步预览\"><a href=\"#1-实时同步预览\" class=\"headerlink\" title=\"1. 实时同步预览\"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>\n<h3 id=\"2-编辑工具栏\"><a href=\"#2-编辑工具栏\" class=\"headerlink\" title=\"2. 编辑工具栏\"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-editor.png\" alt=\"tool-editor\"></p>\n<h3 id=\"3-编辑模式\"><a href=\"#3-编辑模式\" class=\"headerlink\" title=\"3. 编辑模式\"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>\n<h3 id=\"4-实时的云端文稿\"><a href=\"#4-实时的云端文稿\" class=\"headerlink\" title=\"4. 实时的云端文稿\"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>\n<h3 id=\"5-离线模式\"><a href=\"#5-离线模式\" class=\"headerlink\" title=\"5. 离线模式\"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>\n<h3 id=\"6-管理工具栏\"><a href=\"#6-管理工具栏\" class=\"headerlink\" title=\"6. 管理工具栏\"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-manager.jpg\" alt=\"tool-manager\"></p>\n<p>通过管理工具栏可以：</p>\n<p><i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿<br><i class=\"icon-trash\"></i> 删除：删除当前的文稿<br><i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>\n<h3 id=\"7-阅读工具栏\"><a href=\"#7-阅读工具栏\" class=\"headerlink\" title=\"7. 阅读工具栏\"></a>7. 阅读工具栏</h3><p><img src=\"https://www.zybuluo.com/static/img/toolbar-reader.jpg\" alt=\"tool-manager\"></p>\n<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>\n<p>工具栏上的五个图标依次为：</p>\n<p><i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>\n<h3 id=\"8-阅读模式\"><a href=\"#8-阅读模式\" class=\"headerlink\" title=\"8. 阅读模式\"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n<h3 id=\"9-标签、分类和搜索\"><a href=\"#9-标签、分类和搜索\" class=\"headerlink\" title=\"9. 标签、分类和搜索\"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>\n<p>标签： 未分类</p>\n<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/file-list.png\" alt=\"file-list\"></p>\n<h3 id=\"10-文稿发布和分享\"><a href=\"#10-文稿发布和分享\" class=\"headerlink\" title=\"10. 文稿发布和分享\"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>\n<hr>\n<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>\n<p>作者 <a href=\"http://weibo.com/ghosert\">@ghosert</a><br>2016 年 07月 07日    </p>\n<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">MathJax</a> 参考更多使用方法。</p>\n<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"欢迎使用-Cmd-Markdown-编辑阅读器\"><a href=\"#欢迎使用-Cmd-Markdown-编辑阅读器\" class=\"headerlink\" title=\"欢迎使用 Cmd Markdown 编辑阅读器\"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr>\n<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日记，杂文，所见所想</li>\n<li>撰写发布技术文稿（代码支持）</li>\n<li>撰写发布学术论文（LaTeX 公式支持）</li>\n</ul>\n</blockquote>\n<p><img src=\"https://www.zybuluo.com/static/img/logo.png\" alt=\"cmd-markdown-logo\"></p>\n<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>\n<h3 id=\"Windows-Mac-Linux-全平台客户端\"><a href=\"#Windows-Mac-Linux-全平台客户端\" class=\"headerlink\" title=\"Windows/Mac/Linux 全平台客户端\"></a><a href=\"https://www.zybuluo.com/cmd/\">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>\n<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>\n<h3 id=\"1-制作一份待办事宜-Todo-列表\"><a href=\"#1-制作一份待办事宜-Todo-列表\" class=\"headerlink\" title=\"1. 制作一份待办事宜 Todo 列表\"></a>1. 制作一份待办事宜 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表\">Todo 列表</a></h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 支持以 PDF 格式导出文稿</li>\n<li><input disabled=\"\" type=\"checkbox\"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 新增 Todo 列表功能</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 修复 LaTex 公式渲染问题</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 新增 LaTex 公式编号功能</li>\n</ul>\n<h3 id=\"2-书写一个质能守恒公式-LaTeX\"><a href=\"#2-书写一个质能守恒公式-LaTeX\" class=\"headerlink\" title=\"2. 书写一个质能守恒公式[^LaTeX]\"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>\n<h3 id=\"3-高亮一段代码-code\"><a href=\"#3-高亮一段代码-code\" class=\"headerlink\" title=\"3. 高亮一段代码[^code]\"></a>3. 高亮一段代码[^code]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">@requires_authorization</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SomeClass</span>:</span><br>    <span class=\"hljs-keyword\">pass</span><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-comment\"># A comment</span><br>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;hello world&#x27;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"4-高效绘制-流程图\"><a href=\"#4-高效绘制-流程图\" class=\"headerlink\" title=\"4. 高效绘制 流程图\"></a>4. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\">流程图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs flow\">st&#x3D;&gt;start: Start<br>op&#x3D;&gt;operation: Your Operation<br>cond&#x3D;&gt;condition: Yes or No?<br>e&#x3D;&gt;end<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br></code></pre></td></tr></table></figure>\n<h3 id=\"5-高效绘制-序列图\"><a href=\"#5-高效绘制-序列图\" class=\"headerlink\" title=\"5. 高效绘制 序列图\"></a>5. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\">序列图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs seq\">Alice-&gt;Bob: Hello Bob, how are you?<br>Note right of Bob: Bob thinks<br>Bob--&gt;Alice: I am good thanks!<br></code></pre></td></tr></table></figure>\n<h3 id=\"6-高效绘制-甘特图\"><a href=\"#6-高效绘制-甘特图\" class=\"headerlink\" title=\"6. 高效绘制 甘特图\"></a>6. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图\">甘特图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gantt\">title 项目开发流程<br>section 项目确定<br>    需求分析       :a1, 2016-06-22, 3d<br>    可行性报告     :after a1, 5d<br>    概念验证       : 5d<br>section 项目实施<br>    概要设计      :2016-07-05  , 5d<br>    详细设计      :2016-07-08, 10d<br>    编码          :2016-07-15, 10d<br>    测试          :2016-07-22, 5d<br>section 发布验收<br>    发布: 2d<br>    验收: 3d<br></code></pre></td></tr></table></figure>\n<h3 id=\"7-绘制表格\"><a href=\"#7-绘制表格\" class=\"headerlink\" title=\"7. 绘制表格\"></a>7. 绘制表格</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>计算机</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<h3 id=\"8-更详细语法说明\"><a href=\"#8-更详细语法说明\" class=\"headerlink\" title=\"8. 更详细语法说明\"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>\n<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>\n<hr>\n<h2 id=\"什么是-Cmd-Markdown\"><a href=\"#什么是-Cmd-Markdown\" class=\"headerlink\" title=\"什么是 Cmd Markdown\"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>\n<h3 id=\"1-实时同步预览\"><a href=\"#1-实时同步预览\" class=\"headerlink\" title=\"1. 实时同步预览\"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>\n<h3 id=\"2-编辑工具栏\"><a href=\"#2-编辑工具栏\" class=\"headerlink\" title=\"2. 编辑工具栏\"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-editor.png\" alt=\"tool-editor\"></p>\n<h3 id=\"3-编辑模式\"><a href=\"#3-编辑模式\" class=\"headerlink\" title=\"3. 编辑模式\"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>\n<h3 id=\"4-实时的云端文稿\"><a href=\"#4-实时的云端文稿\" class=\"headerlink\" title=\"4. 实时的云端文稿\"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>\n<h3 id=\"5-离线模式\"><a href=\"#5-离线模式\" class=\"headerlink\" title=\"5. 离线模式\"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>\n<h3 id=\"6-管理工具栏\"><a href=\"#6-管理工具栏\" class=\"headerlink\" title=\"6. 管理工具栏\"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-manager.jpg\" alt=\"tool-manager\"></p>\n<p>通过管理工具栏可以：</p>\n<p><i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿<br><i class=\"icon-trash\"></i> 删除：删除当前的文稿<br><i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>\n<h3 id=\"7-阅读工具栏\"><a href=\"#7-阅读工具栏\" class=\"headerlink\" title=\"7. 阅读工具栏\"></a>7. 阅读工具栏</h3><p><img src=\"https://www.zybuluo.com/static/img/toolbar-reader.jpg\" alt=\"tool-manager\"></p>\n<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>\n<p>工具栏上的五个图标依次为：</p>\n<p><i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>\n<h3 id=\"8-阅读模式\"><a href=\"#8-阅读模式\" class=\"headerlink\" title=\"8. 阅读模式\"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n<h3 id=\"9-标签、分类和搜索\"><a href=\"#9-标签、分类和搜索\" class=\"headerlink\" title=\"9. 标签、分类和搜索\"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>\n<p>标签： 未分类</p>\n<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/file-list.png\" alt=\"file-list\"></p>\n<h3 id=\"10-文稿发布和分享\"><a href=\"#10-文稿发布和分享\" class=\"headerlink\" title=\"10. 文稿发布和分享\"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>\n<hr>\n<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>\n<p>作者 <a href=\"http://weibo.com/ghosert\">@ghosert</a><br>2016 年 07月 07日    </p>\n<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">MathJax</a> 参考更多使用方法。</p>\n<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>\n"},{"title":"如何申请SSL免费证书","abbrlink":1125805289,"date":"2020-12-10T13:38:18.000Z","_content":"\n> 搭建https协议网上有许多教程，但各种因为网站的搭建情况都有很多特殊情况导致有些场景出现>  问题，这里分别整理了不同业务场景对应的搭建教程。\n\n<!-- more -->\n\n#### Certbot申请证书\n\n> 适用场景：拥有服务器权限，可命令行操作服务器\n\n请直接参考该文章：[Nginx 通过 certbot 为网站自动配置 SSL 证书并续期](https://blog.51cto.com/wzlinux/2385116)\n\n#### Freessl申请证书\n> 适用场景：服务器在第三方平台，没有操作服务器的权限只有配置证书的权限\n\n之前在使用OSS搭建Hexo博客时由于OSS存储服务器是由阿里云控制的，无法使用certbot的方式安装证书，又不想用阿里云的证书，查找实践许久终于找到了一种靠谱的解决方案，就是使用https://freessl.cn/平台的Keymanager工具，方便快捷有效。\n\n- 首先，注册https://freessl.cn/的账号（注册就不截图了）\n\n- 下载KeyManger工具，下载地址：https://keymanager.trustasia.com/release/KeyManager-Setup-4.4.19.exe\n\n- 安装好之后，登录注册FreeSSL后进入KeyManager，如下图\n\n![image-20201217233631334](../../img/image-20201217233631334.png)\n\n- 申请证书，填写证书信息，如图\n\n![image-20201217233848143](../../img/image-20201217233848143.png)\n\n- 获取DNS验证信息\n\n![image-20201217234030155](../../img/image-20201217234030155.png)\n\n- 将验证信息填入阿里云解析记录，如下图，完成后点击上一步的【我已配置完成】。\n\n![image-20201217232930044](../../img/image-20201217232930044.png)\n\n- 进入证书管理可看到生成的证书，点击证书详情\n\n![image-20201217233140546](../../img/image-20201217233140546.png)\n\n- 获取证书PEM信息，如下图，到这一步就OK了，拿到这个证书，怎么配置就看你怎么用，是直接上传到服务器还是使用OSS证书托管都可以。\n\n![image-20201217233418235](../../img/image-20201217233418235.png)","source":"_posts/中间件/https教程.md","raw":"---\ntitle: 如何申请SSL免费证书\ncategories: 技术\ntags:\n\t- https\n\t- ssl\nabbrlink: 1125805289\ndate: 2020-12-10 21:38:18\n---\n\n> 搭建https协议网上有许多教程，但各种因为网站的搭建情况都有很多特殊情况导致有些场景出现>  问题，这里分别整理了不同业务场景对应的搭建教程。\n\n<!-- more -->\n\n#### Certbot申请证书\n\n> 适用场景：拥有服务器权限，可命令行操作服务器\n\n请直接参考该文章：[Nginx 通过 certbot 为网站自动配置 SSL 证书并续期](https://blog.51cto.com/wzlinux/2385116)\n\n#### Freessl申请证书\n> 适用场景：服务器在第三方平台，没有操作服务器的权限只有配置证书的权限\n\n之前在使用OSS搭建Hexo博客时由于OSS存储服务器是由阿里云控制的，无法使用certbot的方式安装证书，又不想用阿里云的证书，查找实践许久终于找到了一种靠谱的解决方案，就是使用https://freessl.cn/平台的Keymanager工具，方便快捷有效。\n\n- 首先，注册https://freessl.cn/的账号（注册就不截图了）\n\n- 下载KeyManger工具，下载地址：https://keymanager.trustasia.com/release/KeyManager-Setup-4.4.19.exe\n\n- 安装好之后，登录注册FreeSSL后进入KeyManager，如下图\n\n![image-20201217233631334](../../img/image-20201217233631334.png)\n\n- 申请证书，填写证书信息，如图\n\n![image-20201217233848143](../../img/image-20201217233848143.png)\n\n- 获取DNS验证信息\n\n![image-20201217234030155](../../img/image-20201217234030155.png)\n\n- 将验证信息填入阿里云解析记录，如下图，完成后点击上一步的【我已配置完成】。\n\n![image-20201217232930044](../../img/image-20201217232930044.png)\n\n- 进入证书管理可看到生成的证书，点击证书详情\n\n![image-20201217233140546](../../img/image-20201217233140546.png)\n\n- 获取证书PEM信息，如下图，到这一步就OK了，拿到这个证书，怎么配置就看你怎么用，是直接上传到服务器还是使用OSS证书托管都可以。\n\n![image-20201217233418235](../../img/image-20201217233418235.png)","slug":"中间件/https教程","published":1,"updated":"2020-12-18T15:04:43.635Z","_id":"ckitw8kn9001r88cdalixe4ld","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>搭建https协议网上有许多教程，但各种因为网站的搭建情况都有很多特殊情况导致有些场景出现&gt;  问题，这里分别整理了不同业务场景对应的搭建教程。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h4 id=\"Certbot申请证书\"><a href=\"#Certbot申请证书\" class=\"headerlink\" title=\"Certbot申请证书\"></a>Certbot申请证书</h4><blockquote>\n<p>适用场景：拥有服务器权限，可命令行操作服务器</p>\n</blockquote>\n<p>请直接参考该文章：<a href=\"https://blog.51cto.com/wzlinux/2385116\">Nginx 通过 certbot 为网站自动配置 SSL 证书并续期</a></p>\n<h4 id=\"Freessl申请证书\"><a href=\"#Freessl申请证书\" class=\"headerlink\" title=\"Freessl申请证书\"></a>Freessl申请证书</h4><blockquote>\n<p>适用场景：服务器在第三方平台，没有操作服务器的权限只有配置证书的权限</p>\n</blockquote>\n<p>之前在使用OSS搭建Hexo博客时由于OSS存储服务器是由阿里云控制的，无法使用certbot的方式安装证书，又不想用阿里云的证书，查找实践许久终于找到了一种靠谱的解决方案，就是使用<a href=\"https://freessl.cn/平台的Keymanager工具，方便快捷有效。\">https://freessl.cn/平台的Keymanager工具，方便快捷有效。</a></p>\n<ul>\n<li><p>首先，注册<a href=\"https://freessl.cn/的账号（注册就不截图了）\">https://freessl.cn/的账号（注册就不截图了）</a></p>\n</li>\n<li><p>下载KeyManger工具，下载地址：<a href=\"https://keymanager.trustasia.com/release/KeyManager-Setup-4.4.19.exe\">https://keymanager.trustasia.com/release/KeyManager-Setup-4.4.19.exe</a></p>\n</li>\n<li><p>安装好之后，登录注册FreeSSL后进入KeyManager，如下图</p>\n</li>\n</ul>\n<p><img src=\"../../img/image-20201217233631334.png\" alt=\"image-20201217233631334\"></p>\n<ul>\n<li>申请证书，填写证书信息，如图</li>\n</ul>\n<p><img src=\"../../img/image-20201217233848143.png\" alt=\"image-20201217233848143\"></p>\n<ul>\n<li>获取DNS验证信息</li>\n</ul>\n<p><img src=\"../../img/image-20201217234030155.png\" alt=\"image-20201217234030155\"></p>\n<ul>\n<li>将验证信息填入阿里云解析记录，如下图，完成后点击上一步的【我已配置完成】。</li>\n</ul>\n<p><img src=\"../../img/image-20201217232930044.png\" alt=\"image-20201217232930044\"></p>\n<ul>\n<li>进入证书管理可看到生成的证书，点击证书详情</li>\n</ul>\n<p><img src=\"../../img/image-20201217233140546.png\" alt=\"image-20201217233140546\"></p>\n<ul>\n<li>获取证书PEM信息，如下图，到这一步就OK了，拿到这个证书，怎么配置就看你怎么用，是直接上传到服务器还是使用OSS证书托管都可以。</li>\n</ul>\n<p><img src=\"../../img/image-20201217233418235.png\" alt=\"image-20201217233418235\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"<blockquote>\n<p>搭建https协议网上有许多教程，但各种因为网站的搭建情况都有很多特殊情况导致有些场景出现&gt;  问题，这里分别整理了不同业务场景对应的搭建教程。</p>\n</blockquote>","more":"<h4 id=\"Certbot申请证书\"><a href=\"#Certbot申请证书\" class=\"headerlink\" title=\"Certbot申请证书\"></a>Certbot申请证书</h4><blockquote>\n<p>适用场景：拥有服务器权限，可命令行操作服务器</p>\n</blockquote>\n<p>请直接参考该文章：<a href=\"https://blog.51cto.com/wzlinux/2385116\">Nginx 通过 certbot 为网站自动配置 SSL 证书并续期</a></p>\n<h4 id=\"Freessl申请证书\"><a href=\"#Freessl申请证书\" class=\"headerlink\" title=\"Freessl申请证书\"></a>Freessl申请证书</h4><blockquote>\n<p>适用场景：服务器在第三方平台，没有操作服务器的权限只有配置证书的权限</p>\n</blockquote>\n<p>之前在使用OSS搭建Hexo博客时由于OSS存储服务器是由阿里云控制的，无法使用certbot的方式安装证书，又不想用阿里云的证书，查找实践许久终于找到了一种靠谱的解决方案，就是使用<a href=\"https://freessl.cn/平台的Keymanager工具，方便快捷有效。\">https://freessl.cn/平台的Keymanager工具，方便快捷有效。</a></p>\n<ul>\n<li><p>首先，注册<a href=\"https://freessl.cn/的账号（注册就不截图了）\">https://freessl.cn/的账号（注册就不截图了）</a></p>\n</li>\n<li><p>下载KeyManger工具，下载地址：<a href=\"https://keymanager.trustasia.com/release/KeyManager-Setup-4.4.19.exe\">https://keymanager.trustasia.com/release/KeyManager-Setup-4.4.19.exe</a></p>\n</li>\n<li><p>安装好之后，登录注册FreeSSL后进入KeyManager，如下图</p>\n</li>\n</ul>\n<p><img src=\"../../img/image-20201217233631334.png\" alt=\"image-20201217233631334\"></p>\n<ul>\n<li>申请证书，填写证书信息，如图</li>\n</ul>\n<p><img src=\"../../img/image-20201217233848143.png\" alt=\"image-20201217233848143\"></p>\n<ul>\n<li>获取DNS验证信息</li>\n</ul>\n<p><img src=\"../../img/image-20201217234030155.png\" alt=\"image-20201217234030155\"></p>\n<ul>\n<li>将验证信息填入阿里云解析记录，如下图，完成后点击上一步的【我已配置完成】。</li>\n</ul>\n<p><img src=\"../../img/image-20201217232930044.png\" alt=\"image-20201217232930044\"></p>\n<ul>\n<li>进入证书管理可看到生成的证书，点击证书详情</li>\n</ul>\n<p><img src=\"../../img/image-20201217233140546.png\" alt=\"image-20201217233140546\"></p>\n<ul>\n<li>获取证书PEM信息，如下图，到这一步就OK了，拿到这个证书，怎么配置就看你怎么用，是直接上传到服务器还是使用OSS证书托管都可以。</li>\n</ul>\n<p><img src=\"../../img/image-20201217233418235.png\" alt=\"image-20201217233418235\"></p>"},{"title":"kafka入门教程[一]","abbrlink":1125805293,"date":"2018-04-10T13:38:18.000Z","_content":"\n\n## 一、概念理解\n\n**Kafka**是最初由Linkedin公司开发，是一个分布式、支持分区的（partition）、多副本的（replica），基于zookeeper协调的分布式消息系统，它的最大的特性就是可以实时的处理大量数据以满足各种需求场景：比如基于hadoop的批处理系统、低延迟的实时系统、storm/Spark流式处理引擎，web/nginx日志、访问日志，消息服务等等，用scala语言编写，Linkedin于2010年贡献给了Apache基金会并成为顶级开源 项目。\n\n<!-- more -->\n\n### （1）产生背景\n\n当今社会各种应用系统诸如商业、社交、搜索、浏览等像信息工厂一样不断的生产出各种信息，在大数据时代，我们面临如下几个挑战：\n\n1. 如何收集这些巨大的信息\n2. 如何分析它\n3. 如何及时做到如上两点\n\n以上几个挑战形成了一个业务需求模型，即生产者生产（produce）各种信息，消费者消费（consume）（处理分析）这些信息，而在生产者与消费者之间，需要一个沟通两者的桥梁-消息系统。从一个微观层面来说，这种需求也可理解为不同的系统之间如何传递消息。\n\n**Kafka诞生**\nKafka由 linked-in 开源\nkafka-即是解决上述这类问题的一个框架，它实现了生产者和消费者之间的无缝连接。\nkafka-高产出的分布式消息系统(A high-throughput distributed messaging system)\n\n### （2）Kafka的特性\n\n- **高吞吐量、低延迟**：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒\n- **可扩展性**：kafka集群支持热扩展\n- **持久性、可靠性**：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失\n- **容错性**：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）\n- **高并发**：支持数千个客户端同时读写\n\n### （3）Kafka场景应用\n\n- **日志收集**：一个公司可以用Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer，例如hadoop、Hbase、Solr等。\n- **消息系统**：解耦和生产者和消费者、缓存消息等。\n- **用户活动跟踪**：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖掘。\n- **运营指标**：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告。\n- **流式处理**：比如spark streaming和storm\n- **事件源**\n\n### （4）Kafka一些重要设计思想\n\n- **Consumergroup**：各个consumer可以组成一个组，每个消息只能被组中的一个consumer消费，如果一个消息可以被多个consumer消费的话，那么这些consumer必须在不同的组。\n- **消息状态**：在Kafka中，消息的状态被保存在consumer中，broker不会关心哪个消息被消费了被谁消费了，只记录一个offset值（指向partition中下一个要被消费的消息位置），这就意味着如果consumer处理不好的话，broker上的一个消息可能会被消费多次。\n- **消息持久化**：Kafka中会把消息持久化到本地文件系统中，并且保持极高的效率。\n- **消息有效期**：Kafka会长久保留其中的消息，以便consumer可以多次消费，当然其中很多细节是可配置的。\n- **批量发送**：Kafka支持以消息集合为单位进行批量发送，以提高push效率。\n- **push-and-pull** :Kafka中的Producer和consumer采用的是push-and-pull模式，即Producer只管向broker push消息，consumer只管从broker pull消息，两者对消息的生产和消费是异步的。\n- **Kafka集群中broker之间的关系**：不是主从关系，各个broker在集群中地位一样，我们可以随意的增加或删除任何一个broker节点。\n- **负载均衡方面**： Kafka提供了一个 metadata API来管理broker之间的负载（对Kafka0.8.x而言，对于0.7.x主要靠zookeeper来实现负载均衡）。\n- **同步异步**：Producer采用异步push方式，极大提高Kafka系统的吞吐率（可以通过参数控制是采用同步还是异步方式）。\n- **分区机制partition**：Kafka的broker端支持消息分区，Producer可以决定把消息发到哪个分区，在一个分区中消息的顺序就是Producer发送消息的顺序，一个主题中可以有多个分区，具体分区的数量是可配置的。分区的意义很重大，后面的内容会逐渐体现。\n- **离线数据装载**：Kafka由于对可拓展的数据持久化的支持，它也非常适合向Hadoop或者数据仓库中进行数据装载。\n- **插件支持**：现在不少活跃的社区已经开发出不少插件来拓展Kafka的功能，如用来配合Storm、Hadoop、flume相关的插件。\n\n## 二、消息队列通信的模式\n\n### （1）点对点模式\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624144932564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n如上图所示，点对点模式通常是基于拉取或者轮询的消息传送模型，这个模型的特点是发送到队列的消息被一个且只有一个消费者进行处理。生产者将消息放入消息队列后，由消费者主动的去拉取消息进行消费。点对点模型的的优点是消费者拉取消息的频率可以由自己控制。但是消息队列是否有消息需要消费，在消费者端无法感知，所以在消费者端需要额外的线程去监控。\n\n### （2）发布订阅模式\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020062414495136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n如上图所示，发布订阅模式是一个基于消息送的消息传送模型，改模型可以有多种不同的订阅者。生产者将消息放入消息队列后，队列会将消息推送给订阅过该类消息的消费者（类似微信公众号）。由于是消费者被动接收推送，所以无需感知消息队列是否有待消费的消息！但是consumer1、consumer2、consumer3由于机器性能不一样，所以处理消息的能力也会不一样，但消息队列却无法感知消费者消费的速度！所以推送的速度成了发布订阅模模式的一个问题！假设三个消费者处理速度分别是8M/s、5M/s、2M/s，如果队列推送的速度为5M/s，则consumer3无法承受！如果队列推送的速度为2M/s，则consumer1、consumer2会出现资源的极大浪费！\n\n## 三、Kafka的架构原理\n\n上面简单的介绍了为什么需要消息队列以及消息队列通信的两种模式，下面主角介绍Kafka。Kafka是一种**高吞吐量的分布式发布订阅消息系统**，它可以处理消费者规模的网站中的所有动作流数据，具有高性能、持久化、多副本备份、横向扩展能力。。\n\n### （1）基础架构与名词解释\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624145628396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n\n- Producer：Producer即生产者，消息的产生者，是消息的入口。\n- Broker：Broker是kafka实例，每个服务器上有一个或多个kafka的实例，我们姑且认为每个broker对应一台服务器。每个kafka集群内的broker都有一个不重复的编号，如图中的broker-0、broker-1等……\n- Topic：消息的主题，可以理解为消息的分类，kafka的数据就保存在topic。在每个broker上都可以创建多个topic。\n- Partition：Topic的分区，每个topic可以有多个分区，分区的作用是做负载，提高kafka的吞吐量。同一个topic在不同的分区的数据是不重复的，partition的表现形式就是一个一个的文件夹！\n- Replication:每一个分区都有多个副本，副本的作用是做备胎。当主分区（Leader）故障的时候会选择一个备胎（Follower）上位，成为Leader。在kafka中默认副本的最大数量是10个，且副本的数量不能大于Broker的数量，follower和leader绝对是在不同的机器，同一机器对同一个分区也只可能存放一个副本（包括自己）。\n- Message：每一条发送的消息主体。\n- Consumer：消费者，即消息的消费方，是消息的出口。\n- Consumer Group：我们可以将多个消费组组成一个消费者组，在kafka的设计中同一个分区的数据只能被消费者组中的某一个消费者消费。同一个消费者组的消费者可以消费同一个topic的不同分区的数据，这也是为了提高kafka的吞吐量！\n- Zookeeper：kafka集群依赖zookeeper来保存集群的的元信息，来保证系统的可用性。\n\n### （2）工作流程分析\n\n#### （1）发送数据\n\n我们看上面的架构图中，producer就是生产者，是数据的入口。注意看图中的红色箭头，**Producer在写入数据的时候永远的找leader**，不会直接将数据写入**follower**！那leader怎么找呢？写入的流程又是什么样的呢？我们看下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624150617430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n发送的流程就在图中已经说明了，就不单独在文字列出来了！需要注意的一点是，消息写入leader后，follower是主动的去leader进行同步的！producer采用push模式将数据发布到broker，每条消息追加到分区中，顺序写入磁盘，所以保证同一分区内的数据是有序的！写入示意图如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624150636117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n上面说到数据会写入到不同的分区，那kafka为什么要做分区呢？相信大家应该也能猜到，分区的主要目的是：\n\n1. **方便扩展**：因为一个topic可以有多个partition，所以我们可以通过扩展机器去轻松的应对日益增长的数据量。\n2. **提高并发**：以partition为读写单位，可以多个消费者同时消费数据，提高了消息的处理效率。\n\n熟悉负载均衡的朋友应该知道，当我们向某个服务器发送请求的时候，服务端可能会对请求做一个负载，将流量分发到不同的服务器，那在kafka中，如果某个topic有多个partition，producer又怎么知道该将数据发往哪个partition呢？kafka中有几个原则：\n\n1. partition在写入的时候可以指定需要写入的partition，如果有指定，则写入对应的partition。\n2. 如果没有指定partition，但是设置了数据的key，则会根据key的值hash出一个partition。\n3. 如果既没指定partition，又没有设置key，则会轮询选出一个partition。\n\n保证消息不丢失是一个消息队列中间件的基本保证，那producer在向kafka写入消息的时候，怎么保证消息不丢失呢？其实上面的写入流程图中有描述出来，那就是通过ACK应答机制！在生产者向队列写入数据的时候可以设置参数来确定是否确认kafka接收到数据，这个参数可设置的值为**0、1、all**。\n\n- 0代表producer往集群发送数据不需要等到集群的返回，不确保消息发送成功。安全性最低但是效率最高。\n- 1代表producer往集群发送数据只要leader应答就可以发送下一条，只确保leader发送成功。\n- all代表producer往集群发送数据需要所有的follower都完成从leader的同步才会发送下一条，确保leader发送成功和所有的副本都完成备份。安全性最高，但是效率最低。\n\n最后要注意的是，如果往不存在的topic写数据，能不能写入成功呢？kafka会自动创建topic，分区和副本的数量根据默认配置都是1。\n\n#### （2）保存数据\n\nProducer将数据写入kafka后，集群就需要对数据进行保存了！kafka将数据保存在磁盘，可能在我们的一般的认知里，写入磁盘是比较耗时的操作，不适合这种高并发的组件。Kafka初始会单独开辟一块磁盘空间，顺序写入数据（效率比随机写入高）。\n\n##### （1）Partition 结构\n\n前面说过了每个topic都可以分为一个或多个partition，如果你觉得topic比较抽象，那partition就是比较具体的东西了！Partition在服务器上的表现形式就是一个一个的文件夹，每个partition的文件夹下面会有多组segment文件，每组segment文件又包含.index文件、.log文件、.timeindex文件（早期版本中没有）三个文件， log文件就实际是存储message的地方，而index和timeindex文件为索引文件，用于检索消息。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624170905606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n如上图，这个partition有三组segment文件，每个log文件的大小是一样的，但是存储的message数量是不一定相等的（每条的message大小不一致）。文件的命名是以该segment最小offset来命名的，如000.index存储offset为0~368795的消息，kafka就是利用分段+索引的方式来解决查找效率的问题。\n\n##### （2）Message结构\n\n上面说到log文件就实际是存储message的地方，我们在producer往kafka写入的也是一条一条的message，那存储在log中的message是什么样子的呢？消息主要包含消息体、消息大小、offset、压缩类型……等等！我们重点需要知道的是下面三个：\n\n- **offset**：offset是一个占8byte的有序id号，它可以唯一确定每条消息在parition内的位置！\n- **消息大小**：消息大小占用4byte，用于描述消息的大小。\n- **消息体**：消息体存放的是实际的消息数据（被压缩过），占用的空间根据具体的消息而不一样。\n\n##### （3）存储策略\n\n无论消息是否被消费，kafka都会保存所有的消息。那对于旧数据有什么删除策略呢？\n\n- 基于时间，默认配置是168小时（7天）。\n- 基于大小，默认配置是1073741824。\n\n需要注意的是，kafka读取特定消息的时间复杂度是O(1)，所以这里删除过期的文件并不会提高kafka的性能！\n\n#### （3）消费数据\n\n消息存储在log文件后，消费者就可以进行消费了。在讲消息队列通信的两种模式的时候讲到过点对点模式和发布订阅模式。Kafka采用的是点对点的模式，消费者主动的去kafka集群拉取消息，与producer相同的是，消费者在拉取消息的时候也是找**leader**去拉取。\n\n多个消费者可以组成一个消费者组（consumer group），每个消费者组都有一个组id！同一个消费组者的消费者可以消费同一topic下不同分区的数据，但是不会组内多个消费者消费同一分区的数据！！！我们看下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624171149382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n图示是消费者组内的消费者小于partition数量的情况，所以会出现某个消费者消费多个partition数据的情况，消费的速度也就不及只处理一个partition的消费者的处理速度！如果是消费者组的消费者多于partition的数量，那会不会出现多个消费者消费同一个partition的数据呢？上面已经提到过不会出现这种情况！多出来的消费者不消费任何partition的数据。所以在实际的应用中，**建议消费者组的consumer的数量与partition的数量一致**！\n\n在保存数据的小节里面，我们聊到了partition划分为多组segment，每个segment又包含.log、.index、.timeindex文件，存放的每条message包含offset、消息大小、消息体……我们多次提到segment和offset，查找消息的时候是怎么利用segment+offset配合查找的呢？假如现在需要查找一个offset为368801的message是什么样的过程呢？我们先看看下面的图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624171235860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n\n1. 先找到offset的368801message所在的segment文件（利用二分法查找），这里找到的就是在第二个segment文件。\n2. 打开找到的segment中的.index文件（也就是368796.index文件，该文件起始偏移量为368796+1，我们要查找的offset为368801的message在该index内的偏移量为368796+5=368801，所以这里要查找的相对offset为5）。由于该文件采用的是稀疏索引的方式存储着相对offset及对应message物理偏移量的关系，所以直接找相对offset为5的索引找不到，这里同样利用二分法查找相对offset小于或者等于指定的相对offset的索引条目中最大的那个相对offset，所以找到的是相对offset为4的这个索引。\n3. 根据找到的相对offset为4的索引确定message存储的物理偏移位置为256。打开数据文件，从位置为256的那个地方开始顺序扫描直到找到offset为368801的那条Message。\n\n这套机制是建立在offset为有序的基础上，利用segment+有序offset+稀疏索引+二分查找+顺序查找等多种手段来高效的查找数据！至此，消费者就能拿到需要处理的数据进行处理了。那每个消费者又是怎么记录自己消费的位置呢？在早期的版本中，消费者将消费到的offset维护zookeeper中，consumer每间隔一段时间上报一次，这里容易导致重复消费，且性能不好！在新的版本中消费者消费到的offset已经直接维护在kafk集群的__consumer_offsets这个topic中！","source":"_posts/中间件/kafka入门教程.md","raw":"---\ntitle: kafka入门教程[一]\ncategories: 技术\ntags:\n\t- Kafka\nabbrlink: 1125805293\ndate: 2018-04-10 21:38:18\n---\n\n\n## 一、概念理解\n\n**Kafka**是最初由Linkedin公司开发，是一个分布式、支持分区的（partition）、多副本的（replica），基于zookeeper协调的分布式消息系统，它的最大的特性就是可以实时的处理大量数据以满足各种需求场景：比如基于hadoop的批处理系统、低延迟的实时系统、storm/Spark流式处理引擎，web/nginx日志、访问日志，消息服务等等，用scala语言编写，Linkedin于2010年贡献给了Apache基金会并成为顶级开源 项目。\n\n<!-- more -->\n\n### （1）产生背景\n\n当今社会各种应用系统诸如商业、社交、搜索、浏览等像信息工厂一样不断的生产出各种信息，在大数据时代，我们面临如下几个挑战：\n\n1. 如何收集这些巨大的信息\n2. 如何分析它\n3. 如何及时做到如上两点\n\n以上几个挑战形成了一个业务需求模型，即生产者生产（produce）各种信息，消费者消费（consume）（处理分析）这些信息，而在生产者与消费者之间，需要一个沟通两者的桥梁-消息系统。从一个微观层面来说，这种需求也可理解为不同的系统之间如何传递消息。\n\n**Kafka诞生**\nKafka由 linked-in 开源\nkafka-即是解决上述这类问题的一个框架，它实现了生产者和消费者之间的无缝连接。\nkafka-高产出的分布式消息系统(A high-throughput distributed messaging system)\n\n### （2）Kafka的特性\n\n- **高吞吐量、低延迟**：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒\n- **可扩展性**：kafka集群支持热扩展\n- **持久性、可靠性**：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失\n- **容错性**：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）\n- **高并发**：支持数千个客户端同时读写\n\n### （3）Kafka场景应用\n\n- **日志收集**：一个公司可以用Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer，例如hadoop、Hbase、Solr等。\n- **消息系统**：解耦和生产者和消费者、缓存消息等。\n- **用户活动跟踪**：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖掘。\n- **运营指标**：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告。\n- **流式处理**：比如spark streaming和storm\n- **事件源**\n\n### （4）Kafka一些重要设计思想\n\n- **Consumergroup**：各个consumer可以组成一个组，每个消息只能被组中的一个consumer消费，如果一个消息可以被多个consumer消费的话，那么这些consumer必须在不同的组。\n- **消息状态**：在Kafka中，消息的状态被保存在consumer中，broker不会关心哪个消息被消费了被谁消费了，只记录一个offset值（指向partition中下一个要被消费的消息位置），这就意味着如果consumer处理不好的话，broker上的一个消息可能会被消费多次。\n- **消息持久化**：Kafka中会把消息持久化到本地文件系统中，并且保持极高的效率。\n- **消息有效期**：Kafka会长久保留其中的消息，以便consumer可以多次消费，当然其中很多细节是可配置的。\n- **批量发送**：Kafka支持以消息集合为单位进行批量发送，以提高push效率。\n- **push-and-pull** :Kafka中的Producer和consumer采用的是push-and-pull模式，即Producer只管向broker push消息，consumer只管从broker pull消息，两者对消息的生产和消费是异步的。\n- **Kafka集群中broker之间的关系**：不是主从关系，各个broker在集群中地位一样，我们可以随意的增加或删除任何一个broker节点。\n- **负载均衡方面**： Kafka提供了一个 metadata API来管理broker之间的负载（对Kafka0.8.x而言，对于0.7.x主要靠zookeeper来实现负载均衡）。\n- **同步异步**：Producer采用异步push方式，极大提高Kafka系统的吞吐率（可以通过参数控制是采用同步还是异步方式）。\n- **分区机制partition**：Kafka的broker端支持消息分区，Producer可以决定把消息发到哪个分区，在一个分区中消息的顺序就是Producer发送消息的顺序，一个主题中可以有多个分区，具体分区的数量是可配置的。分区的意义很重大，后面的内容会逐渐体现。\n- **离线数据装载**：Kafka由于对可拓展的数据持久化的支持，它也非常适合向Hadoop或者数据仓库中进行数据装载。\n- **插件支持**：现在不少活跃的社区已经开发出不少插件来拓展Kafka的功能，如用来配合Storm、Hadoop、flume相关的插件。\n\n## 二、消息队列通信的模式\n\n### （1）点对点模式\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624144932564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n如上图所示，点对点模式通常是基于拉取或者轮询的消息传送模型，这个模型的特点是发送到队列的消息被一个且只有一个消费者进行处理。生产者将消息放入消息队列后，由消费者主动的去拉取消息进行消费。点对点模型的的优点是消费者拉取消息的频率可以由自己控制。但是消息队列是否有消息需要消费，在消费者端无法感知，所以在消费者端需要额外的线程去监控。\n\n### （2）发布订阅模式\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020062414495136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n如上图所示，发布订阅模式是一个基于消息送的消息传送模型，改模型可以有多种不同的订阅者。生产者将消息放入消息队列后，队列会将消息推送给订阅过该类消息的消费者（类似微信公众号）。由于是消费者被动接收推送，所以无需感知消息队列是否有待消费的消息！但是consumer1、consumer2、consumer3由于机器性能不一样，所以处理消息的能力也会不一样，但消息队列却无法感知消费者消费的速度！所以推送的速度成了发布订阅模模式的一个问题！假设三个消费者处理速度分别是8M/s、5M/s、2M/s，如果队列推送的速度为5M/s，则consumer3无法承受！如果队列推送的速度为2M/s，则consumer1、consumer2会出现资源的极大浪费！\n\n## 三、Kafka的架构原理\n\n上面简单的介绍了为什么需要消息队列以及消息队列通信的两种模式，下面主角介绍Kafka。Kafka是一种**高吞吐量的分布式发布订阅消息系统**，它可以处理消费者规模的网站中的所有动作流数据，具有高性能、持久化、多副本备份、横向扩展能力。。\n\n### （1）基础架构与名词解释\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624145628396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n\n- Producer：Producer即生产者，消息的产生者，是消息的入口。\n- Broker：Broker是kafka实例，每个服务器上有一个或多个kafka的实例，我们姑且认为每个broker对应一台服务器。每个kafka集群内的broker都有一个不重复的编号，如图中的broker-0、broker-1等……\n- Topic：消息的主题，可以理解为消息的分类，kafka的数据就保存在topic。在每个broker上都可以创建多个topic。\n- Partition：Topic的分区，每个topic可以有多个分区，分区的作用是做负载，提高kafka的吞吐量。同一个topic在不同的分区的数据是不重复的，partition的表现形式就是一个一个的文件夹！\n- Replication:每一个分区都有多个副本，副本的作用是做备胎。当主分区（Leader）故障的时候会选择一个备胎（Follower）上位，成为Leader。在kafka中默认副本的最大数量是10个，且副本的数量不能大于Broker的数量，follower和leader绝对是在不同的机器，同一机器对同一个分区也只可能存放一个副本（包括自己）。\n- Message：每一条发送的消息主体。\n- Consumer：消费者，即消息的消费方，是消息的出口。\n- Consumer Group：我们可以将多个消费组组成一个消费者组，在kafka的设计中同一个分区的数据只能被消费者组中的某一个消费者消费。同一个消费者组的消费者可以消费同一个topic的不同分区的数据，这也是为了提高kafka的吞吐量！\n- Zookeeper：kafka集群依赖zookeeper来保存集群的的元信息，来保证系统的可用性。\n\n### （2）工作流程分析\n\n#### （1）发送数据\n\n我们看上面的架构图中，producer就是生产者，是数据的入口。注意看图中的红色箭头，**Producer在写入数据的时候永远的找leader**，不会直接将数据写入**follower**！那leader怎么找呢？写入的流程又是什么样的呢？我们看下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624150617430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n发送的流程就在图中已经说明了，就不单独在文字列出来了！需要注意的一点是，消息写入leader后，follower是主动的去leader进行同步的！producer采用push模式将数据发布到broker，每条消息追加到分区中，顺序写入磁盘，所以保证同一分区内的数据是有序的！写入示意图如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624150636117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n上面说到数据会写入到不同的分区，那kafka为什么要做分区呢？相信大家应该也能猜到，分区的主要目的是：\n\n1. **方便扩展**：因为一个topic可以有多个partition，所以我们可以通过扩展机器去轻松的应对日益增长的数据量。\n2. **提高并发**：以partition为读写单位，可以多个消费者同时消费数据，提高了消息的处理效率。\n\n熟悉负载均衡的朋友应该知道，当我们向某个服务器发送请求的时候，服务端可能会对请求做一个负载，将流量分发到不同的服务器，那在kafka中，如果某个topic有多个partition，producer又怎么知道该将数据发往哪个partition呢？kafka中有几个原则：\n\n1. partition在写入的时候可以指定需要写入的partition，如果有指定，则写入对应的partition。\n2. 如果没有指定partition，但是设置了数据的key，则会根据key的值hash出一个partition。\n3. 如果既没指定partition，又没有设置key，则会轮询选出一个partition。\n\n保证消息不丢失是一个消息队列中间件的基本保证，那producer在向kafka写入消息的时候，怎么保证消息不丢失呢？其实上面的写入流程图中有描述出来，那就是通过ACK应答机制！在生产者向队列写入数据的时候可以设置参数来确定是否确认kafka接收到数据，这个参数可设置的值为**0、1、all**。\n\n- 0代表producer往集群发送数据不需要等到集群的返回，不确保消息发送成功。安全性最低但是效率最高。\n- 1代表producer往集群发送数据只要leader应答就可以发送下一条，只确保leader发送成功。\n- all代表producer往集群发送数据需要所有的follower都完成从leader的同步才会发送下一条，确保leader发送成功和所有的副本都完成备份。安全性最高，但是效率最低。\n\n最后要注意的是，如果往不存在的topic写数据，能不能写入成功呢？kafka会自动创建topic，分区和副本的数量根据默认配置都是1。\n\n#### （2）保存数据\n\nProducer将数据写入kafka后，集群就需要对数据进行保存了！kafka将数据保存在磁盘，可能在我们的一般的认知里，写入磁盘是比较耗时的操作，不适合这种高并发的组件。Kafka初始会单独开辟一块磁盘空间，顺序写入数据（效率比随机写入高）。\n\n##### （1）Partition 结构\n\n前面说过了每个topic都可以分为一个或多个partition，如果你觉得topic比较抽象，那partition就是比较具体的东西了！Partition在服务器上的表现形式就是一个一个的文件夹，每个partition的文件夹下面会有多组segment文件，每组segment文件又包含.index文件、.log文件、.timeindex文件（早期版本中没有）三个文件， log文件就实际是存储message的地方，而index和timeindex文件为索引文件，用于检索消息。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624170905606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n如上图，这个partition有三组segment文件，每个log文件的大小是一样的，但是存储的message数量是不一定相等的（每条的message大小不一致）。文件的命名是以该segment最小offset来命名的，如000.index存储offset为0~368795的消息，kafka就是利用分段+索引的方式来解决查找效率的问题。\n\n##### （2）Message结构\n\n上面说到log文件就实际是存储message的地方，我们在producer往kafka写入的也是一条一条的message，那存储在log中的message是什么样子的呢？消息主要包含消息体、消息大小、offset、压缩类型……等等！我们重点需要知道的是下面三个：\n\n- **offset**：offset是一个占8byte的有序id号，它可以唯一确定每条消息在parition内的位置！\n- **消息大小**：消息大小占用4byte，用于描述消息的大小。\n- **消息体**：消息体存放的是实际的消息数据（被压缩过），占用的空间根据具体的消息而不一样。\n\n##### （3）存储策略\n\n无论消息是否被消费，kafka都会保存所有的消息。那对于旧数据有什么删除策略呢？\n\n- 基于时间，默认配置是168小时（7天）。\n- 基于大小，默认配置是1073741824。\n\n需要注意的是，kafka读取特定消息的时间复杂度是O(1)，所以这里删除过期的文件并不会提高kafka的性能！\n\n#### （3）消费数据\n\n消息存储在log文件后，消费者就可以进行消费了。在讲消息队列通信的两种模式的时候讲到过点对点模式和发布订阅模式。Kafka采用的是点对点的模式，消费者主动的去kafka集群拉取消息，与producer相同的是，消费者在拉取消息的时候也是找**leader**去拉取。\n\n多个消费者可以组成一个消费者组（consumer group），每个消费者组都有一个组id！同一个消费组者的消费者可以消费同一topic下不同分区的数据，但是不会组内多个消费者消费同一分区的数据！！！我们看下图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624171149382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n图示是消费者组内的消费者小于partition数量的情况，所以会出现某个消费者消费多个partition数据的情况，消费的速度也就不及只处理一个partition的消费者的处理速度！如果是消费者组的消费者多于partition的数量，那会不会出现多个消费者消费同一个partition的数据呢？上面已经提到过不会出现这种情况！多出来的消费者不消费任何partition的数据。所以在实际的应用中，**建议消费者组的consumer的数量与partition的数量一致**！\n\n在保存数据的小节里面，我们聊到了partition划分为多组segment，每个segment又包含.log、.index、.timeindex文件，存放的每条message包含offset、消息大小、消息体……我们多次提到segment和offset，查找消息的时候是怎么利用segment+offset配合查找的呢？假如现在需要查找一个offset为368801的message是什么样的过程呢？我们先看看下面的图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200624171235860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70)\n\n1. 先找到offset的368801message所在的segment文件（利用二分法查找），这里找到的就是在第二个segment文件。\n2. 打开找到的segment中的.index文件（也就是368796.index文件，该文件起始偏移量为368796+1，我们要查找的offset为368801的message在该index内的偏移量为368796+5=368801，所以这里要查找的相对offset为5）。由于该文件采用的是稀疏索引的方式存储着相对offset及对应message物理偏移量的关系，所以直接找相对offset为5的索引找不到，这里同样利用二分法查找相对offset小于或者等于指定的相对offset的索引条目中最大的那个相对offset，所以找到的是相对offset为4的这个索引。\n3. 根据找到的相对offset为4的索引确定message存储的物理偏移位置为256。打开数据文件，从位置为256的那个地方开始顺序扫描直到找到offset为368801的那条Message。\n\n这套机制是建立在offset为有序的基础上，利用segment+有序offset+稀疏索引+二分查找+顺序查找等多种手段来高效的查找数据！至此，消费者就能拿到需要处理的数据进行处理了。那每个消费者又是怎么记录自己消费的位置呢？在早期的版本中，消费者将消费到的offset维护zookeeper中，consumer每间隔一段时间上报一次，这里容易导致重复消费，且性能不好！在新的版本中消费者消费到的offset已经直接维护在kafk集群的__consumer_offsets这个topic中！","slug":"中间件/kafka入门教程","published":1,"updated":"2020-12-18T15:04:43.635Z","_id":"ckitw8knl003588cdfri01utb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、概念理解\"><a href=\"#一、概念理解\" class=\"headerlink\" title=\"一、概念理解\"></a>一、概念理解</h2><p><strong>Kafka</strong>是最初由Linkedin公司开发，是一个分布式、支持分区的（partition）、多副本的（replica），基于zookeeper协调的分布式消息系统，它的最大的特性就是可以实时的处理大量数据以满足各种需求场景：比如基于hadoop的批处理系统、低延迟的实时系统、storm/Spark流式处理引擎，web/nginx日志、访问日志，消息服务等等，用scala语言编写，Linkedin于2010年贡献给了Apache基金会并成为顶级开源 项目。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"（1）产生背景\"><a href=\"#（1）产生背景\" class=\"headerlink\" title=\"（1）产生背景\"></a>（1）产生背景</h3><p>当今社会各种应用系统诸如商业、社交、搜索、浏览等像信息工厂一样不断的生产出各种信息，在大数据时代，我们面临如下几个挑战：</p>\n<ol>\n<li>如何收集这些巨大的信息</li>\n<li>如何分析它</li>\n<li>如何及时做到如上两点</li>\n</ol>\n<p>以上几个挑战形成了一个业务需求模型，即生产者生产（produce）各种信息，消费者消费（consume）（处理分析）这些信息，而在生产者与消费者之间，需要一个沟通两者的桥梁-消息系统。从一个微观层面来说，这种需求也可理解为不同的系统之间如何传递消息。</p>\n<p><strong>Kafka诞生</strong><br>Kafka由 linked-in 开源<br>kafka-即是解决上述这类问题的一个框架，它实现了生产者和消费者之间的无缝连接。<br>kafka-高产出的分布式消息系统(A high-throughput distributed messaging system)</p>\n<h3 id=\"（2）Kafka的特性\"><a href=\"#（2）Kafka的特性\" class=\"headerlink\" title=\"（2）Kafka的特性\"></a>（2）Kafka的特性</h3><ul>\n<li><strong>高吞吐量、低延迟</strong>：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒</li>\n<li><strong>可扩展性</strong>：kafka集群支持热扩展</li>\n<li><strong>持久性、可靠性</strong>：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失</li>\n<li><strong>容错性</strong>：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）</li>\n<li><strong>高并发</strong>：支持数千个客户端同时读写</li>\n</ul>\n<h3 id=\"（3）Kafka场景应用\"><a href=\"#（3）Kafka场景应用\" class=\"headerlink\" title=\"（3）Kafka场景应用\"></a>（3）Kafka场景应用</h3><ul>\n<li><strong>日志收集</strong>：一个公司可以用Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer，例如hadoop、Hbase、Solr等。</li>\n<li><strong>消息系统</strong>：解耦和生产者和消费者、缓存消息等。</li>\n<li><strong>用户活动跟踪</strong>：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖掘。</li>\n<li><strong>运营指标</strong>：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告。</li>\n<li><strong>流式处理</strong>：比如spark streaming和storm</li>\n<li><strong>事件源</strong></li>\n</ul>\n<h3 id=\"（4）Kafka一些重要设计思想\"><a href=\"#（4）Kafka一些重要设计思想\" class=\"headerlink\" title=\"（4）Kafka一些重要设计思想\"></a>（4）Kafka一些重要设计思想</h3><ul>\n<li><strong>Consumergroup</strong>：各个consumer可以组成一个组，每个消息只能被组中的一个consumer消费，如果一个消息可以被多个consumer消费的话，那么这些consumer必须在不同的组。</li>\n<li><strong>消息状态</strong>：在Kafka中，消息的状态被保存在consumer中，broker不会关心哪个消息被消费了被谁消费了，只记录一个offset值（指向partition中下一个要被消费的消息位置），这就意味着如果consumer处理不好的话，broker上的一个消息可能会被消费多次。</li>\n<li><strong>消息持久化</strong>：Kafka中会把消息持久化到本地文件系统中，并且保持极高的效率。</li>\n<li><strong>消息有效期</strong>：Kafka会长久保留其中的消息，以便consumer可以多次消费，当然其中很多细节是可配置的。</li>\n<li><strong>批量发送</strong>：Kafka支持以消息集合为单位进行批量发送，以提高push效率。</li>\n<li><strong>push-and-pull</strong> :Kafka中的Producer和consumer采用的是push-and-pull模式，即Producer只管向broker push消息，consumer只管从broker pull消息，两者对消息的生产和消费是异步的。</li>\n<li><strong>Kafka集群中broker之间的关系</strong>：不是主从关系，各个broker在集群中地位一样，我们可以随意的增加或删除任何一个broker节点。</li>\n<li><strong>负载均衡方面</strong>： Kafka提供了一个 metadata API来管理broker之间的负载（对Kafka0.8.x而言，对于0.7.x主要靠zookeeper来实现负载均衡）。</li>\n<li><strong>同步异步</strong>：Producer采用异步push方式，极大提高Kafka系统的吞吐率（可以通过参数控制是采用同步还是异步方式）。</li>\n<li><strong>分区机制partition</strong>：Kafka的broker端支持消息分区，Producer可以决定把消息发到哪个分区，在一个分区中消息的顺序就是Producer发送消息的顺序，一个主题中可以有多个分区，具体分区的数量是可配置的。分区的意义很重大，后面的内容会逐渐体现。</li>\n<li><strong>离线数据装载</strong>：Kafka由于对可拓展的数据持久化的支持，它也非常适合向Hadoop或者数据仓库中进行数据装载。</li>\n<li><strong>插件支持</strong>：现在不少活跃的社区已经开发出不少插件来拓展Kafka的功能，如用来配合Storm、Hadoop、flume相关的插件。</li>\n</ul>\n<h2 id=\"二、消息队列通信的模式\"><a href=\"#二、消息队列通信的模式\" class=\"headerlink\" title=\"二、消息队列通信的模式\"></a>二、消息队列通信的模式</h2><h3 id=\"（1）点对点模式\"><a href=\"#（1）点对点模式\" class=\"headerlink\" title=\"（1）点对点模式\"></a>（1）点对点模式</h3><p><img src=\"https://img-blog.csdnimg.cn/20200624144932564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>如上图所示，点对点模式通常是基于拉取或者轮询的消息传送模型，这个模型的特点是发送到队列的消息被一个且只有一个消费者进行处理。生产者将消息放入消息队列后，由消费者主动的去拉取消息进行消费。点对点模型的的优点是消费者拉取消息的频率可以由自己控制。但是消息队列是否有消息需要消费，在消费者端无法感知，所以在消费者端需要额外的线程去监控。</p>\n<h3 id=\"（2）发布订阅模式\"><a href=\"#（2）发布订阅模式\" class=\"headerlink\" title=\"（2）发布订阅模式\"></a>（2）发布订阅模式</h3><p><img src=\"https://img-blog.csdnimg.cn/2020062414495136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>如上图所示，发布订阅模式是一个基于消息送的消息传送模型，改模型可以有多种不同的订阅者。生产者将消息放入消息队列后，队列会将消息推送给订阅过该类消息的消费者（类似微信公众号）。由于是消费者被动接收推送，所以无需感知消息队列是否有待消费的消息！但是consumer1、consumer2、consumer3由于机器性能不一样，所以处理消息的能力也会不一样，但消息队列却无法感知消费者消费的速度！所以推送的速度成了发布订阅模模式的一个问题！假设三个消费者处理速度分别是8M/s、5M/s、2M/s，如果队列推送的速度为5M/s，则consumer3无法承受！如果队列推送的速度为2M/s，则consumer1、consumer2会出现资源的极大浪费！</p>\n<h2 id=\"三、Kafka的架构原理\"><a href=\"#三、Kafka的架构原理\" class=\"headerlink\" title=\"三、Kafka的架构原理\"></a>三、Kafka的架构原理</h2><p>上面简单的介绍了为什么需要消息队列以及消息队列通信的两种模式，下面主角介绍Kafka。Kafka是一种<strong>高吞吐量的分布式发布订阅消息系统</strong>，它可以处理消费者规模的网站中的所有动作流数据，具有高性能、持久化、多副本备份、横向扩展能力。。</p>\n<h3 id=\"（1）基础架构与名词解释\"><a href=\"#（1）基础架构与名词解释\" class=\"headerlink\" title=\"（1）基础架构与名词解释\"></a>（1）基础架构与名词解释</h3><p><img src=\"https://img-blog.csdnimg.cn/20200624145628396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>Producer：Producer即生产者，消息的产生者，是消息的入口。</li>\n<li>Broker：Broker是kafka实例，每个服务器上有一个或多个kafka的实例，我们姑且认为每个broker对应一台服务器。每个kafka集群内的broker都有一个不重复的编号，如图中的broker-0、broker-1等……</li>\n<li>Topic：消息的主题，可以理解为消息的分类，kafka的数据就保存在topic。在每个broker上都可以创建多个topic。</li>\n<li>Partition：Topic的分区，每个topic可以有多个分区，分区的作用是做负载，提高kafka的吞吐量。同一个topic在不同的分区的数据是不重复的，partition的表现形式就是一个一个的文件夹！</li>\n<li>Replication:每一个分区都有多个副本，副本的作用是做备胎。当主分区（Leader）故障的时候会选择一个备胎（Follower）上位，成为Leader。在kafka中默认副本的最大数量是10个，且副本的数量不能大于Broker的数量，follower和leader绝对是在不同的机器，同一机器对同一个分区也只可能存放一个副本（包括自己）。</li>\n<li>Message：每一条发送的消息主体。</li>\n<li>Consumer：消费者，即消息的消费方，是消息的出口。</li>\n<li>Consumer Group：我们可以将多个消费组组成一个消费者组，在kafka的设计中同一个分区的数据只能被消费者组中的某一个消费者消费。同一个消费者组的消费者可以消费同一个topic的不同分区的数据，这也是为了提高kafka的吞吐量！</li>\n<li>Zookeeper：kafka集群依赖zookeeper来保存集群的的元信息，来保证系统的可用性。</li>\n</ul>\n<h3 id=\"（2）工作流程分析\"><a href=\"#（2）工作流程分析\" class=\"headerlink\" title=\"（2）工作流程分析\"></a>（2）工作流程分析</h3><h4 id=\"（1）发送数据\"><a href=\"#（1）发送数据\" class=\"headerlink\" title=\"（1）发送数据\"></a>（1）发送数据</h4><p>我们看上面的架构图中，producer就是生产者，是数据的入口。注意看图中的红色箭头，<strong>Producer在写入数据的时候永远的找leader</strong>，不会直接将数据写入<strong>follower</strong>！那leader怎么找呢？写入的流程又是什么样的呢？我们看下图：<br><img src=\"https://img-blog.csdnimg.cn/20200624150617430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>发送的流程就在图中已经说明了，就不单独在文字列出来了！需要注意的一点是，消息写入leader后，follower是主动的去leader进行同步的！producer采用push模式将数据发布到broker，每条消息追加到分区中，顺序写入磁盘，所以保证同一分区内的数据是有序的！写入示意图如下：<br><img src=\"https://img-blog.csdnimg.cn/20200624150636117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>上面说到数据会写入到不同的分区，那kafka为什么要做分区呢？相信大家应该也能猜到，分区的主要目的是：</p>\n<ol>\n<li><strong>方便扩展</strong>：因为一个topic可以有多个partition，所以我们可以通过扩展机器去轻松的应对日益增长的数据量。</li>\n<li><strong>提高并发</strong>：以partition为读写单位，可以多个消费者同时消费数据，提高了消息的处理效率。</li>\n</ol>\n<p>熟悉负载均衡的朋友应该知道，当我们向某个服务器发送请求的时候，服务端可能会对请求做一个负载，将流量分发到不同的服务器，那在kafka中，如果某个topic有多个partition，producer又怎么知道该将数据发往哪个partition呢？kafka中有几个原则：</p>\n<ol>\n<li>partition在写入的时候可以指定需要写入的partition，如果有指定，则写入对应的partition。</li>\n<li>如果没有指定partition，但是设置了数据的key，则会根据key的值hash出一个partition。</li>\n<li>如果既没指定partition，又没有设置key，则会轮询选出一个partition。</li>\n</ol>\n<p>保证消息不丢失是一个消息队列中间件的基本保证，那producer在向kafka写入消息的时候，怎么保证消息不丢失呢？其实上面的写入流程图中有描述出来，那就是通过ACK应答机制！在生产者向队列写入数据的时候可以设置参数来确定是否确认kafka接收到数据，这个参数可设置的值为<strong>0、1、all</strong>。</p>\n<ul>\n<li>0代表producer往集群发送数据不需要等到集群的返回，不确保消息发送成功。安全性最低但是效率最高。</li>\n<li>1代表producer往集群发送数据只要leader应答就可以发送下一条，只确保leader发送成功。</li>\n<li>all代表producer往集群发送数据需要所有的follower都完成从leader的同步才会发送下一条，确保leader发送成功和所有的副本都完成备份。安全性最高，但是效率最低。</li>\n</ul>\n<p>最后要注意的是，如果往不存在的topic写数据，能不能写入成功呢？kafka会自动创建topic，分区和副本的数量根据默认配置都是1。</p>\n<h4 id=\"（2）保存数据\"><a href=\"#（2）保存数据\" class=\"headerlink\" title=\"（2）保存数据\"></a>（2）保存数据</h4><p>Producer将数据写入kafka后，集群就需要对数据进行保存了！kafka将数据保存在磁盘，可能在我们的一般的认知里，写入磁盘是比较耗时的操作，不适合这种高并发的组件。Kafka初始会单独开辟一块磁盘空间，顺序写入数据（效率比随机写入高）。</p>\n<h5 id=\"（1）Partition-结构\"><a href=\"#（1）Partition-结构\" class=\"headerlink\" title=\"（1）Partition 结构\"></a>（1）Partition 结构</h5><p>前面说过了每个topic都可以分为一个或多个partition，如果你觉得topic比较抽象，那partition就是比较具体的东西了！Partition在服务器上的表现形式就是一个一个的文件夹，每个partition的文件夹下面会有多组segment文件，每组segment文件又包含.index文件、.log文件、.timeindex文件（早期版本中没有）三个文件， log文件就实际是存储message的地方，而index和timeindex文件为索引文件，用于检索消息。<br><img src=\"https://img-blog.csdnimg.cn/20200624170905606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>如上图，这个partition有三组segment文件，每个log文件的大小是一样的，但是存储的message数量是不一定相等的（每条的message大小不一致）。文件的命名是以该segment最小offset来命名的，如000.index存储offset为0~368795的消息，kafka就是利用分段+索引的方式来解决查找效率的问题。</p>\n<h5 id=\"（2）Message结构\"><a href=\"#（2）Message结构\" class=\"headerlink\" title=\"（2）Message结构\"></a>（2）Message结构</h5><p>上面说到log文件就实际是存储message的地方，我们在producer往kafka写入的也是一条一条的message，那存储在log中的message是什么样子的呢？消息主要包含消息体、消息大小、offset、压缩类型……等等！我们重点需要知道的是下面三个：</p>\n<ul>\n<li><strong>offset</strong>：offset是一个占8byte的有序id号，它可以唯一确定每条消息在parition内的位置！</li>\n<li><strong>消息大小</strong>：消息大小占用4byte，用于描述消息的大小。</li>\n<li><strong>消息体</strong>：消息体存放的是实际的消息数据（被压缩过），占用的空间根据具体的消息而不一样。</li>\n</ul>\n<h5 id=\"（3）存储策略\"><a href=\"#（3）存储策略\" class=\"headerlink\" title=\"（3）存储策略\"></a>（3）存储策略</h5><p>无论消息是否被消费，kafka都会保存所有的消息。那对于旧数据有什么删除策略呢？</p>\n<ul>\n<li>基于时间，默认配置是168小时（7天）。</li>\n<li>基于大小，默认配置是1073741824。</li>\n</ul>\n<p>需要注意的是，kafka读取特定消息的时间复杂度是O(1)，所以这里删除过期的文件并不会提高kafka的性能！</p>\n<h4 id=\"（3）消费数据\"><a href=\"#（3）消费数据\" class=\"headerlink\" title=\"（3）消费数据\"></a>（3）消费数据</h4><p>消息存储在log文件后，消费者就可以进行消费了。在讲消息队列通信的两种模式的时候讲到过点对点模式和发布订阅模式。Kafka采用的是点对点的模式，消费者主动的去kafka集群拉取消息，与producer相同的是，消费者在拉取消息的时候也是找<strong>leader</strong>去拉取。</p>\n<p>多个消费者可以组成一个消费者组（consumer group），每个消费者组都有一个组id！同一个消费组者的消费者可以消费同一topic下不同分区的数据，但是不会组内多个消费者消费同一分区的数据！！！我们看下图：<br><img src=\"https://img-blog.csdnimg.cn/20200624171149382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>图示是消费者组内的消费者小于partition数量的情况，所以会出现某个消费者消费多个partition数据的情况，消费的速度也就不及只处理一个partition的消费者的处理速度！如果是消费者组的消费者多于partition的数量，那会不会出现多个消费者消费同一个partition的数据呢？上面已经提到过不会出现这种情况！多出来的消费者不消费任何partition的数据。所以在实际的应用中，<strong>建议消费者组的consumer的数量与partition的数量一致</strong>！</p>\n<p>在保存数据的小节里面，我们聊到了partition划分为多组segment，每个segment又包含.log、.index、.timeindex文件，存放的每条message包含offset、消息大小、消息体……我们多次提到segment和offset，查找消息的时候是怎么利用segment+offset配合查找的呢？假如现在需要查找一个offset为368801的message是什么样的过程呢？我们先看看下面的图：<br><img src=\"https://img-blog.csdnimg.cn/20200624171235860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>先找到offset的368801message所在的segment文件（利用二分法查找），这里找到的就是在第二个segment文件。</li>\n<li>打开找到的segment中的.index文件（也就是368796.index文件，该文件起始偏移量为368796+1，我们要查找的offset为368801的message在该index内的偏移量为368796+5=368801，所以这里要查找的相对offset为5）。由于该文件采用的是稀疏索引的方式存储着相对offset及对应message物理偏移量的关系，所以直接找相对offset为5的索引找不到，这里同样利用二分法查找相对offset小于或者等于指定的相对offset的索引条目中最大的那个相对offset，所以找到的是相对offset为4的这个索引。</li>\n<li>根据找到的相对offset为4的索引确定message存储的物理偏移位置为256。打开数据文件，从位置为256的那个地方开始顺序扫描直到找到offset为368801的那条Message。</li>\n</ol>\n<p>这套机制是建立在offset为有序的基础上，利用segment+有序offset+稀疏索引+二分查找+顺序查找等多种手段来高效的查找数据！至此，消费者就能拿到需要处理的数据进行处理了。那每个消费者又是怎么记录自己消费的位置呢？在早期的版本中，消费者将消费到的offset维护zookeeper中，consumer每间隔一段时间上报一次，这里容易导致重复消费，且性能不好！在新的版本中消费者消费到的offset已经直接维护在kafk集群的__consumer_offsets这个topic中！</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"<h2 id=\"一、概念理解\"><a href=\"#一、概念理解\" class=\"headerlink\" title=\"一、概念理解\"></a>一、概念理解</h2><p><strong>Kafka</strong>是最初由Linkedin公司开发，是一个分布式、支持分区的（partition）、多副本的（replica），基于zookeeper协调的分布式消息系统，它的最大的特性就是可以实时的处理大量数据以满足各种需求场景：比如基于hadoop的批处理系统、低延迟的实时系统、storm/Spark流式处理引擎，web/nginx日志、访问日志，消息服务等等，用scala语言编写，Linkedin于2010年贡献给了Apache基金会并成为顶级开源 项目。</p>","more":"<h3 id=\"（1）产生背景\"><a href=\"#（1）产生背景\" class=\"headerlink\" title=\"（1）产生背景\"></a>（1）产生背景</h3><p>当今社会各种应用系统诸如商业、社交、搜索、浏览等像信息工厂一样不断的生产出各种信息，在大数据时代，我们面临如下几个挑战：</p>\n<ol>\n<li>如何收集这些巨大的信息</li>\n<li>如何分析它</li>\n<li>如何及时做到如上两点</li>\n</ol>\n<p>以上几个挑战形成了一个业务需求模型，即生产者生产（produce）各种信息，消费者消费（consume）（处理分析）这些信息，而在生产者与消费者之间，需要一个沟通两者的桥梁-消息系统。从一个微观层面来说，这种需求也可理解为不同的系统之间如何传递消息。</p>\n<p><strong>Kafka诞生</strong><br>Kafka由 linked-in 开源<br>kafka-即是解决上述这类问题的一个框架，它实现了生产者和消费者之间的无缝连接。<br>kafka-高产出的分布式消息系统(A high-throughput distributed messaging system)</p>\n<h3 id=\"（2）Kafka的特性\"><a href=\"#（2）Kafka的特性\" class=\"headerlink\" title=\"（2）Kafka的特性\"></a>（2）Kafka的特性</h3><ul>\n<li><strong>高吞吐量、低延迟</strong>：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒</li>\n<li><strong>可扩展性</strong>：kafka集群支持热扩展</li>\n<li><strong>持久性、可靠性</strong>：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失</li>\n<li><strong>容错性</strong>：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）</li>\n<li><strong>高并发</strong>：支持数千个客户端同时读写</li>\n</ul>\n<h3 id=\"（3）Kafka场景应用\"><a href=\"#（3）Kafka场景应用\" class=\"headerlink\" title=\"（3）Kafka场景应用\"></a>（3）Kafka场景应用</h3><ul>\n<li><strong>日志收集</strong>：一个公司可以用Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer，例如hadoop、Hbase、Solr等。</li>\n<li><strong>消息系统</strong>：解耦和生产者和消费者、缓存消息等。</li>\n<li><strong>用户活动跟踪</strong>：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖掘。</li>\n<li><strong>运营指标</strong>：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告。</li>\n<li><strong>流式处理</strong>：比如spark streaming和storm</li>\n<li><strong>事件源</strong></li>\n</ul>\n<h3 id=\"（4）Kafka一些重要设计思想\"><a href=\"#（4）Kafka一些重要设计思想\" class=\"headerlink\" title=\"（4）Kafka一些重要设计思想\"></a>（4）Kafka一些重要设计思想</h3><ul>\n<li><strong>Consumergroup</strong>：各个consumer可以组成一个组，每个消息只能被组中的一个consumer消费，如果一个消息可以被多个consumer消费的话，那么这些consumer必须在不同的组。</li>\n<li><strong>消息状态</strong>：在Kafka中，消息的状态被保存在consumer中，broker不会关心哪个消息被消费了被谁消费了，只记录一个offset值（指向partition中下一个要被消费的消息位置），这就意味着如果consumer处理不好的话，broker上的一个消息可能会被消费多次。</li>\n<li><strong>消息持久化</strong>：Kafka中会把消息持久化到本地文件系统中，并且保持极高的效率。</li>\n<li><strong>消息有效期</strong>：Kafka会长久保留其中的消息，以便consumer可以多次消费，当然其中很多细节是可配置的。</li>\n<li><strong>批量发送</strong>：Kafka支持以消息集合为单位进行批量发送，以提高push效率。</li>\n<li><strong>push-and-pull</strong> :Kafka中的Producer和consumer采用的是push-and-pull模式，即Producer只管向broker push消息，consumer只管从broker pull消息，两者对消息的生产和消费是异步的。</li>\n<li><strong>Kafka集群中broker之间的关系</strong>：不是主从关系，各个broker在集群中地位一样，我们可以随意的增加或删除任何一个broker节点。</li>\n<li><strong>负载均衡方面</strong>： Kafka提供了一个 metadata API来管理broker之间的负载（对Kafka0.8.x而言，对于0.7.x主要靠zookeeper来实现负载均衡）。</li>\n<li><strong>同步异步</strong>：Producer采用异步push方式，极大提高Kafka系统的吞吐率（可以通过参数控制是采用同步还是异步方式）。</li>\n<li><strong>分区机制partition</strong>：Kafka的broker端支持消息分区，Producer可以决定把消息发到哪个分区，在一个分区中消息的顺序就是Producer发送消息的顺序，一个主题中可以有多个分区，具体分区的数量是可配置的。分区的意义很重大，后面的内容会逐渐体现。</li>\n<li><strong>离线数据装载</strong>：Kafka由于对可拓展的数据持久化的支持，它也非常适合向Hadoop或者数据仓库中进行数据装载。</li>\n<li><strong>插件支持</strong>：现在不少活跃的社区已经开发出不少插件来拓展Kafka的功能，如用来配合Storm、Hadoop、flume相关的插件。</li>\n</ul>\n<h2 id=\"二、消息队列通信的模式\"><a href=\"#二、消息队列通信的模式\" class=\"headerlink\" title=\"二、消息队列通信的模式\"></a>二、消息队列通信的模式</h2><h3 id=\"（1）点对点模式\"><a href=\"#（1）点对点模式\" class=\"headerlink\" title=\"（1）点对点模式\"></a>（1）点对点模式</h3><p><img src=\"https://img-blog.csdnimg.cn/20200624144932564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>如上图所示，点对点模式通常是基于拉取或者轮询的消息传送模型，这个模型的特点是发送到队列的消息被一个且只有一个消费者进行处理。生产者将消息放入消息队列后，由消费者主动的去拉取消息进行消费。点对点模型的的优点是消费者拉取消息的频率可以由自己控制。但是消息队列是否有消息需要消费，在消费者端无法感知，所以在消费者端需要额外的线程去监控。</p>\n<h3 id=\"（2）发布订阅模式\"><a href=\"#（2）发布订阅模式\" class=\"headerlink\" title=\"（2）发布订阅模式\"></a>（2）发布订阅模式</h3><p><img src=\"https://img-blog.csdnimg.cn/2020062414495136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>如上图所示，发布订阅模式是一个基于消息送的消息传送模型，改模型可以有多种不同的订阅者。生产者将消息放入消息队列后，队列会将消息推送给订阅过该类消息的消费者（类似微信公众号）。由于是消费者被动接收推送，所以无需感知消息队列是否有待消费的消息！但是consumer1、consumer2、consumer3由于机器性能不一样，所以处理消息的能力也会不一样，但消息队列却无法感知消费者消费的速度！所以推送的速度成了发布订阅模模式的一个问题！假设三个消费者处理速度分别是8M/s、5M/s、2M/s，如果队列推送的速度为5M/s，则consumer3无法承受！如果队列推送的速度为2M/s，则consumer1、consumer2会出现资源的极大浪费！</p>\n<h2 id=\"三、Kafka的架构原理\"><a href=\"#三、Kafka的架构原理\" class=\"headerlink\" title=\"三、Kafka的架构原理\"></a>三、Kafka的架构原理</h2><p>上面简单的介绍了为什么需要消息队列以及消息队列通信的两种模式，下面主角介绍Kafka。Kafka是一种<strong>高吞吐量的分布式发布订阅消息系统</strong>，它可以处理消费者规模的网站中的所有动作流数据，具有高性能、持久化、多副本备份、横向扩展能力。。</p>\n<h3 id=\"（1）基础架构与名词解释\"><a href=\"#（1）基础架构与名词解释\" class=\"headerlink\" title=\"（1）基础架构与名词解释\"></a>（1）基础架构与名词解释</h3><p><img src=\"https://img-blog.csdnimg.cn/20200624145628396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>Producer：Producer即生产者，消息的产生者，是消息的入口。</li>\n<li>Broker：Broker是kafka实例，每个服务器上有一个或多个kafka的实例，我们姑且认为每个broker对应一台服务器。每个kafka集群内的broker都有一个不重复的编号，如图中的broker-0、broker-1等……</li>\n<li>Topic：消息的主题，可以理解为消息的分类，kafka的数据就保存在topic。在每个broker上都可以创建多个topic。</li>\n<li>Partition：Topic的分区，每个topic可以有多个分区，分区的作用是做负载，提高kafka的吞吐量。同一个topic在不同的分区的数据是不重复的，partition的表现形式就是一个一个的文件夹！</li>\n<li>Replication:每一个分区都有多个副本，副本的作用是做备胎。当主分区（Leader）故障的时候会选择一个备胎（Follower）上位，成为Leader。在kafka中默认副本的最大数量是10个，且副本的数量不能大于Broker的数量，follower和leader绝对是在不同的机器，同一机器对同一个分区也只可能存放一个副本（包括自己）。</li>\n<li>Message：每一条发送的消息主体。</li>\n<li>Consumer：消费者，即消息的消费方，是消息的出口。</li>\n<li>Consumer Group：我们可以将多个消费组组成一个消费者组，在kafka的设计中同一个分区的数据只能被消费者组中的某一个消费者消费。同一个消费者组的消费者可以消费同一个topic的不同分区的数据，这也是为了提高kafka的吞吐量！</li>\n<li>Zookeeper：kafka集群依赖zookeeper来保存集群的的元信息，来保证系统的可用性。</li>\n</ul>\n<h3 id=\"（2）工作流程分析\"><a href=\"#（2）工作流程分析\" class=\"headerlink\" title=\"（2）工作流程分析\"></a>（2）工作流程分析</h3><h4 id=\"（1）发送数据\"><a href=\"#（1）发送数据\" class=\"headerlink\" title=\"（1）发送数据\"></a>（1）发送数据</h4><p>我们看上面的架构图中，producer就是生产者，是数据的入口。注意看图中的红色箭头，<strong>Producer在写入数据的时候永远的找leader</strong>，不会直接将数据写入<strong>follower</strong>！那leader怎么找呢？写入的流程又是什么样的呢？我们看下图：<br><img src=\"https://img-blog.csdnimg.cn/20200624150617430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>发送的流程就在图中已经说明了，就不单独在文字列出来了！需要注意的一点是，消息写入leader后，follower是主动的去leader进行同步的！producer采用push模式将数据发布到broker，每条消息追加到分区中，顺序写入磁盘，所以保证同一分区内的数据是有序的！写入示意图如下：<br><img src=\"https://img-blog.csdnimg.cn/20200624150636117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>上面说到数据会写入到不同的分区，那kafka为什么要做分区呢？相信大家应该也能猜到，分区的主要目的是：</p>\n<ol>\n<li><strong>方便扩展</strong>：因为一个topic可以有多个partition，所以我们可以通过扩展机器去轻松的应对日益增长的数据量。</li>\n<li><strong>提高并发</strong>：以partition为读写单位，可以多个消费者同时消费数据，提高了消息的处理效率。</li>\n</ol>\n<p>熟悉负载均衡的朋友应该知道，当我们向某个服务器发送请求的时候，服务端可能会对请求做一个负载，将流量分发到不同的服务器，那在kafka中，如果某个topic有多个partition，producer又怎么知道该将数据发往哪个partition呢？kafka中有几个原则：</p>\n<ol>\n<li>partition在写入的时候可以指定需要写入的partition，如果有指定，则写入对应的partition。</li>\n<li>如果没有指定partition，但是设置了数据的key，则会根据key的值hash出一个partition。</li>\n<li>如果既没指定partition，又没有设置key，则会轮询选出一个partition。</li>\n</ol>\n<p>保证消息不丢失是一个消息队列中间件的基本保证，那producer在向kafka写入消息的时候，怎么保证消息不丢失呢？其实上面的写入流程图中有描述出来，那就是通过ACK应答机制！在生产者向队列写入数据的时候可以设置参数来确定是否确认kafka接收到数据，这个参数可设置的值为<strong>0、1、all</strong>。</p>\n<ul>\n<li>0代表producer往集群发送数据不需要等到集群的返回，不确保消息发送成功。安全性最低但是效率最高。</li>\n<li>1代表producer往集群发送数据只要leader应答就可以发送下一条，只确保leader发送成功。</li>\n<li>all代表producer往集群发送数据需要所有的follower都完成从leader的同步才会发送下一条，确保leader发送成功和所有的副本都完成备份。安全性最高，但是效率最低。</li>\n</ul>\n<p>最后要注意的是，如果往不存在的topic写数据，能不能写入成功呢？kafka会自动创建topic，分区和副本的数量根据默认配置都是1。</p>\n<h4 id=\"（2）保存数据\"><a href=\"#（2）保存数据\" class=\"headerlink\" title=\"（2）保存数据\"></a>（2）保存数据</h4><p>Producer将数据写入kafka后，集群就需要对数据进行保存了！kafka将数据保存在磁盘，可能在我们的一般的认知里，写入磁盘是比较耗时的操作，不适合这种高并发的组件。Kafka初始会单独开辟一块磁盘空间，顺序写入数据（效率比随机写入高）。</p>\n<h5 id=\"（1）Partition-结构\"><a href=\"#（1）Partition-结构\" class=\"headerlink\" title=\"（1）Partition 结构\"></a>（1）Partition 结构</h5><p>前面说过了每个topic都可以分为一个或多个partition，如果你觉得topic比较抽象，那partition就是比较具体的东西了！Partition在服务器上的表现形式就是一个一个的文件夹，每个partition的文件夹下面会有多组segment文件，每组segment文件又包含.index文件、.log文件、.timeindex文件（早期版本中没有）三个文件， log文件就实际是存储message的地方，而index和timeindex文件为索引文件，用于检索消息。<br><img src=\"https://img-blog.csdnimg.cn/20200624170905606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>如上图，这个partition有三组segment文件，每个log文件的大小是一样的，但是存储的message数量是不一定相等的（每条的message大小不一致）。文件的命名是以该segment最小offset来命名的，如000.index存储offset为0~368795的消息，kafka就是利用分段+索引的方式来解决查找效率的问题。</p>\n<h5 id=\"（2）Message结构\"><a href=\"#（2）Message结构\" class=\"headerlink\" title=\"（2）Message结构\"></a>（2）Message结构</h5><p>上面说到log文件就实际是存储message的地方，我们在producer往kafka写入的也是一条一条的message，那存储在log中的message是什么样子的呢？消息主要包含消息体、消息大小、offset、压缩类型……等等！我们重点需要知道的是下面三个：</p>\n<ul>\n<li><strong>offset</strong>：offset是一个占8byte的有序id号，它可以唯一确定每条消息在parition内的位置！</li>\n<li><strong>消息大小</strong>：消息大小占用4byte，用于描述消息的大小。</li>\n<li><strong>消息体</strong>：消息体存放的是实际的消息数据（被压缩过），占用的空间根据具体的消息而不一样。</li>\n</ul>\n<h5 id=\"（3）存储策略\"><a href=\"#（3）存储策略\" class=\"headerlink\" title=\"（3）存储策略\"></a>（3）存储策略</h5><p>无论消息是否被消费，kafka都会保存所有的消息。那对于旧数据有什么删除策略呢？</p>\n<ul>\n<li>基于时间，默认配置是168小时（7天）。</li>\n<li>基于大小，默认配置是1073741824。</li>\n</ul>\n<p>需要注意的是，kafka读取特定消息的时间复杂度是O(1)，所以这里删除过期的文件并不会提高kafka的性能！</p>\n<h4 id=\"（3）消费数据\"><a href=\"#（3）消费数据\" class=\"headerlink\" title=\"（3）消费数据\"></a>（3）消费数据</h4><p>消息存储在log文件后，消费者就可以进行消费了。在讲消息队列通信的两种模式的时候讲到过点对点模式和发布订阅模式。Kafka采用的是点对点的模式，消费者主动的去kafka集群拉取消息，与producer相同的是，消费者在拉取消息的时候也是找<strong>leader</strong>去拉取。</p>\n<p>多个消费者可以组成一个消费者组（consumer group），每个消费者组都有一个组id！同一个消费组者的消费者可以消费同一topic下不同分区的数据，但是不会组内多个消费者消费同一分区的数据！！！我们看下图：<br><img src=\"https://img-blog.csdnimg.cn/20200624171149382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>图示是消费者组内的消费者小于partition数量的情况，所以会出现某个消费者消费多个partition数据的情况，消费的速度也就不及只处理一个partition的消费者的处理速度！如果是消费者组的消费者多于partition的数量，那会不会出现多个消费者消费同一个partition的数据呢？上面已经提到过不会出现这种情况！多出来的消费者不消费任何partition的数据。所以在实际的应用中，<strong>建议消费者组的consumer的数量与partition的数量一致</strong>！</p>\n<p>在保存数据的小节里面，我们聊到了partition划分为多组segment，每个segment又包含.log、.index、.timeindex文件，存放的每条message包含offset、消息大小、消息体……我们多次提到segment和offset，查找消息的时候是怎么利用segment+offset配合查找的呢？假如现在需要查找一个offset为368801的message是什么样的过程呢？我们先看看下面的图：<br><img src=\"https://img-blog.csdnimg.cn/20200624171235860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM2NjQ5OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>先找到offset的368801message所在的segment文件（利用二分法查找），这里找到的就是在第二个segment文件。</li>\n<li>打开找到的segment中的.index文件（也就是368796.index文件，该文件起始偏移量为368796+1，我们要查找的offset为368801的message在该index内的偏移量为368796+5=368801，所以这里要查找的相对offset为5）。由于该文件采用的是稀疏索引的方式存储着相对offset及对应message物理偏移量的关系，所以直接找相对offset为5的索引找不到，这里同样利用二分法查找相对offset小于或者等于指定的相对offset的索引条目中最大的那个相对offset，所以找到的是相对offset为4的这个索引。</li>\n<li>根据找到的相对offset为4的索引确定message存储的物理偏移位置为256。打开数据文件，从位置为256的那个地方开始顺序扫描直到找到offset为368801的那条Message。</li>\n</ol>\n<p>这套机制是建立在offset为有序的基础上，利用segment+有序offset+稀疏索引+二分查找+顺序查找等多种手段来高效的查找数据！至此，消费者就能拿到需要处理的数据进行处理了。那每个消费者又是怎么记录自己消费的位置呢？在早期的版本中，消费者将消费到的offset维护zookeeper中，consumer每间隔一段时间上报一次，这里容易导致重复消费，且性能不好！在新的版本中消费者消费到的offset已经直接维护在kafk集群的__consumer_offsets这个topic中！</p>"},{"title":"Mac使用openssl生成pem证书","date":"2018-12-06T16:00:00.000Z","abbrlink":250724270,"_content":"\n# 参考资料\n\n> [openssl命令详解](https://www.jianshu.com/p/e311a6537467)\n\n------\n\n# 常规方式\n\n- 生成私钥(key文件)\n  `openssl genrsa -out client.key 4096`\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804191059375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70)\n  ![[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-gikNX2aZ-1596539441689)(evernotecid://90B54479-F8FA-4F06-9F90-73E6593C6866/appyinxiangcom/27458002/ENResource/p74)]](https://img-blog.csdnimg.cn/20200804191113618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70)\n- 生成签名请求(csr文件)\n  `openssl req -new -key client.key -out client.csr`\n  ![[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-lPkpDIT9-1596539441690)(evernotecid://90B54479-F8FA-4F06-9F90-73E6593C6866/appyinxiangcom/27458002/ENResource/p75)]](https://img-blog.csdnimg.cn/20200804191128743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70)\n- 签发证书\n  `openssl x509 -req -days 365 -in client.csr -signkey client.key -out client.crt`\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804191353313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70)\n\n------\n\n# 一键生成自签名证书\n\n`openssl req -new -x509 -newkey rsa:4096 -keyout test.key -out test.crt`\n![[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-jt7UJ692-1596539441692)(evernotecid://90B54479-F8FA-4F06-9F90-73E6593C6866/appyinxiangcom/27458002/ENResource/p76)]](https://img-blog.csdnimg.cn/20200804191401941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70)\n\n> tips\n> 输入的密码必须大于等于4位。\n> Common Name可以输入：*.yourdomain.com，这种方式生成通配符域名证书。\n> 证书文件crt中存储的是证书信息与公钥信息，key文件存储的是私钥信息，csr是申请证书所需要的中间文件。","source":"_posts/mac/Mac命令生成crt证书.md","raw":"---\ntitle: Mac使用openssl生成pem证书\ncategories: 技术\ntags:\n\t- RAS\n\t- Mac\ndate: 2018-12-07\nabbrlink: 250724270\n---\n\n# 参考资料\n\n> [openssl命令详解](https://www.jianshu.com/p/e311a6537467)\n\n------\n\n# 常规方式\n\n- 生成私钥(key文件)\n  `openssl genrsa -out client.key 4096`\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804191059375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70)\n  ![[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-gikNX2aZ-1596539441689)(evernotecid://90B54479-F8FA-4F06-9F90-73E6593C6866/appyinxiangcom/27458002/ENResource/p74)]](https://img-blog.csdnimg.cn/20200804191113618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70)\n- 生成签名请求(csr文件)\n  `openssl req -new -key client.key -out client.csr`\n  ![[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-lPkpDIT9-1596539441690)(evernotecid://90B54479-F8FA-4F06-9F90-73E6593C6866/appyinxiangcom/27458002/ENResource/p75)]](https://img-blog.csdnimg.cn/20200804191128743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70)\n- 签发证书\n  `openssl x509 -req -days 365 -in client.csr -signkey client.key -out client.crt`\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804191353313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70)\n\n------\n\n# 一键生成自签名证书\n\n`openssl req -new -x509 -newkey rsa:4096 -keyout test.key -out test.crt`\n![[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-jt7UJ692-1596539441692)(evernotecid://90B54479-F8FA-4F06-9F90-73E6593C6866/appyinxiangcom/27458002/ENResource/p76)]](https://img-blog.csdnimg.cn/20200804191401941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70)\n\n> tips\n> 输入的密码必须大于等于4位。\n> Common Name可以输入：*.yourdomain.com，这种方式生成通配符域名证书。\n> 证书文件crt中存储的是证书信息与公钥信息，key文件存储的是私钥信息，csr是申请证书所需要的中间文件。","slug":"mac/Mac命令生成crt证书","published":1,"updated":"2020-12-18T15:04:43.623Z","_id":"ckiu3rmn3000070cd138364k6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/e311a6537467\">openssl命令详解</a></p>\n</blockquote>\n<hr>\n<h1 id=\"常规方式\"><a href=\"#常规方式\" class=\"headerlink\" title=\"常规方式\"></a>常规方式</h1><ul>\n<li>生成私钥(key文件)<br><code>openssl genrsa -out client.key 4096</code><br><img src=\"https://img-blog.csdnimg.cn/20200804191059375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20200804191113618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70\" alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-gikNX2aZ-1596539441689)(evernotecid://90B54479-F8FA-4F06-9F90-73E6593C6866/appyinxiangcom/27458002/ENResource/p74)]\"></li>\n<li>生成签名请求(csr文件)<br><code>openssl req -new -key client.key -out client.csr</code><br><img src=\"https://img-blog.csdnimg.cn/20200804191128743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70\" alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-lPkpDIT9-1596539441690)(evernotecid://90B54479-F8FA-4F06-9F90-73E6593C6866/appyinxiangcom/27458002/ENResource/p75)]\"></li>\n<li>签发证书<br><code>openssl x509 -req -days 365 -in client.csr -signkey client.key -out client.crt</code><br><img src=\"https://img-blog.csdnimg.cn/20200804191353313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<hr>\n<h1 id=\"一键生成自签名证书\"><a href=\"#一键生成自签名证书\" class=\"headerlink\" title=\"一键生成自签名证书\"></a>一键生成自签名证书</h1><p><code>openssl req -new -x509 -newkey rsa:4096 -keyout test.key -out test.crt</code><br><img src=\"https://img-blog.csdnimg.cn/20200804191401941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70\" alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-jt7UJ692-1596539441692)(evernotecid://90B54479-F8FA-4F06-9F90-73E6593C6866/appyinxiangcom/27458002/ENResource/p76)]\"></p>\n<blockquote>\n<p>tips<br>输入的密码必须大于等于4位。<br>Common Name可以输入：*.yourdomain.com，这种方式生成通配符域名证书。<br>证书文件crt中存储的是证书信息与公钥信息，key文件存储的是私钥信息，csr是申请证书所需要的中间文件。</p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/e311a6537467\">openssl命令详解</a></p>\n</blockquote>\n<hr>\n<h1 id=\"常规方式\"><a href=\"#常规方式\" class=\"headerlink\" title=\"常规方式\"></a>常规方式</h1><ul>\n<li>生成私钥(key文件)<br><code>openssl genrsa -out client.key 4096</code><br><img src=\"https://img-blog.csdnimg.cn/20200804191059375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20200804191113618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70\" alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-gikNX2aZ-1596539441689)(evernotecid://90B54479-F8FA-4F06-9F90-73E6593C6866/appyinxiangcom/27458002/ENResource/p74)]\"></li>\n<li>生成签名请求(csr文件)<br><code>openssl req -new -key client.key -out client.csr</code><br><img src=\"https://img-blog.csdnimg.cn/20200804191128743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70\" alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-lPkpDIT9-1596539441690)(evernotecid://90B54479-F8FA-4F06-9F90-73E6593C6866/appyinxiangcom/27458002/ENResource/p75)]\"></li>\n<li>签发证书<br><code>openssl x509 -req -days 365 -in client.csr -signkey client.key -out client.crt</code><br><img src=\"https://img-blog.csdnimg.cn/20200804191353313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<hr>\n<h1 id=\"一键生成自签名证书\"><a href=\"#一键生成自签名证书\" class=\"headerlink\" title=\"一键生成自签名证书\"></a>一键生成自签名证书</h1><p><code>openssl req -new -x509 -newkey rsa:4096 -keyout test.key -out test.crt</code><br><img src=\"https://img-blog.csdnimg.cn/20200804191401941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODc0OTMw,size_16,color_FFFFFF,t_70\" alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-jt7UJ692-1596539441692)(evernotecid://90B54479-F8FA-4F06-9F90-73E6593C6866/appyinxiangcom/27458002/ENResource/p76)]\"></p>\n<blockquote>\n<p>tips<br>输入的密码必须大于等于4位。<br>Common Name可以输入：*.yourdomain.com，这种方式生成通配符域名证书。<br>证书文件crt中存储的是证书信息与公钥信息，key文件存储的是私钥信息，csr是申请证书所需要的中间文件。</p>\n</blockquote>\n"},{"title":"Mac使用openssl生成pem证书","abbrlink":250724269,"date":"2018-12-06T16:00:00.000Z","_content":"\n#### 安装\n\nopenssl，若已安装则跳过\n\n```\nbrew install openssl\n```\n\n#### 生成RSA私钥\n\n使用openssl来生成RSA私钥文件，输入如下命令(该命令会生成2048位的私钥)\n\n```\nopenssl genrsa -out rsa_private_key.pem 2048\n```\n\n显示如下结果则生成私钥成功\n\n```\nMacBook-Pro-6:pem tanxinzheng$ openssl genrsa -out rsa_private_key.pem 2048\nGenerating RSA private key, 2048 bit long modulus\n....................+++\n.+++\ne is 65537 (0x10001)\nMacBook-Pro-6:pem tanxinzheng$ ll\ntotal 8\n-rw-r--r--  1 tanxinzheng  staff  1675 Dec 17 18:45 rsa_private_key.pem\n```\n\n查看私钥文件内容，RSA私钥格式如下：\n\n> 注：因太长.....省略部分内容\n\n```\n-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAzVHzaYFDgEDhIllCBZppYKsaLdYaC9D7IdkBMqroteeHRCaW\nrUgGa0urV8tLygJ5B+l1YBg9EGXouilMEkuX/JsuYCUnqi3M0iqAFYWIyX7sXoKG\np3OkXlj9lMYS9mwAm4MqS6n5AmWK9JqlfPdYhImkxzt/njmQRJCLjNl7fHh6sc1R\nG7YzjiZQxDH6xQDQAjXM77OXbTLxNqWWsi0Gn8dObD0G/kuQEWFJpmIBbzT9zizv\n........\n2xYP/ZoYb6wAe4PzYlJTi/rD8vBdLuBqBKInBfHDe4WvUgOv4Xiu1vxs7lDPyPw5\n2RnLAoGBANpHS9MdFlO6CtOVC1HYMifGY4LcxN7mnJJld2LP7v08pRzhwokMaIBu\ncBH/R0utDLsU9nivvdKjeacQ70pLPpAqDLsQWQxLvOXLLCooLC3RJqpsQp1l4g/I\nsqBVHkCKFTWAw7K28sZdchBHtM/ELH5Tbac2uPEEWtDpzBJ8n4on\n-----END RSA PRIVATE KEY-----\n```\n\n#### 生成RSA公钥\n\n使用如下命令生成公钥：\n\n```\nopenssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem\n```\n\n显示如下结果则生成公钥成功\n\n```\nMacBook-Pro-6:pem tanxinzheng$ openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem\nwriting RSA key\nMacBook-Pro-6:pem tanxinzheng$ ll\ntotal 16\n-rw-r--r--  1 tanxinzheng  staff  1675 Dec 17 18:45 rsa_private_key.pem\n-rw-r--r--  1 tanxinzheng  staff   451 Dec 17 18:47 rsa_public_key.pem\n```\n\n查看公钥文件内容，RSA公钥格式如下：\n\n```\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzVHzaYFDgEDhIllCBZpp\nYKsaLdYaC9D7IdkBMqroteeHRCaWrUgGa0urV8tLygJ5B+l1YBg9EGXouilMEkuX\n/JsuYCUnqi3M0iqAFYWIyX7sXoKGp3OkXlj9lMYS9mwAm4MqS6n5AmWK9JqlfPdY\nhImkxzt/njmQRJCLjNl7fHh6sc1RG7YzjiZQxDH6xQDQAjXM77OXbTLxNqWWsi0G\nn8dObD0G/kuQEWFJpmIBbzT9zizvWsI5gc3jl1Ifp3urk+cexWmZpqavCRK08aee\n5+yqXOk3xk8dqjX4zk6J66bDbiEYQXZcZTaCnTDDiZ4/UiqTue9lKZeUoveuwIfX\nWwIDAQAB\n-----END PUBLIC KEY-----\n```\n\n\n\n","source":"_posts/mac/Mac命令生成pem证书.md","raw":"---\ntitle: Mac使用openssl生成pem证书\nabbrlink: 250724269\ncategories: 技术\ntags:\n\t- RAS\n\t- Mac\ndate: 2018-12-07\n---\n\n#### 安装\n\nopenssl，若已安装则跳过\n\n```\nbrew install openssl\n```\n\n#### 生成RSA私钥\n\n使用openssl来生成RSA私钥文件，输入如下命令(该命令会生成2048位的私钥)\n\n```\nopenssl genrsa -out rsa_private_key.pem 2048\n```\n\n显示如下结果则生成私钥成功\n\n```\nMacBook-Pro-6:pem tanxinzheng$ openssl genrsa -out rsa_private_key.pem 2048\nGenerating RSA private key, 2048 bit long modulus\n....................+++\n.+++\ne is 65537 (0x10001)\nMacBook-Pro-6:pem tanxinzheng$ ll\ntotal 8\n-rw-r--r--  1 tanxinzheng  staff  1675 Dec 17 18:45 rsa_private_key.pem\n```\n\n查看私钥文件内容，RSA私钥格式如下：\n\n> 注：因太长.....省略部分内容\n\n```\n-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAzVHzaYFDgEDhIllCBZppYKsaLdYaC9D7IdkBMqroteeHRCaW\nrUgGa0urV8tLygJ5B+l1YBg9EGXouilMEkuX/JsuYCUnqi3M0iqAFYWIyX7sXoKG\np3OkXlj9lMYS9mwAm4MqS6n5AmWK9JqlfPdYhImkxzt/njmQRJCLjNl7fHh6sc1R\nG7YzjiZQxDH6xQDQAjXM77OXbTLxNqWWsi0Gn8dObD0G/kuQEWFJpmIBbzT9zizv\n........\n2xYP/ZoYb6wAe4PzYlJTi/rD8vBdLuBqBKInBfHDe4WvUgOv4Xiu1vxs7lDPyPw5\n2RnLAoGBANpHS9MdFlO6CtOVC1HYMifGY4LcxN7mnJJld2LP7v08pRzhwokMaIBu\ncBH/R0utDLsU9nivvdKjeacQ70pLPpAqDLsQWQxLvOXLLCooLC3RJqpsQp1l4g/I\nsqBVHkCKFTWAw7K28sZdchBHtM/ELH5Tbac2uPEEWtDpzBJ8n4on\n-----END RSA PRIVATE KEY-----\n```\n\n#### 生成RSA公钥\n\n使用如下命令生成公钥：\n\n```\nopenssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem\n```\n\n显示如下结果则生成公钥成功\n\n```\nMacBook-Pro-6:pem tanxinzheng$ openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem\nwriting RSA key\nMacBook-Pro-6:pem tanxinzheng$ ll\ntotal 16\n-rw-r--r--  1 tanxinzheng  staff  1675 Dec 17 18:45 rsa_private_key.pem\n-rw-r--r--  1 tanxinzheng  staff   451 Dec 17 18:47 rsa_public_key.pem\n```\n\n查看公钥文件内容，RSA公钥格式如下：\n\n```\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzVHzaYFDgEDhIllCBZpp\nYKsaLdYaC9D7IdkBMqroteeHRCaWrUgGa0urV8tLygJ5B+l1YBg9EGXouilMEkuX\n/JsuYCUnqi3M0iqAFYWIyX7sXoKGp3OkXlj9lMYS9mwAm4MqS6n5AmWK9JqlfPdY\nhImkxzt/njmQRJCLjNl7fHh6sc1RG7YzjiZQxDH6xQDQAjXM77OXbTLxNqWWsi0G\nn8dObD0G/kuQEWFJpmIBbzT9zizvWsI5gc3jl1Ifp3urk+cexWmZpqavCRK08aee\n5+yqXOk3xk8dqjX4zk6J66bDbiEYQXZcZTaCnTDDiZ4/UiqTue9lKZeUoveuwIfX\nWwIDAQAB\n-----END PUBLIC KEY-----\n```\n\n\n\n","slug":"mac/Mac命令生成pem证书","published":1,"updated":"2020-12-18T15:04:43.623Z","_id":"ckiu3rmn4000170cd7932hk1r","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>openssl，若已安装则跳过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">brew install openssl<br></code></pre></td></tr></table></figure>\n<h4 id=\"生成RSA私钥\"><a href=\"#生成RSA私钥\" class=\"headerlink\" title=\"生成RSA私钥\"></a>生成RSA私钥</h4><p>使用openssl来生成RSA私钥文件，输入如下命令(该命令会生成2048位的私钥)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">openssl genrsa -out rsa_private_key.pem 2048<br></code></pre></td></tr></table></figure>\n<p>显示如下结果则生成私钥成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">MacBook-Pro-6:pem tanxinzheng$ openssl genrsa -out rsa_private_key.pem 2048<br>Generating RSA private key, 2048 bit long modulus<br>....................+++<br>.+++<br>e is 65537 (0x10001)<br>MacBook-Pro-6:pem tanxinzheng$ ll<br>total 8<br>-rw-r--r--  1 tanxinzheng  staff  1675 Dec 17 18:45 rsa_private_key.pem<br></code></pre></td></tr></table></figure>\n<p>查看私钥文件内容，RSA私钥格式如下：</p>\n<blockquote>\n<p>注：因太长…..省略部分内容</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">-----BEGIN RSA PRIVATE KEY-----<br>MIIEowIBAAKCAQEAzVHzaYFDgEDhIllCBZppYKsaLdYaC9D7IdkBMqroteeHRCaW<br>rUgGa0urV8tLygJ5B+l1YBg9EGXouilMEkuX&#x2F;JsuYCUnqi3M0iqAFYWIyX7sXoKG<br>p3OkXlj9lMYS9mwAm4MqS6n5AmWK9JqlfPdYhImkxzt&#x2F;njmQRJCLjNl7fHh6sc1R<br>G7YzjiZQxDH6xQDQAjXM77OXbTLxNqWWsi0Gn8dObD0G&#x2F;kuQEWFJpmIBbzT9zizv<br>........<br>2xYP&#x2F;ZoYb6wAe4PzYlJTi&#x2F;rD8vBdLuBqBKInBfHDe4WvUgOv4Xiu1vxs7lDPyPw5<br>2RnLAoGBANpHS9MdFlO6CtOVC1HYMifGY4LcxN7mnJJld2LP7v08pRzhwokMaIBu<br>cBH&#x2F;R0utDLsU9nivvdKjeacQ70pLPpAqDLsQWQxLvOXLLCooLC3RJqpsQp1l4g&#x2F;I<br>sqBVHkCKFTWAw7K28sZdchBHtM&#x2F;ELH5Tbac2uPEEWtDpzBJ8n4on<br>-----END RSA PRIVATE KEY-----<br></code></pre></td></tr></table></figure>\n<h4 id=\"生成RSA公钥\"><a href=\"#生成RSA公钥\" class=\"headerlink\" title=\"生成RSA公钥\"></a>生成RSA公钥</h4><p>使用如下命令生成公钥：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem<br></code></pre></td></tr></table></figure>\n<p>显示如下结果则生成公钥成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">MacBook-Pro-6:pem tanxinzheng$ openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem<br>writing RSA key<br>MacBook-Pro-6:pem tanxinzheng$ ll<br>total 16<br>-rw-r--r--  1 tanxinzheng  staff  1675 Dec 17 18:45 rsa_private_key.pem<br>-rw-r--r--  1 tanxinzheng  staff   451 Dec 17 18:47 rsa_public_key.pem<br></code></pre></td></tr></table></figure>\n<p>查看公钥文件内容，RSA公钥格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">-----BEGIN PUBLIC KEY-----<br>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzVHzaYFDgEDhIllCBZpp<br>YKsaLdYaC9D7IdkBMqroteeHRCaWrUgGa0urV8tLygJ5B+l1YBg9EGXouilMEkuX<br>&#x2F;JsuYCUnqi3M0iqAFYWIyX7sXoKGp3OkXlj9lMYS9mwAm4MqS6n5AmWK9JqlfPdY<br>hImkxzt&#x2F;njmQRJCLjNl7fHh6sc1RG7YzjiZQxDH6xQDQAjXM77OXbTLxNqWWsi0G<br>n8dObD0G&#x2F;kuQEWFJpmIBbzT9zizvWsI5gc3jl1Ifp3urk+cexWmZpqavCRK08aee<br>5+yqXOk3xk8dqjX4zk6J66bDbiEYQXZcZTaCnTDDiZ4&#x2F;UiqTue9lKZeUoveuwIfX<br>WwIDAQAB<br>-----END PUBLIC KEY-----<br></code></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>openssl，若已安装则跳过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">brew install openssl<br></code></pre></td></tr></table></figure>\n<h4 id=\"生成RSA私钥\"><a href=\"#生成RSA私钥\" class=\"headerlink\" title=\"生成RSA私钥\"></a>生成RSA私钥</h4><p>使用openssl来生成RSA私钥文件，输入如下命令(该命令会生成2048位的私钥)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">openssl genrsa -out rsa_private_key.pem 2048<br></code></pre></td></tr></table></figure>\n<p>显示如下结果则生成私钥成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">MacBook-Pro-6:pem tanxinzheng$ openssl genrsa -out rsa_private_key.pem 2048<br>Generating RSA private key, 2048 bit long modulus<br>....................+++<br>.+++<br>e is 65537 (0x10001)<br>MacBook-Pro-6:pem tanxinzheng$ ll<br>total 8<br>-rw-r--r--  1 tanxinzheng  staff  1675 Dec 17 18:45 rsa_private_key.pem<br></code></pre></td></tr></table></figure>\n<p>查看私钥文件内容，RSA私钥格式如下：</p>\n<blockquote>\n<p>注：因太长…..省略部分内容</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">-----BEGIN RSA PRIVATE KEY-----<br>MIIEowIBAAKCAQEAzVHzaYFDgEDhIllCBZppYKsaLdYaC9D7IdkBMqroteeHRCaW<br>rUgGa0urV8tLygJ5B+l1YBg9EGXouilMEkuX&#x2F;JsuYCUnqi3M0iqAFYWIyX7sXoKG<br>p3OkXlj9lMYS9mwAm4MqS6n5AmWK9JqlfPdYhImkxzt&#x2F;njmQRJCLjNl7fHh6sc1R<br>G7YzjiZQxDH6xQDQAjXM77OXbTLxNqWWsi0Gn8dObD0G&#x2F;kuQEWFJpmIBbzT9zizv<br>........<br>2xYP&#x2F;ZoYb6wAe4PzYlJTi&#x2F;rD8vBdLuBqBKInBfHDe4WvUgOv4Xiu1vxs7lDPyPw5<br>2RnLAoGBANpHS9MdFlO6CtOVC1HYMifGY4LcxN7mnJJld2LP7v08pRzhwokMaIBu<br>cBH&#x2F;R0utDLsU9nivvdKjeacQ70pLPpAqDLsQWQxLvOXLLCooLC3RJqpsQp1l4g&#x2F;I<br>sqBVHkCKFTWAw7K28sZdchBHtM&#x2F;ELH5Tbac2uPEEWtDpzBJ8n4on<br>-----END RSA PRIVATE KEY-----<br></code></pre></td></tr></table></figure>\n<h4 id=\"生成RSA公钥\"><a href=\"#生成RSA公钥\" class=\"headerlink\" title=\"生成RSA公钥\"></a>生成RSA公钥</h4><p>使用如下命令生成公钥：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem<br></code></pre></td></tr></table></figure>\n<p>显示如下结果则生成公钥成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">MacBook-Pro-6:pem tanxinzheng$ openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem<br>writing RSA key<br>MacBook-Pro-6:pem tanxinzheng$ ll<br>total 16<br>-rw-r--r--  1 tanxinzheng  staff  1675 Dec 17 18:45 rsa_private_key.pem<br>-rw-r--r--  1 tanxinzheng  staff   451 Dec 17 18:47 rsa_public_key.pem<br></code></pre></td></tr></table></figure>\n<p>查看公钥文件内容，RSA公钥格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">-----BEGIN PUBLIC KEY-----<br>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzVHzaYFDgEDhIllCBZpp<br>YKsaLdYaC9D7IdkBMqroteeHRCaWrUgGa0urV8tLygJ5B+l1YBg9EGXouilMEkuX<br>&#x2F;JsuYCUnqi3M0iqAFYWIyX7sXoKGp3OkXlj9lMYS9mwAm4MqS6n5AmWK9JqlfPdY<br>hImkxzt&#x2F;njmQRJCLjNl7fHh6sc1RG7YzjiZQxDH6xQDQAjXM77OXbTLxNqWWsi0G<br>n8dObD0G&#x2F;kuQEWFJpmIBbzT9zizvWsI5gc3jl1Ifp3urk+cexWmZpqavCRK08aee<br>5+yqXOk3xk8dqjX4zk6J66bDbiEYQXZcZTaCnTDDiZ4&#x2F;UiqTue9lKZeUoveuwIfX<br>WwIDAQAB<br>-----END PUBLIC KEY-----<br></code></pre></td></tr></table></figure>\n\n\n"},{"title":"Hexo搭建博客：NexT主题配置","index_img":"/img/hexo.jpeg","description":"在这篇文章中，你将学习到如何搭建Hexo博客以及如何使用NexT主题美化博客","abbrlink":3878378062,"_content":"\n# 1. 前言\n\n前文：[Windows下通过GitHub+Hexo搭建个人博客的步骤](https://blog.csdn.net/weixin_39345384/article/details/80095883)；\n博主的个人博客：https://hunter1023.github.io/ 按照本篇博客美化。\n\n在 Hexo 中有**2份**主要的配置文件，其名称都是`_config.yml`。 其中，一份位于**博客根目录下**，主要包含 **Hexo 本身的配置**；另一份位于`themes/next/`目录下，用于配置**主题相关的选项**。\n\n------\n\n# 2. 基础设置\n\n## 2.1 设置站点名、作者昵称和站点描述等内容\n\n打开**根目录下的`_config.yml`**\n\n```\n# Site\ntitle: 特叔服务\nsubtitle: \nkeywords:\nauthor: Hunter\ndescription: Tough times never last, but tough people do.\n```\n\n------\n\n## 2.2. NexT主题的安装\n\n顾名思义，所谓主题就是界面的展示样式。Hexo安装主题，只需要将主题文件拷贝至博客所在目录的`themes`目录下，修改相关配置文件即可生效。\n\n博客所在目录下打开`git bash`，再通过`Git clone https://github.com/theme-next/hexo-theme-next themes/next`即可完成。\n\n------\n\n## 2.3 启用主题\n\n打开**根目录下的`_config.yml`**,查找`theme`字段，将字段改为`theme: next`(**冒号`:`之后要有空格分隔，否则无效**) ，之后通过`hexo g`和`hexo s`，再在浏览器中访问`localhost:4000`即可本地预览主题效果。\n\n------\n\n# 3. 主题设定\n\n## 3.1 选择scheme\n\n打开`themes/next/`下的`_config.yml`,查找`scheme`，可以看到如下四种不同的风格方案：\n\n```\nscheme: Muse\n#scheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\n\n去掉`#`注释，即启用对应的scheme，博主采用Muse主题，大家可以依次测试效果，选择自己喜欢的scheme。\n\n------\n\n## 3.2 设置语言\n\n博客框架默认的语言是英文，前往`/themes/next/languages`，查看当前NexT版本简体中文对照文件的名称是`zh-Hans`还是`zh-CN`。\n\n再前往根目录下的`_config.yml`，查找`language`，设置成`language: zh-Hans`或`language: zh-CN`，即显示简体中文。\n\n------\n\n## 3.3 设置菜单及对应页面\n\n- 打开`themes/next/`下的`_config.yml`，查找`menu`\n\n  ```\n  menu:\n    home: / || home\n    #about: /about/ || user\n    tags: /tags/ || tags\n    categories: /categories/ || th\n    archives: /archives/ || archive\n    #schedule: /schedule/ || calendar\n    #sitemap: /sitemap.xml || sitemap\n    #commonweal: /404/ || heartbeat\n  ```\n\n  去掉`#`注释即可显示对应的菜单项，也可自定义新的菜单项。 `||`之前的值是目标链接，之后的是分类页面的图标，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。\n\n- 新添加的菜单需要翻译对应的中文\n  打开`hexo/theme/next/languages/zh-CN.yml`，在menu下自定义，如：\n\n  ```\n  menu:\n    resources: 资源\n  ```\n\n- `hexo new page \"categories\"`\n  此时在根目录的`source`文件夹下会生成一个categories文件，文件中有一个`index.md`文件，修改内容如下\n\n  ```\n  ---\n  title: 分类\n  date: 2017-12-14 13:05:38\n  type: \"categories\"\n  comments: false\n  ---\n  ```\n\n  注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。\n\n------\n\n## 3.4 设定站点建立时间\n\n打开**`themes/next/`下的`_config.yml`**，查找`since`\n\n```\nfooter:\n  # Specify the date when the site was setup.\n  # If not defined, current year will be used.\n  #since: 2015\n```\n\n**如果不设置，默认显示当前年份**。\n\n------\n\n# 4. 美化\n\n## 4.1 设置头像\n\n打开`themes/next/`下的`_config.yml`，查找`avatar`\n\n```\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.gif\n# in site  directory(source/uploads): /uploads/avatar.gif\navatar: http://XXXXXXXXX\n```\n\n`avatar`的值是**图片的链接地址**(完整的URI 或者 站内的相对地址皆可)\n\n| 地址       | 值                                                           |\n| ---------- | ------------------------------------------------------------ |\n| 完整的URI  | http://example.com/avatar.png                                |\n| 站点内地址 | 图片放至`themes/next/source/images/`配置为：`avatar: /images/图片名` |\n| 站点内地址 | 图片放至**根目录下**`source/uploads/`(初始无uploads文件夹，自行创建)目录下配置为：`avatar: /uploads/图片名` |\n\n**之后创建博文，对图片的引用 同样可以按照上述地址获取**。\n\n------\n\n## 4.2 网站图标设置\n\n- 图标素材网站：[iconfont](https://www.iconfont.cn/)；[easyicon](https://www.easyicon.net/)\n\n- 下载16x16以及32x32大小的**PNG格式图标**，置于`/themes/next/source/images/`下\n\n- 打开**\n\n  ```\n  themes/next/\n  ```\n\n  下的\n\n  ```\n  _config.yml\n  ```\n\n  **，查找\n\n  ```\n  favicon\n  ```\n\n  ```\n  favicon:\n    small: /images/favicon-16x16-next.png\n    medium: /images/favicon-32x32-next.png\n    apple_touch_icon: /images/apple-touch-icon-next.png\n    safari_pinned_tab: /images/logo.svg\n    #android_manifest: /images/manifest.json\n    #ms_browserconfig: /images/browserconfig.xml\n  ```\n\n  修改small和medium的路径为下载的图标路径\n\n------\n\n## 4.3 背景动画\n\n### 4.3.1 [Canvas-nest风格](https://blog.csdn.net/weixin_39345384/article/details/80544660)\n\n### 4.3.2 JavaScript 3D library风格\n\n1. 进入theme/next目录\n2. 执行命令：`git clone https://github.com/theme-next/theme-next-three source/lib/three`\n3. 将`themes/next/_config.yml`中查找`theme-next-three`，将想要的效果改为true即可：\n\n```\n# three_waves\nthree_waves: false\n# canvas_lines\ncanvas_lines: true\n# canvas_sphere\ncanvas_sphere: false\n```\n\n------\n\n## 4.4 背景图片/顶栏、底栏图片（背景色）、侧栏背景及内部文字颜色\n\n打开`theme/next/source/css/_custom/custom.styl`，添加以下代码\n\n```\n//背景图片\nbody{   \n        background:url(图片链接);\n        background-size:cover;\n        background-repeat:no-repeat;\n        background-attachment:fixed;\n        background-position:center;\n}\n//顶栏图片\n.header {\n          background:url(图片链接) none repeat scroll !important;\n}\n//底栏背景色\n.footer {\n          background:rgba(颜色rgb,透明度) none repeat scroll !important;\n}\n//侧栏图片及内部文字颜色修改\n#sidebar {\n            background:url(图片链接);\n            background-size: cover;\n            background-position:center;\n            background-repeat:no-repeat;\n            p,span,a {color: 颜色代码;}\n}\n```\n\n其中的css样式属性都可以根据图片修改，以达到满意的效果。\n\n------\n\n## 4.5 侧栏置于左侧，修改控制按钮样式\n\n默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。打开`themes/next/`下的`_config.yml`，查找`sidebar`\n\n### 4.5.1 设置侧栏在左侧/右侧\n\n- Pisces或Gemini方案\n\n  ```\n  sidebar:\n  position: left\n  #position: right\n  ```\n\n- Mist或Muse方案\n\n1. 打开`next/source/js/src/motion.js`，查找`paddingRight`，把所有（2个）`PaddingRight`更改为`paddingLeft`即可。\n\n2. 打开\n\n   ```\n   next/source/css/_custom/custom.styl\n   ```\n\n   ，添加如下内容：\n\n   ```\n   //侧边栏置于左侧\n   .sidebar {\n     left: 0;\n   }\n   //侧栏开关置于左侧\n   .sidebar-toggle {\n     left: $b2t-position-right;\n   }\n   ```\n\n3. 打开`next/source/css/_common/components/back-to-top.styl`，将`right: $b2t-position-right;`改为`left: $b2t-position-right;`\n\n### 4.5.2 显示侧边栏的时机\n\n```\n\t#post - 默认行为，在文章页面（拥有目录列表）时显示\n\t#always - 在所有页面中都显示\n\t#hide - 在所有页面中都隐藏（可以手动展开）\n\t#remove - 完全移除\n\tdisplay: post\n\t#display: always\n\t#display: hide\n\t#display: remove\n```\n\n------\n\n### 4.5.3 侧边栏控制按钮样式修改\n\n打开`themes/next/layout/source/js/src/motion.js`，找到如下代码处，更换close的内容\n\n```\nvar sidebarToggleLine1st = new SidebarToggleLine({\n    el: '.sidebar-toggle-line-first',\n    status: {\n      arrow: {width: '50%', rotateZ: '45deg', top: '2px', left: '6px'},\n      // close: {width: '100%', rotateZ: '-45deg', top: '5px', left: '0px'} //X形\n      close: {width: '50%', rotateZ: '-45deg', top: '2px', left: '0px'} //箭头形\n    }\n  });\n  var sidebarToggleLine2nd = new SidebarToggleLine({\n    el: '.sidebar-toggle-line-middle',\n    status: {\n      arrow: {width: '90%'},\n      // close: {opacity: 0} //X形\n      close: {width: '90%'} //箭头形\n    }\n  });\n  var sidebarToggleLine3rd = new SidebarToggleLine({\n    el: '.sidebar-toggle-line-last',\n    status: {\n      arrow: {width: '50%', rotateZ: '-45deg', top: '-2px', left: '6px'},\n      // close: {width: '100%', rotateZ: '45deg', top: '-5px', left: '0px'} //X形\n      close: {width: '50%', rotateZ: '45deg', top: '-2px', left: '0px'} //箭头形\n    }\n  });\n```\n\n------\n\n## 4.6 文章底部标签显示的优化\n\n修改`/themes/next/layout/_macro/post.swig`，搜索 `rel=\"tag\">#`，将 `#` 换成 `<i class=\"fa fa-tag\"></i>`\n\n## 4.7 文章添加阴影、透明效果\n\n打开`theme/next/source/css/_custom/custom.styl`，添加以下代码\n\n```\n// 主页文章添加阴影效果\n.post {\n   margin-top: 60px;\n   margin-bottom: 60px;\n   padding: 25px;\n   background:rgba(255,255,255,0.9) none repeat scroll !important;\n   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n}\n```\n\n------\n\n## 4.8 Hexo添加文章时自动打开编辑器\n\n- 首先在Hexo目录下的scripts目录中创建一个JavaScript脚本文件。\n  如果没有这个scripts目录，则新建一个。\n- scripts目录新建的JavaScript脚本文件可以任意取名。\n\n通过这个脚本，我们用其来监听`hexo new`这个动作，并在检测到`hexo new`之后，执行编辑器打开的命令。\n\n- 如果你是windows平台的Hexo用户，则将下列内容写入你的脚本：\n\n```\nvar spawn = require('child_process').exec;\nhexo.on('new', function(data){\n  spawn('start  \"markdown编辑器绝对路径.exe\" ' + data.path);\n});\n```\n\n如果你是Mac平台Hexo用户，则将下列内容写入你的脚本：\n\n```\nvar exec = require('child_process').exec;\nhexo.on('new', function(data){\n    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n});\n```\n\n------\n\n## 4.9 点击侧栏头像回到首页\n\n修改`/themes/next/layout/_macro/sidebar.swig`，找到如下代码：\n\n```\n<img class=\"site-author-image\" itemprop=\"image\"\n    src=\"{{ url_for( theme.avatar | default(theme.images + '/avatar.gif') ) }}\"\n    alt=\"{{ theme.author }}\" />\n```\n\n在其前后加上`<a href=\"/\"></a>`即可，如下：\n\n```\n<a href=\"/\">\n   <img class=\"site-author-image\" itemprop=\"image\"\n       src=\"{{ url_for( theme.avatar | default(theme.images + '/avatar.gif') ) }}\"\n       alt=\"{{ theme.author }}\" />\n</a>\n```\n\n------\n\n## 4.10 修改中文字体\n\n1. 前往[Google Fonts](https://fonts.google.com/)查看合适的字体\n\n2. 打开\n\n   ```\n   themes/next/\n   ```\n\n   下的\n\n   ```\n   _config.yml\n   ```\n\n   ，查找\n\n   ```\n   font\n   ```\n\n   ```\n   font:\n   \tenable: true\n   \t # Uri of fonts host. E.g. //fonts.googleapis.com (Default). 修改为墙内镜像\n   \thost: https://fonts.loli.net\n   \tglobal:\n   \t\texternal: true\n   \t\tfamily: Noto Serif SC // 挑选的字体\n   \t\tsize: 16\n   ```\n\n   1. 修改`/themes/next/source/css/_variables/base.styl`\n      将\n\n   ```\n   $font-family-monospace    = consolas, Menlo, $font-family-chinese, monospace\n   $font-family-monospace    = get_font_family('codes'), consolas, Menlo, $font-family-chinese, monospace if get_font_family('codes')\n   ```\n\n   改为\n\n   ```\n   $font-family-monospace    = consolas, Menlo, $font-family-base, monospace\n   $font-family-monospace    = get_font_family('codes'), consolas, Menlo, $font-family-base, monospace if get_font_family('codes')\n   ```\n\n------\n\n## 4.11 新建文章时，在相同目录下创建同名文件夹（便于图片管理）\n\n- 打开站点配置文件`_config.yml`，搜索`post_asset_folder`字段，设置其值为`true`\n- 安装hexo-asset-image：`npm install hexo-asset-image --save`\n- 此时`hexo new \"fileName\"`会在`/source/_posts`目录下创建同名的文件夹\n- 只需在 md 文件里使用 `![title](图片名.jpg)` ，无需路径名就可以插入图片。\n\n------\n\n## 4.12 首页显示文章摘要（阅读全文）及配图（文章内不重复显示）\n\n1. 打开\n\n   ```\n   themes/next/\n   ```\n\n   下的\n\n   ```\n   _config.yml\n   ```\n\n   ，查找\n\n   ```\n   excerpt\n   ```\n\n   ```\n   auto_excerpt: //自动摘录\n     enable: true\n     length: 150 //摘录字数\n   read_more_btn: true //显示全文按钮\n   ```\n\n2. 打开\n\n   ```\n   themes\\next\\layout\\_macro\\post.swig\n   ```\n\n   ，在\n\n   ```\n   {% if is_index %}\n   ```\n\n   和\n\n   ```\n   {% if post.description and theme.excerpt_description %}\n   ```\n\n   之间添加如下内容\n\n   ```\n   {% if post.images %}\n   \t<div class=\"out-img-topic\">\n   \t\t<img src={{ post.images }} class=\"img-topic\">\n   \t</div>\n   {% endif %}\n   ```\n\n3. 向\n\n   ```\n   themes\\next\\source\\css\\_custom\\custom.styl\n   ```\n\n   中添加如下内容\n\n   ```\n   //文章摘要配图\n   //图片外部的容器方框，限制图片大小\n   .out-img-topic {\n     display: block;\n     max-height:500px;\n     margin-bottom: 24px;\n     overflow: hidden;\n   }\n   //图片\n   img.img-topic {\n     display: block ;\n     margin-left: .7em;\n     margin-right: .7em;\n     padding: 0;\n     float: right;\n     clear: right;\n   }\n   ```\n\n4. 将摘要图片储存于\n\n   ```\n   themes\\next\\source\\images\n   ```\n\n   中，建议\n\n   在此路径下\n\n   单独建一个文件夹存放摘要图片，\n\n   这个图片和文章中插图的存放路径不同，不是一个概念\n\n   。然后在文章YAML头信息中添加images字段，将值填为\n\n   ```\n   /images/imagename.jpg\n   ```\n\n   。\n\n   ```\n   images: \"images/文章摘要配图/Win10桌面.png\"\n   ```\n\n------\n\n## 4.13 给页面、侧边栏添加背景图片\n\n打开`theme/next/source/css/_custom/custom.styl`，添加以下代码：\n\n```\nbody {\n  background: url(/images/blogbk.jpg) no-repeat;\n  /* 背景图垂直、水平均居中 */\n  background-position: center center;\n  /* 当内容高度大于图片高度时，背景图像的位置相对于viewport固定 */\n  background-attachment: fixed;\n  /* 让背景图基于容器大小伸缩 */\n  background-size: cover;\n  /* 设置背景颜色，背景图加载过程中会显示背景色 */\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.sidebar {\n            background:url(/images/sidebar.jpg);\n            background-size: cover;\n            background-position:center;\n            background-repeat:no-repeat;\n            p,span,a {color: rgba(255, 255, 255, 1);}\n}\n```\n\n------\n\n## 4.14 文字背景以及半透明的设置\n\n打开`theme/next/source/css/_custom/custom.styl`，添加以下代码：\n\n```\n.content {\n\tborder-radius: 20px; //文章背景设置圆角\n\tpadding: 30px 60px 30px 60px;\n\tbackground:rgba(255, 255, 255, 0.8) none repeat scroll !important;\n}\n```\n\n------\n\n## 4.15 去除NexT主题Markdown分割线渲染效果\n\n修改`/source/css/_common/scaffolding/base.styl`，注释或删除以下内容：\n\n```\nbackground-image: repeating-linear-gradient(\n    -45deg,\n    white,\n    white 4px,\n    transparent 4px,\n    transparent 8px\n  );\n1234567\n```\n\n------\n\n## 4.16 图片可点击放大查看，放大后可关闭\n\n- 打开站点配置文件`_config.yml`，搜索`fancybox`字段，设置其值为`true`\n- 进入到`theme/text/`文件夹下，打开`git bash`\n- `git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox`\n\n------\n\n## 4.17 博客总访问量统计\n\n- 打开\n\n  ```\n  themes/next/\n  ```\n\n  下的\n\n  ```\n  _config.yml\n  ```\n\n  ，查找\n\n  ```\n  busuanzi\n  ```\n\n  ```\n  busuanzi_count:\n    enable: true\n    total_visitors: false\n    total_visitors_icon: user\n    total_views: false\n    total_views_icon: eye\n    post_views: true\n    post_views_icon: eye\n  ```\n\n当前版本的NexT集成的不蒜子，总访问人数和人次只是分别用icon来表示，故取消显示，自行改动\n\n- 打开\n\n  ```\n  /themes/next/layout/_partials/footer.swig\n  ```\n\n  ，在最后添加如下内容：\n\n  ```\n  <span id=\"busuanzi_container_site_uv\">\n    本站访问次数：<span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n  </span>\n  ```\n\n## 4.18 文章末尾添加版权声明\n\n**效果：**\n![这里写图片描述](https://img-blog.csdn.net/2018062323493260?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM0NTM4NA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n**配置：**\n查找主题配置文件`themes/next/_config.yml`中的`creative_commons`\n\n```\ncreative_commons:\n  license: by-nc-sa\n  sidebar: false\n  post: true  # 将false改为true即可显示版权信息\n  language:\n```\n\n------\n\n## 4.19 本地搜索（其余搜索方案的劣势只有收费）\n\n- `npm install hexo-generator-search`\n\n- 查找主题配置文件\n\n  ```\n  themes/next/_config.yml\n  ```\n\n  中的\n\n  ```\n  local_search\n  ```\n\n  ```\n  local_search:\n    enable: true\n  ```\n\n------\n\n## 4.20 图床和上传工具\n\n[盘点一下免费好用的图床](https://zhuanlan.zhihu.com/p/35270383)\n\n## 4.21 文章置顶\n\n[Hexo博客彻底解决置顶问题](http://wangwlj.com/2018/01/09/blog_pin_post/)\n效果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190329140445995.png)\n注：若有多篇文章需要置顶，排序方式为 在需要置顶的文章的`Front-matter`的`top:`填写阿拉伯数字即可，数越大，排序越靠前。\n\n## 4.22 添加粒子时钟\n\n博客应用canvas粒子时钟的操作步骤：\n\n在`\\themes\\next\\layout\\_custom\\`目录下，新建`clock.swig`文件，内容如下：\n\n```\n<div style=\"\">\n  <canvas id=\"canvas\" style=\"width:60%;\">当前浏览器不支持canvas，请更换浏览器后再试</canvas>\n</div>\n<script>\n(function(){\n\n   var digit=\n    [\n        [\n            [0,0,1,1,1,0,0],\n            [0,1,1,0,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,0,1,1,0],\n            [0,0,1,1,1,0,0]\n        ],//0\n        [\n            [0,0,0,1,1,0,0],\n            [0,1,1,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [1,1,1,1,1,1,1]\n        ],//1\n        [\n            [0,1,1,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,0,0],\n            [0,0,1,1,0,0,0],\n            [0,1,1,0,0,0,0],\n            [1,1,0,0,0,0,0],\n            [1,1,0,0,0,1,1],\n            [1,1,1,1,1,1,1]\n        ],//2\n        [\n            [1,1,1,1,1,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,0,0,1,1,0],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0]\n        ],//3\n        [\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,1,0],\n            [0,0,1,1,1,1,0],\n            [0,1,1,0,1,1,0],\n            [1,1,0,0,1,1,0],\n            [1,1,1,1,1,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,0,1,1,0],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,1,1]\n        ],//4\n        [\n            [1,1,1,1,1,1,1],\n            [1,1,0,0,0,0,0],\n            [1,1,0,0,0,0,0],\n            [1,1,1,1,1,1,0],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0]\n        ],//5\n        [\n            [0,0,0,0,1,1,0],\n            [0,0,1,1,0,0,0],\n            [0,1,1,0,0,0,0],\n            [1,1,0,0,0,0,0],\n            [1,1,0,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0]\n        ],//6\n        [\n            [1,1,1,1,1,1,1],\n            [1,1,0,0,0,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,1,1,0,0,0],\n            [0,0,1,1,0,0,0],\n            [0,0,1,1,0,0,0],\n            [0,0,1,1,0,0,0]\n        ],//7\n        [\n            [0,1,1,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0]\n        ],//8\n        [\n            [0,1,1,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,0,0],\n            [0,1,1,0,0,0,0]\n        ],//9\n        [\n            [0,0,0,0,0,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,0,0,0,0,0]\n        ]//:\n    ];\n\nvar canvas = document.getElementById('canvas');\n\nif(canvas.getContext){\n    var cxt = canvas.getContext('2d');\n    //声明canvas的宽高\n    var H = 100,W = 700;\n    canvas.height = H;\n    canvas.width = W;\n    cxt.fillStyle = '#f00';\n    cxt.fillRect(10,10,50,50);\n\n    //存储时间数据\n    var data = [];\n    //存储运动的小球\n    var balls = [];\n    //设置粒子半径\n    var R = canvas.height/20-1;\n    (function(){\n        var temp = /(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)/.exec(new Date());\n        //存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成\n        data.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);\n    })();\n\n    /*生成点阵数字*/\n    function renderDigit(index,num){\n        for(var i = 0; i < digit[num].length; i++){\n            for(var j = 0; j < digit[num][i].length; j++){\n                if(digit[num][i][j] == 1){\n                    cxt.beginPath();\n                    cxt.arc(14*(R+2)*index + j*2*(R+1)+(R+1),i*2*(R+1)+(R+1),R,0,2*Math.PI);\n                    cxt.closePath();\n                    cxt.fill();\n                }\n            }\n        }\n    }\n\n    /*更新时钟*/\n    function updateDigitTime(){\n        var changeNumArray = [];\n        var temp = /(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)/.exec(new Date());\n        var NewData = [];\n        NewData.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);\n        for(var i = data.length-1; i >=0 ; i--){\n            //时间发生变化\n            if(NewData[i] !== data[i]){\n                //将变化的数字值和在data数组中的索引存储在changeNumArray数组中\n                changeNumArray.push(i+'_'+(Number(data[i])+1)%10);\n            }\n        }\n        //增加小球\n        for(var i = 0; i< changeNumArray.length; i++){\n            addBalls.apply(this,changeNumArray[i].split('_'));\n        }\n        data = NewData.concat();\n    }\n\n    /*更新小球状态*/\n    function updateBalls(){\n        for(var i = 0; i < balls.length; i++){\n            balls[i].stepY += balls[i].disY;\n            balls[i].x += balls[i].stepX;\n            balls[i].y += balls[i].stepY;\n            if(balls[i].x > W + R || balls[i].y > H + R){\n                balls.splice(i,1);\n                i--;\n            }\n        }\n    }\n\n    /*增加要运动的小球*/\n    function addBalls(index,num){\n        var numArray = [1,2,3];\n        var colorArray =  [\"#3BE\",\"#09C\",\"#A6C\",\"#93C\",\"#9C0\",\"#690\",\"#FB3\",\"#F80\",\"#F44\",\"#C00\"];\n        for(var i = 0; i < digit[num].length; i++){\n            for(var j = 0; j < digit[num][i].length; j++){\n                if(digit[num][i][j] == 1){\n                    var ball = {\n                        x:14*(R+2)*index + j*2*(R+1)+(R+1),\n                        y:i*2*(R+1)+(R+1),\n                        stepX:Math.floor(Math.random() * 4 -2),\n                        stepY:-2*numArray[Math.floor(Math.random()*numArray.length)],\n                        color:colorArray[Math.floor(Math.random()*colorArray.length)],\n                        disY:1\n                    };\n                    balls.push(ball);\n                }\n            }\n        }\n    }\n\n    /*渲染*/\n    function render(){\n        //重置画布宽度，达到清空画布的效果\n        canvas.height = 100;\n        //渲染时钟\n        for(var i = 0; i < data.length; i++){\n            renderDigit(i,data[i]);\n        }\n        //渲染小球\n        for(var i = 0; i < balls.length; i++){\n            cxt.beginPath();\n            cxt.arc(balls[i].x,balls[i].y,R,0,2*Math.PI);\n            cxt.fillStyle = balls[i].color;\n            cxt.closePath();\n            cxt.fill();\n        }\n    }\n\n    clearInterval(oTimer);\n    var oTimer = setInterval(function(){\n        //更新时钟\n        updateDigitTime();\n        //更新小球状态\n        updateBalls();\n        //渲染\n        render();\n    },50);\n}\n\n})();\n</script>\n```\n\n- 引用代码\n\n直接引用或者通过配置文件配置，二选一\n\n- 直接引用\n\n在`博客目录\\themes\\next\\layout\\_macro\\sidebar.swig`尾部中引入：\n\n```\n{% include '../_custom/clock.swig' %}\n```\n\n示意图如下：\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5ub3MtZWFzdGNoaW5hMS4xMjYubmV0L2Jsb2cvYmxvZ19jbG9jay5wbmc?x-oss-process=image/format,png)\n\n> 注：代码块要放置在`sider-inner`的`div`块中，放在`div`块的位置决定时钟样式的展示位置。我选择放置在尾部，看着效果好点。\n\n- 通过配置文件配置\n\n1、在`博客目录\\themes\\next\\layout\\_macro\\sidebar.swig`尾部中引入：\n\n```\n        {% if theme.diy_time.clock %}\n          <!-- canvas粒子时钟 -->\n          {% include '../_custom/clock.swig' %}\n        {% endif %}\n```\n\n示意图如下：\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5ub3MtZWFzdGNoaW5hMS4xMjYubmV0L2Jsb2cvYmxvZ19jbG9ja19pZi5wbmc?x-oss-process=image/format,png)\n\n> 注：代码块要放置在`sider-inner`的`div`块中，放在`div`块的位置决定时钟样式的展示位置。\n\n2、在主题的配置文件中加入应用代码，配置文件位置是`博客目录\\themes\\next\\_config.yml`：\n\n```\n# 侧栏粒子时钟\ndiy_time:\n  runtime: true \n  clock: true # 粒子时钟\n```\n\n## 4.23 添加近期文章\n\n添加配置参数 **~/theme/next/_config.yml** ，添加如下配置：\n\n```\nrecent_posts:\n  enable: true\n  recent_posts_title: 最新发表文章\n```\n\n首先我们找到侧边栏模块 **next/layout/_macro/sidebar.swig** ,这个负责渲染侧边栏\n在我们想要放置**最新文章模块**的地方添加如下代码：\n\n```\n{% if theme.recent_posts.enable %}\n  <aside class=\"sidebar sidebar-ads sidebar-posts\">\n    <div>\n      <div class=\"recent_posts_title\">\n        {{ theme.recent_posts.recent_posts_title }}\n      </div>\n      <ul class=\"links-of-blogroll-list\">\n        {% set posts = site.posts.sort('-date') %}\n        {% set bg_colors = ['rgb(31, 216, 210)', 'rgb(4, 166, 247)', 'rgb(70, 101, 226)', 'rgb(94, 137, 229)', 'rgb(0, 206, 123)'] %}\n        {% for post in posts.slice('0', '5') %}\n          <li>\n            <div class=\"text-img\" style=\"background:{{bg_colors[loop.index - 1]}};\">{{ post.title.substr(0, 3) }}</div>\n            <div class=\"post-name\">\n              <div>{{ date(post.date, config.date_format) }}</div>\n              <div><a href=\"{{ url_for(post.path) }}\" title=\"{{ post.title }}\" >{{ post.title }}</a></div>\n            </div>\n          </li>\n        {% endfor %}\n      </ul>\n    </div>\n  </aside>\n  {% endif %}\n```\n\n最后重新执行\n\n```\nhexo clean\nhexo g\n```\n\n\n\n最后我们得到的效果是\n\n## Google统计\n\n## Sitemap网站地图\n\n## 提交谷歌收录本站 Google Search\n\n\n\n## [文章阅读量统计](https://blog.csdn.net/weixin_39345384/article/details/80787998)\n\n------\n\n------\n\n参考：\n\n- [HEXO+NEXT主题个性化配置](http://mashirosorata.vicp.io/HEXO-NEXT主题个性化配置.html)\n- [打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化](https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html)\n- [[EasyHexo 专栏\\] #2 - 魔改 Next 不完全教程](https://juejin.im/post/5c45a503f265da616b10fe4e#heading-28)\n- [基于Hexo+Node.js+github+coding搭建个人博客——进阶篇(从入门到入土)](https://blog.csdn.net/MasterAnt_D/article/details/56839222#t50)\n- [Hexo博客Next主题优化总结](http://www.shaoyance.com/2018/01/26/Hexo博客Next主题优化总结/)\n- [为NexT主题添加文章阅读量统计功能](https://notes.doublemine.me/2015-10-21-为NexT主题添加文章阅读量统计功能.html)\n- [2017年最新基于hexo搭建个人免费博客——自定义页面样式一](http://www.cduyzh.com/hexo-settings-3/)\n- [Hexo添加文章时自动打开编辑器](https://notes.doublemine.me/2015-06-29-Hexo添加文章时自动打开编辑器.html)\n- [next主题下点击侧边栏头像回到博客首页](https://blog.yleao.com/2018/0901/hexo-next主题下的美化.html#next主题下点击侧边栏头像回到博客首页)\n- [Google Fonts 已支持思源宋体！](https://reuixiy.github.io/beautiful/share/2018/12/11/noto-serif-sc-added-on-google-fonts.html)\n- [弃暗投明-Hexo更换next主题](https://www.bluelzy.com/articles/change_to_next_theme.html)\n- [hexo博客NEXT主题美化](https://www.feiwuuz.com.cn/archives/5483aa06.html)\n- [在hexo博客中插入图片，音乐，视频](http://chant00.com/2015/11/04/在hexo博客中插入图片，音乐，视屏，公式/)","source":"_posts/hexo/NexT主题自定义配置.md","raw":"---\ntitle: Hexo搭建博客：NexT主题配置\ncategories: 博客\ntags:\n  - Hexo\n  - NexT\nindex_img: /img/hexo.jpeg\ndescription: 在这篇文章中，你将学习到如何搭建Hexo博客以及如何使用NexT主题美化博客\nabbrlink: 3878378062\n---\n\n# 1. 前言\n\n前文：[Windows下通过GitHub+Hexo搭建个人博客的步骤](https://blog.csdn.net/weixin_39345384/article/details/80095883)；\n博主的个人博客：https://hunter1023.github.io/ 按照本篇博客美化。\n\n在 Hexo 中有**2份**主要的配置文件，其名称都是`_config.yml`。 其中，一份位于**博客根目录下**，主要包含 **Hexo 本身的配置**；另一份位于`themes/next/`目录下，用于配置**主题相关的选项**。\n\n------\n\n# 2. 基础设置\n\n## 2.1 设置站点名、作者昵称和站点描述等内容\n\n打开**根目录下的`_config.yml`**\n\n```\n# Site\ntitle: 特叔服务\nsubtitle: \nkeywords:\nauthor: Hunter\ndescription: Tough times never last, but tough people do.\n```\n\n------\n\n## 2.2. NexT主题的安装\n\n顾名思义，所谓主题就是界面的展示样式。Hexo安装主题，只需要将主题文件拷贝至博客所在目录的`themes`目录下，修改相关配置文件即可生效。\n\n博客所在目录下打开`git bash`，再通过`Git clone https://github.com/theme-next/hexo-theme-next themes/next`即可完成。\n\n------\n\n## 2.3 启用主题\n\n打开**根目录下的`_config.yml`**,查找`theme`字段，将字段改为`theme: next`(**冒号`:`之后要有空格分隔，否则无效**) ，之后通过`hexo g`和`hexo s`，再在浏览器中访问`localhost:4000`即可本地预览主题效果。\n\n------\n\n# 3. 主题设定\n\n## 3.1 选择scheme\n\n打开`themes/next/`下的`_config.yml`,查找`scheme`，可以看到如下四种不同的风格方案：\n\n```\nscheme: Muse\n#scheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\n\n去掉`#`注释，即启用对应的scheme，博主采用Muse主题，大家可以依次测试效果，选择自己喜欢的scheme。\n\n------\n\n## 3.2 设置语言\n\n博客框架默认的语言是英文，前往`/themes/next/languages`，查看当前NexT版本简体中文对照文件的名称是`zh-Hans`还是`zh-CN`。\n\n再前往根目录下的`_config.yml`，查找`language`，设置成`language: zh-Hans`或`language: zh-CN`，即显示简体中文。\n\n------\n\n## 3.3 设置菜单及对应页面\n\n- 打开`themes/next/`下的`_config.yml`，查找`menu`\n\n  ```\n  menu:\n    home: / || home\n    #about: /about/ || user\n    tags: /tags/ || tags\n    categories: /categories/ || th\n    archives: /archives/ || archive\n    #schedule: /schedule/ || calendar\n    #sitemap: /sitemap.xml || sitemap\n    #commonweal: /404/ || heartbeat\n  ```\n\n  去掉`#`注释即可显示对应的菜单项，也可自定义新的菜单项。 `||`之前的值是目标链接，之后的是分类页面的图标，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。\n\n- 新添加的菜单需要翻译对应的中文\n  打开`hexo/theme/next/languages/zh-CN.yml`，在menu下自定义，如：\n\n  ```\n  menu:\n    resources: 资源\n  ```\n\n- `hexo new page \"categories\"`\n  此时在根目录的`source`文件夹下会生成一个categories文件，文件中有一个`index.md`文件，修改内容如下\n\n  ```\n  ---\n  title: 分类\n  date: 2017-12-14 13:05:38\n  type: \"categories\"\n  comments: false\n  ---\n  ```\n\n  注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。\n\n------\n\n## 3.4 设定站点建立时间\n\n打开**`themes/next/`下的`_config.yml`**，查找`since`\n\n```\nfooter:\n  # Specify the date when the site was setup.\n  # If not defined, current year will be used.\n  #since: 2015\n```\n\n**如果不设置，默认显示当前年份**。\n\n------\n\n# 4. 美化\n\n## 4.1 设置头像\n\n打开`themes/next/`下的`_config.yml`，查找`avatar`\n\n```\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.gif\n# in site  directory(source/uploads): /uploads/avatar.gif\navatar: http://XXXXXXXXX\n```\n\n`avatar`的值是**图片的链接地址**(完整的URI 或者 站内的相对地址皆可)\n\n| 地址       | 值                                                           |\n| ---------- | ------------------------------------------------------------ |\n| 完整的URI  | http://example.com/avatar.png                                |\n| 站点内地址 | 图片放至`themes/next/source/images/`配置为：`avatar: /images/图片名` |\n| 站点内地址 | 图片放至**根目录下**`source/uploads/`(初始无uploads文件夹，自行创建)目录下配置为：`avatar: /uploads/图片名` |\n\n**之后创建博文，对图片的引用 同样可以按照上述地址获取**。\n\n------\n\n## 4.2 网站图标设置\n\n- 图标素材网站：[iconfont](https://www.iconfont.cn/)；[easyicon](https://www.easyicon.net/)\n\n- 下载16x16以及32x32大小的**PNG格式图标**，置于`/themes/next/source/images/`下\n\n- 打开**\n\n  ```\n  themes/next/\n  ```\n\n  下的\n\n  ```\n  _config.yml\n  ```\n\n  **，查找\n\n  ```\n  favicon\n  ```\n\n  ```\n  favicon:\n    small: /images/favicon-16x16-next.png\n    medium: /images/favicon-32x32-next.png\n    apple_touch_icon: /images/apple-touch-icon-next.png\n    safari_pinned_tab: /images/logo.svg\n    #android_manifest: /images/manifest.json\n    #ms_browserconfig: /images/browserconfig.xml\n  ```\n\n  修改small和medium的路径为下载的图标路径\n\n------\n\n## 4.3 背景动画\n\n### 4.3.1 [Canvas-nest风格](https://blog.csdn.net/weixin_39345384/article/details/80544660)\n\n### 4.3.2 JavaScript 3D library风格\n\n1. 进入theme/next目录\n2. 执行命令：`git clone https://github.com/theme-next/theme-next-three source/lib/three`\n3. 将`themes/next/_config.yml`中查找`theme-next-three`，将想要的效果改为true即可：\n\n```\n# three_waves\nthree_waves: false\n# canvas_lines\ncanvas_lines: true\n# canvas_sphere\ncanvas_sphere: false\n```\n\n------\n\n## 4.4 背景图片/顶栏、底栏图片（背景色）、侧栏背景及内部文字颜色\n\n打开`theme/next/source/css/_custom/custom.styl`，添加以下代码\n\n```\n//背景图片\nbody{   \n        background:url(图片链接);\n        background-size:cover;\n        background-repeat:no-repeat;\n        background-attachment:fixed;\n        background-position:center;\n}\n//顶栏图片\n.header {\n          background:url(图片链接) none repeat scroll !important;\n}\n//底栏背景色\n.footer {\n          background:rgba(颜色rgb,透明度) none repeat scroll !important;\n}\n//侧栏图片及内部文字颜色修改\n#sidebar {\n            background:url(图片链接);\n            background-size: cover;\n            background-position:center;\n            background-repeat:no-repeat;\n            p,span,a {color: 颜色代码;}\n}\n```\n\n其中的css样式属性都可以根据图片修改，以达到满意的效果。\n\n------\n\n## 4.5 侧栏置于左侧，修改控制按钮样式\n\n默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。打开`themes/next/`下的`_config.yml`，查找`sidebar`\n\n### 4.5.1 设置侧栏在左侧/右侧\n\n- Pisces或Gemini方案\n\n  ```\n  sidebar:\n  position: left\n  #position: right\n  ```\n\n- Mist或Muse方案\n\n1. 打开`next/source/js/src/motion.js`，查找`paddingRight`，把所有（2个）`PaddingRight`更改为`paddingLeft`即可。\n\n2. 打开\n\n   ```\n   next/source/css/_custom/custom.styl\n   ```\n\n   ，添加如下内容：\n\n   ```\n   //侧边栏置于左侧\n   .sidebar {\n     left: 0;\n   }\n   //侧栏开关置于左侧\n   .sidebar-toggle {\n     left: $b2t-position-right;\n   }\n   ```\n\n3. 打开`next/source/css/_common/components/back-to-top.styl`，将`right: $b2t-position-right;`改为`left: $b2t-position-right;`\n\n### 4.5.2 显示侧边栏的时机\n\n```\n\t#post - 默认行为，在文章页面（拥有目录列表）时显示\n\t#always - 在所有页面中都显示\n\t#hide - 在所有页面中都隐藏（可以手动展开）\n\t#remove - 完全移除\n\tdisplay: post\n\t#display: always\n\t#display: hide\n\t#display: remove\n```\n\n------\n\n### 4.5.3 侧边栏控制按钮样式修改\n\n打开`themes/next/layout/source/js/src/motion.js`，找到如下代码处，更换close的内容\n\n```\nvar sidebarToggleLine1st = new SidebarToggleLine({\n    el: '.sidebar-toggle-line-first',\n    status: {\n      arrow: {width: '50%', rotateZ: '45deg', top: '2px', left: '6px'},\n      // close: {width: '100%', rotateZ: '-45deg', top: '5px', left: '0px'} //X形\n      close: {width: '50%', rotateZ: '-45deg', top: '2px', left: '0px'} //箭头形\n    }\n  });\n  var sidebarToggleLine2nd = new SidebarToggleLine({\n    el: '.sidebar-toggle-line-middle',\n    status: {\n      arrow: {width: '90%'},\n      // close: {opacity: 0} //X形\n      close: {width: '90%'} //箭头形\n    }\n  });\n  var sidebarToggleLine3rd = new SidebarToggleLine({\n    el: '.sidebar-toggle-line-last',\n    status: {\n      arrow: {width: '50%', rotateZ: '-45deg', top: '-2px', left: '6px'},\n      // close: {width: '100%', rotateZ: '45deg', top: '-5px', left: '0px'} //X形\n      close: {width: '50%', rotateZ: '45deg', top: '-2px', left: '0px'} //箭头形\n    }\n  });\n```\n\n------\n\n## 4.6 文章底部标签显示的优化\n\n修改`/themes/next/layout/_macro/post.swig`，搜索 `rel=\"tag\">#`，将 `#` 换成 `<i class=\"fa fa-tag\"></i>`\n\n## 4.7 文章添加阴影、透明效果\n\n打开`theme/next/source/css/_custom/custom.styl`，添加以下代码\n\n```\n// 主页文章添加阴影效果\n.post {\n   margin-top: 60px;\n   margin-bottom: 60px;\n   padding: 25px;\n   background:rgba(255,255,255,0.9) none repeat scroll !important;\n   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n}\n```\n\n------\n\n## 4.8 Hexo添加文章时自动打开编辑器\n\n- 首先在Hexo目录下的scripts目录中创建一个JavaScript脚本文件。\n  如果没有这个scripts目录，则新建一个。\n- scripts目录新建的JavaScript脚本文件可以任意取名。\n\n通过这个脚本，我们用其来监听`hexo new`这个动作，并在检测到`hexo new`之后，执行编辑器打开的命令。\n\n- 如果你是windows平台的Hexo用户，则将下列内容写入你的脚本：\n\n```\nvar spawn = require('child_process').exec;\nhexo.on('new', function(data){\n  spawn('start  \"markdown编辑器绝对路径.exe\" ' + data.path);\n});\n```\n\n如果你是Mac平台Hexo用户，则将下列内容写入你的脚本：\n\n```\nvar exec = require('child_process').exec;\nhexo.on('new', function(data){\n    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n});\n```\n\n------\n\n## 4.9 点击侧栏头像回到首页\n\n修改`/themes/next/layout/_macro/sidebar.swig`，找到如下代码：\n\n```\n<img class=\"site-author-image\" itemprop=\"image\"\n    src=\"{{ url_for( theme.avatar | default(theme.images + '/avatar.gif') ) }}\"\n    alt=\"{{ theme.author }}\" />\n```\n\n在其前后加上`<a href=\"/\"></a>`即可，如下：\n\n```\n<a href=\"/\">\n   <img class=\"site-author-image\" itemprop=\"image\"\n       src=\"{{ url_for( theme.avatar | default(theme.images + '/avatar.gif') ) }}\"\n       alt=\"{{ theme.author }}\" />\n</a>\n```\n\n------\n\n## 4.10 修改中文字体\n\n1. 前往[Google Fonts](https://fonts.google.com/)查看合适的字体\n\n2. 打开\n\n   ```\n   themes/next/\n   ```\n\n   下的\n\n   ```\n   _config.yml\n   ```\n\n   ，查找\n\n   ```\n   font\n   ```\n\n   ```\n   font:\n   \tenable: true\n   \t # Uri of fonts host. E.g. //fonts.googleapis.com (Default). 修改为墙内镜像\n   \thost: https://fonts.loli.net\n   \tglobal:\n   \t\texternal: true\n   \t\tfamily: Noto Serif SC // 挑选的字体\n   \t\tsize: 16\n   ```\n\n   1. 修改`/themes/next/source/css/_variables/base.styl`\n      将\n\n   ```\n   $font-family-monospace    = consolas, Menlo, $font-family-chinese, monospace\n   $font-family-monospace    = get_font_family('codes'), consolas, Menlo, $font-family-chinese, monospace if get_font_family('codes')\n   ```\n\n   改为\n\n   ```\n   $font-family-monospace    = consolas, Menlo, $font-family-base, monospace\n   $font-family-monospace    = get_font_family('codes'), consolas, Menlo, $font-family-base, monospace if get_font_family('codes')\n   ```\n\n------\n\n## 4.11 新建文章时，在相同目录下创建同名文件夹（便于图片管理）\n\n- 打开站点配置文件`_config.yml`，搜索`post_asset_folder`字段，设置其值为`true`\n- 安装hexo-asset-image：`npm install hexo-asset-image --save`\n- 此时`hexo new \"fileName\"`会在`/source/_posts`目录下创建同名的文件夹\n- 只需在 md 文件里使用 `![title](图片名.jpg)` ，无需路径名就可以插入图片。\n\n------\n\n## 4.12 首页显示文章摘要（阅读全文）及配图（文章内不重复显示）\n\n1. 打开\n\n   ```\n   themes/next/\n   ```\n\n   下的\n\n   ```\n   _config.yml\n   ```\n\n   ，查找\n\n   ```\n   excerpt\n   ```\n\n   ```\n   auto_excerpt: //自动摘录\n     enable: true\n     length: 150 //摘录字数\n   read_more_btn: true //显示全文按钮\n   ```\n\n2. 打开\n\n   ```\n   themes\\next\\layout\\_macro\\post.swig\n   ```\n\n   ，在\n\n   ```\n   {% if is_index %}\n   ```\n\n   和\n\n   ```\n   {% if post.description and theme.excerpt_description %}\n   ```\n\n   之间添加如下内容\n\n   ```\n   {% if post.images %}\n   \t<div class=\"out-img-topic\">\n   \t\t<img src={{ post.images }} class=\"img-topic\">\n   \t</div>\n   {% endif %}\n   ```\n\n3. 向\n\n   ```\n   themes\\next\\source\\css\\_custom\\custom.styl\n   ```\n\n   中添加如下内容\n\n   ```\n   //文章摘要配图\n   //图片外部的容器方框，限制图片大小\n   .out-img-topic {\n     display: block;\n     max-height:500px;\n     margin-bottom: 24px;\n     overflow: hidden;\n   }\n   //图片\n   img.img-topic {\n     display: block ;\n     margin-left: .7em;\n     margin-right: .7em;\n     padding: 0;\n     float: right;\n     clear: right;\n   }\n   ```\n\n4. 将摘要图片储存于\n\n   ```\n   themes\\next\\source\\images\n   ```\n\n   中，建议\n\n   在此路径下\n\n   单独建一个文件夹存放摘要图片，\n\n   这个图片和文章中插图的存放路径不同，不是一个概念\n\n   。然后在文章YAML头信息中添加images字段，将值填为\n\n   ```\n   /images/imagename.jpg\n   ```\n\n   。\n\n   ```\n   images: \"images/文章摘要配图/Win10桌面.png\"\n   ```\n\n------\n\n## 4.13 给页面、侧边栏添加背景图片\n\n打开`theme/next/source/css/_custom/custom.styl`，添加以下代码：\n\n```\nbody {\n  background: url(/images/blogbk.jpg) no-repeat;\n  /* 背景图垂直、水平均居中 */\n  background-position: center center;\n  /* 当内容高度大于图片高度时，背景图像的位置相对于viewport固定 */\n  background-attachment: fixed;\n  /* 让背景图基于容器大小伸缩 */\n  background-size: cover;\n  /* 设置背景颜色，背景图加载过程中会显示背景色 */\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.sidebar {\n            background:url(/images/sidebar.jpg);\n            background-size: cover;\n            background-position:center;\n            background-repeat:no-repeat;\n            p,span,a {color: rgba(255, 255, 255, 1);}\n}\n```\n\n------\n\n## 4.14 文字背景以及半透明的设置\n\n打开`theme/next/source/css/_custom/custom.styl`，添加以下代码：\n\n```\n.content {\n\tborder-radius: 20px; //文章背景设置圆角\n\tpadding: 30px 60px 30px 60px;\n\tbackground:rgba(255, 255, 255, 0.8) none repeat scroll !important;\n}\n```\n\n------\n\n## 4.15 去除NexT主题Markdown分割线渲染效果\n\n修改`/source/css/_common/scaffolding/base.styl`，注释或删除以下内容：\n\n```\nbackground-image: repeating-linear-gradient(\n    -45deg,\n    white,\n    white 4px,\n    transparent 4px,\n    transparent 8px\n  );\n1234567\n```\n\n------\n\n## 4.16 图片可点击放大查看，放大后可关闭\n\n- 打开站点配置文件`_config.yml`，搜索`fancybox`字段，设置其值为`true`\n- 进入到`theme/text/`文件夹下，打开`git bash`\n- `git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox`\n\n------\n\n## 4.17 博客总访问量统计\n\n- 打开\n\n  ```\n  themes/next/\n  ```\n\n  下的\n\n  ```\n  _config.yml\n  ```\n\n  ，查找\n\n  ```\n  busuanzi\n  ```\n\n  ```\n  busuanzi_count:\n    enable: true\n    total_visitors: false\n    total_visitors_icon: user\n    total_views: false\n    total_views_icon: eye\n    post_views: true\n    post_views_icon: eye\n  ```\n\n当前版本的NexT集成的不蒜子，总访问人数和人次只是分别用icon来表示，故取消显示，自行改动\n\n- 打开\n\n  ```\n  /themes/next/layout/_partials/footer.swig\n  ```\n\n  ，在最后添加如下内容：\n\n  ```\n  <span id=\"busuanzi_container_site_uv\">\n    本站访问次数：<span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n  </span>\n  ```\n\n## 4.18 文章末尾添加版权声明\n\n**效果：**\n![这里写图片描述](https://img-blog.csdn.net/2018062323493260?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM0NTM4NA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n**配置：**\n查找主题配置文件`themes/next/_config.yml`中的`creative_commons`\n\n```\ncreative_commons:\n  license: by-nc-sa\n  sidebar: false\n  post: true  # 将false改为true即可显示版权信息\n  language:\n```\n\n------\n\n## 4.19 本地搜索（其余搜索方案的劣势只有收费）\n\n- `npm install hexo-generator-search`\n\n- 查找主题配置文件\n\n  ```\n  themes/next/_config.yml\n  ```\n\n  中的\n\n  ```\n  local_search\n  ```\n\n  ```\n  local_search:\n    enable: true\n  ```\n\n------\n\n## 4.20 图床和上传工具\n\n[盘点一下免费好用的图床](https://zhuanlan.zhihu.com/p/35270383)\n\n## 4.21 文章置顶\n\n[Hexo博客彻底解决置顶问题](http://wangwlj.com/2018/01/09/blog_pin_post/)\n效果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190329140445995.png)\n注：若有多篇文章需要置顶，排序方式为 在需要置顶的文章的`Front-matter`的`top:`填写阿拉伯数字即可，数越大，排序越靠前。\n\n## 4.22 添加粒子时钟\n\n博客应用canvas粒子时钟的操作步骤：\n\n在`\\themes\\next\\layout\\_custom\\`目录下，新建`clock.swig`文件，内容如下：\n\n```\n<div style=\"\">\n  <canvas id=\"canvas\" style=\"width:60%;\">当前浏览器不支持canvas，请更换浏览器后再试</canvas>\n</div>\n<script>\n(function(){\n\n   var digit=\n    [\n        [\n            [0,0,1,1,1,0,0],\n            [0,1,1,0,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,0,1,1,0],\n            [0,0,1,1,1,0,0]\n        ],//0\n        [\n            [0,0,0,1,1,0,0],\n            [0,1,1,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [1,1,1,1,1,1,1]\n        ],//1\n        [\n            [0,1,1,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,0,0],\n            [0,0,1,1,0,0,0],\n            [0,1,1,0,0,0,0],\n            [1,1,0,0,0,0,0],\n            [1,1,0,0,0,1,1],\n            [1,1,1,1,1,1,1]\n        ],//2\n        [\n            [1,1,1,1,1,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,0,0,1,1,0],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0]\n        ],//3\n        [\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,1,0],\n            [0,0,1,1,1,1,0],\n            [0,1,1,0,1,1,0],\n            [1,1,0,0,1,1,0],\n            [1,1,1,1,1,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,0,1,1,0],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,1,1]\n        ],//4\n        [\n            [1,1,1,1,1,1,1],\n            [1,1,0,0,0,0,0],\n            [1,1,0,0,0,0,0],\n            [1,1,1,1,1,1,0],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0]\n        ],//5\n        [\n            [0,0,0,0,1,1,0],\n            [0,0,1,1,0,0,0],\n            [0,1,1,0,0,0,0],\n            [1,1,0,0,0,0,0],\n            [1,1,0,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0]\n        ],//6\n        [\n            [1,1,1,1,1,1,1],\n            [1,1,0,0,0,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,0,0],\n            [0,0,0,1,1,0,0],\n            [0,0,1,1,0,0,0],\n            [0,0,1,1,0,0,0],\n            [0,0,1,1,0,0,0],\n            [0,0,1,1,0,0,0]\n        ],//7\n        [\n            [0,1,1,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,1,1,0]\n        ],//8\n        [\n            [0,1,1,1,1,1,0],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [1,1,0,0,0,1,1],\n            [0,1,1,1,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,0,1,1],\n            [0,0,0,0,1,1,0],\n            [0,0,0,1,1,0,0],\n            [0,1,1,0,0,0,0]\n        ],//9\n        [\n            [0,0,0,0,0,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,1,1,1,0,0],\n            [0,0,0,0,0,0,0]\n        ]//:\n    ];\n\nvar canvas = document.getElementById('canvas');\n\nif(canvas.getContext){\n    var cxt = canvas.getContext('2d');\n    //声明canvas的宽高\n    var H = 100,W = 700;\n    canvas.height = H;\n    canvas.width = W;\n    cxt.fillStyle = '#f00';\n    cxt.fillRect(10,10,50,50);\n\n    //存储时间数据\n    var data = [];\n    //存储运动的小球\n    var balls = [];\n    //设置粒子半径\n    var R = canvas.height/20-1;\n    (function(){\n        var temp = /(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)/.exec(new Date());\n        //存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成\n        data.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);\n    })();\n\n    /*生成点阵数字*/\n    function renderDigit(index,num){\n        for(var i = 0; i < digit[num].length; i++){\n            for(var j = 0; j < digit[num][i].length; j++){\n                if(digit[num][i][j] == 1){\n                    cxt.beginPath();\n                    cxt.arc(14*(R+2)*index + j*2*(R+1)+(R+1),i*2*(R+1)+(R+1),R,0,2*Math.PI);\n                    cxt.closePath();\n                    cxt.fill();\n                }\n            }\n        }\n    }\n\n    /*更新时钟*/\n    function updateDigitTime(){\n        var changeNumArray = [];\n        var temp = /(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)/.exec(new Date());\n        var NewData = [];\n        NewData.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);\n        for(var i = data.length-1; i >=0 ; i--){\n            //时间发生变化\n            if(NewData[i] !== data[i]){\n                //将变化的数字值和在data数组中的索引存储在changeNumArray数组中\n                changeNumArray.push(i+'_'+(Number(data[i])+1)%10);\n            }\n        }\n        //增加小球\n        for(var i = 0; i< changeNumArray.length; i++){\n            addBalls.apply(this,changeNumArray[i].split('_'));\n        }\n        data = NewData.concat();\n    }\n\n    /*更新小球状态*/\n    function updateBalls(){\n        for(var i = 0; i < balls.length; i++){\n            balls[i].stepY += balls[i].disY;\n            balls[i].x += balls[i].stepX;\n            balls[i].y += balls[i].stepY;\n            if(balls[i].x > W + R || balls[i].y > H + R){\n                balls.splice(i,1);\n                i--;\n            }\n        }\n    }\n\n    /*增加要运动的小球*/\n    function addBalls(index,num){\n        var numArray = [1,2,3];\n        var colorArray =  [\"#3BE\",\"#09C\",\"#A6C\",\"#93C\",\"#9C0\",\"#690\",\"#FB3\",\"#F80\",\"#F44\",\"#C00\"];\n        for(var i = 0; i < digit[num].length; i++){\n            for(var j = 0; j < digit[num][i].length; j++){\n                if(digit[num][i][j] == 1){\n                    var ball = {\n                        x:14*(R+2)*index + j*2*(R+1)+(R+1),\n                        y:i*2*(R+1)+(R+1),\n                        stepX:Math.floor(Math.random() * 4 -2),\n                        stepY:-2*numArray[Math.floor(Math.random()*numArray.length)],\n                        color:colorArray[Math.floor(Math.random()*colorArray.length)],\n                        disY:1\n                    };\n                    balls.push(ball);\n                }\n            }\n        }\n    }\n\n    /*渲染*/\n    function render(){\n        //重置画布宽度，达到清空画布的效果\n        canvas.height = 100;\n        //渲染时钟\n        for(var i = 0; i < data.length; i++){\n            renderDigit(i,data[i]);\n        }\n        //渲染小球\n        for(var i = 0; i < balls.length; i++){\n            cxt.beginPath();\n            cxt.arc(balls[i].x,balls[i].y,R,0,2*Math.PI);\n            cxt.fillStyle = balls[i].color;\n            cxt.closePath();\n            cxt.fill();\n        }\n    }\n\n    clearInterval(oTimer);\n    var oTimer = setInterval(function(){\n        //更新时钟\n        updateDigitTime();\n        //更新小球状态\n        updateBalls();\n        //渲染\n        render();\n    },50);\n}\n\n})();\n</script>\n```\n\n- 引用代码\n\n直接引用或者通过配置文件配置，二选一\n\n- 直接引用\n\n在`博客目录\\themes\\next\\layout\\_macro\\sidebar.swig`尾部中引入：\n\n```\n{% include '../_custom/clock.swig' %}\n```\n\n示意图如下：\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5ub3MtZWFzdGNoaW5hMS4xMjYubmV0L2Jsb2cvYmxvZ19jbG9jay5wbmc?x-oss-process=image/format,png)\n\n> 注：代码块要放置在`sider-inner`的`div`块中，放在`div`块的位置决定时钟样式的展示位置。我选择放置在尾部，看着效果好点。\n\n- 通过配置文件配置\n\n1、在`博客目录\\themes\\next\\layout\\_macro\\sidebar.swig`尾部中引入：\n\n```\n        {% if theme.diy_time.clock %}\n          <!-- canvas粒子时钟 -->\n          {% include '../_custom/clock.swig' %}\n        {% endif %}\n```\n\n示意图如下：\n![img](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5ub3MtZWFzdGNoaW5hMS4xMjYubmV0L2Jsb2cvYmxvZ19jbG9ja19pZi5wbmc?x-oss-process=image/format,png)\n\n> 注：代码块要放置在`sider-inner`的`div`块中，放在`div`块的位置决定时钟样式的展示位置。\n\n2、在主题的配置文件中加入应用代码，配置文件位置是`博客目录\\themes\\next\\_config.yml`：\n\n```\n# 侧栏粒子时钟\ndiy_time:\n  runtime: true \n  clock: true # 粒子时钟\n```\n\n## 4.23 添加近期文章\n\n添加配置参数 **~/theme/next/_config.yml** ，添加如下配置：\n\n```\nrecent_posts:\n  enable: true\n  recent_posts_title: 最新发表文章\n```\n\n首先我们找到侧边栏模块 **next/layout/_macro/sidebar.swig** ,这个负责渲染侧边栏\n在我们想要放置**最新文章模块**的地方添加如下代码：\n\n```\n{% if theme.recent_posts.enable %}\n  <aside class=\"sidebar sidebar-ads sidebar-posts\">\n    <div>\n      <div class=\"recent_posts_title\">\n        {{ theme.recent_posts.recent_posts_title }}\n      </div>\n      <ul class=\"links-of-blogroll-list\">\n        {% set posts = site.posts.sort('-date') %}\n        {% set bg_colors = ['rgb(31, 216, 210)', 'rgb(4, 166, 247)', 'rgb(70, 101, 226)', 'rgb(94, 137, 229)', 'rgb(0, 206, 123)'] %}\n        {% for post in posts.slice('0', '5') %}\n          <li>\n            <div class=\"text-img\" style=\"background:{{bg_colors[loop.index - 1]}};\">{{ post.title.substr(0, 3) }}</div>\n            <div class=\"post-name\">\n              <div>{{ date(post.date, config.date_format) }}</div>\n              <div><a href=\"{{ url_for(post.path) }}\" title=\"{{ post.title }}\" >{{ post.title }}</a></div>\n            </div>\n          </li>\n        {% endfor %}\n      </ul>\n    </div>\n  </aside>\n  {% endif %}\n```\n\n最后重新执行\n\n```\nhexo clean\nhexo g\n```\n\n\n\n最后我们得到的效果是\n\n## Google统计\n\n## Sitemap网站地图\n\n## 提交谷歌收录本站 Google Search\n\n\n\n## [文章阅读量统计](https://blog.csdn.net/weixin_39345384/article/details/80787998)\n\n------\n\n------\n\n参考：\n\n- [HEXO+NEXT主题个性化配置](http://mashirosorata.vicp.io/HEXO-NEXT主题个性化配置.html)\n- [打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化](https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html)\n- [[EasyHexo 专栏\\] #2 - 魔改 Next 不完全教程](https://juejin.im/post/5c45a503f265da616b10fe4e#heading-28)\n- [基于Hexo+Node.js+github+coding搭建个人博客——进阶篇(从入门到入土)](https://blog.csdn.net/MasterAnt_D/article/details/56839222#t50)\n- [Hexo博客Next主题优化总结](http://www.shaoyance.com/2018/01/26/Hexo博客Next主题优化总结/)\n- [为NexT主题添加文章阅读量统计功能](https://notes.doublemine.me/2015-10-21-为NexT主题添加文章阅读量统计功能.html)\n- [2017年最新基于hexo搭建个人免费博客——自定义页面样式一](http://www.cduyzh.com/hexo-settings-3/)\n- [Hexo添加文章时自动打开编辑器](https://notes.doublemine.me/2015-06-29-Hexo添加文章时自动打开编辑器.html)\n- [next主题下点击侧边栏头像回到博客首页](https://blog.yleao.com/2018/0901/hexo-next主题下的美化.html#next主题下点击侧边栏头像回到博客首页)\n- [Google Fonts 已支持思源宋体！](https://reuixiy.github.io/beautiful/share/2018/12/11/noto-serif-sc-added-on-google-fonts.html)\n- [弃暗投明-Hexo更换next主题](https://www.bluelzy.com/articles/change_to_next_theme.html)\n- [hexo博客NEXT主题美化](https://www.feiwuuz.com.cn/archives/5483aa06.html)\n- [在hexo博客中插入图片，音乐，视频](http://chant00.com/2015/11/04/在hexo博客中插入图片，音乐，视屏，公式/)","slug":"hexo/NexT主题自定义配置","published":1,"date":"2020-12-18T15:04:43.617Z","updated":"2020-12-18T18:38:04.345Z","_id":"ckiu9uymo0004ijcd77u7aq73","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><p>前文：<a href=\"https://blog.csdn.net/weixin_39345384/article/details/80095883\">Windows下通过GitHub+Hexo搭建个人博客的步骤</a>；<br>博主的个人博客：<a href=\"https://hunter1023.github.io/\">https://hunter1023.github.io/</a> 按照本篇博客美化。</p>\n<p>在 Hexo 中有<strong>2份</strong>主要的配置文件，其名称都是<code>_config.yml</code>。 其中，一份位于<strong>博客根目录下</strong>，主要包含 <strong>Hexo 本身的配置</strong>；另一份位于<code>themes/next/</code>目录下，用于配置<strong>主题相关的选项</strong>。</p>\n<hr>\n<h1 id=\"2-基础设置\"><a href=\"#2-基础设置\" class=\"headerlink\" title=\"2. 基础设置\"></a>2. 基础设置</h1><h2 id=\"2-1-设置站点名、作者昵称和站点描述等内容\"><a href=\"#2-1-设置站点名、作者昵称和站点描述等内容\" class=\"headerlink\" title=\"2.1 设置站点名、作者昵称和站点描述等内容\"></a>2.1 设置站点名、作者昵称和站点描述等内容</h2><p>打开<strong>根目录下的<code>_config.yml</code></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># Site<br>title: 特叔服务<br>subtitle: <br>keywords:<br>author: Hunter<br>description: Tough times never last, but tough people do.<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"2-2-NexT主题的安装\"><a href=\"#2-2-NexT主题的安装\" class=\"headerlink\" title=\"2.2. NexT主题的安装\"></a>2.2. NexT主题的安装</h2><p>顾名思义，所谓主题就是界面的展示样式。Hexo安装主题，只需要将主题文件拷贝至博客所在目录的<code>themes</code>目录下，修改相关配置文件即可生效。</p>\n<p>博客所在目录下打开<code>git bash</code>，再通过<code>Git clone https://github.com/theme-next/hexo-theme-next themes/next</code>即可完成。</p>\n<hr>\n<h2 id=\"2-3-启用主题\"><a href=\"#2-3-启用主题\" class=\"headerlink\" title=\"2.3 启用主题\"></a>2.3 启用主题</h2><p>打开<strong>根目录下的<code>_config.yml</code></strong>,查找<code>theme</code>字段，将字段改为<code>theme: next</code>(<strong>冒号<code>:</code>之后要有空格分隔，否则无效</strong>) ，之后通过<code>hexo g</code>和<code>hexo s</code>，再在浏览器中访问<code>localhost:4000</code>即可本地预览主题效果。</p>\n<hr>\n<h1 id=\"3-主题设定\"><a href=\"#3-主题设定\" class=\"headerlink\" title=\"3. 主题设定\"></a>3. 主题设定</h1><h2 id=\"3-1-选择scheme\"><a href=\"#3-1-选择scheme\" class=\"headerlink\" title=\"3.1 选择scheme\"></a>3.1 选择scheme</h2><p>打开<code>themes/next/</code>下的<code>_config.yml</code>,查找<code>scheme</code>，可以看到如下四种不同的风格方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">scheme: Muse<br>#scheme: Mist<br>#scheme: Pisces<br>#scheme: Gemini<br></code></pre></td></tr></table></figure>\n<p>去掉<code>#</code>注释，即启用对应的scheme，博主采用Muse主题，大家可以依次测试效果，选择自己喜欢的scheme。</p>\n<hr>\n<h2 id=\"3-2-设置语言\"><a href=\"#3-2-设置语言\" class=\"headerlink\" title=\"3.2 设置语言\"></a>3.2 设置语言</h2><p>博客框架默认的语言是英文，前往<code>/themes/next/languages</code>，查看当前NexT版本简体中文对照文件的名称是<code>zh-Hans</code>还是<code>zh-CN</code>。</p>\n<p>再前往根目录下的<code>_config.yml</code>，查找<code>language</code>，设置成<code>language: zh-Hans</code>或<code>language: zh-CN</code>，即显示简体中文。</p>\n<hr>\n<h2 id=\"3-3-设置菜单及对应页面\"><a href=\"#3-3-设置菜单及对应页面\" class=\"headerlink\" title=\"3.3 设置菜单及对应页面\"></a>3.3 设置菜单及对应页面</h2><ul>\n<li><p>打开<code>themes/next/</code>下的<code>_config.yml</code>，查找<code>menu</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">menu:<br>  home: &#x2F; || home<br>  #about: &#x2F;about&#x2F; || user<br>  tags: &#x2F;tags&#x2F; || tags<br>  categories: &#x2F;categories&#x2F; || th<br>  archives: &#x2F;archives&#x2F; || archive<br>  #schedule: &#x2F;schedule&#x2F; || calendar<br>  #sitemap: &#x2F;sitemap.xml || sitemap<br>  #commonweal: &#x2F;404&#x2F; || heartbeat<br></code></pre></td></tr></table></figure>\n<p>去掉<code>#</code>注释即可显示对应的菜单项，也可自定义新的菜单项。 <code>||</code>之前的值是目标链接，之后的是分类页面的图标，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。</p>\n</li>\n<li><p>新添加的菜单需要翻译对应的中文<br>打开<code>hexo/theme/next/languages/zh-CN.yml</code>，在menu下自定义，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">menu:<br>  resources: 资源<br></code></pre></td></tr></table></figure></li>\n<li><p><code>hexo new page &quot;categories&quot;</code><br>此时在根目录的<code>source</code>文件夹下会生成一个categories文件，文件中有一个<code>index.md</code>文件，修改内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">---<br>title: 分类<br>date: 2017-12-14 13:05:38<br>type: &quot;categories&quot;<br>comments: false<br>---<br></code></pre></td></tr></table></figure>\n<p>注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"3-4-设定站点建立时间\"><a href=\"#3-4-设定站点建立时间\" class=\"headerlink\" title=\"3.4 设定站点建立时间\"></a>3.4 设定站点建立时间</h2><p>打开<strong><code>themes/next/</code>下的<code>_config.yml</code></strong>，查找<code>since</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">footer:<br>  # Specify the date when the site was setup.<br>  # If not defined, current year will be used.<br>  #since: 2015<br></code></pre></td></tr></table></figure>\n<p><strong>如果不设置，默认显示当前年份</strong>。</p>\n<hr>\n<h1 id=\"4-美化\"><a href=\"#4-美化\" class=\"headerlink\" title=\"4. 美化\"></a>4. 美化</h1><h2 id=\"4-1-设置头像\"><a href=\"#4-1-设置头像\" class=\"headerlink\" title=\"4.1 设置头像\"></a>4.1 设置头像</h2><p>打开<code>themes/next/</code>下的<code>_config.yml</code>，查找<code>avatar</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># Sidebar Avatar<br># in theme directory(source&#x2F;images): &#x2F;images&#x2F;avatar.gif<br># in site  directory(source&#x2F;uploads): &#x2F;uploads&#x2F;avatar.gif<br>avatar: http:&#x2F;&#x2F;XXXXXXXXX<br></code></pre></td></tr></table></figure>\n<p><code>avatar</code>的值是<strong>图片的链接地址</strong>(完整的URI 或者 站内的相对地址皆可)</p>\n<table>\n<thead>\n<tr>\n<th>地址</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>完整的URI</td>\n<td><a href=\"http://example.com/avatar.png\">http://example.com/avatar.png</a></td>\n</tr>\n<tr>\n<td>站点内地址</td>\n<td>图片放至<code>themes/next/source/images/</code>配置为：<code>avatar: /images/图片名</code></td>\n</tr>\n<tr>\n<td>站点内地址</td>\n<td>图片放至<strong>根目录下</strong><code>source/uploads/</code>(初始无uploads文件夹，自行创建)目录下配置为：<code>avatar: /uploads/图片名</code></td>\n</tr>\n</tbody></table>\n<p><strong>之后创建博文，对图片的引用 同样可以按照上述地址获取</strong>。</p>\n<hr>\n<h2 id=\"4-2-网站图标设置\"><a href=\"#4-2-网站图标设置\" class=\"headerlink\" title=\"4.2 网站图标设置\"></a>4.2 网站图标设置</h2><ul>\n<li><p>图标素材网站：<a href=\"https://www.iconfont.cn/\">iconfont</a>；<a href=\"https://www.easyicon.net/\">easyicon</a></p>\n</li>\n<li><p>下载16x16以及32x32大小的<strong>PNG格式图标</strong>，置于<code>/themes/next/source/images/</code>下</p>\n</li>\n<li><p>打开**</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes&#x2F;next&#x2F;<br></code></pre></td></tr></table></figure>\n<p>下的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">_config.yml<br></code></pre></td></tr></table></figure>\n<p>**，查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">favicon<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">favicon:<br>  small: &#x2F;images&#x2F;favicon-16x16-next.png<br>  medium: &#x2F;images&#x2F;favicon-32x32-next.png<br>  apple_touch_icon: &#x2F;images&#x2F;apple-touch-icon-next.png<br>  safari_pinned_tab: &#x2F;images&#x2F;logo.svg<br>  #android_manifest: &#x2F;images&#x2F;manifest.json<br>  #ms_browserconfig: &#x2F;images&#x2F;browserconfig.xml<br></code></pre></td></tr></table></figure>\n<p>修改small和medium的路径为下载的图标路径</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"4-3-背景动画\"><a href=\"#4-3-背景动画\" class=\"headerlink\" title=\"4.3 背景动画\"></a>4.3 背景动画</h2><h3 id=\"4-3-1-Canvas-nest风格\"><a href=\"#4-3-1-Canvas-nest风格\" class=\"headerlink\" title=\"4.3.1 Canvas-nest风格\"></a>4.3.1 <a href=\"https://blog.csdn.net/weixin_39345384/article/details/80544660\">Canvas-nest风格</a></h3><h3 id=\"4-3-2-JavaScript-3D-library风格\"><a href=\"#4-3-2-JavaScript-3D-library风格\" class=\"headerlink\" title=\"4.3.2 JavaScript 3D library风格\"></a>4.3.2 JavaScript 3D library风格</h3><ol>\n<li>进入theme/next目录</li>\n<li>执行命令：<code>git clone https://github.com/theme-next/theme-next-three source/lib/three</code></li>\n<li>将<code>themes/next/_config.yml</code>中查找<code>theme-next-three</code>，将想要的效果改为true即可：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># three_waves<br>three_waves: false<br># canvas_lines<br>canvas_lines: true<br># canvas_sphere<br>canvas_sphere: false<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-4-背景图片-顶栏、底栏图片（背景色）、侧栏背景及内部文字颜色\"><a href=\"#4-4-背景图片-顶栏、底栏图片（背景色）、侧栏背景及内部文字颜色\" class=\"headerlink\" title=\"4.4 背景图片/顶栏、底栏图片（背景色）、侧栏背景及内部文字颜色\"></a>4.4 背景图片/顶栏、底栏图片（背景色）、侧栏背景及内部文字颜色</h2><p>打开<code>theme/next/source/css/_custom/custom.styl</code>，添加以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#x2F;&#x2F;背景图片<br>body&#123;   <br>        background:url(图片链接);<br>        background-size:cover;<br>        background-repeat:no-repeat;<br>        background-attachment:fixed;<br>        background-position:center;<br>&#125;<br>&#x2F;&#x2F;顶栏图片<br>.header &#123;<br>          background:url(图片链接) none repeat scroll !important;<br>&#125;<br>&#x2F;&#x2F;底栏背景色<br>.footer &#123;<br>          background:rgba(颜色rgb,透明度) none repeat scroll !important;<br>&#125;<br>&#x2F;&#x2F;侧栏图片及内部文字颜色修改<br>#sidebar &#123;<br>            background:url(图片链接);<br>            background-size: cover;<br>            background-position:center;<br>            background-repeat:no-repeat;<br>            p,span,a &#123;color: 颜色代码;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>其中的css样式属性都可以根据图片修改，以达到满意的效果。</p>\n<hr>\n<h2 id=\"4-5-侧栏置于左侧，修改控制按钮样式\"><a href=\"#4-5-侧栏置于左侧，修改控制按钮样式\" class=\"headerlink\" title=\"4.5 侧栏置于左侧，修改控制按钮样式\"></a>4.5 侧栏置于左侧，修改控制按钮样式</h2><p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。打开<code>themes/next/</code>下的<code>_config.yml</code>，查找<code>sidebar</code></p>\n<h3 id=\"4-5-1-设置侧栏在左侧-右侧\"><a href=\"#4-5-1-设置侧栏在左侧-右侧\" class=\"headerlink\" title=\"4.5.1 设置侧栏在左侧/右侧\"></a>4.5.1 设置侧栏在左侧/右侧</h3><ul>\n<li><p>Pisces或Gemini方案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">sidebar:<br>position: left<br>#position: right<br></code></pre></td></tr></table></figure></li>\n<li><p>Mist或Muse方案</p>\n</li>\n</ul>\n<ol>\n<li><p>打开<code>next/source/js/src/motion.js</code>，查找<code>paddingRight</code>，把所有（2个）<code>PaddingRight</code>更改为<code>paddingLeft</code>即可。</p>\n</li>\n<li><p>打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">next&#x2F;source&#x2F;css&#x2F;_custom&#x2F;custom.styl<br></code></pre></td></tr></table></figure>\n<p>，添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#x2F;&#x2F;侧边栏置于左侧<br>.sidebar &#123;<br>  left: 0;<br>&#125;<br>&#x2F;&#x2F;侧栏开关置于左侧<br>.sidebar-toggle &#123;<br>  left: $b2t-position-right;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>打开<code>next/source/css/_common/components/back-to-top.styl</code>，将<code>right: $b2t-position-right;</code>改为<code>left: $b2t-position-right;</code></p>\n</li>\n</ol>\n<h3 id=\"4-5-2-显示侧边栏的时机\"><a href=\"#4-5-2-显示侧边栏的时机\" class=\"headerlink\" title=\"4.5.2 显示侧边栏的时机\"></a>4.5.2 显示侧边栏的时机</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">#post - 默认行为，在文章页面（拥有目录列表）时显示<br>#always - 在所有页面中都显示<br>#hide - 在所有页面中都隐藏（可以手动展开）<br>#remove - 完全移除<br>display: post<br>#display: always<br>#display: hide<br>#display: remove<br></code></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4-5-3-侧边栏控制按钮样式修改\"><a href=\"#4-5-3-侧边栏控制按钮样式修改\" class=\"headerlink\" title=\"4.5.3 侧边栏控制按钮样式修改\"></a>4.5.3 侧边栏控制按钮样式修改</h3><p>打开<code>themes/next/layout/source/js/src/motion.js</code>，找到如下代码处，更换close的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">var sidebarToggleLine1st &#x3D; new SidebarToggleLine(&#123;<br>    el: &#39;.sidebar-toggle-line-first&#39;,<br>    status: &#123;<br>      arrow: &#123;width: &#39;50%&#39;, rotateZ: &#39;45deg&#39;, top: &#39;2px&#39;, left: &#39;6px&#39;&#125;,<br>      &#x2F;&#x2F; close: &#123;width: &#39;100%&#39;, rotateZ: &#39;-45deg&#39;, top: &#39;5px&#39;, left: &#39;0px&#39;&#125; &#x2F;&#x2F;X形<br>      close: &#123;width: &#39;50%&#39;, rotateZ: &#39;-45deg&#39;, top: &#39;2px&#39;, left: &#39;0px&#39;&#125; &#x2F;&#x2F;箭头形<br>    &#125;<br>  &#125;);<br>  var sidebarToggleLine2nd &#x3D; new SidebarToggleLine(&#123;<br>    el: &#39;.sidebar-toggle-line-middle&#39;,<br>    status: &#123;<br>      arrow: &#123;width: &#39;90%&#39;&#125;,<br>      &#x2F;&#x2F; close: &#123;opacity: 0&#125; &#x2F;&#x2F;X形<br>      close: &#123;width: &#39;90%&#39;&#125; &#x2F;&#x2F;箭头形<br>    &#125;<br>  &#125;);<br>  var sidebarToggleLine3rd &#x3D; new SidebarToggleLine(&#123;<br>    el: &#39;.sidebar-toggle-line-last&#39;,<br>    status: &#123;<br>      arrow: &#123;width: &#39;50%&#39;, rotateZ: &#39;-45deg&#39;, top: &#39;-2px&#39;, left: &#39;6px&#39;&#125;,<br>      &#x2F;&#x2F; close: &#123;width: &#39;100%&#39;, rotateZ: &#39;45deg&#39;, top: &#39;-5px&#39;, left: &#39;0px&#39;&#125; &#x2F;&#x2F;X形<br>      close: &#123;width: &#39;50%&#39;, rotateZ: &#39;45deg&#39;, top: &#39;-2px&#39;, left: &#39;0px&#39;&#125; &#x2F;&#x2F;箭头形<br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-6-文章底部标签显示的优化\"><a href=\"#4-6-文章底部标签显示的优化\" class=\"headerlink\" title=\"4.6 文章底部标签显示的优化\"></a>4.6 文章底部标签显示的优化</h2><p>修改<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>\n<h2 id=\"4-7-文章添加阴影、透明效果\"><a href=\"#4-7-文章添加阴影、透明效果\" class=\"headerlink\" title=\"4.7 文章添加阴影、透明效果\"></a>4.7 文章添加阴影、透明效果</h2><p>打开<code>theme/next/source/css/_custom/custom.styl</code>，添加以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#x2F;&#x2F; 主页文章添加阴影效果<br>.post &#123;<br>   margin-top: 60px;<br>   margin-bottom: 60px;<br>   padding: 25px;<br>   background:rgba(255,255,255,0.9) none repeat scroll !important;<br>   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);<br>   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-8-Hexo添加文章时自动打开编辑器\"><a href=\"#4-8-Hexo添加文章时自动打开编辑器\" class=\"headerlink\" title=\"4.8 Hexo添加文章时自动打开编辑器\"></a>4.8 Hexo添加文章时自动打开编辑器</h2><ul>\n<li>首先在Hexo目录下的scripts目录中创建一个JavaScript脚本文件。<br>如果没有这个scripts目录，则新建一个。</li>\n<li>scripts目录新建的JavaScript脚本文件可以任意取名。</li>\n</ul>\n<p>通过这个脚本，我们用其来监听<code>hexo new</code>这个动作，并在检测到<code>hexo new</code>之后，执行编辑器打开的命令。</p>\n<ul>\n<li>如果你是windows平台的Hexo用户，则将下列内容写入你的脚本：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">var spawn &#x3D; require(&#39;child_process&#39;).exec;<br>hexo.on(&#39;new&#39;, function(data)&#123;<br>  spawn(&#39;start  &quot;markdown编辑器绝对路径.exe&quot; &#39; + data.path);<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>如果你是Mac平台Hexo用户，则将下列内容写入你的脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">var exec &#x3D; require(&#39;child_process&#39;).exec;<br>hexo.on(&#39;new&#39;, function(data)&#123;<br>    exec(&#39;open -a &quot;markdown编辑器绝对路径.app&quot; &#39; + data.path);<br>&#125;);<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-9-点击侧栏头像回到首页\"><a href=\"#4-9-点击侧栏头像回到首页\" class=\"headerlink\" title=\"4.9 点击侧栏头像回到首页\"></a>4.9 点击侧栏头像回到首页</h2><p>修改<code>/themes/next/layout/_macro/sidebar.swig</code>，找到如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&lt;img class&#x3D;&quot;site-author-image&quot; itemprop&#x3D;&quot;image&quot;<br>    src&#x3D;&quot;&#123;&#123; url_for( theme.avatar | default(theme.images + &#39;&#x2F;avatar.gif&#39;) ) &#125;&#125;&quot;<br>    alt&#x3D;&quot;&#123;&#123; theme.author &#125;&#125;&quot; &#x2F;&gt;<br></code></pre></td></tr></table></figure>\n<p>在其前后加上<code>&lt;a href=&quot;/&quot;&gt;&lt;/a&gt;</code>即可，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;<br>   &lt;img class&#x3D;&quot;site-author-image&quot; itemprop&#x3D;&quot;image&quot;<br>       src&#x3D;&quot;&#123;&#123; url_for( theme.avatar | default(theme.images + &#39;&#x2F;avatar.gif&#39;) ) &#125;&#125;&quot;<br>       alt&#x3D;&quot;&#123;&#123; theme.author &#125;&#125;&quot; &#x2F;&gt;<br>&lt;&#x2F;a&gt;<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-10-修改中文字体\"><a href=\"#4-10-修改中文字体\" class=\"headerlink\" title=\"4.10 修改中文字体\"></a>4.10 修改中文字体</h2><ol>\n<li><p>前往<a href=\"https://fonts.google.com/\">Google Fonts</a>查看合适的字体</p>\n</li>\n<li><p>打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes&#x2F;next&#x2F;<br></code></pre></td></tr></table></figure>\n<p>下的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">_config.yml<br></code></pre></td></tr></table></figure>\n<p>，查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">font<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">font:<br>\tenable: true<br>\t # Uri of fonts host. E.g. &#x2F;&#x2F;fonts.googleapis.com (Default). 修改为墙内镜像<br>\thost: https:&#x2F;&#x2F;fonts.loli.net<br>\tglobal:<br>\t\texternal: true<br>\t\tfamily: Noto Serif SC &#x2F;&#x2F; 挑选的字体<br>\t\tsize: 16<br></code></pre></td></tr></table></figure>\n<ol>\n<li>修改<code>/themes/next/source/css/_variables/base.styl</code><br>将</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$font-family-monospace    &#x3D; consolas, Menlo, $font-family-chinese, monospace<br>$font-family-monospace    &#x3D; get_font_family(&#39;codes&#39;), consolas, Menlo, $font-family-chinese, monospace if get_font_family(&#39;codes&#39;)<br></code></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$font-family-monospace    &#x3D; consolas, Menlo, $font-family-base, monospace<br>$font-family-monospace    &#x3D; get_font_family(&#39;codes&#39;), consolas, Menlo, $font-family-base, monospace if get_font_family(&#39;codes&#39;)<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"4-11-新建文章时，在相同目录下创建同名文件夹（便于图片管理）\"><a href=\"#4-11-新建文章时，在相同目录下创建同名文件夹（便于图片管理）\" class=\"headerlink\" title=\"4.11 新建文章时，在相同目录下创建同名文件夹（便于图片管理）\"></a>4.11 新建文章时，在相同目录下创建同名文件夹（便于图片管理）</h2><ul>\n<li>打开站点配置文件<code>_config.yml</code>，搜索<code>post_asset_folder</code>字段，设置其值为<code>true</code></li>\n<li>安装hexo-asset-image：<code>npm install hexo-asset-image --save</code></li>\n<li>此时<code>hexo new &quot;fileName&quot;</code>会在<code>/source/_posts</code>目录下创建同名的文件夹</li>\n<li>只需在 md 文件里使用 <code>![title](图片名.jpg)</code> ，无需路径名就可以插入图片。</li>\n</ul>\n<hr>\n<h2 id=\"4-12-首页显示文章摘要（阅读全文）及配图（文章内不重复显示）\"><a href=\"#4-12-首页显示文章摘要（阅读全文）及配图（文章内不重复显示）\" class=\"headerlink\" title=\"4.12 首页显示文章摘要（阅读全文）及配图（文章内不重复显示）\"></a>4.12 首页显示文章摘要（阅读全文）及配图（文章内不重复显示）</h2><ol>\n<li><p>打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes&#x2F;next&#x2F;<br></code></pre></td></tr></table></figure>\n<p>下的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">_config.yml<br></code></pre></td></tr></table></figure>\n<p>，查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">excerpt<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">auto_excerpt: &#x2F;&#x2F;自动摘录<br>  enable: true<br>  length: 150 &#x2F;&#x2F;摘录字数<br>read_more_btn: true &#x2F;&#x2F;显示全文按钮<br></code></pre></td></tr></table></figure></li>\n<li><p>打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes\\next\\layout\\_macro\\post.swig<br></code></pre></td></tr></table></figure>\n<p>，在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#123;% if is_index %&#125;<br></code></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#123;% if post.description and theme.excerpt_description %&#125;<br></code></pre></td></tr></table></figure>\n<p>之间添加如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#123;% if post.images %&#125;<br>\t&lt;div class&#x3D;&quot;out-img-topic&quot;&gt;<br>\t\t&lt;img src&#x3D;&#123;&#123; post.images &#125;&#125; class&#x3D;&quot;img-topic&quot;&gt;<br>\t&lt;&#x2F;div&gt;<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>向</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes\\next\\source\\css\\_custom\\custom.styl<br></code></pre></td></tr></table></figure>\n<p>中添加如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#x2F;&#x2F;文章摘要配图<br>&#x2F;&#x2F;图片外部的容器方框，限制图片大小<br>.out-img-topic &#123;<br>  display: block;<br>  max-height:500px;<br>  margin-bottom: 24px;<br>  overflow: hidden;<br>&#125;<br>&#x2F;&#x2F;图片<br>img.img-topic &#123;<br>  display: block ;<br>  margin-left: .7em;<br>  margin-right: .7em;<br>  padding: 0;<br>  float: right;<br>  clear: right;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>将摘要图片储存于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes\\next\\source\\images<br></code></pre></td></tr></table></figure>\n<p>中，建议</p>\n<p>在此路径下</p>\n<p>单独建一个文件夹存放摘要图片，</p>\n<p>这个图片和文章中插图的存放路径不同，不是一个概念</p>\n<p>。然后在文章YAML头信息中添加images字段，将值填为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#x2F;images&#x2F;imagename.jpg<br></code></pre></td></tr></table></figure>\n<p>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">images: &quot;images&#x2F;文章摘要配图&#x2F;Win10桌面.png&quot;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"4-13-给页面、侧边栏添加背景图片\"><a href=\"#4-13-给页面、侧边栏添加背景图片\" class=\"headerlink\" title=\"4.13 给页面、侧边栏添加背景图片\"></a>4.13 给页面、侧边栏添加背景图片</h2><p>打开<code>theme/next/source/css/_custom/custom.styl</code>，添加以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">body &#123;<br>  background: url(&#x2F;images&#x2F;blogbk.jpg) no-repeat;<br>  &#x2F;* 背景图垂直、水平均居中 *&#x2F;<br>  background-position: center center;<br>  &#x2F;* 当内容高度大于图片高度时，背景图像的位置相对于viewport固定 *&#x2F;<br>  background-attachment: fixed;<br>  &#x2F;* 让背景图基于容器大小伸缩 *&#x2F;<br>  background-size: cover;<br>  &#x2F;* 设置背景颜色，背景图加载过程中会显示背景色 *&#x2F;<br>  background-color: rgba(0, 0, 0, 0.5);<br>&#125;<br>.sidebar &#123;<br>            background:url(&#x2F;images&#x2F;sidebar.jpg);<br>            background-size: cover;<br>            background-position:center;<br>            background-repeat:no-repeat;<br>            p,span,a &#123;color: rgba(255, 255, 255, 1);&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-14-文字背景以及半透明的设置\"><a href=\"#4-14-文字背景以及半透明的设置\" class=\"headerlink\" title=\"4.14 文字背景以及半透明的设置\"></a>4.14 文字背景以及半透明的设置</h2><p>打开<code>theme/next/source/css/_custom/custom.styl</code>，添加以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">.content &#123;<br>\tborder-radius: 20px; &#x2F;&#x2F;文章背景设置圆角<br>\tpadding: 30px 60px 30px 60px;<br>\tbackground:rgba(255, 255, 255, 0.8) none repeat scroll !important;<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-15-去除NexT主题Markdown分割线渲染效果\"><a href=\"#4-15-去除NexT主题Markdown分割线渲染效果\" class=\"headerlink\" title=\"4.15 去除NexT主题Markdown分割线渲染效果\"></a>4.15 去除NexT主题Markdown分割线渲染效果</h2><p>修改<code>/source/css/_common/scaffolding/base.styl</code>，注释或删除以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">background-image: repeating-linear-gradient(<br>    -45deg,<br>    white,<br>    white 4px,<br>    transparent 4px,<br>    transparent 8px<br>  );<br>1234567<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-16-图片可点击放大查看，放大后可关闭\"><a href=\"#4-16-图片可点击放大查看，放大后可关闭\" class=\"headerlink\" title=\"4.16 图片可点击放大查看，放大后可关闭\"></a>4.16 图片可点击放大查看，放大后可关闭</h2><ul>\n<li>打开站点配置文件<code>_config.yml</code>，搜索<code>fancybox</code>字段，设置其值为<code>true</code></li>\n<li>进入到<code>theme/text/</code>文件夹下，打开<code>git bash</code></li>\n<li><code>git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox</code></li>\n</ul>\n<hr>\n<h2 id=\"4-17-博客总访问量统计\"><a href=\"#4-17-博客总访问量统计\" class=\"headerlink\" title=\"4.17 博客总访问量统计\"></a>4.17 博客总访问量统计</h2><ul>\n<li><p>打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes&#x2F;next&#x2F;<br></code></pre></td></tr></table></figure>\n<p>下的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">_config.yml<br></code></pre></td></tr></table></figure>\n<p>，查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">busuanzi<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">busuanzi_count:<br>  enable: true<br>  total_visitors: false<br>  total_visitors_icon: user<br>  total_views: false<br>  total_views_icon: eye<br>  post_views: true<br>  post_views_icon: eye<br></code></pre></td></tr></table></figure>\n<p>当前版本的NexT集成的不蒜子，总访问人数和人次只是分别用icon来表示，故取消显示，自行改动</p>\n</li>\n<li><p>打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig<br></code></pre></td></tr></table></figure>\n<p>，在最后添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot;&gt;<br>  本站访问次数：&lt;span class&#x3D;&quot;busuanzi-value&quot; id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;<br>&lt;&#x2F;span&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"4-18-文章末尾添加版权声明\"><a href=\"#4-18-文章末尾添加版权声明\" class=\"headerlink\" title=\"4.18 文章末尾添加版权声明\"></a>4.18 文章末尾添加版权声明</h2></li>\n</ul>\n<p><strong>效果：</strong><br><img src=\"https://img-blog.csdn.net/2018062323493260?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM0NTM4NA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"><br><strong>配置：</strong><br>查找主题配置文件<code>themes/next/_config.yml</code>中的<code>creative_commons</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">creative_commons:<br>  license: by-nc-sa<br>  sidebar: false<br>  post: true  # 将false改为true即可显示版权信息<br>  language:<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-19-本地搜索（其余搜索方案的劣势只有收费）\"><a href=\"#4-19-本地搜索（其余搜索方案的劣势只有收费）\" class=\"headerlink\" title=\"4.19 本地搜索（其余搜索方案的劣势只有收费）\"></a>4.19 本地搜索（其余搜索方案的劣势只有收费）</h2><ul>\n<li><p><code>npm install hexo-generator-search</code></p>\n</li>\n<li><p>查找主题配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes&#x2F;next&#x2F;_config.yml<br></code></pre></td></tr></table></figure>\n<p>中的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">local_search<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">local_search:<br>  enable: true<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"4-20-图床和上传工具\"><a href=\"#4-20-图床和上传工具\" class=\"headerlink\" title=\"4.20 图床和上传工具\"></a>4.20 图床和上传工具</h2><p><a href=\"https://zhuanlan.zhihu.com/p/35270383\">盘点一下免费好用的图床</a></p>\n<h2 id=\"4-21-文章置顶\"><a href=\"#4-21-文章置顶\" class=\"headerlink\" title=\"4.21 文章置顶\"></a>4.21 文章置顶</h2><p><a href=\"http://wangwlj.com/2018/01/09/blog_pin_post/\">Hexo博客彻底解决置顶问题</a><br>效果：<br><img src=\"https://img-blog.csdnimg.cn/20190329140445995.png\" alt=\"在这里插入图片描述\"><br>注：若有多篇文章需要置顶，排序方式为 在需要置顶的文章的<code>Front-matter</code>的<code>top:</code>填写阿拉伯数字即可，数越大，排序越靠前。</p>\n<h2 id=\"4-22-添加粒子时钟\"><a href=\"#4-22-添加粒子时钟\" class=\"headerlink\" title=\"4.22 添加粒子时钟\"></a>4.22 添加粒子时钟</h2><p>博客应用canvas粒子时钟的操作步骤：</p>\n<p>在<code>\\themes\\next\\layout\\_custom\\</code>目录下，新建<code>clock.swig</code>文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&lt;div style&#x3D;&quot;&quot;&gt;<br>  &lt;canvas id&#x3D;&quot;canvas&quot; style&#x3D;&quot;width:60%;&quot;&gt;当前浏览器不支持canvas，请更换浏览器后再试&lt;&#x2F;canvas&gt;<br>&lt;&#x2F;div&gt;<br>&lt;script&gt;<br>(function()&#123;<br><br>   var digit&#x3D;<br>    [<br>        [<br>            [0,0,1,1,1,0,0],<br>            [0,1,1,0,1,1,0],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,0,1,1,0],<br>            [0,0,1,1,1,0,0]<br>        ],&#x2F;&#x2F;0<br>        [<br>            [0,0,0,1,1,0,0],<br>            [0,1,1,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [1,1,1,1,1,1,1]<br>        ],&#x2F;&#x2F;1<br>        [<br>            [0,1,1,1,1,1,0],<br>            [1,1,0,0,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,1,1,0,0,0],<br>            [0,1,1,0,0,0,0],<br>            [1,1,0,0,0,0,0],<br>            [1,1,0,0,0,1,1],<br>            [1,1,1,1,1,1,1]<br>        ],&#x2F;&#x2F;2<br>        [<br>            [1,1,1,1,1,1,1],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,1,1,1,0]<br>        ],&#x2F;&#x2F;3<br>        [<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,1,1,1,0],<br>            [0,0,1,1,1,1,0],<br>            [0,1,1,0,1,1,0],<br>            [1,1,0,0,1,1,0],<br>            [1,1,1,1,1,1,1],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,1,1,1,1]<br>        ],&#x2F;&#x2F;4<br>        [<br>            [1,1,1,1,1,1,1],<br>            [1,1,0,0,0,0,0],<br>            [1,1,0,0,0,0,0],<br>            [1,1,1,1,1,1,0],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,1,1,1,0]<br>        ],&#x2F;&#x2F;5<br>        [<br>            [0,0,0,0,1,1,0],<br>            [0,0,1,1,0,0,0],<br>            [0,1,1,0,0,0,0],<br>            [1,1,0,0,0,0,0],<br>            [1,1,0,1,1,1,0],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,1,1,1,0]<br>        ],&#x2F;&#x2F;6<br>        [<br>            [1,1,1,1,1,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,1,1,0,0,0],<br>            [0,0,1,1,0,0,0],<br>            [0,0,1,1,0,0,0],<br>            [0,0,1,1,0,0,0]<br>        ],&#x2F;&#x2F;7<br>        [<br>            [0,1,1,1,1,1,0],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,1,1,1,0],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,1,1,1,0]<br>        ],&#x2F;&#x2F;8<br>        [<br>            [0,1,1,1,1,1,0],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,1,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,1,1,0,0],<br>            [0,1,1,0,0,0,0]<br>        ],&#x2F;&#x2F;9<br>        [<br>            [0,0,0,0,0,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,0,0,0,0,0],<br>            [0,0,0,0,0,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,0,0,0,0,0]<br>        ]&#x2F;&#x2F;:<br>    ];<br><br>var canvas &#x3D; document.getElementById(&#39;canvas&#39;);<br><br>if(canvas.getContext)&#123;<br>    var cxt &#x3D; canvas.getContext(&#39;2d&#39;);<br>    &#x2F;&#x2F;声明canvas的宽高<br>    var H &#x3D; 100,W &#x3D; 700;<br>    canvas.height &#x3D; H;<br>    canvas.width &#x3D; W;<br>    cxt.fillStyle &#x3D; &#39;#f00&#39;;<br>    cxt.fillRect(10,10,50,50);<br><br>    &#x2F;&#x2F;存储时间数据<br>    var data &#x3D; [];<br>    &#x2F;&#x2F;存储运动的小球<br>    var balls &#x3D; [];<br>    &#x2F;&#x2F;设置粒子半径<br>    var R &#x3D; canvas.height&#x2F;20-1;<br>    (function()&#123;<br>        var temp &#x3D; &#x2F;(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)&#x2F;.exec(new Date());<br>        &#x2F;&#x2F;存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成<br>        data.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);<br>    &#125;)();<br><br>    &#x2F;*生成点阵数字*&#x2F;<br>    function renderDigit(index,num)&#123;<br>        for(var i &#x3D; 0; i &lt; digit[num].length; i++)&#123;<br>            for(var j &#x3D; 0; j &lt; digit[num][i].length; j++)&#123;<br>                if(digit[num][i][j] &#x3D;&#x3D; 1)&#123;<br>                    cxt.beginPath();<br>                    cxt.arc(14*(R+2)*index + j*2*(R+1)+(R+1),i*2*(R+1)+(R+1),R,0,2*Math.PI);<br>                    cxt.closePath();<br>                    cxt.fill();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    &#x2F;*更新时钟*&#x2F;<br>    function updateDigitTime()&#123;<br>        var changeNumArray &#x3D; [];<br>        var temp &#x3D; &#x2F;(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)&#x2F;.exec(new Date());<br>        var NewData &#x3D; [];<br>        NewData.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);<br>        for(var i &#x3D; data.length-1; i &gt;&#x3D;0 ; i--)&#123;<br>            &#x2F;&#x2F;时间发生变化<br>            if(NewData[i] !&#x3D;&#x3D; data[i])&#123;<br>                &#x2F;&#x2F;将变化的数字值和在data数组中的索引存储在changeNumArray数组中<br>                changeNumArray.push(i+&#39;_&#39;+(Number(data[i])+1)%10);<br>            &#125;<br>        &#125;<br>        &#x2F;&#x2F;增加小球<br>        for(var i &#x3D; 0; i&lt; changeNumArray.length; i++)&#123;<br>            addBalls.apply(this,changeNumArray[i].split(&#39;_&#39;));<br>        &#125;<br>        data &#x3D; NewData.concat();<br>    &#125;<br><br>    &#x2F;*更新小球状态*&#x2F;<br>    function updateBalls()&#123;<br>        for(var i &#x3D; 0; i &lt; balls.length; i++)&#123;<br>            balls[i].stepY +&#x3D; balls[i].disY;<br>            balls[i].x +&#x3D; balls[i].stepX;<br>            balls[i].y +&#x3D; balls[i].stepY;<br>            if(balls[i].x &gt; W + R || balls[i].y &gt; H + R)&#123;<br>                balls.splice(i,1);<br>                i--;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    &#x2F;*增加要运动的小球*&#x2F;<br>    function addBalls(index,num)&#123;<br>        var numArray &#x3D; [1,2,3];<br>        var colorArray &#x3D;  [&quot;#3BE&quot;,&quot;#09C&quot;,&quot;#A6C&quot;,&quot;#93C&quot;,&quot;#9C0&quot;,&quot;#690&quot;,&quot;#FB3&quot;,&quot;#F80&quot;,&quot;#F44&quot;,&quot;#C00&quot;];<br>        for(var i &#x3D; 0; i &lt; digit[num].length; i++)&#123;<br>            for(var j &#x3D; 0; j &lt; digit[num][i].length; j++)&#123;<br>                if(digit[num][i][j] &#x3D;&#x3D; 1)&#123;<br>                    var ball &#x3D; &#123;<br>                        x:14*(R+2)*index + j*2*(R+1)+(R+1),<br>                        y:i*2*(R+1)+(R+1),<br>                        stepX:Math.floor(Math.random() * 4 -2),<br>                        stepY:-2*numArray[Math.floor(Math.random()*numArray.length)],<br>                        color:colorArray[Math.floor(Math.random()*colorArray.length)],<br>                        disY:1<br>                    &#125;;<br>                    balls.push(ball);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    &#x2F;*渲染*&#x2F;<br>    function render()&#123;<br>        &#x2F;&#x2F;重置画布宽度，达到清空画布的效果<br>        canvas.height &#x3D; 100;<br>        &#x2F;&#x2F;渲染时钟<br>        for(var i &#x3D; 0; i &lt; data.length; i++)&#123;<br>            renderDigit(i,data[i]);<br>        &#125;<br>        &#x2F;&#x2F;渲染小球<br>        for(var i &#x3D; 0; i &lt; balls.length; i++)&#123;<br>            cxt.beginPath();<br>            cxt.arc(balls[i].x,balls[i].y,R,0,2*Math.PI);<br>            cxt.fillStyle &#x3D; balls[i].color;<br>            cxt.closePath();<br>            cxt.fill();<br>        &#125;<br>    &#125;<br><br>    clearInterval(oTimer);<br>    var oTimer &#x3D; setInterval(function()&#123;<br>        &#x2F;&#x2F;更新时钟<br>        updateDigitTime();<br>        &#x2F;&#x2F;更新小球状态<br>        updateBalls();<br>        &#x2F;&#x2F;渲染<br>        render();<br>    &#125;,50);<br>&#125;<br><br>&#125;)();<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>引用代码</li>\n</ul>\n<p>直接引用或者通过配置文件配置，二选一</p>\n<ul>\n<li>直接引用</li>\n</ul>\n<p>在<code>博客目录\\themes\\next\\layout\\_macro\\sidebar.swig</code>尾部中引入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#123;% include &#39;..&#x2F;_custom&#x2F;clock.swig&#39; %&#125;<br></code></pre></td></tr></table></figure>\n<p>示意图如下：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5ub3MtZWFzdGNoaW5hMS4xMjYubmV0L2Jsb2cvYmxvZ19jbG9jay5wbmc?x-oss-process=image/format,png\" alt=\"img\"></p>\n<blockquote>\n<p>注：代码块要放置在<code>sider-inner</code>的<code>div</code>块中，放在<code>div</code>块的位置决定时钟样式的展示位置。我选择放置在尾部，看着效果好点。</p>\n</blockquote>\n<ul>\n<li>通过配置文件配置</li>\n</ul>\n<p>1、在<code>博客目录\\themes\\next\\layout\\_macro\\sidebar.swig</code>尾部中引入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#123;% if theme.diy_time.clock %&#125;<br>  &lt;!-- canvas粒子时钟 --&gt;<br>  &#123;% include &#39;..&#x2F;_custom&#x2F;clock.swig&#39; %&#125;<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure>\n<p>示意图如下：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5ub3MtZWFzdGNoaW5hMS4xMjYubmV0L2Jsb2cvYmxvZ19jbG9ja19pZi5wbmc?x-oss-process=image/format,png\" alt=\"img\"></p>\n<blockquote>\n<p>注：代码块要放置在<code>sider-inner</code>的<code>div</code>块中，放在<code>div</code>块的位置决定时钟样式的展示位置。</p>\n</blockquote>\n<p>2、在主题的配置文件中加入应用代码，配置文件位置是<code>博客目录\\themes\\next\\_config.yml</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># 侧栏粒子时钟<br>diy_time:<br>  runtime: true <br>  clock: true # 粒子时钟<br></code></pre></td></tr></table></figure>\n<h2 id=\"4-23-添加近期文章\"><a href=\"#4-23-添加近期文章\" class=\"headerlink\" title=\"4.23 添加近期文章\"></a>4.23 添加近期文章</h2><p>添加配置参数 <strong>~/theme/next/_config.yml</strong> ，添加如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">recent_posts:<br>  enable: true<br>  recent_posts_title: 最新发表文章<br></code></pre></td></tr></table></figure>\n<p>首先我们找到侧边栏模块 <strong>next/layout/_macro/sidebar.swig</strong> ,这个负责渲染侧边栏<br>在我们想要放置<strong>最新文章模块</strong>的地方添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#123;% if theme.recent_posts.enable %&#125;<br>  &lt;aside class&#x3D;&quot;sidebar sidebar-ads sidebar-posts&quot;&gt;<br>    &lt;div&gt;<br>      &lt;div class&#x3D;&quot;recent_posts_title&quot;&gt;<br>        &#123;&#123; theme.recent_posts.recent_posts_title &#125;&#125;<br>      &lt;&#x2F;div&gt;<br>      &lt;ul class&#x3D;&quot;links-of-blogroll-list&quot;&gt;<br>        &#123;% set posts &#x3D; site.posts.sort(&#39;-date&#39;) %&#125;<br>        &#123;% set bg_colors &#x3D; [&#39;rgb(31, 216, 210)&#39;, &#39;rgb(4, 166, 247)&#39;, &#39;rgb(70, 101, 226)&#39;, &#39;rgb(94, 137, 229)&#39;, &#39;rgb(0, 206, 123)&#39;] %&#125;<br>        &#123;% for post in posts.slice(&#39;0&#39;, &#39;5&#39;) %&#125;<br>          &lt;li&gt;<br>            &lt;div class&#x3D;&quot;text-img&quot; style&#x3D;&quot;background:&#123;&#123;bg_colors[loop.index - 1]&#125;&#125;;&quot;&gt;&#123;&#123; post.title.substr(0, 3) &#125;&#125;&lt;&#x2F;div&gt;<br>            &lt;div class&#x3D;&quot;post-name&quot;&gt;<br>              &lt;div&gt;&#123;&#123; date(post.date, config.date_format) &#125;&#125;&lt;&#x2F;div&gt;<br>              &lt;div&gt;&lt;a href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title&#x3D;&quot;&#123;&#123; post.title &#125;&#125;&quot; &gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;<br>            &lt;&#x2F;div&gt;<br>          &lt;&#x2F;li&gt;<br>        &#123;% endfor %&#125;<br>      &lt;&#x2F;ul&gt;<br>    &lt;&#x2F;div&gt;<br>  &lt;&#x2F;aside&gt;<br>  &#123;% endif %&#125;<br></code></pre></td></tr></table></figure>\n<p>最后重新执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">hexo clean<br>hexo g<br></code></pre></td></tr></table></figure>\n\n\n<p>最后我们得到的效果是</p>\n<h2 id=\"Google统计\"><a href=\"#Google统计\" class=\"headerlink\" title=\"Google统计\"></a>Google统计</h2><h2 id=\"Sitemap网站地图\"><a href=\"#Sitemap网站地图\" class=\"headerlink\" title=\"Sitemap网站地图\"></a>Sitemap网站地图</h2><h2 id=\"提交谷歌收录本站-Google-Search\"><a href=\"#提交谷歌收录本站-Google-Search\" class=\"headerlink\" title=\"提交谷歌收录本站 Google Search\"></a>提交谷歌收录本站 Google Search</h2><h2 id=\"文章阅读量统计\"><a href=\"#文章阅读量统计\" class=\"headerlink\" title=\"文章阅读量统计\"></a><a href=\"https://blog.csdn.net/weixin_39345384/article/details/80787998\">文章阅读量统计</a></h2><hr>\n<hr>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://mashirosorata.vicp.io/HEXO-NEXT主题个性化配置.html\">HEXO+NEXT主题个性化配置</a></li>\n<li><a href=\"https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html\">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a></li>\n<li><a href=\"https://juejin.im/post/5c45a503f265da616b10fe4e#heading-28\">[EasyHexo 专栏] #2 - 魔改 Next 不完全教程</a></li>\n<li><a href=\"https://blog.csdn.net/MasterAnt_D/article/details/56839222#t50\">基于Hexo+Node.js+github+coding搭建个人博客——进阶篇(从入门到入土)</a></li>\n<li><a href=\"http://www.shaoyance.com/2018/01/26/Hexo博客Next主题优化总结/\">Hexo博客Next主题优化总结</a></li>\n<li><a href=\"https://notes.doublemine.me/2015-10-21-为NexT主题添加文章阅读量统计功能.html\">为NexT主题添加文章阅读量统计功能</a></li>\n<li><a href=\"http://www.cduyzh.com/hexo-settings-3/\">2017年最新基于hexo搭建个人免费博客——自定义页面样式一</a></li>\n<li><a href=\"https://notes.doublemine.me/2015-06-29-Hexo添加文章时自动打开编辑器.html\">Hexo添加文章时自动打开编辑器</a></li>\n<li><a href=\"https://blog.yleao.com/2018/0901/hexo-next主题下的美化.html#next主题下点击侧边栏头像回到博客首页\">next主题下点击侧边栏头像回到博客首页</a></li>\n<li><a href=\"https://reuixiy.github.io/beautiful/share/2018/12/11/noto-serif-sc-added-on-google-fonts.html\">Google Fonts 已支持思源宋体！</a></li>\n<li><a href=\"https://www.bluelzy.com/articles/change_to_next_theme.html\">弃暗投明-Hexo更换next主题</a></li>\n<li><a href=\"https://www.feiwuuz.com.cn/archives/5483aa06.html\">hexo博客NEXT主题美化</a></li>\n<li><a href=\"http://chant00.com/2015/11/04/在hexo博客中插入图片，音乐，视屏，公式/\">在hexo博客中插入图片，音乐，视频</a></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><p>前文：<a href=\"https://blog.csdn.net/weixin_39345384/article/details/80095883\">Windows下通过GitHub+Hexo搭建个人博客的步骤</a>；<br>博主的个人博客：<a href=\"https://hunter1023.github.io/\">https://hunter1023.github.io/</a> 按照本篇博客美化。</p>\n<p>在 Hexo 中有<strong>2份</strong>主要的配置文件，其名称都是<code>_config.yml</code>。 其中，一份位于<strong>博客根目录下</strong>，主要包含 <strong>Hexo 本身的配置</strong>；另一份位于<code>themes/next/</code>目录下，用于配置<strong>主题相关的选项</strong>。</p>\n<hr>\n<h1 id=\"2-基础设置\"><a href=\"#2-基础设置\" class=\"headerlink\" title=\"2. 基础设置\"></a>2. 基础设置</h1><h2 id=\"2-1-设置站点名、作者昵称和站点描述等内容\"><a href=\"#2-1-设置站点名、作者昵称和站点描述等内容\" class=\"headerlink\" title=\"2.1 设置站点名、作者昵称和站点描述等内容\"></a>2.1 设置站点名、作者昵称和站点描述等内容</h2><p>打开<strong>根目录下的<code>_config.yml</code></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># Site<br>title: 特叔服务<br>subtitle: <br>keywords:<br>author: Hunter<br>description: Tough times never last, but tough people do.<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"2-2-NexT主题的安装\"><a href=\"#2-2-NexT主题的安装\" class=\"headerlink\" title=\"2.2. NexT主题的安装\"></a>2.2. NexT主题的安装</h2><p>顾名思义，所谓主题就是界面的展示样式。Hexo安装主题，只需要将主题文件拷贝至博客所在目录的<code>themes</code>目录下，修改相关配置文件即可生效。</p>\n<p>博客所在目录下打开<code>git bash</code>，再通过<code>Git clone https://github.com/theme-next/hexo-theme-next themes/next</code>即可完成。</p>\n<hr>\n<h2 id=\"2-3-启用主题\"><a href=\"#2-3-启用主题\" class=\"headerlink\" title=\"2.3 启用主题\"></a>2.3 启用主题</h2><p>打开<strong>根目录下的<code>_config.yml</code></strong>,查找<code>theme</code>字段，将字段改为<code>theme: next</code>(<strong>冒号<code>:</code>之后要有空格分隔，否则无效</strong>) ，之后通过<code>hexo g</code>和<code>hexo s</code>，再在浏览器中访问<code>localhost:4000</code>即可本地预览主题效果。</p>\n<hr>\n<h1 id=\"3-主题设定\"><a href=\"#3-主题设定\" class=\"headerlink\" title=\"3. 主题设定\"></a>3. 主题设定</h1><h2 id=\"3-1-选择scheme\"><a href=\"#3-1-选择scheme\" class=\"headerlink\" title=\"3.1 选择scheme\"></a>3.1 选择scheme</h2><p>打开<code>themes/next/</code>下的<code>_config.yml</code>,查找<code>scheme</code>，可以看到如下四种不同的风格方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">scheme: Muse<br>#scheme: Mist<br>#scheme: Pisces<br>#scheme: Gemini<br></code></pre></td></tr></table></figure>\n<p>去掉<code>#</code>注释，即启用对应的scheme，博主采用Muse主题，大家可以依次测试效果，选择自己喜欢的scheme。</p>\n<hr>\n<h2 id=\"3-2-设置语言\"><a href=\"#3-2-设置语言\" class=\"headerlink\" title=\"3.2 设置语言\"></a>3.2 设置语言</h2><p>博客框架默认的语言是英文，前往<code>/themes/next/languages</code>，查看当前NexT版本简体中文对照文件的名称是<code>zh-Hans</code>还是<code>zh-CN</code>。</p>\n<p>再前往根目录下的<code>_config.yml</code>，查找<code>language</code>，设置成<code>language: zh-Hans</code>或<code>language: zh-CN</code>，即显示简体中文。</p>\n<hr>\n<h2 id=\"3-3-设置菜单及对应页面\"><a href=\"#3-3-设置菜单及对应页面\" class=\"headerlink\" title=\"3.3 设置菜单及对应页面\"></a>3.3 设置菜单及对应页面</h2><ul>\n<li><p>打开<code>themes/next/</code>下的<code>_config.yml</code>，查找<code>menu</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">menu:<br>  home: &#x2F; || home<br>  #about: &#x2F;about&#x2F; || user<br>  tags: &#x2F;tags&#x2F; || tags<br>  categories: &#x2F;categories&#x2F; || th<br>  archives: &#x2F;archives&#x2F; || archive<br>  #schedule: &#x2F;schedule&#x2F; || calendar<br>  #sitemap: &#x2F;sitemap.xml || sitemap<br>  #commonweal: &#x2F;404&#x2F; || heartbeat<br></code></pre></td></tr></table></figure>\n<p>去掉<code>#</code>注释即可显示对应的菜单项，也可自定义新的菜单项。 <code>||</code>之前的值是目标链接，之后的是分类页面的图标，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。</p>\n</li>\n<li><p>新添加的菜单需要翻译对应的中文<br>打开<code>hexo/theme/next/languages/zh-CN.yml</code>，在menu下自定义，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">menu:<br>  resources: 资源<br></code></pre></td></tr></table></figure></li>\n<li><p><code>hexo new page &quot;categories&quot;</code><br>此时在根目录的<code>source</code>文件夹下会生成一个categories文件，文件中有一个<code>index.md</code>文件，修改内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">---<br>title: 分类<br>date: 2017-12-14 13:05:38<br>type: &quot;categories&quot;<br>comments: false<br>---<br></code></pre></td></tr></table></figure>\n<p>注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"3-4-设定站点建立时间\"><a href=\"#3-4-设定站点建立时间\" class=\"headerlink\" title=\"3.4 设定站点建立时间\"></a>3.4 设定站点建立时间</h2><p>打开<strong><code>themes/next/</code>下的<code>_config.yml</code></strong>，查找<code>since</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">footer:<br>  # Specify the date when the site was setup.<br>  # If not defined, current year will be used.<br>  #since: 2015<br></code></pre></td></tr></table></figure>\n<p><strong>如果不设置，默认显示当前年份</strong>。</p>\n<hr>\n<h1 id=\"4-美化\"><a href=\"#4-美化\" class=\"headerlink\" title=\"4. 美化\"></a>4. 美化</h1><h2 id=\"4-1-设置头像\"><a href=\"#4-1-设置头像\" class=\"headerlink\" title=\"4.1 设置头像\"></a>4.1 设置头像</h2><p>打开<code>themes/next/</code>下的<code>_config.yml</code>，查找<code>avatar</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># Sidebar Avatar<br># in theme directory(source&#x2F;images): &#x2F;images&#x2F;avatar.gif<br># in site  directory(source&#x2F;uploads): &#x2F;uploads&#x2F;avatar.gif<br>avatar: http:&#x2F;&#x2F;XXXXXXXXX<br></code></pre></td></tr></table></figure>\n<p><code>avatar</code>的值是<strong>图片的链接地址</strong>(完整的URI 或者 站内的相对地址皆可)</p>\n<table>\n<thead>\n<tr>\n<th>地址</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>完整的URI</td>\n<td><a href=\"http://example.com/avatar.png\">http://example.com/avatar.png</a></td>\n</tr>\n<tr>\n<td>站点内地址</td>\n<td>图片放至<code>themes/next/source/images/</code>配置为：<code>avatar: /images/图片名</code></td>\n</tr>\n<tr>\n<td>站点内地址</td>\n<td>图片放至<strong>根目录下</strong><code>source/uploads/</code>(初始无uploads文件夹，自行创建)目录下配置为：<code>avatar: /uploads/图片名</code></td>\n</tr>\n</tbody></table>\n<p><strong>之后创建博文，对图片的引用 同样可以按照上述地址获取</strong>。</p>\n<hr>\n<h2 id=\"4-2-网站图标设置\"><a href=\"#4-2-网站图标设置\" class=\"headerlink\" title=\"4.2 网站图标设置\"></a>4.2 网站图标设置</h2><ul>\n<li><p>图标素材网站：<a href=\"https://www.iconfont.cn/\">iconfont</a>；<a href=\"https://www.easyicon.net/\">easyicon</a></p>\n</li>\n<li><p>下载16x16以及32x32大小的<strong>PNG格式图标</strong>，置于<code>/themes/next/source/images/</code>下</p>\n</li>\n<li><p>打开**</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes&#x2F;next&#x2F;<br></code></pre></td></tr></table></figure>\n<p>下的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">_config.yml<br></code></pre></td></tr></table></figure>\n<p>**，查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">favicon<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">favicon:<br>  small: &#x2F;images&#x2F;favicon-16x16-next.png<br>  medium: &#x2F;images&#x2F;favicon-32x32-next.png<br>  apple_touch_icon: &#x2F;images&#x2F;apple-touch-icon-next.png<br>  safari_pinned_tab: &#x2F;images&#x2F;logo.svg<br>  #android_manifest: &#x2F;images&#x2F;manifest.json<br>  #ms_browserconfig: &#x2F;images&#x2F;browserconfig.xml<br></code></pre></td></tr></table></figure>\n<p>修改small和medium的路径为下载的图标路径</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"4-3-背景动画\"><a href=\"#4-3-背景动画\" class=\"headerlink\" title=\"4.3 背景动画\"></a>4.3 背景动画</h2><h3 id=\"4-3-1-Canvas-nest风格\"><a href=\"#4-3-1-Canvas-nest风格\" class=\"headerlink\" title=\"4.3.1 Canvas-nest风格\"></a>4.3.1 <a href=\"https://blog.csdn.net/weixin_39345384/article/details/80544660\">Canvas-nest风格</a></h3><h3 id=\"4-3-2-JavaScript-3D-library风格\"><a href=\"#4-3-2-JavaScript-3D-library风格\" class=\"headerlink\" title=\"4.3.2 JavaScript 3D library风格\"></a>4.3.2 JavaScript 3D library风格</h3><ol>\n<li>进入theme/next目录</li>\n<li>执行命令：<code>git clone https://github.com/theme-next/theme-next-three source/lib/three</code></li>\n<li>将<code>themes/next/_config.yml</code>中查找<code>theme-next-three</code>，将想要的效果改为true即可：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># three_waves<br>three_waves: false<br># canvas_lines<br>canvas_lines: true<br># canvas_sphere<br>canvas_sphere: false<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-4-背景图片-顶栏、底栏图片（背景色）、侧栏背景及内部文字颜色\"><a href=\"#4-4-背景图片-顶栏、底栏图片（背景色）、侧栏背景及内部文字颜色\" class=\"headerlink\" title=\"4.4 背景图片/顶栏、底栏图片（背景色）、侧栏背景及内部文字颜色\"></a>4.4 背景图片/顶栏、底栏图片（背景色）、侧栏背景及内部文字颜色</h2><p>打开<code>theme/next/source/css/_custom/custom.styl</code>，添加以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#x2F;&#x2F;背景图片<br>body&#123;   <br>        background:url(图片链接);<br>        background-size:cover;<br>        background-repeat:no-repeat;<br>        background-attachment:fixed;<br>        background-position:center;<br>&#125;<br>&#x2F;&#x2F;顶栏图片<br>.header &#123;<br>          background:url(图片链接) none repeat scroll !important;<br>&#125;<br>&#x2F;&#x2F;底栏背景色<br>.footer &#123;<br>          background:rgba(颜色rgb,透明度) none repeat scroll !important;<br>&#125;<br>&#x2F;&#x2F;侧栏图片及内部文字颜色修改<br>#sidebar &#123;<br>            background:url(图片链接);<br>            background-size: cover;<br>            background-position:center;<br>            background-repeat:no-repeat;<br>            p,span,a &#123;color: 颜色代码;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>其中的css样式属性都可以根据图片修改，以达到满意的效果。</p>\n<hr>\n<h2 id=\"4-5-侧栏置于左侧，修改控制按钮样式\"><a href=\"#4-5-侧栏置于左侧，修改控制按钮样式\" class=\"headerlink\" title=\"4.5 侧栏置于左侧，修改控制按钮样式\"></a>4.5 侧栏置于左侧，修改控制按钮样式</h2><p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。打开<code>themes/next/</code>下的<code>_config.yml</code>，查找<code>sidebar</code></p>\n<h3 id=\"4-5-1-设置侧栏在左侧-右侧\"><a href=\"#4-5-1-设置侧栏在左侧-右侧\" class=\"headerlink\" title=\"4.5.1 设置侧栏在左侧/右侧\"></a>4.5.1 设置侧栏在左侧/右侧</h3><ul>\n<li><p>Pisces或Gemini方案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">sidebar:<br>position: left<br>#position: right<br></code></pre></td></tr></table></figure></li>\n<li><p>Mist或Muse方案</p>\n</li>\n</ul>\n<ol>\n<li><p>打开<code>next/source/js/src/motion.js</code>，查找<code>paddingRight</code>，把所有（2个）<code>PaddingRight</code>更改为<code>paddingLeft</code>即可。</p>\n</li>\n<li><p>打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">next&#x2F;source&#x2F;css&#x2F;_custom&#x2F;custom.styl<br></code></pre></td></tr></table></figure>\n<p>，添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#x2F;&#x2F;侧边栏置于左侧<br>.sidebar &#123;<br>  left: 0;<br>&#125;<br>&#x2F;&#x2F;侧栏开关置于左侧<br>.sidebar-toggle &#123;<br>  left: $b2t-position-right;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>打开<code>next/source/css/_common/components/back-to-top.styl</code>，将<code>right: $b2t-position-right;</code>改为<code>left: $b2t-position-right;</code></p>\n</li>\n</ol>\n<h3 id=\"4-5-2-显示侧边栏的时机\"><a href=\"#4-5-2-显示侧边栏的时机\" class=\"headerlink\" title=\"4.5.2 显示侧边栏的时机\"></a>4.5.2 显示侧边栏的时机</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">#post - 默认行为，在文章页面（拥有目录列表）时显示<br>#always - 在所有页面中都显示<br>#hide - 在所有页面中都隐藏（可以手动展开）<br>#remove - 完全移除<br>display: post<br>#display: always<br>#display: hide<br>#display: remove<br></code></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4-5-3-侧边栏控制按钮样式修改\"><a href=\"#4-5-3-侧边栏控制按钮样式修改\" class=\"headerlink\" title=\"4.5.3 侧边栏控制按钮样式修改\"></a>4.5.3 侧边栏控制按钮样式修改</h3><p>打开<code>themes/next/layout/source/js/src/motion.js</code>，找到如下代码处，更换close的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">var sidebarToggleLine1st &#x3D; new SidebarToggleLine(&#123;<br>    el: &#39;.sidebar-toggle-line-first&#39;,<br>    status: &#123;<br>      arrow: &#123;width: &#39;50%&#39;, rotateZ: &#39;45deg&#39;, top: &#39;2px&#39;, left: &#39;6px&#39;&#125;,<br>      &#x2F;&#x2F; close: &#123;width: &#39;100%&#39;, rotateZ: &#39;-45deg&#39;, top: &#39;5px&#39;, left: &#39;0px&#39;&#125; &#x2F;&#x2F;X形<br>      close: &#123;width: &#39;50%&#39;, rotateZ: &#39;-45deg&#39;, top: &#39;2px&#39;, left: &#39;0px&#39;&#125; &#x2F;&#x2F;箭头形<br>    &#125;<br>  &#125;);<br>  var sidebarToggleLine2nd &#x3D; new SidebarToggleLine(&#123;<br>    el: &#39;.sidebar-toggle-line-middle&#39;,<br>    status: &#123;<br>      arrow: &#123;width: &#39;90%&#39;&#125;,<br>      &#x2F;&#x2F; close: &#123;opacity: 0&#125; &#x2F;&#x2F;X形<br>      close: &#123;width: &#39;90%&#39;&#125; &#x2F;&#x2F;箭头形<br>    &#125;<br>  &#125;);<br>  var sidebarToggleLine3rd &#x3D; new SidebarToggleLine(&#123;<br>    el: &#39;.sidebar-toggle-line-last&#39;,<br>    status: &#123;<br>      arrow: &#123;width: &#39;50%&#39;, rotateZ: &#39;-45deg&#39;, top: &#39;-2px&#39;, left: &#39;6px&#39;&#125;,<br>      &#x2F;&#x2F; close: &#123;width: &#39;100%&#39;, rotateZ: &#39;45deg&#39;, top: &#39;-5px&#39;, left: &#39;0px&#39;&#125; &#x2F;&#x2F;X形<br>      close: &#123;width: &#39;50%&#39;, rotateZ: &#39;45deg&#39;, top: &#39;-2px&#39;, left: &#39;0px&#39;&#125; &#x2F;&#x2F;箭头形<br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-6-文章底部标签显示的优化\"><a href=\"#4-6-文章底部标签显示的优化\" class=\"headerlink\" title=\"4.6 文章底部标签显示的优化\"></a>4.6 文章底部标签显示的优化</h2><p>修改<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>\n<h2 id=\"4-7-文章添加阴影、透明效果\"><a href=\"#4-7-文章添加阴影、透明效果\" class=\"headerlink\" title=\"4.7 文章添加阴影、透明效果\"></a>4.7 文章添加阴影、透明效果</h2><p>打开<code>theme/next/source/css/_custom/custom.styl</code>，添加以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#x2F;&#x2F; 主页文章添加阴影效果<br>.post &#123;<br>   margin-top: 60px;<br>   margin-bottom: 60px;<br>   padding: 25px;<br>   background:rgba(255,255,255,0.9) none repeat scroll !important;<br>   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);<br>   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-8-Hexo添加文章时自动打开编辑器\"><a href=\"#4-8-Hexo添加文章时自动打开编辑器\" class=\"headerlink\" title=\"4.8 Hexo添加文章时自动打开编辑器\"></a>4.8 Hexo添加文章时自动打开编辑器</h2><ul>\n<li>首先在Hexo目录下的scripts目录中创建一个JavaScript脚本文件。<br>如果没有这个scripts目录，则新建一个。</li>\n<li>scripts目录新建的JavaScript脚本文件可以任意取名。</li>\n</ul>\n<p>通过这个脚本，我们用其来监听<code>hexo new</code>这个动作，并在检测到<code>hexo new</code>之后，执行编辑器打开的命令。</p>\n<ul>\n<li>如果你是windows平台的Hexo用户，则将下列内容写入你的脚本：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">var spawn &#x3D; require(&#39;child_process&#39;).exec;<br>hexo.on(&#39;new&#39;, function(data)&#123;<br>  spawn(&#39;start  &quot;markdown编辑器绝对路径.exe&quot; &#39; + data.path);<br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>如果你是Mac平台Hexo用户，则将下列内容写入你的脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">var exec &#x3D; require(&#39;child_process&#39;).exec;<br>hexo.on(&#39;new&#39;, function(data)&#123;<br>    exec(&#39;open -a &quot;markdown编辑器绝对路径.app&quot; &#39; + data.path);<br>&#125;);<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-9-点击侧栏头像回到首页\"><a href=\"#4-9-点击侧栏头像回到首页\" class=\"headerlink\" title=\"4.9 点击侧栏头像回到首页\"></a>4.9 点击侧栏头像回到首页</h2><p>修改<code>/themes/next/layout/_macro/sidebar.swig</code>，找到如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&lt;img class&#x3D;&quot;site-author-image&quot; itemprop&#x3D;&quot;image&quot;<br>    src&#x3D;&quot;&#123;&#123; url_for( theme.avatar | default(theme.images + &#39;&#x2F;avatar.gif&#39;) ) &#125;&#125;&quot;<br>    alt&#x3D;&quot;&#123;&#123; theme.author &#125;&#125;&quot; &#x2F;&gt;<br></code></pre></td></tr></table></figure>\n<p>在其前后加上<code>&lt;a href=&quot;/&quot;&gt;&lt;/a&gt;</code>即可，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;<br>   &lt;img class&#x3D;&quot;site-author-image&quot; itemprop&#x3D;&quot;image&quot;<br>       src&#x3D;&quot;&#123;&#123; url_for( theme.avatar | default(theme.images + &#39;&#x2F;avatar.gif&#39;) ) &#125;&#125;&quot;<br>       alt&#x3D;&quot;&#123;&#123; theme.author &#125;&#125;&quot; &#x2F;&gt;<br>&lt;&#x2F;a&gt;<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-10-修改中文字体\"><a href=\"#4-10-修改中文字体\" class=\"headerlink\" title=\"4.10 修改中文字体\"></a>4.10 修改中文字体</h2><ol>\n<li><p>前往<a href=\"https://fonts.google.com/\">Google Fonts</a>查看合适的字体</p>\n</li>\n<li><p>打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes&#x2F;next&#x2F;<br></code></pre></td></tr></table></figure>\n<p>下的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">_config.yml<br></code></pre></td></tr></table></figure>\n<p>，查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">font<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">font:<br>\tenable: true<br>\t # Uri of fonts host. E.g. &#x2F;&#x2F;fonts.googleapis.com (Default). 修改为墙内镜像<br>\thost: https:&#x2F;&#x2F;fonts.loli.net<br>\tglobal:<br>\t\texternal: true<br>\t\tfamily: Noto Serif SC &#x2F;&#x2F; 挑选的字体<br>\t\tsize: 16<br></code></pre></td></tr></table></figure>\n<ol>\n<li>修改<code>/themes/next/source/css/_variables/base.styl</code><br>将</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$font-family-monospace    &#x3D; consolas, Menlo, $font-family-chinese, monospace<br>$font-family-monospace    &#x3D; get_font_family(&#39;codes&#39;), consolas, Menlo, $font-family-chinese, monospace if get_font_family(&#39;codes&#39;)<br></code></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$font-family-monospace    &#x3D; consolas, Menlo, $font-family-base, monospace<br>$font-family-monospace    &#x3D; get_font_family(&#39;codes&#39;), consolas, Menlo, $font-family-base, monospace if get_font_family(&#39;codes&#39;)<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"4-11-新建文章时，在相同目录下创建同名文件夹（便于图片管理）\"><a href=\"#4-11-新建文章时，在相同目录下创建同名文件夹（便于图片管理）\" class=\"headerlink\" title=\"4.11 新建文章时，在相同目录下创建同名文件夹（便于图片管理）\"></a>4.11 新建文章时，在相同目录下创建同名文件夹（便于图片管理）</h2><ul>\n<li>打开站点配置文件<code>_config.yml</code>，搜索<code>post_asset_folder</code>字段，设置其值为<code>true</code></li>\n<li>安装hexo-asset-image：<code>npm install hexo-asset-image --save</code></li>\n<li>此时<code>hexo new &quot;fileName&quot;</code>会在<code>/source/_posts</code>目录下创建同名的文件夹</li>\n<li>只需在 md 文件里使用 <code>![title](图片名.jpg)</code> ，无需路径名就可以插入图片。</li>\n</ul>\n<hr>\n<h2 id=\"4-12-首页显示文章摘要（阅读全文）及配图（文章内不重复显示）\"><a href=\"#4-12-首页显示文章摘要（阅读全文）及配图（文章内不重复显示）\" class=\"headerlink\" title=\"4.12 首页显示文章摘要（阅读全文）及配图（文章内不重复显示）\"></a>4.12 首页显示文章摘要（阅读全文）及配图（文章内不重复显示）</h2><ol>\n<li><p>打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes&#x2F;next&#x2F;<br></code></pre></td></tr></table></figure>\n<p>下的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">_config.yml<br></code></pre></td></tr></table></figure>\n<p>，查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">excerpt<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">auto_excerpt: &#x2F;&#x2F;自动摘录<br>  enable: true<br>  length: 150 &#x2F;&#x2F;摘录字数<br>read_more_btn: true &#x2F;&#x2F;显示全文按钮<br></code></pre></td></tr></table></figure></li>\n<li><p>打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes\\next\\layout\\_macro\\post.swig<br></code></pre></td></tr></table></figure>\n<p>，在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#123;% if is_index %&#125;<br></code></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#123;% if post.description and theme.excerpt_description %&#125;<br></code></pre></td></tr></table></figure>\n<p>之间添加如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#123;% if post.images %&#125;<br>\t&lt;div class&#x3D;&quot;out-img-topic&quot;&gt;<br>\t\t&lt;img src&#x3D;&#123;&#123; post.images &#125;&#125; class&#x3D;&quot;img-topic&quot;&gt;<br>\t&lt;&#x2F;div&gt;<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>向</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes\\next\\source\\css\\_custom\\custom.styl<br></code></pre></td></tr></table></figure>\n<p>中添加如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#x2F;&#x2F;文章摘要配图<br>&#x2F;&#x2F;图片外部的容器方框，限制图片大小<br>.out-img-topic &#123;<br>  display: block;<br>  max-height:500px;<br>  margin-bottom: 24px;<br>  overflow: hidden;<br>&#125;<br>&#x2F;&#x2F;图片<br>img.img-topic &#123;<br>  display: block ;<br>  margin-left: .7em;<br>  margin-right: .7em;<br>  padding: 0;<br>  float: right;<br>  clear: right;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>将摘要图片储存于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes\\next\\source\\images<br></code></pre></td></tr></table></figure>\n<p>中，建议</p>\n<p>在此路径下</p>\n<p>单独建一个文件夹存放摘要图片，</p>\n<p>这个图片和文章中插图的存放路径不同，不是一个概念</p>\n<p>。然后在文章YAML头信息中添加images字段，将值填为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#x2F;images&#x2F;imagename.jpg<br></code></pre></td></tr></table></figure>\n<p>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">images: &quot;images&#x2F;文章摘要配图&#x2F;Win10桌面.png&quot;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"4-13-给页面、侧边栏添加背景图片\"><a href=\"#4-13-给页面、侧边栏添加背景图片\" class=\"headerlink\" title=\"4.13 给页面、侧边栏添加背景图片\"></a>4.13 给页面、侧边栏添加背景图片</h2><p>打开<code>theme/next/source/css/_custom/custom.styl</code>，添加以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">body &#123;<br>  background: url(&#x2F;images&#x2F;blogbk.jpg) no-repeat;<br>  &#x2F;* 背景图垂直、水平均居中 *&#x2F;<br>  background-position: center center;<br>  &#x2F;* 当内容高度大于图片高度时，背景图像的位置相对于viewport固定 *&#x2F;<br>  background-attachment: fixed;<br>  &#x2F;* 让背景图基于容器大小伸缩 *&#x2F;<br>  background-size: cover;<br>  &#x2F;* 设置背景颜色，背景图加载过程中会显示背景色 *&#x2F;<br>  background-color: rgba(0, 0, 0, 0.5);<br>&#125;<br>.sidebar &#123;<br>            background:url(&#x2F;images&#x2F;sidebar.jpg);<br>            background-size: cover;<br>            background-position:center;<br>            background-repeat:no-repeat;<br>            p,span,a &#123;color: rgba(255, 255, 255, 1);&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-14-文字背景以及半透明的设置\"><a href=\"#4-14-文字背景以及半透明的设置\" class=\"headerlink\" title=\"4.14 文字背景以及半透明的设置\"></a>4.14 文字背景以及半透明的设置</h2><p>打开<code>theme/next/source/css/_custom/custom.styl</code>，添加以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">.content &#123;<br>\tborder-radius: 20px; &#x2F;&#x2F;文章背景设置圆角<br>\tpadding: 30px 60px 30px 60px;<br>\tbackground:rgba(255, 255, 255, 0.8) none repeat scroll !important;<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-15-去除NexT主题Markdown分割线渲染效果\"><a href=\"#4-15-去除NexT主题Markdown分割线渲染效果\" class=\"headerlink\" title=\"4.15 去除NexT主题Markdown分割线渲染效果\"></a>4.15 去除NexT主题Markdown分割线渲染效果</h2><p>修改<code>/source/css/_common/scaffolding/base.styl</code>，注释或删除以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">background-image: repeating-linear-gradient(<br>    -45deg,<br>    white,<br>    white 4px,<br>    transparent 4px,<br>    transparent 8px<br>  );<br>1234567<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-16-图片可点击放大查看，放大后可关闭\"><a href=\"#4-16-图片可点击放大查看，放大后可关闭\" class=\"headerlink\" title=\"4.16 图片可点击放大查看，放大后可关闭\"></a>4.16 图片可点击放大查看，放大后可关闭</h2><ul>\n<li>打开站点配置文件<code>_config.yml</code>，搜索<code>fancybox</code>字段，设置其值为<code>true</code></li>\n<li>进入到<code>theme/text/</code>文件夹下，打开<code>git bash</code></li>\n<li><code>git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox</code></li>\n</ul>\n<hr>\n<h2 id=\"4-17-博客总访问量统计\"><a href=\"#4-17-博客总访问量统计\" class=\"headerlink\" title=\"4.17 博客总访问量统计\"></a>4.17 博客总访问量统计</h2><ul>\n<li><p>打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes&#x2F;next&#x2F;<br></code></pre></td></tr></table></figure>\n<p>下的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">_config.yml<br></code></pre></td></tr></table></figure>\n<p>，查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">busuanzi<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">busuanzi_count:<br>  enable: true<br>  total_visitors: false<br>  total_visitors_icon: user<br>  total_views: false<br>  total_views_icon: eye<br>  post_views: true<br>  post_views_icon: eye<br></code></pre></td></tr></table></figure>\n<p>当前版本的NexT集成的不蒜子，总访问人数和人次只是分别用icon来表示，故取消显示，自行改动</p>\n</li>\n<li><p>打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig<br></code></pre></td></tr></table></figure>\n<p>，在最后添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot;&gt;<br>  本站访问次数：&lt;span class&#x3D;&quot;busuanzi-value&quot; id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;<br>&lt;&#x2F;span&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"4-18-文章末尾添加版权声明\"><a href=\"#4-18-文章末尾添加版权声明\" class=\"headerlink\" title=\"4.18 文章末尾添加版权声明\"></a>4.18 文章末尾添加版权声明</h2></li>\n</ul>\n<p><strong>效果：</strong><br><img src=\"https://img-blog.csdn.net/2018062323493260?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM0NTM4NA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"><br><strong>配置：</strong><br>查找主题配置文件<code>themes/next/_config.yml</code>中的<code>creative_commons</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">creative_commons:<br>  license: by-nc-sa<br>  sidebar: false<br>  post: true  # 将false改为true即可显示版权信息<br>  language:<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-19-本地搜索（其余搜索方案的劣势只有收费）\"><a href=\"#4-19-本地搜索（其余搜索方案的劣势只有收费）\" class=\"headerlink\" title=\"4.19 本地搜索（其余搜索方案的劣势只有收费）\"></a>4.19 本地搜索（其余搜索方案的劣势只有收费）</h2><ul>\n<li><p><code>npm install hexo-generator-search</code></p>\n</li>\n<li><p>查找主题配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">themes&#x2F;next&#x2F;_config.yml<br></code></pre></td></tr></table></figure>\n<p>中的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">local_search<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">local_search:<br>  enable: true<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"4-20-图床和上传工具\"><a href=\"#4-20-图床和上传工具\" class=\"headerlink\" title=\"4.20 图床和上传工具\"></a>4.20 图床和上传工具</h2><p><a href=\"https://zhuanlan.zhihu.com/p/35270383\">盘点一下免费好用的图床</a></p>\n<h2 id=\"4-21-文章置顶\"><a href=\"#4-21-文章置顶\" class=\"headerlink\" title=\"4.21 文章置顶\"></a>4.21 文章置顶</h2><p><a href=\"http://wangwlj.com/2018/01/09/blog_pin_post/\">Hexo博客彻底解决置顶问题</a><br>效果：<br><img src=\"https://img-blog.csdnimg.cn/20190329140445995.png\" alt=\"在这里插入图片描述\"><br>注：若有多篇文章需要置顶，排序方式为 在需要置顶的文章的<code>Front-matter</code>的<code>top:</code>填写阿拉伯数字即可，数越大，排序越靠前。</p>\n<h2 id=\"4-22-添加粒子时钟\"><a href=\"#4-22-添加粒子时钟\" class=\"headerlink\" title=\"4.22 添加粒子时钟\"></a>4.22 添加粒子时钟</h2><p>博客应用canvas粒子时钟的操作步骤：</p>\n<p>在<code>\\themes\\next\\layout\\_custom\\</code>目录下，新建<code>clock.swig</code>文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&lt;div style&#x3D;&quot;&quot;&gt;<br>  &lt;canvas id&#x3D;&quot;canvas&quot; style&#x3D;&quot;width:60%;&quot;&gt;当前浏览器不支持canvas，请更换浏览器后再试&lt;&#x2F;canvas&gt;<br>&lt;&#x2F;div&gt;<br>&lt;script&gt;<br>(function()&#123;<br><br>   var digit&#x3D;<br>    [<br>        [<br>            [0,0,1,1,1,0,0],<br>            [0,1,1,0,1,1,0],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,0,1,1,0],<br>            [0,0,1,1,1,0,0]<br>        ],&#x2F;&#x2F;0<br>        [<br>            [0,0,0,1,1,0,0],<br>            [0,1,1,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [1,1,1,1,1,1,1]<br>        ],&#x2F;&#x2F;1<br>        [<br>            [0,1,1,1,1,1,0],<br>            [1,1,0,0,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,1,1,0,0,0],<br>            [0,1,1,0,0,0,0],<br>            [1,1,0,0,0,0,0],<br>            [1,1,0,0,0,1,1],<br>            [1,1,1,1,1,1,1]<br>        ],&#x2F;&#x2F;2<br>        [<br>            [1,1,1,1,1,1,1],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,1,1,1,0]<br>        ],&#x2F;&#x2F;3<br>        [<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,1,1,1,0],<br>            [0,0,1,1,1,1,0],<br>            [0,1,1,0,1,1,0],<br>            [1,1,0,0,1,1,0],<br>            [1,1,1,1,1,1,1],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,1,1,1,1]<br>        ],&#x2F;&#x2F;4<br>        [<br>            [1,1,1,1,1,1,1],<br>            [1,1,0,0,0,0,0],<br>            [1,1,0,0,0,0,0],<br>            [1,1,1,1,1,1,0],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,1,1,1,0]<br>        ],&#x2F;&#x2F;5<br>        [<br>            [0,0,0,0,1,1,0],<br>            [0,0,1,1,0,0,0],<br>            [0,1,1,0,0,0,0],<br>            [1,1,0,0,0,0,0],<br>            [1,1,0,1,1,1,0],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,1,1,1,0]<br>        ],&#x2F;&#x2F;6<br>        [<br>            [1,1,1,1,1,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,0,1,1,0,0],<br>            [0,0,1,1,0,0,0],<br>            [0,0,1,1,0,0,0],<br>            [0,0,1,1,0,0,0],<br>            [0,0,1,1,0,0,0]<br>        ],&#x2F;&#x2F;7<br>        [<br>            [0,1,1,1,1,1,0],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,1,1,1,0],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,1,1,1,0]<br>        ],&#x2F;&#x2F;8<br>        [<br>            [0,1,1,1,1,1,0],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [1,1,0,0,0,1,1],<br>            [0,1,1,1,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,0,1,1],<br>            [0,0,0,0,1,1,0],<br>            [0,0,0,1,1,0,0],<br>            [0,1,1,0,0,0,0]<br>        ],&#x2F;&#x2F;9<br>        [<br>            [0,0,0,0,0,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,0,0,0,0,0],<br>            [0,0,0,0,0,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,1,1,1,0,0],<br>            [0,0,0,0,0,0,0]<br>        ]&#x2F;&#x2F;:<br>    ];<br><br>var canvas &#x3D; document.getElementById(&#39;canvas&#39;);<br><br>if(canvas.getContext)&#123;<br>    var cxt &#x3D; canvas.getContext(&#39;2d&#39;);<br>    &#x2F;&#x2F;声明canvas的宽高<br>    var H &#x3D; 100,W &#x3D; 700;<br>    canvas.height &#x3D; H;<br>    canvas.width &#x3D; W;<br>    cxt.fillStyle &#x3D; &#39;#f00&#39;;<br>    cxt.fillRect(10,10,50,50);<br><br>    &#x2F;&#x2F;存储时间数据<br>    var data &#x3D; [];<br>    &#x2F;&#x2F;存储运动的小球<br>    var balls &#x3D; [];<br>    &#x2F;&#x2F;设置粒子半径<br>    var R &#x3D; canvas.height&#x2F;20-1;<br>    (function()&#123;<br>        var temp &#x3D; &#x2F;(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)&#x2F;.exec(new Date());<br>        &#x2F;&#x2F;存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成<br>        data.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);<br>    &#125;)();<br><br>    &#x2F;*生成点阵数字*&#x2F;<br>    function renderDigit(index,num)&#123;<br>        for(var i &#x3D; 0; i &lt; digit[num].length; i++)&#123;<br>            for(var j &#x3D; 0; j &lt; digit[num][i].length; j++)&#123;<br>                if(digit[num][i][j] &#x3D;&#x3D; 1)&#123;<br>                    cxt.beginPath();<br>                    cxt.arc(14*(R+2)*index + j*2*(R+1)+(R+1),i*2*(R+1)+(R+1),R,0,2*Math.PI);<br>                    cxt.closePath();<br>                    cxt.fill();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    &#x2F;*更新时钟*&#x2F;<br>    function updateDigitTime()&#123;<br>        var changeNumArray &#x3D; [];<br>        var temp &#x3D; &#x2F;(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)&#x2F;.exec(new Date());<br>        var NewData &#x3D; [];<br>        NewData.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);<br>        for(var i &#x3D; data.length-1; i &gt;&#x3D;0 ; i--)&#123;<br>            &#x2F;&#x2F;时间发生变化<br>            if(NewData[i] !&#x3D;&#x3D; data[i])&#123;<br>                &#x2F;&#x2F;将变化的数字值和在data数组中的索引存储在changeNumArray数组中<br>                changeNumArray.push(i+&#39;_&#39;+(Number(data[i])+1)%10);<br>            &#125;<br>        &#125;<br>        &#x2F;&#x2F;增加小球<br>        for(var i &#x3D; 0; i&lt; changeNumArray.length; i++)&#123;<br>            addBalls.apply(this,changeNumArray[i].split(&#39;_&#39;));<br>        &#125;<br>        data &#x3D; NewData.concat();<br>    &#125;<br><br>    &#x2F;*更新小球状态*&#x2F;<br>    function updateBalls()&#123;<br>        for(var i &#x3D; 0; i &lt; balls.length; i++)&#123;<br>            balls[i].stepY +&#x3D; balls[i].disY;<br>            balls[i].x +&#x3D; balls[i].stepX;<br>            balls[i].y +&#x3D; balls[i].stepY;<br>            if(balls[i].x &gt; W + R || balls[i].y &gt; H + R)&#123;<br>                balls.splice(i,1);<br>                i--;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    &#x2F;*增加要运动的小球*&#x2F;<br>    function addBalls(index,num)&#123;<br>        var numArray &#x3D; [1,2,3];<br>        var colorArray &#x3D;  [&quot;#3BE&quot;,&quot;#09C&quot;,&quot;#A6C&quot;,&quot;#93C&quot;,&quot;#9C0&quot;,&quot;#690&quot;,&quot;#FB3&quot;,&quot;#F80&quot;,&quot;#F44&quot;,&quot;#C00&quot;];<br>        for(var i &#x3D; 0; i &lt; digit[num].length; i++)&#123;<br>            for(var j &#x3D; 0; j &lt; digit[num][i].length; j++)&#123;<br>                if(digit[num][i][j] &#x3D;&#x3D; 1)&#123;<br>                    var ball &#x3D; &#123;<br>                        x:14*(R+2)*index + j*2*(R+1)+(R+1),<br>                        y:i*2*(R+1)+(R+1),<br>                        stepX:Math.floor(Math.random() * 4 -2),<br>                        stepY:-2*numArray[Math.floor(Math.random()*numArray.length)],<br>                        color:colorArray[Math.floor(Math.random()*colorArray.length)],<br>                        disY:1<br>                    &#125;;<br>                    balls.push(ball);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    &#x2F;*渲染*&#x2F;<br>    function render()&#123;<br>        &#x2F;&#x2F;重置画布宽度，达到清空画布的效果<br>        canvas.height &#x3D; 100;<br>        &#x2F;&#x2F;渲染时钟<br>        for(var i &#x3D; 0; i &lt; data.length; i++)&#123;<br>            renderDigit(i,data[i]);<br>        &#125;<br>        &#x2F;&#x2F;渲染小球<br>        for(var i &#x3D; 0; i &lt; balls.length; i++)&#123;<br>            cxt.beginPath();<br>            cxt.arc(balls[i].x,balls[i].y,R,0,2*Math.PI);<br>            cxt.fillStyle &#x3D; balls[i].color;<br>            cxt.closePath();<br>            cxt.fill();<br>        &#125;<br>    &#125;<br><br>    clearInterval(oTimer);<br>    var oTimer &#x3D; setInterval(function()&#123;<br>        &#x2F;&#x2F;更新时钟<br>        updateDigitTime();<br>        &#x2F;&#x2F;更新小球状态<br>        updateBalls();<br>        &#x2F;&#x2F;渲染<br>        render();<br>    &#125;,50);<br>&#125;<br><br>&#125;)();<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>引用代码</li>\n</ul>\n<p>直接引用或者通过配置文件配置，二选一</p>\n<ul>\n<li>直接引用</li>\n</ul>\n<p>在<code>博客目录\\themes\\next\\layout\\_macro\\sidebar.swig</code>尾部中引入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#123;% include &#39;..&#x2F;_custom&#x2F;clock.swig&#39; %&#125;<br></code></pre></td></tr></table></figure>\n<p>示意图如下：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5ub3MtZWFzdGNoaW5hMS4xMjYubmV0L2Jsb2cvYmxvZ19jbG9jay5wbmc?x-oss-process=image/format,png\" alt=\"img\"></p>\n<blockquote>\n<p>注：代码块要放置在<code>sider-inner</code>的<code>div</code>块中，放在<code>div</code>块的位置决定时钟样式的展示位置。我选择放置在尾部，看着效果好点。</p>\n</blockquote>\n<ul>\n<li>通过配置文件配置</li>\n</ul>\n<p>1、在<code>博客目录\\themes\\next\\layout\\_macro\\sidebar.swig</code>尾部中引入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#123;% if theme.diy_time.clock %&#125;<br>  &lt;!-- canvas粒子时钟 --&gt;<br>  &#123;% include &#39;..&#x2F;_custom&#x2F;clock.swig&#39; %&#125;<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure>\n<p>示意图如下：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5ub3MtZWFzdGNoaW5hMS4xMjYubmV0L2Jsb2cvYmxvZ19jbG9ja19pZi5wbmc?x-oss-process=image/format,png\" alt=\"img\"></p>\n<blockquote>\n<p>注：代码块要放置在<code>sider-inner</code>的<code>div</code>块中，放在<code>div</code>块的位置决定时钟样式的展示位置。</p>\n</blockquote>\n<p>2、在主题的配置文件中加入应用代码，配置文件位置是<code>博客目录\\themes\\next\\_config.yml</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># 侧栏粒子时钟<br>diy_time:<br>  runtime: true <br>  clock: true # 粒子时钟<br></code></pre></td></tr></table></figure>\n<h2 id=\"4-23-添加近期文章\"><a href=\"#4-23-添加近期文章\" class=\"headerlink\" title=\"4.23 添加近期文章\"></a>4.23 添加近期文章</h2><p>添加配置参数 <strong>~/theme/next/_config.yml</strong> ，添加如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">recent_posts:<br>  enable: true<br>  recent_posts_title: 最新发表文章<br></code></pre></td></tr></table></figure>\n<p>首先我们找到侧边栏模块 <strong>next/layout/_macro/sidebar.swig</strong> ,这个负责渲染侧边栏<br>在我们想要放置<strong>最新文章模块</strong>的地方添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">&#123;% if theme.recent_posts.enable %&#125;<br>  &lt;aside class&#x3D;&quot;sidebar sidebar-ads sidebar-posts&quot;&gt;<br>    &lt;div&gt;<br>      &lt;div class&#x3D;&quot;recent_posts_title&quot;&gt;<br>        &#123;&#123; theme.recent_posts.recent_posts_title &#125;&#125;<br>      &lt;&#x2F;div&gt;<br>      &lt;ul class&#x3D;&quot;links-of-blogroll-list&quot;&gt;<br>        &#123;% set posts &#x3D; site.posts.sort(&#39;-date&#39;) %&#125;<br>        &#123;% set bg_colors &#x3D; [&#39;rgb(31, 216, 210)&#39;, &#39;rgb(4, 166, 247)&#39;, &#39;rgb(70, 101, 226)&#39;, &#39;rgb(94, 137, 229)&#39;, &#39;rgb(0, 206, 123)&#39;] %&#125;<br>        &#123;% for post in posts.slice(&#39;0&#39;, &#39;5&#39;) %&#125;<br>          &lt;li&gt;<br>            &lt;div class&#x3D;&quot;text-img&quot; style&#x3D;&quot;background:&#123;&#123;bg_colors[loop.index - 1]&#125;&#125;;&quot;&gt;&#123;&#123; post.title.substr(0, 3) &#125;&#125;&lt;&#x2F;div&gt;<br>            &lt;div class&#x3D;&quot;post-name&quot;&gt;<br>              &lt;div&gt;&#123;&#123; date(post.date, config.date_format) &#125;&#125;&lt;&#x2F;div&gt;<br>              &lt;div&gt;&lt;a href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title&#x3D;&quot;&#123;&#123; post.title &#125;&#125;&quot; &gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;<br>            &lt;&#x2F;div&gt;<br>          &lt;&#x2F;li&gt;<br>        &#123;% endfor %&#125;<br>      &lt;&#x2F;ul&gt;<br>    &lt;&#x2F;div&gt;<br>  &lt;&#x2F;aside&gt;<br>  &#123;% endif %&#125;<br></code></pre></td></tr></table></figure>\n<p>最后重新执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">hexo clean<br>hexo g<br></code></pre></td></tr></table></figure>\n\n\n<p>最后我们得到的效果是</p>\n<h2 id=\"Google统计\"><a href=\"#Google统计\" class=\"headerlink\" title=\"Google统计\"></a>Google统计</h2><h2 id=\"Sitemap网站地图\"><a href=\"#Sitemap网站地图\" class=\"headerlink\" title=\"Sitemap网站地图\"></a>Sitemap网站地图</h2><h2 id=\"提交谷歌收录本站-Google-Search\"><a href=\"#提交谷歌收录本站-Google-Search\" class=\"headerlink\" title=\"提交谷歌收录本站 Google Search\"></a>提交谷歌收录本站 Google Search</h2><h2 id=\"文章阅读量统计\"><a href=\"#文章阅读量统计\" class=\"headerlink\" title=\"文章阅读量统计\"></a><a href=\"https://blog.csdn.net/weixin_39345384/article/details/80787998\">文章阅读量统计</a></h2><hr>\n<hr>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://mashirosorata.vicp.io/HEXO-NEXT主题个性化配置.html\">HEXO+NEXT主题个性化配置</a></li>\n<li><a href=\"https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html\">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a></li>\n<li><a href=\"https://juejin.im/post/5c45a503f265da616b10fe4e#heading-28\">[EasyHexo 专栏] #2 - 魔改 Next 不完全教程</a></li>\n<li><a href=\"https://blog.csdn.net/MasterAnt_D/article/details/56839222#t50\">基于Hexo+Node.js+github+coding搭建个人博客——进阶篇(从入门到入土)</a></li>\n<li><a href=\"http://www.shaoyance.com/2018/01/26/Hexo博客Next主题优化总结/\">Hexo博客Next主题优化总结</a></li>\n<li><a href=\"https://notes.doublemine.me/2015-10-21-为NexT主题添加文章阅读量统计功能.html\">为NexT主题添加文章阅读量统计功能</a></li>\n<li><a href=\"http://www.cduyzh.com/hexo-settings-3/\">2017年最新基于hexo搭建个人免费博客——自定义页面样式一</a></li>\n<li><a href=\"https://notes.doublemine.me/2015-06-29-Hexo添加文章时自动打开编辑器.html\">Hexo添加文章时自动打开编辑器</a></li>\n<li><a href=\"https://blog.yleao.com/2018/0901/hexo-next主题下的美化.html#next主题下点击侧边栏头像回到博客首页\">next主题下点击侧边栏头像回到博客首页</a></li>\n<li><a href=\"https://reuixiy.github.io/beautiful/share/2018/12/11/noto-serif-sc-added-on-google-fonts.html\">Google Fonts 已支持思源宋体！</a></li>\n<li><a href=\"https://www.bluelzy.com/articles/change_to_next_theme.html\">弃暗投明-Hexo更换next主题</a></li>\n<li><a href=\"https://www.feiwuuz.com.cn/archives/5483aa06.html\">hexo博客NEXT主题美化</a></li>\n<li><a href=\"http://chant00.com/2015/11/04/在hexo博客中插入图片，音乐，视屏，公式/\">在hexo博客中插入图片，音乐，视频</a></li>\n</ul>\n"},{"title":"待办事项","type":"post","description":"今日事，今日毕。","abbrlink":3858194484,"date":"2020-12-18T15:40:25.000Z","updated":"2020-12-18T15:50:34.143Z","comments":1,"keywords":null,"top_img":null,"mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"_content":"\n\n## 近期待办事项清单\n- [ ] 搭建博客：规范化历史文章","source":"_posts/todos.md","raw":"---\ntitle: 待办事项\ntype: post\ndescription: 今日事，今日毕。\nabbrlink: 3858194484\ndate: 2020-12-18 23:40:25\nupdated:\ncomments:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n\n\n## 近期待办事项清单\n- [ ] 搭建博客：规范化历史文章","slug":"todos","published":1,"_id":"ckiug86hz0001ioxc71v1bmu7","layout":"post","photos":[],"link":"","content":"<h2 id=\"近期待办事项清单\"><a href=\"#近期待办事项清单\" class=\"headerlink\" title=\"近期待办事项清单\"></a>近期待办事项清单</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 搭建博客：规范化历史文章</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"近期待办事项清单\"><a href=\"#近期待办事项清单\" class=\"headerlink\" title=\"近期待办事项清单\"></a>近期待办事项清单</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 搭建博客：规范化历史文章</li>\n</ul>\n"},{"title":"Docker之Redis Cluster搭建","abbrlink":41928529,"date":"2020-12-10T08:33:34.000Z","_content":"\n## 环境\n\nDocker 版本 19.03.8\n```\nMacBook-Pro-6:~ tanxinzheng$ docker -v\nDocker version 19.03.8, build afacb8b\n```\n\n## 搭建\n搭建的部署主要分为\n- 架构设计\n- 编写Docker Compose编排文件\n- 创建redis cluster配置文件\n- 启动服务容器\n- 创建Redis集群\n\n### 架构设计\nredis集群模式必须要有3个主节点3个从节点才能正常启动集群模式\n\n- 主节点端口：7000 | 7001 | 7002\n- 从节点端口：7003 | 7004 | 7005\n\n### Docker Compose\n为节省内存资源，主从节点都部署在单机实例中\n```\nversion: '2'\n\nservices:\n  cluster:\n    image: daocloud.io/redis\n    container_name: redis-cluster\n    # 添加该参数后服务后台运行后，容器不会自动退出\n    tty: true\n    restart: always\n    # linux环境下建议使用host模式\n    network_mode: host\n\n    volumes:\n      - ./data:/data\n      - ./config:/etc/redis  \n    ports:\n      - \"7000:7000\"\n      - \"7001:7001\"\n      - \"7002:7002\"\n      - \"7003:7003\"\n      - \"7004:7004\"\n      - \"7005:7005\"\n    ## 必须使用宿主机ip 作为集群总线ip，否则宿主机无法访问到容器内的redis集群ip \n    # 也可以加在配置文件中\n    #  --cluster-announce-ip 172.16.65.218 \n    command: \n      - /bin/bash \n      - -c \n      - |\n        redis-server /etc/redis/redis_cluster_7000.conf  --cluster-announce-ip 172.16.65.218 & \n        redis-server /etc/redis/redis_cluster_7001.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7002.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7003.conf  --cluster-announce-ip 172.16.65.218 & \n        redis-server /etc/redis/redis_cluster_7004.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7005.conf  --cluster-announce-ip 172.16.65.218 \n```\n### redis_700X.conf\n根据各端口修改配置中的端口号\n```\nport 7000\n# 绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1\nbind 0.0.0.0\n# 启用集群模式\ncluster-enabled yes\n# 集群节点文件\ncluster-config-file nodes_7000.conf\n# 指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录\ndir /data/7000/\n# 节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间\ncluster-node-timeout 5000\n# 集群广播ip\n#cluster-announce-ip 172.20.0.4\n#cluster-announce-port 7000\n# 开启AOF模式\nappendonly yes\n# 关闭保护模式\nprotected-mode no\n# 是否后台启动\ndaemonize no\n# pid file所在目录\npidfile /var/run/redis_7000.pid \n# 客户端访问密码\n# requirepass redis2020\n# 日志文件\nlogfile /var/log/redis_7001.log\n```\n\n## 启动Redis Cluster\n```\ndocker-compose up -d\n```\n\n### 创建Redis集群\n\n- 进入容器\n```\n$ docker exec -it redis-cluster /bin/bash\n```\n- 创建集群\n```\n$ redis-cli --cluster create 127.0.0.1:7000 \\\n                           127.0.0.1:7001 \\\n                           127.0.0.1:7002 \\\n                           127.0.0.1:7003 \\\n                           127.0.0.1:7004 \\\n                           127.0.0.1:7005 \\\n                           --cluster-replicas 1\n```\n\n## 查看集群状态\n\n### \n```\n## -c表示集群模式进入\nroot@docker-desktop:/data# redis-cli -c -h localhost -p 7000\n\n## 查看集群信息 cluster_state为ok则表示集群创建成功\nlocalhost:7000> cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:1\ncluster_current_epoch:6\ncluster_my_epoch:3\ncluster_stats_messages_ping_sent:5290\ncluster_stats_messages_pong_sent:5299\ncluster_stats_messages_update_sent:1\ncluster_stats_messages_sent:10590\ncluster_stats_messages_ping_received:5294\ncluster_stats_messages_pong_received:5290\ncluster_stats_messages_meet_received:5\ncluster_stats_messages_update_received:3\ncluster_stats_messages_received:10592\n\n## 查看集群节点信息\nlocalhost:7000> cluster nodes\n6b7f8c4767feb376a99e79068748253afcf6ea5a 127.0.0.1:7001@17001 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594235646 3 connected\n52b109a6491a2e4280b6a66642716939d0f46e89 127.0.0.1:7004@17004 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594236555 5 connected\ndf7dcbf82ecba0ff044f2715b052674e73ec1ca6 127.0.0.1:7000@17000 myself,slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594234000 1 connected\n51f5c9fb771a702933d8bc29fcd13eb41811e2bb 127.0.0.1:7005@17005 master - 0 1607594236000 6 connected\nef7fdf2421427d1da29da4c1dab9e8c26ca12854 127.0.0.1:7002@17002 master - 0 1607594236657 3 connected 0-16383\ncf7327c9ec3b374ebc6ba3f49c6bd5e0a7098601 127.0.0.1:7003@17003 master - 0 1607594235544 4 connected\n```\n\n## 参考\n- [1] [Redis Cluster](https://redis.io/topics/cluster-tutorial)","source":"_posts/技术/redis-cluster.md","raw":"---\ntitle: Docker之Redis Cluster搭建\ntags:\n  - redis\n  - cluster\n  - docker\n  - docker-compose\nabbrlink: 41928529\ndate: 2020-12-10 16:33:34\n---\n\n## 环境\n\nDocker 版本 19.03.8\n```\nMacBook-Pro-6:~ tanxinzheng$ docker -v\nDocker version 19.03.8, build afacb8b\n```\n\n## 搭建\n搭建的部署主要分为\n- 架构设计\n- 编写Docker Compose编排文件\n- 创建redis cluster配置文件\n- 启动服务容器\n- 创建Redis集群\n\n### 架构设计\nredis集群模式必须要有3个主节点3个从节点才能正常启动集群模式\n\n- 主节点端口：7000 | 7001 | 7002\n- 从节点端口：7003 | 7004 | 7005\n\n### Docker Compose\n为节省内存资源，主从节点都部署在单机实例中\n```\nversion: '2'\n\nservices:\n  cluster:\n    image: daocloud.io/redis\n    container_name: redis-cluster\n    # 添加该参数后服务后台运行后，容器不会自动退出\n    tty: true\n    restart: always\n    # linux环境下建议使用host模式\n    network_mode: host\n\n    volumes:\n      - ./data:/data\n      - ./config:/etc/redis  \n    ports:\n      - \"7000:7000\"\n      - \"7001:7001\"\n      - \"7002:7002\"\n      - \"7003:7003\"\n      - \"7004:7004\"\n      - \"7005:7005\"\n    ## 必须使用宿主机ip 作为集群总线ip，否则宿主机无法访问到容器内的redis集群ip \n    # 也可以加在配置文件中\n    #  --cluster-announce-ip 172.16.65.218 \n    command: \n      - /bin/bash \n      - -c \n      - |\n        redis-server /etc/redis/redis_cluster_7000.conf  --cluster-announce-ip 172.16.65.218 & \n        redis-server /etc/redis/redis_cluster_7001.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7002.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7003.conf  --cluster-announce-ip 172.16.65.218 & \n        redis-server /etc/redis/redis_cluster_7004.conf  --cluster-announce-ip 172.16.65.218 &\n        redis-server /etc/redis/redis_cluster_7005.conf  --cluster-announce-ip 172.16.65.218 \n```\n### redis_700X.conf\n根据各端口修改配置中的端口号\n```\nport 7000\n# 绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1\nbind 0.0.0.0\n# 启用集群模式\ncluster-enabled yes\n# 集群节点文件\ncluster-config-file nodes_7000.conf\n# 指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录\ndir /data/7000/\n# 节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间\ncluster-node-timeout 5000\n# 集群广播ip\n#cluster-announce-ip 172.20.0.4\n#cluster-announce-port 7000\n# 开启AOF模式\nappendonly yes\n# 关闭保护模式\nprotected-mode no\n# 是否后台启动\ndaemonize no\n# pid file所在目录\npidfile /var/run/redis_7000.pid \n# 客户端访问密码\n# requirepass redis2020\n# 日志文件\nlogfile /var/log/redis_7001.log\n```\n\n## 启动Redis Cluster\n```\ndocker-compose up -d\n```\n\n### 创建Redis集群\n\n- 进入容器\n```\n$ docker exec -it redis-cluster /bin/bash\n```\n- 创建集群\n```\n$ redis-cli --cluster create 127.0.0.1:7000 \\\n                           127.0.0.1:7001 \\\n                           127.0.0.1:7002 \\\n                           127.0.0.1:7003 \\\n                           127.0.0.1:7004 \\\n                           127.0.0.1:7005 \\\n                           --cluster-replicas 1\n```\n\n## 查看集群状态\n\n### \n```\n## -c表示集群模式进入\nroot@docker-desktop:/data# redis-cli -c -h localhost -p 7000\n\n## 查看集群信息 cluster_state为ok则表示集群创建成功\nlocalhost:7000> cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:1\ncluster_current_epoch:6\ncluster_my_epoch:3\ncluster_stats_messages_ping_sent:5290\ncluster_stats_messages_pong_sent:5299\ncluster_stats_messages_update_sent:1\ncluster_stats_messages_sent:10590\ncluster_stats_messages_ping_received:5294\ncluster_stats_messages_pong_received:5290\ncluster_stats_messages_meet_received:5\ncluster_stats_messages_update_received:3\ncluster_stats_messages_received:10592\n\n## 查看集群节点信息\nlocalhost:7000> cluster nodes\n6b7f8c4767feb376a99e79068748253afcf6ea5a 127.0.0.1:7001@17001 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594235646 3 connected\n52b109a6491a2e4280b6a66642716939d0f46e89 127.0.0.1:7004@17004 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594236555 5 connected\ndf7dcbf82ecba0ff044f2715b052674e73ec1ca6 127.0.0.1:7000@17000 myself,slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594234000 1 connected\n51f5c9fb771a702933d8bc29fcd13eb41811e2bb 127.0.0.1:7005@17005 master - 0 1607594236000 6 connected\nef7fdf2421427d1da29da4c1dab9e8c26ca12854 127.0.0.1:7002@17002 master - 0 1607594236657 3 connected 0-16383\ncf7327c9ec3b374ebc6ba3f49c6bd5e0a7098601 127.0.0.1:7003@17003 master - 0 1607594235544 4 connected\n```\n\n## 参考\n- [1] [Redis Cluster](https://redis.io/topics/cluster-tutorial)","slug":"技术/redis-cluster","published":1,"updated":"2020-12-18T15:04:43.624Z","_id":"ckiugbo1y0002ioxc54zo9775","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Docker 版本 19.03.8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">MacBook-Pro-6:~ tanxinzheng$ docker -v<br>Docker version 19.03.8, build afacb8b<br></code></pre></td></tr></table></figure>\n<h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><p>搭建的部署主要分为</p>\n<ul>\n<li>架构设计</li>\n<li>编写Docker Compose编排文件</li>\n<li>创建redis cluster配置文件</li>\n<li>启动服务容器</li>\n<li>创建Redis集群</li>\n</ul>\n<h3 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h3><p>redis集群模式必须要有3个主节点3个从节点才能正常启动集群模式</p>\n<ul>\n<li>主节点端口：7000 | 7001 | 7002</li>\n<li>从节点端口：7003 | 7004 | 7005</li>\n</ul>\n<h3 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h3><p>为节省内存资源，主从节点都部署在单机实例中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">version: &#39;2&#39;<br><br>services:<br>  cluster:<br>    image: daocloud.io&#x2F;redis<br>    container_name: redis-cluster<br>    # 添加该参数后服务后台运行后，容器不会自动退出<br>    tty: true<br>    restart: always<br>    # linux环境下建议使用host模式<br>    network_mode: host<br><br>    volumes:<br>      - .&#x2F;data:&#x2F;data<br>      - .&#x2F;config:&#x2F;etc&#x2F;redis  <br>    ports:<br>      - &quot;7000:7000&quot;<br>      - &quot;7001:7001&quot;<br>      - &quot;7002:7002&quot;<br>      - &quot;7003:7003&quot;<br>      - &quot;7004:7004&quot;<br>      - &quot;7005:7005&quot;<br>    ## 必须使用宿主机ip 作为集群总线ip，否则宿主机无法访问到容器内的redis集群ip <br>    # 也可以加在配置文件中<br>    #  --cluster-announce-ip 172.16.65.218 <br>    command: <br>      - &#x2F;bin&#x2F;bash <br>      - -c <br>      - |<br>        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7000.conf  --cluster-announce-ip 172.16.65.218 &amp; <br>        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7001.conf  --cluster-announce-ip 172.16.65.218 &amp;<br>        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7002.conf  --cluster-announce-ip 172.16.65.218 &amp;<br>        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7003.conf  --cluster-announce-ip 172.16.65.218 &amp; <br>        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7004.conf  --cluster-announce-ip 172.16.65.218 &amp;<br>        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7005.conf  --cluster-announce-ip 172.16.65.218 <br></code></pre></td></tr></table></figure>\n<h3 id=\"redis-700X-conf\"><a href=\"#redis-700X-conf\" class=\"headerlink\" title=\"redis_700X.conf\"></a>redis_700X.conf</h3><p>根据各端口修改配置中的端口号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">port 7000<br># 绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1<br>bind 0.0.0.0<br># 启用集群模式<br>cluster-enabled yes<br># 集群节点文件<br>cluster-config-file nodes_7000.conf<br># 指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录<br>dir &#x2F;data&#x2F;7000&#x2F;<br># 节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间<br>cluster-node-timeout 5000<br># 集群广播ip<br>#cluster-announce-ip 172.20.0.4<br>#cluster-announce-port 7000<br># 开启AOF模式<br>appendonly yes<br># 关闭保护模式<br>protected-mode no<br># 是否后台启动<br>daemonize no<br># pid file所在目录<br>pidfile &#x2F;var&#x2F;run&#x2F;redis_7000.pid <br># 客户端访问密码<br># requirepass redis2020<br># 日志文件<br>logfile &#x2F;var&#x2F;log&#x2F;redis_7001.log<br></code></pre></td></tr></table></figure>\n<h2 id=\"启动Redis-Cluster\"><a href=\"#启动Redis-Cluster\" class=\"headerlink\" title=\"启动Redis Cluster\"></a>启动Redis Cluster</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">docker-compose up -d<br></code></pre></td></tr></table></figure>\n<h3 id=\"创建Redis集群\"><a href=\"#创建Redis集群\" class=\"headerlink\" title=\"创建Redis集群\"></a>创建Redis集群</h3><ul>\n<li>进入容器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ docker exec -it redis-cluster &#x2F;bin&#x2F;bash<br></code></pre></td></tr></table></figure></li>\n<li>创建集群<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ redis-cli --cluster create 127.0.0.1:7000 \\<br>                           127.0.0.1:7001 \\<br>                           127.0.0.1:7002 \\<br>                           127.0.0.1:7003 \\<br>                           127.0.0.1:7004 \\<br>                           127.0.0.1:7005 \\<br>                           --cluster-replicas 1<br></code></pre></td></tr></table></figure>\n<h2 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h2></li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">## -c表示集群模式进入<br>root@docker-desktop:&#x2F;data# redis-cli -c -h localhost -p 7000<br><br>## 查看集群信息 cluster_state为ok则表示集群创建成功<br>localhost:7000&gt; cluster info<br>cluster_state:ok<br>cluster_slots_assigned:16384<br>cluster_slots_ok:16384<br>cluster_slots_pfail:0<br>cluster_slots_fail:0<br>cluster_known_nodes:6<br>cluster_size:1<br>cluster_current_epoch:6<br>cluster_my_epoch:3<br>cluster_stats_messages_ping_sent:5290<br>cluster_stats_messages_pong_sent:5299<br>cluster_stats_messages_update_sent:1<br>cluster_stats_messages_sent:10590<br>cluster_stats_messages_ping_received:5294<br>cluster_stats_messages_pong_received:5290<br>cluster_stats_messages_meet_received:5<br>cluster_stats_messages_update_received:3<br>cluster_stats_messages_received:10592<br><br>## 查看集群节点信息<br>localhost:7000&gt; cluster nodes<br>6b7f8c4767feb376a99e79068748253afcf6ea5a 127.0.0.1:7001@17001 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594235646 3 connected<br>52b109a6491a2e4280b6a66642716939d0f46e89 127.0.0.1:7004@17004 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594236555 5 connected<br>df7dcbf82ecba0ff044f2715b052674e73ec1ca6 127.0.0.1:7000@17000 myself,slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594234000 1 connected<br>51f5c9fb771a702933d8bc29fcd13eb41811e2bb 127.0.0.1:7005@17005 master - 0 1607594236000 6 connected<br>ef7fdf2421427d1da29da4c1dab9e8c26ca12854 127.0.0.1:7002@17002 master - 0 1607594236657 3 connected 0-16383<br>cf7327c9ec3b374ebc6ba3f49c6bd5e0a7098601 127.0.0.1:7003@17003 master - 0 1607594235544 4 connected<br></code></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>[1] <a href=\"https://redis.io/topics/cluster-tutorial\">Redis Cluster</a></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Docker 版本 19.03.8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">MacBook-Pro-6:~ tanxinzheng$ docker -v<br>Docker version 19.03.8, build afacb8b<br></code></pre></td></tr></table></figure>\n<h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><p>搭建的部署主要分为</p>\n<ul>\n<li>架构设计</li>\n<li>编写Docker Compose编排文件</li>\n<li>创建redis cluster配置文件</li>\n<li>启动服务容器</li>\n<li>创建Redis集群</li>\n</ul>\n<h3 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h3><p>redis集群模式必须要有3个主节点3个从节点才能正常启动集群模式</p>\n<ul>\n<li>主节点端口：7000 | 7001 | 7002</li>\n<li>从节点端口：7003 | 7004 | 7005</li>\n</ul>\n<h3 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h3><p>为节省内存资源，主从节点都部署在单机实例中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">version: &#39;2&#39;<br><br>services:<br>  cluster:<br>    image: daocloud.io&#x2F;redis<br>    container_name: redis-cluster<br>    # 添加该参数后服务后台运行后，容器不会自动退出<br>    tty: true<br>    restart: always<br>    # linux环境下建议使用host模式<br>    network_mode: host<br><br>    volumes:<br>      - .&#x2F;data:&#x2F;data<br>      - .&#x2F;config:&#x2F;etc&#x2F;redis  <br>    ports:<br>      - &quot;7000:7000&quot;<br>      - &quot;7001:7001&quot;<br>      - &quot;7002:7002&quot;<br>      - &quot;7003:7003&quot;<br>      - &quot;7004:7004&quot;<br>      - &quot;7005:7005&quot;<br>    ## 必须使用宿主机ip 作为集群总线ip，否则宿主机无法访问到容器内的redis集群ip <br>    # 也可以加在配置文件中<br>    #  --cluster-announce-ip 172.16.65.218 <br>    command: <br>      - &#x2F;bin&#x2F;bash <br>      - -c <br>      - |<br>        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7000.conf  --cluster-announce-ip 172.16.65.218 &amp; <br>        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7001.conf  --cluster-announce-ip 172.16.65.218 &amp;<br>        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7002.conf  --cluster-announce-ip 172.16.65.218 &amp;<br>        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7003.conf  --cluster-announce-ip 172.16.65.218 &amp; <br>        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7004.conf  --cluster-announce-ip 172.16.65.218 &amp;<br>        redis-server &#x2F;etc&#x2F;redis&#x2F;redis_cluster_7005.conf  --cluster-announce-ip 172.16.65.218 <br></code></pre></td></tr></table></figure>\n<h3 id=\"redis-700X-conf\"><a href=\"#redis-700X-conf\" class=\"headerlink\" title=\"redis_700X.conf\"></a>redis_700X.conf</h3><p>根据各端口修改配置中的端口号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">port 7000<br># 绑定机器的内网IP或者公网IP,一定要设置，不要用 127.0.0.1<br>bind 0.0.0.0<br># 启用集群模式<br>cluster-enabled yes<br># 集群节点文件<br>cluster-config-file nodes_7000.conf<br># 指定工作目录，rdb,aof持久化文件将会放在该目录下，不同实例一定要配置不同的工作目录<br>dir &#x2F;data&#x2F;7000&#x2F;<br># 节点宕机发现时间，可以理解为主节点宕机后从节点升级为主节点时间<br>cluster-node-timeout 5000<br># 集群广播ip<br>#cluster-announce-ip 172.20.0.4<br>#cluster-announce-port 7000<br># 开启AOF模式<br>appendonly yes<br># 关闭保护模式<br>protected-mode no<br># 是否后台启动<br>daemonize no<br># pid file所在目录<br>pidfile &#x2F;var&#x2F;run&#x2F;redis_7000.pid <br># 客户端访问密码<br># requirepass redis2020<br># 日志文件<br>logfile &#x2F;var&#x2F;log&#x2F;redis_7001.log<br></code></pre></td></tr></table></figure>\n<h2 id=\"启动Redis-Cluster\"><a href=\"#启动Redis-Cluster\" class=\"headerlink\" title=\"启动Redis Cluster\"></a>启动Redis Cluster</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">docker-compose up -d<br></code></pre></td></tr></table></figure>\n<h3 id=\"创建Redis集群\"><a href=\"#创建Redis集群\" class=\"headerlink\" title=\"创建Redis集群\"></a>创建Redis集群</h3><ul>\n<li>进入容器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ docker exec -it redis-cluster &#x2F;bin&#x2F;bash<br></code></pre></td></tr></table></figure></li>\n<li>创建集群<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ redis-cli --cluster create 127.0.0.1:7000 \\<br>                           127.0.0.1:7001 \\<br>                           127.0.0.1:7002 \\<br>                           127.0.0.1:7003 \\<br>                           127.0.0.1:7004 \\<br>                           127.0.0.1:7005 \\<br>                           --cluster-replicas 1<br></code></pre></td></tr></table></figure>\n<h2 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h2></li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">## -c表示集群模式进入<br>root@docker-desktop:&#x2F;data# redis-cli -c -h localhost -p 7000<br><br>## 查看集群信息 cluster_state为ok则表示集群创建成功<br>localhost:7000&gt; cluster info<br>cluster_state:ok<br>cluster_slots_assigned:16384<br>cluster_slots_ok:16384<br>cluster_slots_pfail:0<br>cluster_slots_fail:0<br>cluster_known_nodes:6<br>cluster_size:1<br>cluster_current_epoch:6<br>cluster_my_epoch:3<br>cluster_stats_messages_ping_sent:5290<br>cluster_stats_messages_pong_sent:5299<br>cluster_stats_messages_update_sent:1<br>cluster_stats_messages_sent:10590<br>cluster_stats_messages_ping_received:5294<br>cluster_stats_messages_pong_received:5290<br>cluster_stats_messages_meet_received:5<br>cluster_stats_messages_update_received:3<br>cluster_stats_messages_received:10592<br><br>## 查看集群节点信息<br>localhost:7000&gt; cluster nodes<br>6b7f8c4767feb376a99e79068748253afcf6ea5a 127.0.0.1:7001@17001 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594235646 3 connected<br>52b109a6491a2e4280b6a66642716939d0f46e89 127.0.0.1:7004@17004 slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594236555 5 connected<br>df7dcbf82ecba0ff044f2715b052674e73ec1ca6 127.0.0.1:7000@17000 myself,slave ef7fdf2421427d1da29da4c1dab9e8c26ca12854 0 1607594234000 1 connected<br>51f5c9fb771a702933d8bc29fcd13eb41811e2bb 127.0.0.1:7005@17005 master - 0 1607594236000 6 connected<br>ef7fdf2421427d1da29da4c1dab9e8c26ca12854 127.0.0.1:7002@17002 master - 0 1607594236657 3 connected 0-16383<br>cf7327c9ec3b374ebc6ba3f49c6bd5e0a7098601 127.0.0.1:7003@17003 master - 0 1607594235544 4 connected<br></code></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>[1] <a href=\"https://redis.io/topics/cluster-tutorial\">Redis Cluster</a></li>\n</ul>\n"},{"title":"【数据结构】八大数据结构简介","abbrlink":2827031203,"date":"2017-02-19T13:38:18.000Z","_content":"\n\n# 数据结构分类\n数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。\n常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：\n\n{% asset_img overview.png %}\n\n常见数据结构大致可分为三大类，如下所示\n- 线性表：顺序表、链表、栈和队列；\n- 树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；\n- 图存储结构\n\n## 优缺点对比表\n每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。\n\n<table>\n    <tr>\n        <td><b>数据结构</b></td>\n        <td><b>优点</b></td>\n        <td><b>缺点</b></td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n# 数组（Array）\n\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。\n\n    int[] data = new int[100]；\n    data[0]  = 1;\n\n## 优点\n- 按照索引查询元素速度快\n- 按照索引遍历数组方便\n\n## 缺点\n- 数组的大小固定后就无法扩容了\n- 数组只能存储一种类型的数据\n- 添加，删除的操作慢，因为要移动其他的元素。\n\n## 适用场景\n- 频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n# 栈（Stack）\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n{% asset_img stack.png %}\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n# 队列\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：\n{% asset_img queue.png %}\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n# 链表\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n{% asset_img linekdlist.jpg %}\n## 优点\n- 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n- 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；\n\n## 缺点\n- 因为含有大量的指针域，占用空间较大；\n- 查找元素需要遍历链表来查找，非常耗时。\n\n## 适用场景\n数据量较小，需要频繁增加，删除操作的场景\n\n# 树\n树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\n{% asset_img tree.png %}\n每个节点有零个或多个子节点；\n没有父节点的节点称为根节点；\n每一个非根节点有且只有一个父节点；\n除了根节点外，每个子节点可以分为多个不相交的子树；\n在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n- 即使某结点只有一个子树，也要区分左右子树。\n\n二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n> 二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉> 树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。\n\n# 散列表\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n{% asset_img hashtable.jpg %}\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：\n\n从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。\n\n哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。\n\n# 堆\n{% asset_img heap.jpg %}\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n# 图\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n按照顶点指向的方向可分为无向图和有向图：\n\n图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。\n","source":"_posts/技术/data-structure-overview.md","raw":"---\ntitle: 【数据结构】八大数据结构简介\ntags:\n  - 数据结构\n  - 算法\ncategories: \n    - 理.理论学习\nabbrlink: 2827031203\ndate: 2017-02-19 21:38:18\n---\n\n\n# 数据结构分类\n数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。\n常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：\n\n{% asset_img overview.png %}\n\n常见数据结构大致可分为三大类，如下所示\n- 线性表：顺序表、链表、栈和队列；\n- 树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；\n- 图存储结构\n\n## 优缺点对比表\n每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。\n\n<table>\n    <tr>\n        <td><b>数据结构</b></td>\n        <td><b>优点</b></td>\n        <td><b>缺点</b></td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n# 数组（Array）\n\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。\n\n    int[] data = new int[100]；\n    data[0]  = 1;\n\n## 优点\n- 按照索引查询元素速度快\n- 按照索引遍历数组方便\n\n## 缺点\n- 数组的大小固定后就无法扩容了\n- 数组只能存储一种类型的数据\n- 添加，删除的操作慢，因为要移动其他的元素。\n\n## 适用场景\n- 频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n# 栈（Stack）\n栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。\n{% asset_img stack.png %}\n栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。\n\n# 队列\n队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：\n{% asset_img queue.png %}\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\n\n# 链表\n链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。\n{% asset_img linekdlist.jpg %}\n## 优点\n- 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；\n- 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；\n\n## 缺点\n- 因为含有大量的指针域，占用空间较大；\n- 查找元素需要遍历链表来查找，非常耗时。\n\n## 适用场景\n数据量较小，需要频繁增加，删除操作的场景\n\n# 树\n树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\n{% asset_img tree.png %}\n每个节点有零个或多个子节点；\n没有父节点的节点称为根节点；\n每一个非根节点有且只有一个父节点；\n除了根节点外，每个子节点可以分为多个不相交的子树；\n在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。\n\n二叉树是树的特殊一种，具有如下特点：\n\n- 每个结点最多有两颗子树，结点的度最大为2。\n- 左子树和右子树是有顺序的，次序不能颠倒。\n- 即使某结点只有一个子树，也要区分左右子树。\n\n二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。\n\n> 二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉> 树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。\n\n# 散列表\n散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。\n{% asset_img hashtable.jpg %}\n记录的存储位置=f(key)\n\n这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。\n\n哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：\n\n从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。\n\n哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。\n\n# 堆\n{% asset_img heap.jpg %}\n堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：\n\n- 堆中某个节点的值总是不大于或不小于其父节点的值；\n- 堆总是一棵完全二叉树。\n\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。\n\n堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：\n\n因为堆有序的特点，一般用来做数组中的排序，称为堆排序。\n\n# 图\n图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\n\n按照顶点指向的方向可分为无向图和有向图：\n\n图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。\n","slug":"技术/data-structure-overview","published":1,"updated":"2020-12-19T05:47:28.153Z","_id":"ckiugc4ez0007ioxchy5h5vdj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"数据结构分类\"><a href=\"#数据结构分类\" class=\"headerlink\" title=\"数据结构分类\"></a>数据结构分类</h1><p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。<br>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：</p>\n\n\n<p>常见数据结构大致可分为三大类，如下所示</p>\n<ul>\n<li>线性表：顺序表、链表、栈和队列；</li>\n<li>树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；</li>\n<li>图存储结构</li>\n</ul>\n<h2 id=\"优缺点对比表\"><a href=\"#优缺点对比表\" class=\"headerlink\" title=\"优缺点对比表\"></a>优缺点对比表</h2><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p>\n<table>\n    <tr>\n        <td><b>数据结构</b></td>\n        <td><b>优点</b></td>\n        <td><b>缺点</b></td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n<h1 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h1><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\n<pre><code>int[] data = new int[100]；\ndata[0]  = 1;</code></pre><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>按照索引查询元素速度快</li>\n<li>按照索引遍历数组方便</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>数组的大小固定后就无法扩容了</li>\n<li>数组只能存储一种类型的数据</li>\n<li>添加，删除的操作慢，因为要移动其他的元素。</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>频繁查询，对存储空间要求不大，很少增加和删除的情况。</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p>\n\n<p>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</li>\n</ul>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ul>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>数据量较小，需要频繁增加，删除操作的场景</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>\n\n<p>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；<br>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。</p>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li>每个结点最多有两颗子树，结点的度最大为2。</li>\n<li>左子树和右子树是有顺序的，次序不能颠倒。</li>\n<li>即使某结点只有一个子树，也要区分左右子树。</li>\n</ul>\n<p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<blockquote>\n<p>二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉&gt; 树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p>\n</blockquote>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p>\n<p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>\n<p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1>\n<p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>按照顶点指向的方向可分为无向图和有向图：</p>\n<p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"数据结构分类\"><a href=\"#数据结构分类\" class=\"headerlink\" title=\"数据结构分类\"></a>数据结构分类</h1><p>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。<br>常用的数据结构有：数组，栈，链表，队列，树，图，堆，散列表等，如图所示：</p>\n\n\n<p>常见数据结构大致可分为三大类，如下所示</p>\n<ul>\n<li>线性表：顺序表、链表、栈和队列；</li>\n<li>树结构：二叉树，堆、线索二叉树、红黑树、B-Tree等；</li>\n<li>图存储结构</li>\n</ul>\n<h2 id=\"优缺点对比表\"><a href=\"#优缺点对比表\" class=\"headerlink\" title=\"优缺点对比表\"></a>优缺点对比表</h2><p>每一种数据结构都有着独特的数据存储方式，下面为大家介绍它们的结构和优缺点。</p>\n<table>\n    <tr>\n        <td><b>数据结构</b></td>\n        <td><b>优点</b></td>\n        <td><b>缺点</b></td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>插入快，如果知道下标，可以非常快的存取</td>\n        <td>查找慢，删除慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>有序数组</td>\n        <td>比无序的数组查找快</td>\n        <td>删除和插入慢，大小固定</td>\n    </tr>\n    <tr>\n        <td>栈</td>\n        <td>提供后进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>队列</td>\n        <td>提供先进先出方式的存取</td>\n        <td>存取其他项很慢</td>\n    </tr>\n    <tr>\n        <td>二叉树</td>\n        <td>查找，插入，删除都快（如果树保持平衡）</td>\n        <td>删除算法复杂</td>\n    </tr>\n    <tr>\n        <td>红-黑树</td>\n        <td>查找，插入，删除都快，树总是平衡的</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>2-3-4树</td>\n        <td>查找，插入，删除都快，树总是平衡的，类似的树对磁盘存储有用</td>\n        <td>算法复杂</td>\n    </tr>\n    <tr>\n        <td>哈希表</td>\n        <td>如果关键字已知则存取极快，插入快</td>\n        <td>删除慢，如果不知道关键词则存取很慢，对存储空间使用不充分</td>\n    </tr>\n    <tr>\n        <td>堆</td>\n        <td>插入删除快，对最大数据项的存取很快</td>\n        <td>对其他数据项存取慢</td>\n    </tr>\n    <tr>\n        <td>图</td>\n        <td>对现实世界建模</td>\n        <td>有些算法慢且复杂</td>\n    </tr>\n</table>\n\n<h1 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h1><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\n<pre><code>int[] data = new int[100]；\ndata[0]  = 1;</code></pre><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>按照索引查询元素速度快</li>\n<li>按照索引遍历数组方便</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>数组的大小固定后就无法扩容了</li>\n<li>数组只能存储一种类型的数据</li>\n<li>添加，删除的操作慢，因为要移动其他的元素。</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>频繁查询，对存储空间要求不大，很少增加和删除的情况。</li>\n</ul>\n<h1 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h1><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。</p>\n\n<p>栈的结构就像一个集装箱，越先放进去的东西越晚才能拿出来，所以，栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队，示例图如下：</p>\n\n<p>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。</p>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p>\n\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素；</li>\n<li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；</li>\n</ul>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>因为含有大量的指针域，占用空间较大；</li>\n<li>查找元素需要遍历链表来查找，非常耗时。</li>\n</ul>\n<h2 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>数据量较小，需要频繁增加，删除操作的场景</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>\n\n<p>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；<br>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。</p>\n<p>二叉树是树的特殊一种，具有如下特点：</p>\n<ul>\n<li>每个结点最多有两颗子树，结点的度最大为2。</li>\n<li>左子树和右子树是有顺序的，次序不能颠倒。</li>\n<li>即使某结点只有一个子树，也要区分左右子树。</li>\n</ul>\n<p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p>\n<blockquote>\n<p>二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉&gt; 树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p>\n</blockquote>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p>\n\n<p>记录的存储位置=f(key)</p>\n<p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p>\n<p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下：</p>\n<p>从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p>\n<p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1>\n<p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p>\n<ul>\n<li>堆中某个节点的值总是不大于或不小于其父节点的值；</li>\n<li>堆总是一棵完全二叉树。</li>\n</ul>\n<p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p>\n<p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p>\n<p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p>\n<p>按照顶点指向的方向可分为无向图和有向图：</p>\n<p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>\n"},{"title":"Linux之SSH免密登录","abbrlink":2578104319,"date":"2017-08-18T09:59:25.000Z","index_img":"/img/linux.jpeg","_content":"\n\n\n安装Linux/Ubuntu的阿里云ECS默认情况下是使用账号+密码通过SSH登录的，并且默认账户是root，所以这里难免会有安全隐患。\n因此这里记录一下：Linux/Ubuntu系统怎么设置普通用户（非root用户），本教程以admin用户为例，使用秘钥登录通过SSH登录远程服务器。\n\n# 本地端流程\n## 检查本地SSH Key\n检查本地是否已经存在SSH Key秘钥，输入下面的命令来检查本地是否已经存在秘钥，如果有下面结果则跳过该步，若没有那么接下来的步骤生成秘钥\n\n    $ ls -a ~/.ssh\n    .\t\t..\t\tauthorized_keys\tid_rsa\t\tid_rsa.pub\tknown_hosts\n\n## 生成本地SSH Key秘钥\n输入以下命令，默认会在相应路径下（~/.ssh）生成id_rsa和id_rsa.pub两个文件，如下面代码所示\n\n     # 注：若需要免密码登录则直接回车\n     ~$ ssh-keygen -t rsa -C \"your_email@example.com\"   \n     Enter file in which to save the key (/your_home_path/.ssh/id_rsa): \n     Enter passphrase (empty for no passphrase): \n     Enter same passphrase again: \n     Your identification has been saved in /your_home_path/.ssh/id_rsa.\n     Your public key has been saved in /your_home_path/.ssh/id_rsa.pub.\n     The key fingerprint is:\n     SHA256:YgZkAauw6YCWAWwvfiMgJ7zBGkVbFqgRxQ7hdet5nGY your_email@example.com\n     The key's randomart image is:\n     +---[RSA 2048]----+\n     |BO=++o           |\n     |Bo++. .          |\n     |oOo ..           |\n     |+==...o .        |\n     |X+.  o+ES        |\n     |=X + o+.         |\n     |.oX .            |\n     |..               |\n     |                 |\n     +----[SHA256]-----+\n\n# 服务器端流程\n创建普通用户\n使用root用户操作以下命令创建普通用户：\n## 创建用户并修改密码\n\n    useradd admin\n    passwd admin\n    vi /etc/sudoers                                 # 增加用户su身份，编辑sudoers文件\n    admin ALL=(ALL:ALL) ALL                         # 在最底部加入这一行，保存退出\n\n## 添加ssh key公钥配置\n使用root用户操作以下命令创建存储密钥的文件夹及文件\n> <font color=red>**注意：第三步是最重要的一步！！！**</font>\n\n     mkdir /home/admin/.ssh\n     chmod 700 /home/admin/.ssh                       \n     vi /home/admin/.ssh/authorized_keys            #创建authorized_keys文件，并将本地生成的id_rsa.pub的内容填入authorized_keys\n     chmod 600 /home/admin/.ssh/authorized_keys     #设置authorized_keys权限\n     chown -R admin:admin /home/admin/.ssh/         #修改用户组和用户所有权\n     systemctl stop sshd                            #暂停ssh服务\n     systemctl start sshd                           #启动ssh服务\n\n## 设置SSH登录安全配置（可选步骤）\n> **温馨提示：SSH登录安全配置建议，使用root用户操作以下命令**\n\n     # 编辑SSH配置文件 \n     vi /etc/ssh/sshd_config\n     PermitRootLogin no                             # 禁用root账号登录，该配置可不修改，避免特殊情况下需要用到root\n     PasswordAuthentication no                      # 禁用账号+密码登录\n     # 保存退出后，重启ssh服务\n     systemctl stop sshd\n     systemctl start sshd\n\n# 本地验证登录\n因为每次记ip很麻烦，推荐使用hosts映射ip，使用别名登录。\n## 添加远端ip别名\n\n    vi /etc/hosts\n    xxx.xxx.xxx.xxx   my-remote-server              # 添加远端ip及映射的别名：ip  别名\n\n## 验证ssh免密登录\n\n    ssh admin@xxx.xxx.xxx.xxx                       # ip远程登录\n    ssh admin@my-remote-server                      # 别名远程登录\n\n   \n\n\n","source":"_posts/技术/linux/Linux之SSH免密登录.md","raw":"---\ntitle: Linux之SSH免密登录\nabbrlink: 2578104319\ndate: 2017-08-18 17:59:25\nindex_img: /img/linux.jpeg\ntags: \n  - Linux\n---\n\n\n\n安装Linux/Ubuntu的阿里云ECS默认情况下是使用账号+密码通过SSH登录的，并且默认账户是root，所以这里难免会有安全隐患。\n因此这里记录一下：Linux/Ubuntu系统怎么设置普通用户（非root用户），本教程以admin用户为例，使用秘钥登录通过SSH登录远程服务器。\n\n# 本地端流程\n## 检查本地SSH Key\n检查本地是否已经存在SSH Key秘钥，输入下面的命令来检查本地是否已经存在秘钥，如果有下面结果则跳过该步，若没有那么接下来的步骤生成秘钥\n\n    $ ls -a ~/.ssh\n    .\t\t..\t\tauthorized_keys\tid_rsa\t\tid_rsa.pub\tknown_hosts\n\n## 生成本地SSH Key秘钥\n输入以下命令，默认会在相应路径下（~/.ssh）生成id_rsa和id_rsa.pub两个文件，如下面代码所示\n\n     # 注：若需要免密码登录则直接回车\n     ~$ ssh-keygen -t rsa -C \"your_email@example.com\"   \n     Enter file in which to save the key (/your_home_path/.ssh/id_rsa): \n     Enter passphrase (empty for no passphrase): \n     Enter same passphrase again: \n     Your identification has been saved in /your_home_path/.ssh/id_rsa.\n     Your public key has been saved in /your_home_path/.ssh/id_rsa.pub.\n     The key fingerprint is:\n     SHA256:YgZkAauw6YCWAWwvfiMgJ7zBGkVbFqgRxQ7hdet5nGY your_email@example.com\n     The key's randomart image is:\n     +---[RSA 2048]----+\n     |BO=++o           |\n     |Bo++. .          |\n     |oOo ..           |\n     |+==...o .        |\n     |X+.  o+ES        |\n     |=X + o+.         |\n     |.oX .            |\n     |..               |\n     |                 |\n     +----[SHA256]-----+\n\n# 服务器端流程\n创建普通用户\n使用root用户操作以下命令创建普通用户：\n## 创建用户并修改密码\n\n    useradd admin\n    passwd admin\n    vi /etc/sudoers                                 # 增加用户su身份，编辑sudoers文件\n    admin ALL=(ALL:ALL) ALL                         # 在最底部加入这一行，保存退出\n\n## 添加ssh key公钥配置\n使用root用户操作以下命令创建存储密钥的文件夹及文件\n> <font color=red>**注意：第三步是最重要的一步！！！**</font>\n\n     mkdir /home/admin/.ssh\n     chmod 700 /home/admin/.ssh                       \n     vi /home/admin/.ssh/authorized_keys            #创建authorized_keys文件，并将本地生成的id_rsa.pub的内容填入authorized_keys\n     chmod 600 /home/admin/.ssh/authorized_keys     #设置authorized_keys权限\n     chown -R admin:admin /home/admin/.ssh/         #修改用户组和用户所有权\n     systemctl stop sshd                            #暂停ssh服务\n     systemctl start sshd                           #启动ssh服务\n\n## 设置SSH登录安全配置（可选步骤）\n> **温馨提示：SSH登录安全配置建议，使用root用户操作以下命令**\n\n     # 编辑SSH配置文件 \n     vi /etc/ssh/sshd_config\n     PermitRootLogin no                             # 禁用root账号登录，该配置可不修改，避免特殊情况下需要用到root\n     PasswordAuthentication no                      # 禁用账号+密码登录\n     # 保存退出后，重启ssh服务\n     systemctl stop sshd\n     systemctl start sshd\n\n# 本地验证登录\n因为每次记ip很麻烦，推荐使用hosts映射ip，使用别名登录。\n## 添加远端ip别名\n\n    vi /etc/hosts\n    xxx.xxx.xxx.xxx   my-remote-server              # 添加远端ip及映射的别名：ip  别名\n\n## 验证ssh免密登录\n\n    ssh admin@xxx.xxx.xxx.xxx                       # ip远程登录\n    ssh admin@my-remote-server                      # 别名远程登录\n\n   \n\n\n","slug":"技术/linux/Linux之SSH免密登录","published":1,"updated":"2020-12-18T15:55:13.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiugespq000gioxc661a22em","content":"<p>安装Linux/Ubuntu的阿里云ECS默认情况下是使用账号+密码通过SSH登录的，并且默认账户是root，所以这里难免会有安全隐患。<br>因此这里记录一下：Linux/Ubuntu系统怎么设置普通用户（非root用户），本教程以admin用户为例，使用秘钥登录通过SSH登录远程服务器。</p>\n<h1 id=\"本地端流程\"><a href=\"#本地端流程\" class=\"headerlink\" title=\"本地端流程\"></a>本地端流程</h1><h2 id=\"检查本地SSH-Key\"><a href=\"#检查本地SSH-Key\" class=\"headerlink\" title=\"检查本地SSH Key\"></a>检查本地SSH Key</h2><p>检查本地是否已经存在SSH Key秘钥，输入下面的命令来检查本地是否已经存在秘钥，如果有下面结果则跳过该步，若没有那么接下来的步骤生成秘钥</p>\n<pre><code>$ ls -a ~/.ssh\n.        ..        authorized_keys    id_rsa        id_rsa.pub    known_hosts</code></pre><h2 id=\"生成本地SSH-Key秘钥\"><a href=\"#生成本地SSH-Key秘钥\" class=\"headerlink\" title=\"生成本地SSH Key秘钥\"></a>生成本地SSH Key秘钥</h2><p>输入以下命令，默认会在相应路径下（~/.ssh）生成id_rsa和id_rsa.pub两个文件，如下面代码所示</p>\n<pre><code># 注：若需要免密码登录则直接回车\n~$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;   \nEnter file in which to save the key (/your_home_path/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /your_home_path/.ssh/id_rsa.\nYour public key has been saved in /your_home_path/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:YgZkAauw6YCWAWwvfiMgJ7zBGkVbFqgRxQ7hdet5nGY your_email@example.com\nThe key&apos;s randomart image is:\n+---[RSA 2048]----+\n|BO=++o           |\n|Bo++. .          |\n|oOo ..           |\n|+==...o .        |\n|X+.  o+ES        |\n|=X + o+.         |\n|.oX .            |\n|..               |\n|                 |\n+----[SHA256]-----+</code></pre><h1 id=\"服务器端流程\"><a href=\"#服务器端流程\" class=\"headerlink\" title=\"服务器端流程\"></a>服务器端流程</h1><p>创建普通用户<br>使用root用户操作以下命令创建普通用户：</p>\n<h2 id=\"创建用户并修改密码\"><a href=\"#创建用户并修改密码\" class=\"headerlink\" title=\"创建用户并修改密码\"></a>创建用户并修改密码</h2><pre><code>useradd admin\npasswd admin\nvi /etc/sudoers                                 # 增加用户su身份，编辑sudoers文件\nadmin ALL=(ALL:ALL) ALL                         # 在最底部加入这一行，保存退出</code></pre><h2 id=\"添加ssh-key公钥配置\"><a href=\"#添加ssh-key公钥配置\" class=\"headerlink\" title=\"添加ssh key公钥配置\"></a>添加ssh key公钥配置</h2><p>使用root用户操作以下命令创建存储密钥的文件夹及文件</p>\n<blockquote>\n<p><font color=red><strong>注意：第三步是最重要的一步！！！</strong></font></p>\n</blockquote>\n<pre><code>mkdir /home/admin/.ssh\nchmod 700 /home/admin/.ssh                       \nvi /home/admin/.ssh/authorized_keys            #创建authorized_keys文件，并将本地生成的id_rsa.pub的内容填入authorized_keys\nchmod 600 /home/admin/.ssh/authorized_keys     #设置authorized_keys权限\nchown -R admin:admin /home/admin/.ssh/         #修改用户组和用户所有权\nsystemctl stop sshd                            #暂停ssh服务\nsystemctl start sshd                           #启动ssh服务</code></pre><h2 id=\"设置SSH登录安全配置（可选步骤）\"><a href=\"#设置SSH登录安全配置（可选步骤）\" class=\"headerlink\" title=\"设置SSH登录安全配置（可选步骤）\"></a>设置SSH登录安全配置（可选步骤）</h2><blockquote>\n<p><strong>温馨提示：SSH登录安全配置建议，使用root用户操作以下命令</strong></p>\n</blockquote>\n<pre><code># 编辑SSH配置文件 \nvi /etc/ssh/sshd_config\nPermitRootLogin no                             # 禁用root账号登录，该配置可不修改，避免特殊情况下需要用到root\nPasswordAuthentication no                      # 禁用账号+密码登录\n# 保存退出后，重启ssh服务\nsystemctl stop sshd\nsystemctl start sshd</code></pre><h1 id=\"本地验证登录\"><a href=\"#本地验证登录\" class=\"headerlink\" title=\"本地验证登录\"></a>本地验证登录</h1><p>因为每次记ip很麻烦，推荐使用hosts映射ip，使用别名登录。</p>\n<h2 id=\"添加远端ip别名\"><a href=\"#添加远端ip别名\" class=\"headerlink\" title=\"添加远端ip别名\"></a>添加远端ip别名</h2><pre><code>vi /etc/hosts\nxxx.xxx.xxx.xxx   my-remote-server              # 添加远端ip及映射的别名：ip  别名</code></pre><h2 id=\"验证ssh免密登录\"><a href=\"#验证ssh免密登录\" class=\"headerlink\" title=\"验证ssh免密登录\"></a>验证ssh免密登录</h2><pre><code>ssh admin@xxx.xxx.xxx.xxx                       # ip远程登录\nssh admin@my-remote-server                      # 别名远程登录</code></pre>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p>安装Linux/Ubuntu的阿里云ECS默认情况下是使用账号+密码通过SSH登录的，并且默认账户是root，所以这里难免会有安全隐患。<br>因此这里记录一下：Linux/Ubuntu系统怎么设置普通用户（非root用户），本教程以admin用户为例，使用秘钥登录通过SSH登录远程服务器。</p>\n<h1 id=\"本地端流程\"><a href=\"#本地端流程\" class=\"headerlink\" title=\"本地端流程\"></a>本地端流程</h1><h2 id=\"检查本地SSH-Key\"><a href=\"#检查本地SSH-Key\" class=\"headerlink\" title=\"检查本地SSH Key\"></a>检查本地SSH Key</h2><p>检查本地是否已经存在SSH Key秘钥，输入下面的命令来检查本地是否已经存在秘钥，如果有下面结果则跳过该步，若没有那么接下来的步骤生成秘钥</p>\n<pre><code>$ ls -a ~/.ssh\n.        ..        authorized_keys    id_rsa        id_rsa.pub    known_hosts</code></pre><h2 id=\"生成本地SSH-Key秘钥\"><a href=\"#生成本地SSH-Key秘钥\" class=\"headerlink\" title=\"生成本地SSH Key秘钥\"></a>生成本地SSH Key秘钥</h2><p>输入以下命令，默认会在相应路径下（~/.ssh）生成id_rsa和id_rsa.pub两个文件，如下面代码所示</p>\n<pre><code># 注：若需要免密码登录则直接回车\n~$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;   \nEnter file in which to save the key (/your_home_path/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /your_home_path/.ssh/id_rsa.\nYour public key has been saved in /your_home_path/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:YgZkAauw6YCWAWwvfiMgJ7zBGkVbFqgRxQ7hdet5nGY your_email@example.com\nThe key&apos;s randomart image is:\n+---[RSA 2048]----+\n|BO=++o           |\n|Bo++. .          |\n|oOo ..           |\n|+==...o .        |\n|X+.  o+ES        |\n|=X + o+.         |\n|.oX .            |\n|..               |\n|                 |\n+----[SHA256]-----+</code></pre><h1 id=\"服务器端流程\"><a href=\"#服务器端流程\" class=\"headerlink\" title=\"服务器端流程\"></a>服务器端流程</h1><p>创建普通用户<br>使用root用户操作以下命令创建普通用户：</p>\n<h2 id=\"创建用户并修改密码\"><a href=\"#创建用户并修改密码\" class=\"headerlink\" title=\"创建用户并修改密码\"></a>创建用户并修改密码</h2><pre><code>useradd admin\npasswd admin\nvi /etc/sudoers                                 # 增加用户su身份，编辑sudoers文件\nadmin ALL=(ALL:ALL) ALL                         # 在最底部加入这一行，保存退出</code></pre><h2 id=\"添加ssh-key公钥配置\"><a href=\"#添加ssh-key公钥配置\" class=\"headerlink\" title=\"添加ssh key公钥配置\"></a>添加ssh key公钥配置</h2><p>使用root用户操作以下命令创建存储密钥的文件夹及文件</p>\n<blockquote>\n<p><font color=red><strong>注意：第三步是最重要的一步！！！</strong></font></p>\n</blockquote>\n<pre><code>mkdir /home/admin/.ssh\nchmod 700 /home/admin/.ssh                       \nvi /home/admin/.ssh/authorized_keys            #创建authorized_keys文件，并将本地生成的id_rsa.pub的内容填入authorized_keys\nchmod 600 /home/admin/.ssh/authorized_keys     #设置authorized_keys权限\nchown -R admin:admin /home/admin/.ssh/         #修改用户组和用户所有权\nsystemctl stop sshd                            #暂停ssh服务\nsystemctl start sshd                           #启动ssh服务</code></pre><h2 id=\"设置SSH登录安全配置（可选步骤）\"><a href=\"#设置SSH登录安全配置（可选步骤）\" class=\"headerlink\" title=\"设置SSH登录安全配置（可选步骤）\"></a>设置SSH登录安全配置（可选步骤）</h2><blockquote>\n<p><strong>温馨提示：SSH登录安全配置建议，使用root用户操作以下命令</strong></p>\n</blockquote>\n<pre><code># 编辑SSH配置文件 \nvi /etc/ssh/sshd_config\nPermitRootLogin no                             # 禁用root账号登录，该配置可不修改，避免特殊情况下需要用到root\nPasswordAuthentication no                      # 禁用账号+密码登录\n# 保存退出后，重启ssh服务\nsystemctl stop sshd\nsystemctl start sshd</code></pre><h1 id=\"本地验证登录\"><a href=\"#本地验证登录\" class=\"headerlink\" title=\"本地验证登录\"></a>本地验证登录</h1><p>因为每次记ip很麻烦，推荐使用hosts映射ip，使用别名登录。</p>\n<h2 id=\"添加远端ip别名\"><a href=\"#添加远端ip别名\" class=\"headerlink\" title=\"添加远端ip别名\"></a>添加远端ip别名</h2><pre><code>vi /etc/hosts\nxxx.xxx.xxx.xxx   my-remote-server              # 添加远端ip及映射的别名：ip  别名</code></pre><h2 id=\"验证ssh免密登录\"><a href=\"#验证ssh免密登录\" class=\"headerlink\" title=\"验证ssh免密登录\"></a>验证ssh免密登录</h2><pre><code>ssh admin@xxx.xxx.xxx.xxx                       # ip远程登录\nssh admin@my-remote-server                      # 别名远程登录</code></pre>"},{"title":"linux与k8s的区别","abbrlink":2578104314,"date":"2017-08-18T09:59:25.000Z","index_img":"./img/docker.png","_content":"\n# [10分钟看懂Docker和K8S](https://www.cnblogs.com/itbsl/p/10178698.html)\n\n**本文来源：鲜枣课堂**\n\n2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。\n\n![img](../../img/720430-20181226134250810-1685533200.png)\n\n这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。\n\n![img](../../img/720430-20181226134259735-1931086473.png)\n\nLXC，就是Linux容器虚拟技术（Linux container）\n\n后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。\n\n![img](../../img/720430-20181226134308841-1109691453.png)\n\nDocker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。\n\n正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。\n\n什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。\n\n![img](../../img/720430-20181226134321094-1025894099.png)\n\nOpen Source，开源\n\n有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。\n\n2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134409452-99479785.png)\n\nSolomon Hykes（今年刚从Docker离职）\n\n不开则已，一开惊人。\n\n越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。\n\nDocker的人气迅速攀升，速度之快，令人瞠目结舌。\n\n开源当月，Docker 0.1版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0版本正式发布。\n\n此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。\n\nDocker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc.。\n\nDocker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。\n\n在容器技术之前，业界的网红是虚拟机。**虚拟机**技术的代表，是**VMWare**和**OpenStack**。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134345971-148194642.png)\n\n相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134357583-1178315643.png)\n\n虚拟机，类似于“子电脑”\n\n在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是**相互隔离**的，互不影响。\n\n虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于**轻量级的虚拟化**。\n\n虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。\n\n而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134422660-219996811.png)\n\n沙箱\n\n它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134430830-648875754.png)\n\n容器和虚拟机的对比\n\n正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。\n\n我们具体来看看Docker。\n\n大家需要注意，**Docker本身并不是容器**，它是创建容器的工具，是应用容器引擎。\n\n想要搞懂Docker，其实看它的两句口号就行。\n\n第一句，是“**Build, Ship and Run**”。\n\n![img](linux%E4%B8%8Ek8s%E7%9A%84%E5%8C%BA%E5%88%AB.assets/720430-20181226134440039-355719052.png)\n\n也就是，“搭建、发送、运行”，三板斧。\n\n举个例子：\n\n我来到一片空地，想建个房子，于是我搬石头、砍木头、画图纸，一顿操作，终于把这个房子盖好了。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134448189-1614413776.png)\n\n结果，我住了一段时间，想搬到另一片空地去。这时候，按以往的办法，我只能再次搬石头、砍木头、画图纸、盖房子。\n\n但是，跑来一个老巫婆，教会我一种魔法。\n\n这种魔法，可以把我盖好的房子复制一份，做成“镜像”，放在我的背包里。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134458048-1632935313.png)\n\n等我到了另一片空地，就用这个“镜像”，复制一套房子，摆在那边，拎包入住。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134507695-502496013.png)\n\n怎么样？是不是很神奇？\n\n所以，Docker的第二句口号就是：“**Build once，Run anywhere（搭建一次，到处能用）**”。\n\nDocker技术的三大核心概念，分别是：\n\n- **镜像（Image）**\n- **容器（Container）**\n- **仓库（Repository）**\n\n我刚才例子里面，那个放在包里的“镜像”，就是**Docker镜像**。而我的背包，就是**Docker仓库**。我在空地上，用魔法造好的房子，就是一个**Docker容器**。\n\n说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。\n\n也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。\n\n每一个镜像可以变出一种房子。那么，我可以有多个镜像呀！\n\n也就是说，我盖了一个欧式别墅，生成了镜像。另一个哥们可能盖了一个中国四合院，也生成了镜像。还有哥们，盖了一个非洲茅草屋，也生成了镜像。。。\n\n这么一来，我们可以交换镜像，你用我的，我用你的，岂不是很爽？\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134517561-1517184540.png)\n\n于是乎，就变成了一个大的公共仓库。\n\n负责对Docker镜像进行管理的，是**Docker Registry服务**（类似仓库管理员）。\n\n不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？\n\n所以，Docker Registry服务对镜像的管理是非常严格的。\n\n最常使用的Registry公开服务，是官方的**Docker Hub**，这也是默认的Registry，并拥有大量的高质量的官方镜像。\n\n好了，说完了Docker，我们再把目光转向K8S。\n\n就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。\n\n就在这个时候，K8S出现了。\n\n**K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。**\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134529220-885595947.png)\n\nKubernetes这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。\n\n和Docker不同，K8S的创造者，是众人皆知的行业巨头——**Google**。\n\n然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的**Borg系统**。\n\nK8S是2014年6月由Google公司正式公布出来并宣布开源的。\n\n同年7月，微软、Red Hat、IBM、Docker、CoreOS、Mesosphere和Saltstack等公司，相继加入K8S。\n\n之后的一年内，VMware、HP、Intel等公司，也陆续加入。\n\n2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。\n\n目前，kubernetes的版本已经发展到V1.13。\n\nK8S的架构，略微有一点复杂，我们简单来看一下。\n\n一个K8S系统，通常称为一个**K8S集群（Cluster）**。\n\n这个集群主要包括两个部分：\n\n- **一个Master节点（主节点）**\n- **一群Node节点（计算节点）**\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134539670-1577644922.png)\n\n一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。\n\n深入来看这两种节点。\n\n首先是**Master节点。**\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134549651-376208258.png)\n\nMaster节点包括API Server、Scheduler、Controller manager、etcd。\n\nAPI Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。\n\nScheduler负责对集群内部的资源进行调度，相当于“调度室”。\n\nController manager负责管理控制器，相当于“大总管”。\n\n然后是**Node节点**。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134600202-626807958.png)\n\nNode节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是**Pod**。\n\n> Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。这段不太好理解，跳过吧。\n\nDocker，不用说了，创建容器的。\n\nKubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。\n\nKube-proxy，主要负责为Pod对象提供代理。\n\nFluentd，主要负责日志收集、存储与查询。\n\n是不是有点懵？唉，三言两语真的很难讲清楚，继续跳过吧。\n\nDocker和K8S都介绍完了，然而文章并没有结束。\n\n接下来的部分，是**写给核心网工程师甚至所有通信工程师看的**。\n\n从几十年前的1G，到现在的4G，再到将来的5G，移动通信发生了翻天覆地的变化，核心网亦是如此。\n\n但是，如果你仔细洞察这些变化，会发现，所谓的核心网，其实本质上并没有发生改变，无非就是很多的服务器而已。不同的核心网网元，就是不同的服务器，不同的计算节点。\n\n变化的，是这些“服务器”的形态和接口：形态，从机柜单板，变成机柜刀片，从机柜刀片，变成X86通用刀片服务器；接口，从中继线缆，变成网线，从网线，变成光纤。\n\n就算变来变去，还是服务器，是计算节点，是CPU。\n\n既然是服务器，那么就势必会和IT云计算一样，走上虚拟化的道路。毕竟，虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度，等等。\n\n前几年，大家以为虚拟机是核心网的终极形态。目前看来，更有可能是**容器化**。这几年经常说的NFV（网元功能虚拟化），也有可能改口为NFC（网元功能容器化）。\n\n以VoLTE为例，如果按以前2G/3G的方式，那需要大量的专用设备，分别充当EPC和IMS的不同网元。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134611008-1358657705.png)\n\nVoLTE相关的网元\n\n而采用容器之后，很可能只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同网元的服务程序。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134621637-1646543877.png)\n\n这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。\n\n简直完美！\n\n5G时代，核心网采用微服务架构，也是和容器完美搭配——单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型。每个专能型，分配给一个隔离的容器，赋予了最大程度的灵活。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134635090-835720705.png)\n\n精细化分工\n\n按照这样的发展趋势，在移动通信系统中，除了天线，剩下的部分都有可能虚拟化。核心网是第一个，但不是最后一个。虚拟化之后的核心网，与其说属于通信，实际上更应该归为IT。核心网的功能，只是容器中普通一个软件功能而已。\n\n至于说在座的各位核心网工程师，恭喜你们，马上就要成功转型啦！","source":"_posts/技术/linux/linux与k8s的区别.md","raw":"---\ntitle: linux与k8s的区别\nabbrlink: 2578104314\ndate: 2017-08-18 17:59:25\nindex_img: ./img/docker.png\ntags: \n  - Docker\n---\n\n# [10分钟看懂Docker和K8S](https://www.cnblogs.com/itbsl/p/10178698.html)\n\n**本文来源：鲜枣课堂**\n\n2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。\n\n![img](../../img/720430-20181226134250810-1685533200.png)\n\n这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。\n\n![img](../../img/720430-20181226134259735-1931086473.png)\n\nLXC，就是Linux容器虚拟技术（Linux container）\n\n后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。\n\n![img](../../img/720430-20181226134308841-1109691453.png)\n\nDocker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。\n\n正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。\n\n什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。\n\n![img](../../img/720430-20181226134321094-1025894099.png)\n\nOpen Source，开源\n\n有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。\n\n2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134409452-99479785.png)\n\nSolomon Hykes（今年刚从Docker离职）\n\n不开则已，一开惊人。\n\n越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。\n\nDocker的人气迅速攀升，速度之快，令人瞠目结舌。\n\n开源当月，Docker 0.1版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0版本正式发布。\n\n此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。\n\nDocker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc.。\n\nDocker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。\n\n在容器技术之前，业界的网红是虚拟机。**虚拟机**技术的代表，是**VMWare**和**OpenStack**。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134345971-148194642.png)\n\n相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134357583-1178315643.png)\n\n虚拟机，类似于“子电脑”\n\n在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是**相互隔离**的，互不影响。\n\n虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于**轻量级的虚拟化**。\n\n虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。\n\n而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134422660-219996811.png)\n\n沙箱\n\n它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134430830-648875754.png)\n\n容器和虚拟机的对比\n\n正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。\n\n我们具体来看看Docker。\n\n大家需要注意，**Docker本身并不是容器**，它是创建容器的工具，是应用容器引擎。\n\n想要搞懂Docker，其实看它的两句口号就行。\n\n第一句，是“**Build, Ship and Run**”。\n\n![img](linux%E4%B8%8Ek8s%E7%9A%84%E5%8C%BA%E5%88%AB.assets/720430-20181226134440039-355719052.png)\n\n也就是，“搭建、发送、运行”，三板斧。\n\n举个例子：\n\n我来到一片空地，想建个房子，于是我搬石头、砍木头、画图纸，一顿操作，终于把这个房子盖好了。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134448189-1614413776.png)\n\n结果，我住了一段时间，想搬到另一片空地去。这时候，按以往的办法，我只能再次搬石头、砍木头、画图纸、盖房子。\n\n但是，跑来一个老巫婆，教会我一种魔法。\n\n这种魔法，可以把我盖好的房子复制一份，做成“镜像”，放在我的背包里。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134458048-1632935313.png)\n\n等我到了另一片空地，就用这个“镜像”，复制一套房子，摆在那边，拎包入住。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134507695-502496013.png)\n\n怎么样？是不是很神奇？\n\n所以，Docker的第二句口号就是：“**Build once，Run anywhere（搭建一次，到处能用）**”。\n\nDocker技术的三大核心概念，分别是：\n\n- **镜像（Image）**\n- **容器（Container）**\n- **仓库（Repository）**\n\n我刚才例子里面，那个放在包里的“镜像”，就是**Docker镜像**。而我的背包，就是**Docker仓库**。我在空地上，用魔法造好的房子，就是一个**Docker容器**。\n\n说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。\n\n也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。\n\n每一个镜像可以变出一种房子。那么，我可以有多个镜像呀！\n\n也就是说，我盖了一个欧式别墅，生成了镜像。另一个哥们可能盖了一个中国四合院，也生成了镜像。还有哥们，盖了一个非洲茅草屋，也生成了镜像。。。\n\n这么一来，我们可以交换镜像，你用我的，我用你的，岂不是很爽？\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134517561-1517184540.png)\n\n于是乎，就变成了一个大的公共仓库。\n\n负责对Docker镜像进行管理的，是**Docker Registry服务**（类似仓库管理员）。\n\n不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？\n\n所以，Docker Registry服务对镜像的管理是非常严格的。\n\n最常使用的Registry公开服务，是官方的**Docker Hub**，这也是默认的Registry，并拥有大量的高质量的官方镜像。\n\n好了，说完了Docker，我们再把目光转向K8S。\n\n就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。\n\n就在这个时候，K8S出现了。\n\n**K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。**\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134529220-885595947.png)\n\nKubernetes这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。\n\n和Docker不同，K8S的创造者，是众人皆知的行业巨头——**Google**。\n\n然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的**Borg系统**。\n\nK8S是2014年6月由Google公司正式公布出来并宣布开源的。\n\n同年7月，微软、Red Hat、IBM、Docker、CoreOS、Mesosphere和Saltstack等公司，相继加入K8S。\n\n之后的一年内，VMware、HP、Intel等公司，也陆续加入。\n\n2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。\n\n目前，kubernetes的版本已经发展到V1.13。\n\nK8S的架构，略微有一点复杂，我们简单来看一下。\n\n一个K8S系统，通常称为一个**K8S集群（Cluster）**。\n\n这个集群主要包括两个部分：\n\n- **一个Master节点（主节点）**\n- **一群Node节点（计算节点）**\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134539670-1577644922.png)\n\n一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。\n\n深入来看这两种节点。\n\n首先是**Master节点。**\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134549651-376208258.png)\n\nMaster节点包括API Server、Scheduler、Controller manager、etcd。\n\nAPI Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。\n\nScheduler负责对集群内部的资源进行调度，相当于“调度室”。\n\nController manager负责管理控制器，相当于“大总管”。\n\n然后是**Node节点**。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134600202-626807958.png)\n\nNode节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是**Pod**。\n\n> Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。这段不太好理解，跳过吧。\n\nDocker，不用说了，创建容器的。\n\nKubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。\n\nKube-proxy，主要负责为Pod对象提供代理。\n\nFluentd，主要负责日志收集、存储与查询。\n\n是不是有点懵？唉，三言两语真的很难讲清楚，继续跳过吧。\n\nDocker和K8S都介绍完了，然而文章并没有结束。\n\n接下来的部分，是**写给核心网工程师甚至所有通信工程师看的**。\n\n从几十年前的1G，到现在的4G，再到将来的5G，移动通信发生了翻天覆地的变化，核心网亦是如此。\n\n但是，如果你仔细洞察这些变化，会发现，所谓的核心网，其实本质上并没有发生改变，无非就是很多的服务器而已。不同的核心网网元，就是不同的服务器，不同的计算节点。\n\n变化的，是这些“服务器”的形态和接口：形态，从机柜单板，变成机柜刀片，从机柜刀片，变成X86通用刀片服务器；接口，从中继线缆，变成网线，从网线，变成光纤。\n\n就算变来变去，还是服务器，是计算节点，是CPU。\n\n既然是服务器，那么就势必会和IT云计算一样，走上虚拟化的道路。毕竟，虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度，等等。\n\n前几年，大家以为虚拟机是核心网的终极形态。目前看来，更有可能是**容器化**。这几年经常说的NFV（网元功能虚拟化），也有可能改口为NFC（网元功能容器化）。\n\n以VoLTE为例，如果按以前2G/3G的方式，那需要大量的专用设备，分别充当EPC和IMS的不同网元。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134611008-1358657705.png)\n\nVoLTE相关的网元\n\n而采用容器之后，很可能只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同网元的服务程序。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134621637-1646543877.png)\n\n这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。\n\n简直完美！\n\n5G时代，核心网采用微服务架构，也是和容器完美搭配——单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型。每个专能型，分配给一个隔离的容器，赋予了最大程度的灵活。\n\n![img](https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134635090-835720705.png)\n\n精细化分工\n\n按照这样的发展趋势，在移动通信系统中，除了天线，剩下的部分都有可能虚拟化。核心网是第一个，但不是最后一个。虚拟化之后的核心网，与其说属于通信，实际上更应该归为IT。核心网的功能，只是容器中普通一个软件功能而已。\n\n至于说在座的各位核心网工程师，恭喜你们，马上就要成功转型啦！","slug":"技术/linux/linux与k8s的区别","published":1,"updated":"2020-12-18T15:55:13.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiugespr000hioxc8rpi2vg6","content":"<h1 id=\"10分钟看懂Docker和K8S\"><a href=\"#10分钟看懂Docker和K8S\" class=\"headerlink\" title=\"10分钟看懂Docker和K8S\"></a><a href=\"https://www.cnblogs.com/itbsl/p/10178698.html\">10分钟看懂Docker和K8S</a></h1><p><strong>本文来源：鲜枣课堂</strong></p>\n<p>2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。</p>\n<p><img src=\"../../img/720430-20181226134250810-1685533200.png\" alt=\"img\"></p>\n<p>这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。</p>\n<p><img src=\"../../img/720430-20181226134259735-1931086473.png\" alt=\"img\"></p>\n<p>LXC，就是Linux容器虚拟技术（Linux container）</p>\n<p>后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。</p>\n<p><img src=\"../../img/720430-20181226134308841-1109691453.png\" alt=\"img\"></p>\n<p>Docker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。</p>\n<p>正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。</p>\n<p>什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。</p>\n<p><img src=\"../../img/720430-20181226134321094-1025894099.png\" alt=\"img\"></p>\n<p>Open Source，开源</p>\n<p>有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。</p>\n<p>2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134409452-99479785.png\" alt=\"img\"></p>\n<p>Solomon Hykes（今年刚从Docker离职）</p>\n<p>不开则已，一开惊人。</p>\n<p>越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。</p>\n<p>Docker的人气迅速攀升，速度之快，令人瞠目结舌。</p>\n<p>开源当月，Docker 0.1版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0版本正式发布。</p>\n<p>此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。</p>\n<p>Docker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc.。</p>\n<p>Docker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。</p>\n<p>在容器技术之前，业界的网红是虚拟机。<strong>虚拟机</strong>技术的代表，是<strong>VMWare</strong>和<strong>OpenStack</strong>。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134345971-148194642.png\" alt=\"img\"></p>\n<p>相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134357583-1178315643.png\" alt=\"img\"></p>\n<p>虚拟机，类似于“子电脑”</p>\n<p>在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是<strong>相互隔离</strong>的，互不影响。</p>\n<p>虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于<strong>轻量级的虚拟化</strong>。</p>\n<p>虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。</p>\n<p>而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134422660-219996811.png\" alt=\"img\"></p>\n<p>沙箱</p>\n<p>它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134430830-648875754.png\" alt=\"img\"></p>\n<p>容器和虚拟机的对比</p>\n<p>正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。</p>\n<p>我们具体来看看Docker。</p>\n<p>大家需要注意，<strong>Docker本身并不是容器</strong>，它是创建容器的工具，是应用容器引擎。</p>\n<p>想要搞懂Docker，其实看它的两句口号就行。</p>\n<p>第一句，是“<strong>Build, Ship and Run</strong>”。</p>\n<p><img src=\"linux%E4%B8%8Ek8s%E7%9A%84%E5%8C%BA%E5%88%AB.assets/720430-20181226134440039-355719052.png\" alt=\"img\"></p>\n<p>也就是，“搭建、发送、运行”，三板斧。</p>\n<p>举个例子：</p>\n<p>我来到一片空地，想建个房子，于是我搬石头、砍木头、画图纸，一顿操作，终于把这个房子盖好了。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134448189-1614413776.png\" alt=\"img\"></p>\n<p>结果，我住了一段时间，想搬到另一片空地去。这时候，按以往的办法，我只能再次搬石头、砍木头、画图纸、盖房子。</p>\n<p>但是，跑来一个老巫婆，教会我一种魔法。</p>\n<p>这种魔法，可以把我盖好的房子复制一份，做成“镜像”，放在我的背包里。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134458048-1632935313.png\" alt=\"img\"></p>\n<p>等我到了另一片空地，就用这个“镜像”，复制一套房子，摆在那边，拎包入住。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134507695-502496013.png\" alt=\"img\"></p>\n<p>怎么样？是不是很神奇？</p>\n<p>所以，Docker的第二句口号就是：“<strong>Build once，Run anywhere（搭建一次，到处能用）</strong>”。</p>\n<p>Docker技术的三大核心概念，分别是：</p>\n<ul>\n<li><strong>镜像（Image）</strong></li>\n<li><strong>容器（Container）</strong></li>\n<li><strong>仓库（Repository）</strong></li>\n</ul>\n<p>我刚才例子里面，那个放在包里的“镜像”，就是<strong>Docker镜像</strong>。而我的背包，就是<strong>Docker仓库</strong>。我在空地上，用魔法造好的房子，就是一个<strong>Docker容器</strong>。</p>\n<p>说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>\n<p>也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。</p>\n<p>每一个镜像可以变出一种房子。那么，我可以有多个镜像呀！</p>\n<p>也就是说，我盖了一个欧式别墅，生成了镜像。另一个哥们可能盖了一个中国四合院，也生成了镜像。还有哥们，盖了一个非洲茅草屋，也生成了镜像。。。</p>\n<p>这么一来，我们可以交换镜像，你用我的，我用你的，岂不是很爽？</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134517561-1517184540.png\" alt=\"img\"></p>\n<p>于是乎，就变成了一个大的公共仓库。</p>\n<p>负责对Docker镜像进行管理的，是<strong>Docker Registry服务</strong>（类似仓库管理员）。</p>\n<p>不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？</p>\n<p>所以，Docker Registry服务对镜像的管理是非常严格的。</p>\n<p>最常使用的Registry公开服务，是官方的<strong>Docker Hub</strong>，这也是默认的Registry，并拥有大量的高质量的官方镜像。</p>\n<p>好了，说完了Docker，我们再把目光转向K8S。</p>\n<p>就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。</p>\n<p>就在这个时候，K8S出现了。</p>\n<p><strong>K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。</strong></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134529220-885595947.png\" alt=\"img\"></p>\n<p>Kubernetes这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。</p>\n<p>和Docker不同，K8S的创造者，是众人皆知的行业巨头——<strong>Google</strong>。</p>\n<p>然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的<strong>Borg系统</strong>。</p>\n<p>K8S是2014年6月由Google公司正式公布出来并宣布开源的。</p>\n<p>同年7月，微软、Red Hat、IBM、Docker、CoreOS、Mesosphere和Saltstack等公司，相继加入K8S。</p>\n<p>之后的一年内，VMware、HP、Intel等公司，也陆续加入。</p>\n<p>2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。</p>\n<p>目前，kubernetes的版本已经发展到V1.13。</p>\n<p>K8S的架构，略微有一点复杂，我们简单来看一下。</p>\n<p>一个K8S系统，通常称为一个<strong>K8S集群（Cluster）</strong>。</p>\n<p>这个集群主要包括两个部分：</p>\n<ul>\n<li><strong>一个Master节点（主节点）</strong></li>\n<li><strong>一群Node节点（计算节点）</strong></li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134539670-1577644922.png\" alt=\"img\"></p>\n<p>一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。</p>\n<p>深入来看这两种节点。</p>\n<p>首先是<strong>Master节点。</strong></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134549651-376208258.png\" alt=\"img\"></p>\n<p>Master节点包括API Server、Scheduler、Controller manager、etcd。</p>\n<p>API Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。</p>\n<p>Scheduler负责对集群内部的资源进行调度，相当于“调度室”。</p>\n<p>Controller manager负责管理控制器，相当于“大总管”。</p>\n<p>然后是<strong>Node节点</strong>。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134600202-626807958.png\" alt=\"img\"></p>\n<p>Node节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是<strong>Pod</strong>。</p>\n<blockquote>\n<p>Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。这段不太好理解，跳过吧。</p>\n</blockquote>\n<p>Docker，不用说了，创建容器的。</p>\n<p>Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。</p>\n<p>Kube-proxy，主要负责为Pod对象提供代理。</p>\n<p>Fluentd，主要负责日志收集、存储与查询。</p>\n<p>是不是有点懵？唉，三言两语真的很难讲清楚，继续跳过吧。</p>\n<p>Docker和K8S都介绍完了，然而文章并没有结束。</p>\n<p>接下来的部分，是<strong>写给核心网工程师甚至所有通信工程师看的</strong>。</p>\n<p>从几十年前的1G，到现在的4G，再到将来的5G，移动通信发生了翻天覆地的变化，核心网亦是如此。</p>\n<p>但是，如果你仔细洞察这些变化，会发现，所谓的核心网，其实本质上并没有发生改变，无非就是很多的服务器而已。不同的核心网网元，就是不同的服务器，不同的计算节点。</p>\n<p>变化的，是这些“服务器”的形态和接口：形态，从机柜单板，变成机柜刀片，从机柜刀片，变成X86通用刀片服务器；接口，从中继线缆，变成网线，从网线，变成光纤。</p>\n<p>就算变来变去，还是服务器，是计算节点，是CPU。</p>\n<p>既然是服务器，那么就势必会和IT云计算一样，走上虚拟化的道路。毕竟，虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度，等等。</p>\n<p>前几年，大家以为虚拟机是核心网的终极形态。目前看来，更有可能是<strong>容器化</strong>。这几年经常说的NFV（网元功能虚拟化），也有可能改口为NFC（网元功能容器化）。</p>\n<p>以VoLTE为例，如果按以前2G/3G的方式，那需要大量的专用设备，分别充当EPC和IMS的不同网元。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134611008-1358657705.png\" alt=\"img\"></p>\n<p>VoLTE相关的网元</p>\n<p>而采用容器之后，很可能只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同网元的服务程序。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134621637-1646543877.png\" alt=\"img\"></p>\n<p>这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。</p>\n<p>简直完美！</p>\n<p>5G时代，核心网采用微服务架构，也是和容器完美搭配——单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型。每个专能型，分配给一个隔离的容器，赋予了最大程度的灵活。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134635090-835720705.png\" alt=\"img\"></p>\n<p>精细化分工</p>\n<p>按照这样的发展趋势，在移动通信系统中，除了天线，剩下的部分都有可能虚拟化。核心网是第一个，但不是最后一个。虚拟化之后的核心网，与其说属于通信，实际上更应该归为IT。核心网的功能，只是容器中普通一个软件功能而已。</p>\n<p>至于说在座的各位核心网工程师，恭喜你们，马上就要成功转型啦！</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"10分钟看懂Docker和K8S\"><a href=\"#10分钟看懂Docker和K8S\" class=\"headerlink\" title=\"10分钟看懂Docker和K8S\"></a><a href=\"https://www.cnblogs.com/itbsl/p/10178698.html\">10分钟看懂Docker和K8S</a></h1><p><strong>本文来源：鲜枣课堂</strong></p>\n<p>2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。</p>\n<p><img src=\"../../img/720430-20181226134250810-1685533200.png\" alt=\"img\"></p>\n<p>这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。</p>\n<p><img src=\"../../img/720430-20181226134259735-1931086473.png\" alt=\"img\"></p>\n<p>LXC，就是Linux容器虚拟技术（Linux container）</p>\n<p>后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。</p>\n<p><img src=\"../../img/720430-20181226134308841-1109691453.png\" alt=\"img\"></p>\n<p>Docker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。</p>\n<p>正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。</p>\n<p>什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。</p>\n<p><img src=\"../../img/720430-20181226134321094-1025894099.png\" alt=\"img\"></p>\n<p>Open Source，开源</p>\n<p>有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。</p>\n<p>2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134409452-99479785.png\" alt=\"img\"></p>\n<p>Solomon Hykes（今年刚从Docker离职）</p>\n<p>不开则已，一开惊人。</p>\n<p>越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。</p>\n<p>Docker的人气迅速攀升，速度之快，令人瞠目结舌。</p>\n<p>开源当月，Docker 0.1版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0版本正式发布。</p>\n<p>此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。</p>\n<p>Docker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc.。</p>\n<p>Docker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。</p>\n<p>在容器技术之前，业界的网红是虚拟机。<strong>虚拟机</strong>技术的代表，是<strong>VMWare</strong>和<strong>OpenStack</strong>。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134345971-148194642.png\" alt=\"img\"></p>\n<p>相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134357583-1178315643.png\" alt=\"img\"></p>\n<p>虚拟机，类似于“子电脑”</p>\n<p>在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是<strong>相互隔离</strong>的，互不影响。</p>\n<p>虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于<strong>轻量级的虚拟化</strong>。</p>\n<p>虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。</p>\n<p>而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134422660-219996811.png\" alt=\"img\"></p>\n<p>沙箱</p>\n<p>它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134430830-648875754.png\" alt=\"img\"></p>\n<p>容器和虚拟机的对比</p>\n<p>正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。</p>\n<p>我们具体来看看Docker。</p>\n<p>大家需要注意，<strong>Docker本身并不是容器</strong>，它是创建容器的工具，是应用容器引擎。</p>\n<p>想要搞懂Docker，其实看它的两句口号就行。</p>\n<p>第一句，是“<strong>Build, Ship and Run</strong>”。</p>\n<p><img src=\"linux%E4%B8%8Ek8s%E7%9A%84%E5%8C%BA%E5%88%AB.assets/720430-20181226134440039-355719052.png\" alt=\"img\"></p>\n<p>也就是，“搭建、发送、运行”，三板斧。</p>\n<p>举个例子：</p>\n<p>我来到一片空地，想建个房子，于是我搬石头、砍木头、画图纸，一顿操作，终于把这个房子盖好了。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134448189-1614413776.png\" alt=\"img\"></p>\n<p>结果，我住了一段时间，想搬到另一片空地去。这时候，按以往的办法，我只能再次搬石头、砍木头、画图纸、盖房子。</p>\n<p>但是，跑来一个老巫婆，教会我一种魔法。</p>\n<p>这种魔法，可以把我盖好的房子复制一份，做成“镜像”，放在我的背包里。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134458048-1632935313.png\" alt=\"img\"></p>\n<p>等我到了另一片空地，就用这个“镜像”，复制一套房子，摆在那边，拎包入住。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134507695-502496013.png\" alt=\"img\"></p>\n<p>怎么样？是不是很神奇？</p>\n<p>所以，Docker的第二句口号就是：“<strong>Build once，Run anywhere（搭建一次，到处能用）</strong>”。</p>\n<p>Docker技术的三大核心概念，分别是：</p>\n<ul>\n<li><strong>镜像（Image）</strong></li>\n<li><strong>容器（Container）</strong></li>\n<li><strong>仓库（Repository）</strong></li>\n</ul>\n<p>我刚才例子里面，那个放在包里的“镜像”，就是<strong>Docker镜像</strong>。而我的背包，就是<strong>Docker仓库</strong>。我在空地上，用魔法造好的房子，就是一个<strong>Docker容器</strong>。</p>\n<p>说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>\n<p>也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。</p>\n<p>每一个镜像可以变出一种房子。那么，我可以有多个镜像呀！</p>\n<p>也就是说，我盖了一个欧式别墅，生成了镜像。另一个哥们可能盖了一个中国四合院，也生成了镜像。还有哥们，盖了一个非洲茅草屋，也生成了镜像。。。</p>\n<p>这么一来，我们可以交换镜像，你用我的，我用你的，岂不是很爽？</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134517561-1517184540.png\" alt=\"img\"></p>\n<p>于是乎，就变成了一个大的公共仓库。</p>\n<p>负责对Docker镜像进行管理的，是<strong>Docker Registry服务</strong>（类似仓库管理员）。</p>\n<p>不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？</p>\n<p>所以，Docker Registry服务对镜像的管理是非常严格的。</p>\n<p>最常使用的Registry公开服务，是官方的<strong>Docker Hub</strong>，这也是默认的Registry，并拥有大量的高质量的官方镜像。</p>\n<p>好了，说完了Docker，我们再把目光转向K8S。</p>\n<p>就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。</p>\n<p>就在这个时候，K8S出现了。</p>\n<p><strong>K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。</strong></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134529220-885595947.png\" alt=\"img\"></p>\n<p>Kubernetes这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。</p>\n<p>和Docker不同，K8S的创造者，是众人皆知的行业巨头——<strong>Google</strong>。</p>\n<p>然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的<strong>Borg系统</strong>。</p>\n<p>K8S是2014年6月由Google公司正式公布出来并宣布开源的。</p>\n<p>同年7月，微软、Red Hat、IBM、Docker、CoreOS、Mesosphere和Saltstack等公司，相继加入K8S。</p>\n<p>之后的一年内，VMware、HP、Intel等公司，也陆续加入。</p>\n<p>2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。</p>\n<p>目前，kubernetes的版本已经发展到V1.13。</p>\n<p>K8S的架构，略微有一点复杂，我们简单来看一下。</p>\n<p>一个K8S系统，通常称为一个<strong>K8S集群（Cluster）</strong>。</p>\n<p>这个集群主要包括两个部分：</p>\n<ul>\n<li><strong>一个Master节点（主节点）</strong></li>\n<li><strong>一群Node节点（计算节点）</strong></li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134539670-1577644922.png\" alt=\"img\"></p>\n<p>一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。</p>\n<p>深入来看这两种节点。</p>\n<p>首先是<strong>Master节点。</strong></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134549651-376208258.png\" alt=\"img\"></p>\n<p>Master节点包括API Server、Scheduler、Controller manager、etcd。</p>\n<p>API Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。</p>\n<p>Scheduler负责对集群内部的资源进行调度，相当于“调度室”。</p>\n<p>Controller manager负责管理控制器，相当于“大总管”。</p>\n<p>然后是<strong>Node节点</strong>。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134600202-626807958.png\" alt=\"img\"></p>\n<p>Node节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是<strong>Pod</strong>。</p>\n<blockquote>\n<p>Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。这段不太好理解，跳过吧。</p>\n</blockquote>\n<p>Docker，不用说了，创建容器的。</p>\n<p>Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。</p>\n<p>Kube-proxy，主要负责为Pod对象提供代理。</p>\n<p>Fluentd，主要负责日志收集、存储与查询。</p>\n<p>是不是有点懵？唉，三言两语真的很难讲清楚，继续跳过吧。</p>\n<p>Docker和K8S都介绍完了，然而文章并没有结束。</p>\n<p>接下来的部分，是<strong>写给核心网工程师甚至所有通信工程师看的</strong>。</p>\n<p>从几十年前的1G，到现在的4G，再到将来的5G，移动通信发生了翻天覆地的变化，核心网亦是如此。</p>\n<p>但是，如果你仔细洞察这些变化，会发现，所谓的核心网，其实本质上并没有发生改变，无非就是很多的服务器而已。不同的核心网网元，就是不同的服务器，不同的计算节点。</p>\n<p>变化的，是这些“服务器”的形态和接口：形态，从机柜单板，变成机柜刀片，从机柜刀片，变成X86通用刀片服务器；接口，从中继线缆，变成网线，从网线，变成光纤。</p>\n<p>就算变来变去，还是服务器，是计算节点，是CPU。</p>\n<p>既然是服务器，那么就势必会和IT云计算一样，走上虚拟化的道路。毕竟，虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度，等等。</p>\n<p>前几年，大家以为虚拟机是核心网的终极形态。目前看来，更有可能是<strong>容器化</strong>。这几年经常说的NFV（网元功能虚拟化），也有可能改口为NFC（网元功能容器化）。</p>\n<p>以VoLTE为例，如果按以前2G/3G的方式，那需要大量的专用设备，分别充当EPC和IMS的不同网元。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134611008-1358657705.png\" alt=\"img\"></p>\n<p>VoLTE相关的网元</p>\n<p>而采用容器之后，很可能只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同网元的服务程序。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134621637-1646543877.png\" alt=\"img\"></p>\n<p>这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。</p>\n<p>简直完美！</p>\n<p>5G时代，核心网采用微服务架构，也是和容器完美搭配——单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型。每个专能型，分配给一个隔离的容器，赋予了最大程度的灵活。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/720430/201812/720430-20181226134635090-835720705.png\" alt=\"img\"></p>\n<p>精细化分工</p>\n<p>按照这样的发展趋势，在移动通信系统中，除了天线，剩下的部分都有可能虚拟化。核心网是第一个，但不是最后一个。虚拟化之后的核心网，与其说属于通信，实际上更应该归为IT。核心网的功能，只是容器中普通一个软件功能而已。</p>\n<p>至于说在座的各位核心网工程师，恭喜你们，马上就要成功转型啦！</p>\n"},{"title":"Linux查看内存使用情况","abbrlink":1026478353,"_content":"\n> 有一些命令可以用来检查 Linux 系统中的内存使用情况，下面是一些更好的命令。\n\n有许多工具可以查看 Linux 系统中的内存使用情况。一些命令被广泛使用，比如 `free`、`ps`。而另一些命令允许通过多种方式展示系统的性能统计信息，比如 `top`。在这篇文章中，我们将介绍一些命令以帮助你确定当前占用着最多内存资源的用户或者进程。\n\n下面是一些按照进程查看内存使用情况的命令：\n\n### 按照进程查看内存使用情况\n\n#### 使用 top\n\n`top` 是最好的查看内存使用情况的命令之一。为了查看哪个进程使用着最多的内存，一个简单的办法就是启动 `top`，然后按下 `shift+m`，这样便可以查看按照内存占用百分比从高到底排列的进程。当你按下了 `shift+m` ，你的 `top` 应该会得到类似于下面这样的输出结果：\n\n```\n$toptop - 09:39:34 up 5 days, 3 min,  3 users,  load average: 4.77, 4.43, 3.72Tasks: 251 total,   3 running, 247 sleeping,   1 stopped,   0 zombie%Cpu(s): 50.6 us, 35.9 sy,  0.0 ni, 13.4 id,  0.2 wa,  0.0 hi,  0.0 si,  0.0 stMiB Mem :   5944.4 total,    128.9 free,   2509.3 used,   3306.2 buff/cacheMiB Swap:   2048.0 total,   2045.7 free,      2.2 used.   3053.5 avail Mem  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND  400 nemo      20   0 3309580 550188 168372 S   0.3   9.0   1:33.27 Web Content32469 nemo      20   0 3492840 447372 163296 S   7.3   7.3   3:55.60 firefox32542 nemo      20   0 2845732 433388 140984 S   6.0   7.1   4:11.16 Web Content  342 nemo      20   0 2848520 352288 118972 S  10.3   5.8   4:04.89 Web Content 2389 nemo      20   0 1774412 236700  90044 S  39.7   3.9   9:32.64 vlc29527 nemo      20   0 2735792 225980  84744 S   9.6   3.7   3:02.35 gnome-shell30497 nemo      30  10 1088476 159636  88884 S   0.0   2.6   0:11.99 update-manager30058 nemo      20   0 1089464 140952  33128 S   0.0   2.3   0:04.58 gnome-software32533 nemo      20   0 2389088 104712  79544 S   0.0   1.7   0:01.43 WebExtensions 2256 nemo      20   0 1217884 103424  31304 T   0.0   1.7   0:00.28 vlc 1713 nemo      20   0 2374396  79588  61452 S   0.0   1.3   0:00.49 Web Content29306 nemo      20   0  389668  74376  54340 S   2.3   1.2   0:57.25 Xorg32739 nemo      20   0  289528  58900  34480 S   1.0   1.0   1:04.08 RDD Process29732 nemo      20   0  789196  57724  42428 S   0.0   0.9   0:00.38 evolution-alarm 2373 root      20   0  150408  57000   9924 S   0.3   0.9  10:15.35 nessusd\n```\n\n注意 `%MEM` 排序。列表的大小取决于你的窗口大小，但是占据着最多的内存的进程将会显示在列表的顶端。\n\n#### 使用 ps\n\n`ps` 命令中的一列用来展示每个进程的内存使用情况。为了展示和查看哪个进程使用着最多的内存，你可以将 `ps` 命令的结果传递给 `sort` 命令。下面是一个有用的示例：\n\n```\n$ ps aux | sort -rnk 4 | head -5nemo       400  3.4  9.2 3309580 563336 ?      Sl   08:59   1:36 /usr/lib/firefox/firefox -contentproc -childID 6 -isForBrowser -prefsLen 9086 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo     32469  8.2  7.7 3492840 469516 ?      Sl   08:54   4:15 /usr/lib/firefox/firefox -new-windownemo     32542  8.9  7.6 2875428 462720 ?      Sl   08:55   4:36 /usr/lib/firefox/firefox -contentproc -childID 2 -isForBrowser -prefsLen 1 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo       342  9.9  5.9 2854664 363528 ?      Sl   08:59   4:44 /usr/lib/firefox/firefox -contentproc -childID 5 -isForBrowser -prefsLen 8763 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo      2389 39.5  3.8 1774412 236116 pts/1  Sl+  09:15  12:21 vlc videos/edge_computing.mp4\n```\n\n在上面的例子中（文中已截断），`sort` 命令使用了 `-r` 选项（反转）、`-n` 选项（数字值）、`-k` 选项（关键字），使 `sort` 命令对 `ps` 命令的结果按照第四列（内存使用情况）中的数字逆序进行排列并输出。如果我们首先显示 `ps` 命令的标题，那么将会便于查看。\n\n```\n$ ps aux | head -1; ps aux | sort -rnk 4 | head -5USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDnemo       400  3.4  9.2 3309580 563336 ?      Sl   08:59   1:36 /usr/lib/firefox/firefox -contentproc -childID 6 -isForBrowser -prefsLen 9086 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo     32469  8.2  7.7 3492840 469516 ?      Sl   08:54   4:15 /usr/lib/firefox/firefox -new-windownemo     32542  8.9  7.6 2875428 462720 ?      Sl   08:55   4:36 /usr/lib/firefox/firefox -contentproc -childID 2 -isForBrowser -prefsLen 1 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo       342  9.9  5.9 2854664 363528 ?      Sl   08:59   4:44 /usr/lib/firefox/firefox -contentproc -childID 5 -isForBrowser -prefsLen 8763 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo      2389 39.5  3.8 1774412 236116 pts/1  Sl+  09:15  12:21 vlc videos/edge_computing.mp4\n```\n\n如果你喜欢这个命令，你可以用下面的命令为他指定一个别名，如果你想一直使用它，不要忘记把该命令添加到你的 `~/.bashrc` 文件中。\n\n```\n$ alias mem-by-proc=\"ps aux | head -1; ps aux | sort -rnk 4\"\n```\n\n下面是一些根据用户查看内存使用情况的命令：\n\n### 按用户查看内存使用情况\n\n#### 使用 top\n\n按照用户检查内存使用情况会更复杂一些，因为你需要找到一种方法把用户所拥有的所有进程统计为单一的内存使用量。\n\n如果你只想查看单个用户进程使用情况，`top` 命令可以采用与上文中同样的方法进行使用。只需要添加 `-U` 选项并在其后面指定你要查看的用户名，然后按下 `shift+m` 便可以按照内存使用有多到少进行查看。\n\n```\n$ top -U nemotop - 10:16:33 up 5 days, 40 min,  3 users,  load average: 1.91, 1.82, 2.15Tasks: 253 total,   2 running, 250 sleeping,   1 stopped,   0 zombie%Cpu(s): 28.5 us, 36.8 sy,  0.0 ni, 34.4 id,  0.3 wa,  0.0 hi,  0.0 si,  0.0 stMiB Mem :   5944.4 total,    224.1 free,   2752.9 used,   2967.4 buff/cacheMiB Swap:   2048.0 total,   2042.7 free,      5.2 used.   2812.0 avail Mem  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND  400 nemo      20   0 3315724 623748 165440 S   1.0  10.2   1:48.78 Web Content32469 nemo      20   0 3629380 607492 161688 S   2.3  10.0   6:06.89 firefox32542 nemo      20   0 2886700 404980 136648 S   5.6   6.7   6:50.01 Web Content  342 nemo      20   0 2922248 375784 116096 S  19.5   6.2   8:16.07 Web Content 2389 nemo      20   0 1762960 234644  87452 S   0.0   3.9  13:57.53 vlc29527 nemo      20   0 2736924 227260  86092 S   0.0   3.7   4:09.11 gnome-shell30497 nemo      30  10 1088476 156372  85620 S   0.0   2.6   0:11.99 update-manager30058 nemo      20   0 1089464 138160  30336 S   0.0   2.3   0:04.62 gnome-software32533 nemo      20   0 2389088 102532  76808 S   0.0   1.7   0:01.79 WebExtensions\n```\n\n#### 使用 ps\n\n你依旧可以使用 `ps` 命令通过内存使用情况来排列某个用户的进程。在这个例子中，我们将使用 `grep` 命令来筛选得到某个用户的所有进程。\n\n```\n$ ps aux | head -1; ps aux | grep ^nemo| sort -rnk 4 | moreUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDnemo     32469  7.1 11.5 3724364 701388 ?      Sl   08:54   7:21 /usr/lib/firefox/firefox -new-windownemo       400  2.0  8.9 3308556 543232 ?      Sl   08:59   2:01 /usr/lib/firefox/firefox -contentproc -childID 6 -isForBrowser -prefsLen 9086 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni/usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo     32542  7.9  7.1 2903084 436196 ?      Sl   08:55   8:07 /usr/lib/firefox/firefox -contentproc -childID 2 -isForBrowser -prefsLen 1 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo       342 10.8  7.0 2941056 426484 ?      Rl   08:59  10:45 /usr/lib/firefox/firefox -contentproc -childID 5 -isForBrowser -prefsLen 8763 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo      2389 16.9  3.8 1762960 234644 pts/1  Sl+  09:15  13:57 vlc videos/edge_computing.mp4nemo     29527  3.9  3.7 2736924 227448 ?      Ssl  08:50   4:11 /usr/bin/gnome-shell\n```\n\n### 使用 ps 和其他命令的搭配\n\n如果你想比较某个用户与其他用户内存使用情况将会比较复杂。在这种情况中，创建并排序一个按照用户总的内存使用量是一个不错的方法，但是它需要做一些更多的工作，并涉及到许多命令。在下面的脚本中，我们使用 `ps aux | grep -v COMMAND | awk '{print $1}' | sort -u` 命令得到了用户列表。其中包含了系统用户比如 `syslog`。我们对每个任务使用 `awk` 命令以收集每个用户总的内存使用情况。在最后一步中，我们展示每个用户总的内存使用量（按照从大到小的顺序）。\n\n```\n#!/bin/bashstats=””echo \"%   user\"echo \"============\"# collect the datafor user in `ps aux | grep -v COMMAND | awk '{print $1}' | sort -u`do  stats=\"$stats\\n`ps aux | egrep ^$user | awk 'BEGIN{total=0}; \\    {total += $4};END{print total,$1}'`\"done# sort data numerically (largest first)echo -e $stats | grep -v ^$ | sort -rn | head\n```\n\n这个脚本的输出可能如下：\n\n```\n$ ./show_user_mem_usage%   user============69.6 nemo5.8 root0.5 www-data0.3 shs0.2 whoopsie0.2 systemd+0.2 colord0.2 clamav0 syslog0 rtkit\n```\n\n在 Linux 有许多方法可以报告内存使用情况。可以通过一些用心设计的工具和命令，来查看并获得某个进程或者用户占用着最多的内存。","source":"_posts/技术/linux/Linux查看内存使用量.md","raw":"---\ntitle: Linux查看内存使用情况\nabbrlink: 1026478353\ntags:\n\t- Linux\n---\n\n> 有一些命令可以用来检查 Linux 系统中的内存使用情况，下面是一些更好的命令。\n\n有许多工具可以查看 Linux 系统中的内存使用情况。一些命令被广泛使用，比如 `free`、`ps`。而另一些命令允许通过多种方式展示系统的性能统计信息，比如 `top`。在这篇文章中，我们将介绍一些命令以帮助你确定当前占用着最多内存资源的用户或者进程。\n\n下面是一些按照进程查看内存使用情况的命令：\n\n### 按照进程查看内存使用情况\n\n#### 使用 top\n\n`top` 是最好的查看内存使用情况的命令之一。为了查看哪个进程使用着最多的内存，一个简单的办法就是启动 `top`，然后按下 `shift+m`，这样便可以查看按照内存占用百分比从高到底排列的进程。当你按下了 `shift+m` ，你的 `top` 应该会得到类似于下面这样的输出结果：\n\n```\n$toptop - 09:39:34 up 5 days, 3 min,  3 users,  load average: 4.77, 4.43, 3.72Tasks: 251 total,   3 running, 247 sleeping,   1 stopped,   0 zombie%Cpu(s): 50.6 us, 35.9 sy,  0.0 ni, 13.4 id,  0.2 wa,  0.0 hi,  0.0 si,  0.0 stMiB Mem :   5944.4 total,    128.9 free,   2509.3 used,   3306.2 buff/cacheMiB Swap:   2048.0 total,   2045.7 free,      2.2 used.   3053.5 avail Mem  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND  400 nemo      20   0 3309580 550188 168372 S   0.3   9.0   1:33.27 Web Content32469 nemo      20   0 3492840 447372 163296 S   7.3   7.3   3:55.60 firefox32542 nemo      20   0 2845732 433388 140984 S   6.0   7.1   4:11.16 Web Content  342 nemo      20   0 2848520 352288 118972 S  10.3   5.8   4:04.89 Web Content 2389 nemo      20   0 1774412 236700  90044 S  39.7   3.9   9:32.64 vlc29527 nemo      20   0 2735792 225980  84744 S   9.6   3.7   3:02.35 gnome-shell30497 nemo      30  10 1088476 159636  88884 S   0.0   2.6   0:11.99 update-manager30058 nemo      20   0 1089464 140952  33128 S   0.0   2.3   0:04.58 gnome-software32533 nemo      20   0 2389088 104712  79544 S   0.0   1.7   0:01.43 WebExtensions 2256 nemo      20   0 1217884 103424  31304 T   0.0   1.7   0:00.28 vlc 1713 nemo      20   0 2374396  79588  61452 S   0.0   1.3   0:00.49 Web Content29306 nemo      20   0  389668  74376  54340 S   2.3   1.2   0:57.25 Xorg32739 nemo      20   0  289528  58900  34480 S   1.0   1.0   1:04.08 RDD Process29732 nemo      20   0  789196  57724  42428 S   0.0   0.9   0:00.38 evolution-alarm 2373 root      20   0  150408  57000   9924 S   0.3   0.9  10:15.35 nessusd\n```\n\n注意 `%MEM` 排序。列表的大小取决于你的窗口大小，但是占据着最多的内存的进程将会显示在列表的顶端。\n\n#### 使用 ps\n\n`ps` 命令中的一列用来展示每个进程的内存使用情况。为了展示和查看哪个进程使用着最多的内存，你可以将 `ps` 命令的结果传递给 `sort` 命令。下面是一个有用的示例：\n\n```\n$ ps aux | sort -rnk 4 | head -5nemo       400  3.4  9.2 3309580 563336 ?      Sl   08:59   1:36 /usr/lib/firefox/firefox -contentproc -childID 6 -isForBrowser -prefsLen 9086 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo     32469  8.2  7.7 3492840 469516 ?      Sl   08:54   4:15 /usr/lib/firefox/firefox -new-windownemo     32542  8.9  7.6 2875428 462720 ?      Sl   08:55   4:36 /usr/lib/firefox/firefox -contentproc -childID 2 -isForBrowser -prefsLen 1 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo       342  9.9  5.9 2854664 363528 ?      Sl   08:59   4:44 /usr/lib/firefox/firefox -contentproc -childID 5 -isForBrowser -prefsLen 8763 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo      2389 39.5  3.8 1774412 236116 pts/1  Sl+  09:15  12:21 vlc videos/edge_computing.mp4\n```\n\n在上面的例子中（文中已截断），`sort` 命令使用了 `-r` 选项（反转）、`-n` 选项（数字值）、`-k` 选项（关键字），使 `sort` 命令对 `ps` 命令的结果按照第四列（内存使用情况）中的数字逆序进行排列并输出。如果我们首先显示 `ps` 命令的标题，那么将会便于查看。\n\n```\n$ ps aux | head -1; ps aux | sort -rnk 4 | head -5USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDnemo       400  3.4  9.2 3309580 563336 ?      Sl   08:59   1:36 /usr/lib/firefox/firefox -contentproc -childID 6 -isForBrowser -prefsLen 9086 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo     32469  8.2  7.7 3492840 469516 ?      Sl   08:54   4:15 /usr/lib/firefox/firefox -new-windownemo     32542  8.9  7.6 2875428 462720 ?      Sl   08:55   4:36 /usr/lib/firefox/firefox -contentproc -childID 2 -isForBrowser -prefsLen 1 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo       342  9.9  5.9 2854664 363528 ?      Sl   08:59   4:44 /usr/lib/firefox/firefox -contentproc -childID 5 -isForBrowser -prefsLen 8763 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo      2389 39.5  3.8 1774412 236116 pts/1  Sl+  09:15  12:21 vlc videos/edge_computing.mp4\n```\n\n如果你喜欢这个命令，你可以用下面的命令为他指定一个别名，如果你想一直使用它，不要忘记把该命令添加到你的 `~/.bashrc` 文件中。\n\n```\n$ alias mem-by-proc=\"ps aux | head -1; ps aux | sort -rnk 4\"\n```\n\n下面是一些根据用户查看内存使用情况的命令：\n\n### 按用户查看内存使用情况\n\n#### 使用 top\n\n按照用户检查内存使用情况会更复杂一些，因为你需要找到一种方法把用户所拥有的所有进程统计为单一的内存使用量。\n\n如果你只想查看单个用户进程使用情况，`top` 命令可以采用与上文中同样的方法进行使用。只需要添加 `-U` 选项并在其后面指定你要查看的用户名，然后按下 `shift+m` 便可以按照内存使用有多到少进行查看。\n\n```\n$ top -U nemotop - 10:16:33 up 5 days, 40 min,  3 users,  load average: 1.91, 1.82, 2.15Tasks: 253 total,   2 running, 250 sleeping,   1 stopped,   0 zombie%Cpu(s): 28.5 us, 36.8 sy,  0.0 ni, 34.4 id,  0.3 wa,  0.0 hi,  0.0 si,  0.0 stMiB Mem :   5944.4 total,    224.1 free,   2752.9 used,   2967.4 buff/cacheMiB Swap:   2048.0 total,   2042.7 free,      5.2 used.   2812.0 avail Mem  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND  400 nemo      20   0 3315724 623748 165440 S   1.0  10.2   1:48.78 Web Content32469 nemo      20   0 3629380 607492 161688 S   2.3  10.0   6:06.89 firefox32542 nemo      20   0 2886700 404980 136648 S   5.6   6.7   6:50.01 Web Content  342 nemo      20   0 2922248 375784 116096 S  19.5   6.2   8:16.07 Web Content 2389 nemo      20   0 1762960 234644  87452 S   0.0   3.9  13:57.53 vlc29527 nemo      20   0 2736924 227260  86092 S   0.0   3.7   4:09.11 gnome-shell30497 nemo      30  10 1088476 156372  85620 S   0.0   2.6   0:11.99 update-manager30058 nemo      20   0 1089464 138160  30336 S   0.0   2.3   0:04.62 gnome-software32533 nemo      20   0 2389088 102532  76808 S   0.0   1.7   0:01.79 WebExtensions\n```\n\n#### 使用 ps\n\n你依旧可以使用 `ps` 命令通过内存使用情况来排列某个用户的进程。在这个例子中，我们将使用 `grep` 命令来筛选得到某个用户的所有进程。\n\n```\n$ ps aux | head -1; ps aux | grep ^nemo| sort -rnk 4 | moreUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDnemo     32469  7.1 11.5 3724364 701388 ?      Sl   08:54   7:21 /usr/lib/firefox/firefox -new-windownemo       400  2.0  8.9 3308556 543232 ?      Sl   08:59   2:01 /usr/lib/firefox/firefox -contentproc -childID 6 -isForBrowser -prefsLen 9086 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni/usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo     32542  7.9  7.1 2903084 436196 ?      Sl   08:55   8:07 /usr/lib/firefox/firefox -contentproc -childID 2 -isForBrowser -prefsLen 1 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo       342 10.8  7.0 2941056 426484 ?      Rl   08:59  10:45 /usr/lib/firefox/firefox -contentproc -childID 5 -isForBrowser -prefsLen 8763 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni /usr/lib/firefox/omni.ja -appomni /usr/lib/firefox/browser/omni.ja -appdir /usr/lib/firefox/browser 32469 true tabnemo      2389 16.9  3.8 1762960 234644 pts/1  Sl+  09:15  13:57 vlc videos/edge_computing.mp4nemo     29527  3.9  3.7 2736924 227448 ?      Ssl  08:50   4:11 /usr/bin/gnome-shell\n```\n\n### 使用 ps 和其他命令的搭配\n\n如果你想比较某个用户与其他用户内存使用情况将会比较复杂。在这种情况中，创建并排序一个按照用户总的内存使用量是一个不错的方法，但是它需要做一些更多的工作，并涉及到许多命令。在下面的脚本中，我们使用 `ps aux | grep -v COMMAND | awk '{print $1}' | sort -u` 命令得到了用户列表。其中包含了系统用户比如 `syslog`。我们对每个任务使用 `awk` 命令以收集每个用户总的内存使用情况。在最后一步中，我们展示每个用户总的内存使用量（按照从大到小的顺序）。\n\n```\n#!/bin/bashstats=””echo \"%   user\"echo \"============\"# collect the datafor user in `ps aux | grep -v COMMAND | awk '{print $1}' | sort -u`do  stats=\"$stats\\n`ps aux | egrep ^$user | awk 'BEGIN{total=0}; \\    {total += $4};END{print total,$1}'`\"done# sort data numerically (largest first)echo -e $stats | grep -v ^$ | sort -rn | head\n```\n\n这个脚本的输出可能如下：\n\n```\n$ ./show_user_mem_usage%   user============69.6 nemo5.8 root0.5 www-data0.3 shs0.2 whoopsie0.2 systemd+0.2 colord0.2 clamav0 syslog0 rtkit\n```\n\n在 Linux 有许多方法可以报告内存使用情况。可以通过一些用心设计的工具和命令，来查看并获得某个进程或者用户占用着最多的内存。","slug":"技术/linux/Linux查看内存使用量","published":1,"date":"2020-12-18T15:55:13.491Z","updated":"2020-12-18T15:55:13.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiugesqa000kioxc1vck8k63","content":"<blockquote>\n<p>有一些命令可以用来检查 Linux 系统中的内存使用情况，下面是一些更好的命令。</p>\n</blockquote>\n<p>有许多工具可以查看 Linux 系统中的内存使用情况。一些命令被广泛使用，比如 <code>free</code>、<code>ps</code>。而另一些命令允许通过多种方式展示系统的性能统计信息，比如 <code>top</code>。在这篇文章中，我们将介绍一些命令以帮助你确定当前占用着最多内存资源的用户或者进程。</p>\n<p>下面是一些按照进程查看内存使用情况的命令：</p>\n<h3 id=\"按照进程查看内存使用情况\"><a href=\"#按照进程查看内存使用情况\" class=\"headerlink\" title=\"按照进程查看内存使用情况\"></a>按照进程查看内存使用情况</h3><h4 id=\"使用-top\"><a href=\"#使用-top\" class=\"headerlink\" title=\"使用 top\"></a>使用 top</h4><p><code>top</code> 是最好的查看内存使用情况的命令之一。为了查看哪个进程使用着最多的内存，一个简单的办法就是启动 <code>top</code>，然后按下 <code>shift+m</code>，这样便可以查看按照内存占用百分比从高到底排列的进程。当你按下了 <code>shift+m</code> ，你的 <code>top</code> 应该会得到类似于下面这样的输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$toptop - 09:39:34 up 5 days, 3 min,  3 users,  load average: 4.77, 4.43, 3.72Tasks: 251 total,   3 running, 247 sleeping,   1 stopped,   0 zombie%Cpu(s): 50.6 us, 35.9 sy,  0.0 ni, 13.4 id,  0.2 wa,  0.0 hi,  0.0 si,  0.0 stMiB Mem :   5944.4 total,    128.9 free,   2509.3 used,   3306.2 buff&#x2F;cacheMiB Swap:   2048.0 total,   2045.7 free,      2.2 used.   3053.5 avail Mem  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND  400 nemo      20   0 3309580 550188 168372 S   0.3   9.0   1:33.27 Web Content32469 nemo      20   0 3492840 447372 163296 S   7.3   7.3   3:55.60 firefox32542 nemo      20   0 2845732 433388 140984 S   6.0   7.1   4:11.16 Web Content  342 nemo      20   0 2848520 352288 118972 S  10.3   5.8   4:04.89 Web Content 2389 nemo      20   0 1774412 236700  90044 S  39.7   3.9   9:32.64 vlc29527 nemo      20   0 2735792 225980  84744 S   9.6   3.7   3:02.35 gnome-shell30497 nemo      30  10 1088476 159636  88884 S   0.0   2.6   0:11.99 update-manager30058 nemo      20   0 1089464 140952  33128 S   0.0   2.3   0:04.58 gnome-software32533 nemo      20   0 2389088 104712  79544 S   0.0   1.7   0:01.43 WebExtensions 2256 nemo      20   0 1217884 103424  31304 T   0.0   1.7   0:00.28 vlc 1713 nemo      20   0 2374396  79588  61452 S   0.0   1.3   0:00.49 Web Content29306 nemo      20   0  389668  74376  54340 S   2.3   1.2   0:57.25 Xorg32739 nemo      20   0  289528  58900  34480 S   1.0   1.0   1:04.08 RDD Process29732 nemo      20   0  789196  57724  42428 S   0.0   0.9   0:00.38 evolution-alarm 2373 root      20   0  150408  57000   9924 S   0.3   0.9  10:15.35 nessusd<br></code></pre></td></tr></table></figure>\n<p>注意 <code>%MEM</code> 排序。列表的大小取决于你的窗口大小，但是占据着最多的内存的进程将会显示在列表的顶端。</p>\n<h4 id=\"使用-ps\"><a href=\"#使用-ps\" class=\"headerlink\" title=\"使用 ps\"></a>使用 ps</h4><p><code>ps</code> 命令中的一列用来展示每个进程的内存使用情况。为了展示和查看哪个进程使用着最多的内存，你可以将 <code>ps</code> 命令的结果传递给 <code>sort</code> 命令。下面是一个有用的示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ ps aux | sort -rnk 4 | head -5nemo       400  3.4  9.2 3309580 563336 ?      Sl   08:59   1:36 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 6 -isForBrowser -prefsLen 9086 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo     32469  8.2  7.7 3492840 469516 ?      Sl   08:54   4:15 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -new-windownemo     32542  8.9  7.6 2875428 462720 ?      Sl   08:55   4:36 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 2 -isForBrowser -prefsLen 1 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo       342  9.9  5.9 2854664 363528 ?      Sl   08:59   4:44 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 5 -isForBrowser -prefsLen 8763 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo      2389 39.5  3.8 1774412 236116 pts&#x2F;1  Sl+  09:15  12:21 vlc videos&#x2F;edge_computing.mp4<br></code></pre></td></tr></table></figure>\n<p>在上面的例子中（文中已截断），<code>sort</code> 命令使用了 <code>-r</code> 选项（反转）、<code>-n</code> 选项（数字值）、<code>-k</code> 选项（关键字），使 <code>sort</code> 命令对 <code>ps</code> 命令的结果按照第四列（内存使用情况）中的数字逆序进行排列并输出。如果我们首先显示 <code>ps</code> 命令的标题，那么将会便于查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ ps aux | head -1; ps aux | sort -rnk 4 | head -5USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDnemo       400  3.4  9.2 3309580 563336 ?      Sl   08:59   1:36 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 6 -isForBrowser -prefsLen 9086 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo     32469  8.2  7.7 3492840 469516 ?      Sl   08:54   4:15 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -new-windownemo     32542  8.9  7.6 2875428 462720 ?      Sl   08:55   4:36 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 2 -isForBrowser -prefsLen 1 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo       342  9.9  5.9 2854664 363528 ?      Sl   08:59   4:44 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 5 -isForBrowser -prefsLen 8763 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo      2389 39.5  3.8 1774412 236116 pts&#x2F;1  Sl+  09:15  12:21 vlc videos&#x2F;edge_computing.mp4<br></code></pre></td></tr></table></figure>\n<p>如果你喜欢这个命令，你可以用下面的命令为他指定一个别名，如果你想一直使用它，不要忘记把该命令添加到你的 <code>~/.bashrc</code> 文件中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ alias mem-by-proc&#x3D;&quot;ps aux | head -1; ps aux | sort -rnk 4&quot;<br></code></pre></td></tr></table></figure>\n<p>下面是一些根据用户查看内存使用情况的命令：</p>\n<h3 id=\"按用户查看内存使用情况\"><a href=\"#按用户查看内存使用情况\" class=\"headerlink\" title=\"按用户查看内存使用情况\"></a>按用户查看内存使用情况</h3><h4 id=\"使用-top-1\"><a href=\"#使用-top-1\" class=\"headerlink\" title=\"使用 top\"></a>使用 top</h4><p>按照用户检查内存使用情况会更复杂一些，因为你需要找到一种方法把用户所拥有的所有进程统计为单一的内存使用量。</p>\n<p>如果你只想查看单个用户进程使用情况，<code>top</code> 命令可以采用与上文中同样的方法进行使用。只需要添加 <code>-U</code> 选项并在其后面指定你要查看的用户名，然后按下 <code>shift+m</code> 便可以按照内存使用有多到少进行查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ top -U nemotop - 10:16:33 up 5 days, 40 min,  3 users,  load average: 1.91, 1.82, 2.15Tasks: 253 total,   2 running, 250 sleeping,   1 stopped,   0 zombie%Cpu(s): 28.5 us, 36.8 sy,  0.0 ni, 34.4 id,  0.3 wa,  0.0 hi,  0.0 si,  0.0 stMiB Mem :   5944.4 total,    224.1 free,   2752.9 used,   2967.4 buff&#x2F;cacheMiB Swap:   2048.0 total,   2042.7 free,      5.2 used.   2812.0 avail Mem  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND  400 nemo      20   0 3315724 623748 165440 S   1.0  10.2   1:48.78 Web Content32469 nemo      20   0 3629380 607492 161688 S   2.3  10.0   6:06.89 firefox32542 nemo      20   0 2886700 404980 136648 S   5.6   6.7   6:50.01 Web Content  342 nemo      20   0 2922248 375784 116096 S  19.5   6.2   8:16.07 Web Content 2389 nemo      20   0 1762960 234644  87452 S   0.0   3.9  13:57.53 vlc29527 nemo      20   0 2736924 227260  86092 S   0.0   3.7   4:09.11 gnome-shell30497 nemo      30  10 1088476 156372  85620 S   0.0   2.6   0:11.99 update-manager30058 nemo      20   0 1089464 138160  30336 S   0.0   2.3   0:04.62 gnome-software32533 nemo      20   0 2389088 102532  76808 S   0.0   1.7   0:01.79 WebExtensions<br></code></pre></td></tr></table></figure>\n<h4 id=\"使用-ps-1\"><a href=\"#使用-ps-1\" class=\"headerlink\" title=\"使用 ps\"></a>使用 ps</h4><p>你依旧可以使用 <code>ps</code> 命令通过内存使用情况来排列某个用户的进程。在这个例子中，我们将使用 <code>grep</code> 命令来筛选得到某个用户的所有进程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ ps aux | head -1; ps aux | grep ^nemo| sort -rnk 4 | moreUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDnemo     32469  7.1 11.5 3724364 701388 ?      Sl   08:54   7:21 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -new-windownemo       400  2.0  8.9 3308556 543232 ?      Sl   08:59   2:01 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 6 -isForBrowser -prefsLen 9086 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni&#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo     32542  7.9  7.1 2903084 436196 ?      Sl   08:55   8:07 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 2 -isForBrowser -prefsLen 1 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo       342 10.8  7.0 2941056 426484 ?      Rl   08:59  10:45 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 5 -isForBrowser -prefsLen 8763 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo      2389 16.9  3.8 1762960 234644 pts&#x2F;1  Sl+  09:15  13:57 vlc videos&#x2F;edge_computing.mp4nemo     29527  3.9  3.7 2736924 227448 ?      Ssl  08:50   4:11 &#x2F;usr&#x2F;bin&#x2F;gnome-shell<br></code></pre></td></tr></table></figure>\n<h3 id=\"使用-ps-和其他命令的搭配\"><a href=\"#使用-ps-和其他命令的搭配\" class=\"headerlink\" title=\"使用 ps 和其他命令的搭配\"></a>使用 ps 和其他命令的搭配</h3><p>如果你想比较某个用户与其他用户内存使用情况将会比较复杂。在这种情况中，创建并排序一个按照用户总的内存使用量是一个不错的方法，但是它需要做一些更多的工作，并涉及到许多命令。在下面的脚本中，我们使用 <code>ps aux | grep -v COMMAND | awk &#39;&#123;print $1&#125;&#39; | sort -u</code> 命令得到了用户列表。其中包含了系统用户比如 <code>syslog</code>。我们对每个任务使用 <code>awk</code> 命令以收集每个用户总的内存使用情况。在最后一步中，我们展示每个用户总的内存使用量（按照从大到小的顺序）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">#!&#x2F;bin&#x2F;bashstats&#x3D;””echo &quot;%   user&quot;echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;# collect the datafor user in &#96;ps aux | grep -v COMMAND | awk &#39;&#123;print $1&#125;&#39; | sort -u&#96;do  stats&#x3D;&quot;$stats\\n&#96;ps aux | egrep ^$user | awk &#39;BEGIN&#123;total&#x3D;0&#125;; \\    &#123;total +&#x3D; $4&#125;;END&#123;print total,$1&#125;&#39;&#96;&quot;done# sort data numerically (largest first)echo -e $stats | grep -v ^$ | sort -rn | head<br></code></pre></td></tr></table></figure>\n<p>这个脚本的输出可能如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ .&#x2F;show_user_mem_usage%   user&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;69.6 nemo5.8 root0.5 www-data0.3 shs0.2 whoopsie0.2 systemd+0.2 colord0.2 clamav0 syslog0 rtkit<br></code></pre></td></tr></table></figure>\n<p>在 Linux 有许多方法可以报告内存使用情况。可以通过一些用心设计的工具和命令，来查看并获得某个进程或者用户占用着最多的内存。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<blockquote>\n<p>有一些命令可以用来检查 Linux 系统中的内存使用情况，下面是一些更好的命令。</p>\n</blockquote>\n<p>有许多工具可以查看 Linux 系统中的内存使用情况。一些命令被广泛使用，比如 <code>free</code>、<code>ps</code>。而另一些命令允许通过多种方式展示系统的性能统计信息，比如 <code>top</code>。在这篇文章中，我们将介绍一些命令以帮助你确定当前占用着最多内存资源的用户或者进程。</p>\n<p>下面是一些按照进程查看内存使用情况的命令：</p>\n<h3 id=\"按照进程查看内存使用情况\"><a href=\"#按照进程查看内存使用情况\" class=\"headerlink\" title=\"按照进程查看内存使用情况\"></a>按照进程查看内存使用情况</h3><h4 id=\"使用-top\"><a href=\"#使用-top\" class=\"headerlink\" title=\"使用 top\"></a>使用 top</h4><p><code>top</code> 是最好的查看内存使用情况的命令之一。为了查看哪个进程使用着最多的内存，一个简单的办法就是启动 <code>top</code>，然后按下 <code>shift+m</code>，这样便可以查看按照内存占用百分比从高到底排列的进程。当你按下了 <code>shift+m</code> ，你的 <code>top</code> 应该会得到类似于下面这样的输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$toptop - 09:39:34 up 5 days, 3 min,  3 users,  load average: 4.77, 4.43, 3.72Tasks: 251 total,   3 running, 247 sleeping,   1 stopped,   0 zombie%Cpu(s): 50.6 us, 35.9 sy,  0.0 ni, 13.4 id,  0.2 wa,  0.0 hi,  0.0 si,  0.0 stMiB Mem :   5944.4 total,    128.9 free,   2509.3 used,   3306.2 buff&#x2F;cacheMiB Swap:   2048.0 total,   2045.7 free,      2.2 used.   3053.5 avail Mem  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND  400 nemo      20   0 3309580 550188 168372 S   0.3   9.0   1:33.27 Web Content32469 nemo      20   0 3492840 447372 163296 S   7.3   7.3   3:55.60 firefox32542 nemo      20   0 2845732 433388 140984 S   6.0   7.1   4:11.16 Web Content  342 nemo      20   0 2848520 352288 118972 S  10.3   5.8   4:04.89 Web Content 2389 nemo      20   0 1774412 236700  90044 S  39.7   3.9   9:32.64 vlc29527 nemo      20   0 2735792 225980  84744 S   9.6   3.7   3:02.35 gnome-shell30497 nemo      30  10 1088476 159636  88884 S   0.0   2.6   0:11.99 update-manager30058 nemo      20   0 1089464 140952  33128 S   0.0   2.3   0:04.58 gnome-software32533 nemo      20   0 2389088 104712  79544 S   0.0   1.7   0:01.43 WebExtensions 2256 nemo      20   0 1217884 103424  31304 T   0.0   1.7   0:00.28 vlc 1713 nemo      20   0 2374396  79588  61452 S   0.0   1.3   0:00.49 Web Content29306 nemo      20   0  389668  74376  54340 S   2.3   1.2   0:57.25 Xorg32739 nemo      20   0  289528  58900  34480 S   1.0   1.0   1:04.08 RDD Process29732 nemo      20   0  789196  57724  42428 S   0.0   0.9   0:00.38 evolution-alarm 2373 root      20   0  150408  57000   9924 S   0.3   0.9  10:15.35 nessusd<br></code></pre></td></tr></table></figure>\n<p>注意 <code>%MEM</code> 排序。列表的大小取决于你的窗口大小，但是占据着最多的内存的进程将会显示在列表的顶端。</p>\n<h4 id=\"使用-ps\"><a href=\"#使用-ps\" class=\"headerlink\" title=\"使用 ps\"></a>使用 ps</h4><p><code>ps</code> 命令中的一列用来展示每个进程的内存使用情况。为了展示和查看哪个进程使用着最多的内存，你可以将 <code>ps</code> 命令的结果传递给 <code>sort</code> 命令。下面是一个有用的示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ ps aux | sort -rnk 4 | head -5nemo       400  3.4  9.2 3309580 563336 ?      Sl   08:59   1:36 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 6 -isForBrowser -prefsLen 9086 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo     32469  8.2  7.7 3492840 469516 ?      Sl   08:54   4:15 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -new-windownemo     32542  8.9  7.6 2875428 462720 ?      Sl   08:55   4:36 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 2 -isForBrowser -prefsLen 1 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo       342  9.9  5.9 2854664 363528 ?      Sl   08:59   4:44 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 5 -isForBrowser -prefsLen 8763 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo      2389 39.5  3.8 1774412 236116 pts&#x2F;1  Sl+  09:15  12:21 vlc videos&#x2F;edge_computing.mp4<br></code></pre></td></tr></table></figure>\n<p>在上面的例子中（文中已截断），<code>sort</code> 命令使用了 <code>-r</code> 选项（反转）、<code>-n</code> 选项（数字值）、<code>-k</code> 选项（关键字），使 <code>sort</code> 命令对 <code>ps</code> 命令的结果按照第四列（内存使用情况）中的数字逆序进行排列并输出。如果我们首先显示 <code>ps</code> 命令的标题，那么将会便于查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ ps aux | head -1; ps aux | sort -rnk 4 | head -5USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDnemo       400  3.4  9.2 3309580 563336 ?      Sl   08:59   1:36 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 6 -isForBrowser -prefsLen 9086 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo     32469  8.2  7.7 3492840 469516 ?      Sl   08:54   4:15 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -new-windownemo     32542  8.9  7.6 2875428 462720 ?      Sl   08:55   4:36 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 2 -isForBrowser -prefsLen 1 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo       342  9.9  5.9 2854664 363528 ?      Sl   08:59   4:44 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 5 -isForBrowser -prefsLen 8763 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo      2389 39.5  3.8 1774412 236116 pts&#x2F;1  Sl+  09:15  12:21 vlc videos&#x2F;edge_computing.mp4<br></code></pre></td></tr></table></figure>\n<p>如果你喜欢这个命令，你可以用下面的命令为他指定一个别名，如果你想一直使用它，不要忘记把该命令添加到你的 <code>~/.bashrc</code> 文件中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ alias mem-by-proc&#x3D;&quot;ps aux | head -1; ps aux | sort -rnk 4&quot;<br></code></pre></td></tr></table></figure>\n<p>下面是一些根据用户查看内存使用情况的命令：</p>\n<h3 id=\"按用户查看内存使用情况\"><a href=\"#按用户查看内存使用情况\" class=\"headerlink\" title=\"按用户查看内存使用情况\"></a>按用户查看内存使用情况</h3><h4 id=\"使用-top-1\"><a href=\"#使用-top-1\" class=\"headerlink\" title=\"使用 top\"></a>使用 top</h4><p>按照用户检查内存使用情况会更复杂一些，因为你需要找到一种方法把用户所拥有的所有进程统计为单一的内存使用量。</p>\n<p>如果你只想查看单个用户进程使用情况，<code>top</code> 命令可以采用与上文中同样的方法进行使用。只需要添加 <code>-U</code> 选项并在其后面指定你要查看的用户名，然后按下 <code>shift+m</code> 便可以按照内存使用有多到少进行查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ top -U nemotop - 10:16:33 up 5 days, 40 min,  3 users,  load average: 1.91, 1.82, 2.15Tasks: 253 total,   2 running, 250 sleeping,   1 stopped,   0 zombie%Cpu(s): 28.5 us, 36.8 sy,  0.0 ni, 34.4 id,  0.3 wa,  0.0 hi,  0.0 si,  0.0 stMiB Mem :   5944.4 total,    224.1 free,   2752.9 used,   2967.4 buff&#x2F;cacheMiB Swap:   2048.0 total,   2042.7 free,      5.2 used.   2812.0 avail Mem  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND  400 nemo      20   0 3315724 623748 165440 S   1.0  10.2   1:48.78 Web Content32469 nemo      20   0 3629380 607492 161688 S   2.3  10.0   6:06.89 firefox32542 nemo      20   0 2886700 404980 136648 S   5.6   6.7   6:50.01 Web Content  342 nemo      20   0 2922248 375784 116096 S  19.5   6.2   8:16.07 Web Content 2389 nemo      20   0 1762960 234644  87452 S   0.0   3.9  13:57.53 vlc29527 nemo      20   0 2736924 227260  86092 S   0.0   3.7   4:09.11 gnome-shell30497 nemo      30  10 1088476 156372  85620 S   0.0   2.6   0:11.99 update-manager30058 nemo      20   0 1089464 138160  30336 S   0.0   2.3   0:04.62 gnome-software32533 nemo      20   0 2389088 102532  76808 S   0.0   1.7   0:01.79 WebExtensions<br></code></pre></td></tr></table></figure>\n<h4 id=\"使用-ps-1\"><a href=\"#使用-ps-1\" class=\"headerlink\" title=\"使用 ps\"></a>使用 ps</h4><p>你依旧可以使用 <code>ps</code> 命令通过内存使用情况来排列某个用户的进程。在这个例子中，我们将使用 <code>grep</code> 命令来筛选得到某个用户的所有进程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ ps aux | head -1; ps aux | grep ^nemo| sort -rnk 4 | moreUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDnemo     32469  7.1 11.5 3724364 701388 ?      Sl   08:54   7:21 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -new-windownemo       400  2.0  8.9 3308556 543232 ?      Sl   08:59   2:01 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 6 -isForBrowser -prefsLen 9086 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni&#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo     32542  7.9  7.1 2903084 436196 ?      Sl   08:55   8:07 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 2 -isForBrowser -prefsLen 1 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo       342 10.8  7.0 2941056 426484 ?      Rl   08:59  10:45 &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;firefox -contentproc -childID 5 -isForBrowser -prefsLen 8763 -prefMapSize 210653 -parentBuildID 20200107212822 -greomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;omni.ja -appomni &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser&#x2F;omni.ja -appdir &#x2F;usr&#x2F;lib&#x2F;firefox&#x2F;browser 32469 true tabnemo      2389 16.9  3.8 1762960 234644 pts&#x2F;1  Sl+  09:15  13:57 vlc videos&#x2F;edge_computing.mp4nemo     29527  3.9  3.7 2736924 227448 ?      Ssl  08:50   4:11 &#x2F;usr&#x2F;bin&#x2F;gnome-shell<br></code></pre></td></tr></table></figure>\n<h3 id=\"使用-ps-和其他命令的搭配\"><a href=\"#使用-ps-和其他命令的搭配\" class=\"headerlink\" title=\"使用 ps 和其他命令的搭配\"></a>使用 ps 和其他命令的搭配</h3><p>如果你想比较某个用户与其他用户内存使用情况将会比较复杂。在这种情况中，创建并排序一个按照用户总的内存使用量是一个不错的方法，但是它需要做一些更多的工作，并涉及到许多命令。在下面的脚本中，我们使用 <code>ps aux | grep -v COMMAND | awk &#39;&#123;print $1&#125;&#39; | sort -u</code> 命令得到了用户列表。其中包含了系统用户比如 <code>syslog</code>。我们对每个任务使用 <code>awk</code> 命令以收集每个用户总的内存使用情况。在最后一步中，我们展示每个用户总的内存使用量（按照从大到小的顺序）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">#!&#x2F;bin&#x2F;bashstats&#x3D;””echo &quot;%   user&quot;echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;# collect the datafor user in &#96;ps aux | grep -v COMMAND | awk &#39;&#123;print $1&#125;&#39; | sort -u&#96;do  stats&#x3D;&quot;$stats\\n&#96;ps aux | egrep ^$user | awk &#39;BEGIN&#123;total&#x3D;0&#125;; \\    &#123;total +&#x3D; $4&#125;;END&#123;print total,$1&#125;&#39;&#96;&quot;done# sort data numerically (largest first)echo -e $stats | grep -v ^$ | sort -rn | head<br></code></pre></td></tr></table></figure>\n<p>这个脚本的输出可能如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">$ .&#x2F;show_user_mem_usage%   user&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;69.6 nemo5.8 root0.5 www-data0.3 shs0.2 whoopsie0.2 systemd+0.2 colord0.2 clamav0 syslog0 rtkit<br></code></pre></td></tr></table></figure>\n<p>在 Linux 有许多方法可以报告内存使用情况。可以通过一些用心设计的工具和命令，来查看并获得某个进程或者用户占用着最多的内存。</p>\n"},{"title":"Linux命令killall","abbrlink":1026478353,"_content":"\n# Linux命令killall\n\n[![Linux 命令大全](https://www.runoob.com/images/up.gif) Linux 命令大全](https://www.runoob.com/linux/linux-command-manual.html)\n\nLinux killall 用于杀死一个进程，与 kill 不同的是它会杀死指定名字的所有进程。\n\nkill 命令杀死指定进程 PID，需要配合 ps 使用，而 killall 直接对进程对名字进行操作，更加方便。\n\n### 语法\n\n```shell\n  killall [选项]  name\n```\n\n**参数说明**：\n\n- name ： 进程名\n\n\n\n选项包含如下几个参数：\n\n\n\n- -e | --exact ： 进程需要和名字完全相符\n- -I | --ignore-case ：忽略大小写\n- -g | --process-group ：结束进程组\n- -i | --interactive ：结束之前询问\n- -l | --list ：列出所有的信号名称\n- -q | --quite ：进程没有结束时，不输出任何信息\n- -r | --regexp ：将进程名模式解释为扩展的正则表达式。\n- -s | --signal ：发送指定信号\n- -u | --user ：结束指定用户的进程\n- -v | --verbose ：显示详细执行过程\n- -w | --wait ：等待所有的进程都结束\n- -V |--version ：显示版本信息\n- --help ：显示帮助信息\n\n### 实例\n\n```shell\n# killall -9 php-fpm          //结束所有的 php-fpm 进程\n```","source":"_posts/技术/linux/linux命令/Linux命令killall.md","raw":"---\ntitle: Linux命令killall\nabbrlink: 1026478353\n---\n\n# Linux命令killall\n\n[![Linux 命令大全](https://www.runoob.com/images/up.gif) Linux 命令大全](https://www.runoob.com/linux/linux-command-manual.html)\n\nLinux killall 用于杀死一个进程，与 kill 不同的是它会杀死指定名字的所有进程。\n\nkill 命令杀死指定进程 PID，需要配合 ps 使用，而 killall 直接对进程对名字进行操作，更加方便。\n\n### 语法\n\n```shell\n  killall [选项]  name\n```\n\n**参数说明**：\n\n- name ： 进程名\n\n\n\n选项包含如下几个参数：\n\n\n\n- -e | --exact ： 进程需要和名字完全相符\n- -I | --ignore-case ：忽略大小写\n- -g | --process-group ：结束进程组\n- -i | --interactive ：结束之前询问\n- -l | --list ：列出所有的信号名称\n- -q | --quite ：进程没有结束时，不输出任何信息\n- -r | --regexp ：将进程名模式解释为扩展的正则表达式。\n- -s | --signal ：发送指定信号\n- -u | --user ：结束指定用户的进程\n- -v | --verbose ：显示详细执行过程\n- -w | --wait ：等待所有的进程都结束\n- -V |--version ：显示版本信息\n- --help ：显示帮助信息\n\n### 实例\n\n```shell\n# killall -9 php-fpm          //结束所有的 php-fpm 进程\n```","slug":"技术/linux/linux命令/Linux命令killall","published":1,"date":"2020-12-18T15:55:13.495Z","updated":"2020-12-18T15:55:13.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiugesqj000mioxc8gqog9ve","content":"<h1 id=\"Linux命令killall\"><a href=\"#Linux命令killall\" class=\"headerlink\" title=\"Linux命令killall\"></a>Linux命令killall</h1><p><a href=\"https://www.runoob.com/linux/linux-command-manual.html\"><img src=\"https://www.runoob.com/images/up.gif\" alt=\"Linux 命令大全\"> Linux 命令大全</a></p>\n<p>Linux killall 用于杀死一个进程，与 kill 不同的是它会杀死指定名字的所有进程。</p>\n<p>kill 命令杀死指定进程 PID，需要配合 ps 使用，而 killall 直接对进程对名字进行操作，更加方便。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">killall [选项]  name<br></code></pre></td></tr></table></figure>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>name ： 进程名</li>\n</ul>\n<p>选项包含如下几个参数：</p>\n<ul>\n<li>-e | –exact ： 进程需要和名字完全相符</li>\n<li>-I | –ignore-case ：忽略大小写</li>\n<li>-g | –process-group ：结束进程组</li>\n<li>-i | –interactive ：结束之前询问</li>\n<li>-l | –list ：列出所有的信号名称</li>\n<li>-q | –quite ：进程没有结束时，不输出任何信息</li>\n<li>-r | –regexp ：将进程名模式解释为扩展的正则表达式。</li>\n<li>-s | –signal ：发送指定信号</li>\n<li>-u | –user ：结束指定用户的进程</li>\n<li>-v | –verbose ：显示详细执行过程</li>\n<li>-w | –wait ：等待所有的进程都结束</li>\n<li>-V |–version ：显示版本信息</li>\n<li>–help ：显示帮助信息</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> killall -9 php-fpm          //结束所有的 php-fpm 进程</span><br></code></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"Linux命令killall\"><a href=\"#Linux命令killall\" class=\"headerlink\" title=\"Linux命令killall\"></a>Linux命令killall</h1><p><a href=\"https://www.runoob.com/linux/linux-command-manual.html\"><img src=\"https://www.runoob.com/images/up.gif\" alt=\"Linux 命令大全\"> Linux 命令大全</a></p>\n<p>Linux killall 用于杀死一个进程，与 kill 不同的是它会杀死指定名字的所有进程。</p>\n<p>kill 命令杀死指定进程 PID，需要配合 ps 使用，而 killall 直接对进程对名字进行操作，更加方便。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">killall [选项]  name<br></code></pre></td></tr></table></figure>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>name ： 进程名</li>\n</ul>\n<p>选项包含如下几个参数：</p>\n<ul>\n<li>-e | –exact ： 进程需要和名字完全相符</li>\n<li>-I | –ignore-case ：忽略大小写</li>\n<li>-g | –process-group ：结束进程组</li>\n<li>-i | –interactive ：结束之前询问</li>\n<li>-l | –list ：列出所有的信号名称</li>\n<li>-q | –quite ：进程没有结束时，不输出任何信息</li>\n<li>-r | –regexp ：将进程名模式解释为扩展的正则表达式。</li>\n<li>-s | –signal ：发送指定信号</li>\n<li>-u | –user ：结束指定用户的进程</li>\n<li>-v | –verbose ：显示详细执行过程</li>\n<li>-w | –wait ：等待所有的进程都结束</li>\n<li>-V |–version ：显示版本信息</li>\n<li>–help ：显示帮助信息</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> killall -9 php-fpm          //结束所有的 php-fpm 进程</span><br></code></pre></td></tr></table></figure>"},{"title":"Linux命令systemd","abbrlink":1026478354,"date":"2017-12-19T16:00:00.000Z","_content":"\n\n\n## **Systemd 概述**\n\n### **Systemd 简介**\n\nSystemd 是一系列工具的集合，其作用也远远不仅是启动操作系统，它还接管了后台服务、结束、状态查询，以及日志归档、设备管理、电源管理、定时任务等许多职责，并支持通过特定事件（如插入特定 USB 设备）和特定端口数据触发的 On-demand（按需）任务。\n\nSystemd 的后台服务还有一个特殊的身份——它是系统中 PID 值为 1 的进程。\n\n1. 更少的进程\n\nSystemd 提供了 服务按需启动 的能力，使得特定的服务只有在真定被请求时才启动。\n\n1. 允许更多的进程并行启动\n\n在 SysV-init 时代，将每个服务项目编号依次执行启动脚本。Ubuntu 的 Upstart 解决了没有直接依赖的启动之间的并行启动。而 Systemd 通过 Socket 缓存、DBus 缓存和建立临时挂载点等方法进一步解决了启动进程之间的依赖，做到了所有系统服务并发启动。对于用户自定义的服务，Systemd 允许配置其启动依赖项目，从而确保服务按必要的顺序运行。\n\n1. 使用 CGroup 跟踪和管理进程的生命周期\n\n在 Systemd 之间的主流应用管理服务都是使用 进程树 来跟踪应用的继承关系的，而进程的父子关系很容易通过 两次 fork 的方法脱离。\n\n而 Systemd 则提供通过 CGroup 跟踪进程关系，引补了这个缺漏。通过 CGroup 不仅能够实现服务之间访问隔离，限制特定应用程序对系统资源的访问配额，还能更精确地管理服务的生命周期。\n\n1. 统一管理服务日志\n\nSystemd 是一系列工具的集合， 包括了一个专用的系统日志管理服务：Journald。这个服务的设计初衷是克服现有 Syslog 服务的日志内容易伪造和日志格式不统一等缺点，Journald 用 二进制格式 保存所有的日志信息，因而日志内容很难被手工伪造。Journald 还提供了一个 journalctl 命令来查看日志信息，这样就使得不同服务输出的日志具有相同的排版格式， 便于数据的二次处理。\n\n### **Systemd 架构**\n\n![img](https://ask.qcloudimg.com/http-save/yehe-5449090/97kx52pwuj.png?imageView2/2/w/1620)\n\n## **Systemd 的 Unit 文件**\n\nSystemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）。\n\n在 Systemd 的生态圈中，Unit 文件统一了过去各种不同系统资源配置格式，例如服务的启/停、定时任务、设备自动挂载、网络配置、虚拟内存配置等。而 Systemd 通过不同的文件后缀来区分这些配置文件。\n\n1. Systemd 支持的 12 种 Unit 文件类型\n\n- .automount：用于控制自动挂载文件系统，相当于 SysV-init 的 autofs 服务\n- .device：对于 /dev 目录下的设备，主要用于定义设备之间的依赖关系\n- .mount：定义系统结构层次中的一个挂载点，可以替代过去的 /etc/fstab 配置文件\n- .path：用于监控指定目录或文件的变化，并触发其它 Unit 运行\n- .scope：这种 Unit 文件不是用户创建的，而是 Systemd 运行时产生的，描述一些系统服务的分组信息\n- .service：封装守护进程的启动、停止、重启和重载操作，是最常见的一种 Unit 文件\n- .slice：用于表示一个 CGroup 的树，通常用户不会自己创建这样的 Unit 文件\n- .snapshot：用于表示一个由 systemctl snapshot 命令创建的 Systemd Units 运行状态快照\n- .socket：监控来自于系统或网络的数据消息，用于实现基于数据自动触发服务启动\n- .swap：定义一个用户做虚拟内存的交换分区\n- .target：用于对 Unit 文件进行逻辑分组，引导其它 Unit 的执行。它替代了 SysV-init 运行级别的作用，并提供更灵活的基于特定设备事件的启动方式\n- .timer：用于配置在特定时间触发的任务，替代了 Crontab 的功能\n\n1. Systemd 目录\n\nUnit 文件按照 Systemd 约定，应该被放置指定的三个系统目录之一中。这三个目录是有优先级的，如下所示，越靠上的优先级越高。因此，在三个目录中有同名文件的时候，只有优先级最高的目录里的那个文件会被使用。\n\n- /etc/systemd/system：系统或用户自定义的配置文件\n- /run/systemd/system：软件运行时生成的配置文件\n- /usr/lib/systemd/system：系统或第三方软件安装时添加的配置文件。\n  - CentOS 7：Unit 文件指向该目录\n  - ubuntu 16：被移到了 /lib/systemd/system\n\nSystemd 默认从目录 /etc/systemd/system/ 读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录 /usr/lib/systemd/system/，真正的配置文件存放在那个目录。\n\n1. Unit 和 Target\n\nUnit 是 Systemd 管理系统资源的基本单元，可以认为每个系统资源就是一个 Unit，并使用一个 Unit 文件定义。在 Unit 文件中需要包含相应服务的描述、属性以及需要运行的命令。\n\nTarget 是 Systemd 中用于指定系统资源启动组的方式，相当于 SysV-init 中的运行级别。\n\n简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于”状态点”，启动某个 Target 就好比启动到某种状态。\n\n## **Systemd Service Unit**\n\n### **Unit 文件结构**\n\n```javascript\n[Unit]\nDescription=Hello World\nAfter=docker.service\nRequires=docker.service\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker kill busybox1\nExecStartPre=-/usr/bin/docker rm busybox1\nExecStartPre=/usr/bin/docker pull busybox\nExecStart=/usr/bin/docker run --name busybox1 busybox /bin/ sh -c \"while true; do echo Hello World; sleep 1; done\"\nExecStop=\"/usr/bin/docker stop busybox1\"\nExecStopPost=\"/usr/bin/docker rm busybox1\"\n[Install]\nWantedBy=multi-user.target\n```\n\n如下所示，Systemd 服务的 Unit 文件可以分为三个配置区段：\n\n- Unit 和 Install 段：所有 Unit 文件通用，用于配置服务（或其它系统资源）的描述、依赖和随系统启动的方式\n- Service 段：服务（Service）类型的 Unit 文件（后缀为 .service）特有的，用于定义服务的具体管理和操作方法\n\n#### **Unit 段**\n\n- Description：描述这个 Unit 文件的信息\n- Documentation：指定服务的文档，可以是一个或多个文档的 URL 路径\n- Requires：依赖的其它 Unit 列表，列在其中的 Unit 模板会在这个服务启动时的同时被启动。并且，如果其中任意一个服务启动失败，这个服务也会被终止\n- Wants：与 Requires 相似，但只是在被配置的这个 Unit 启动时，触发启动列出的每个 Unit 模块，而不去考虑这些模板启动是否成功\n- After：与 Requires 相似，但是在后面列出的所有模块全部启动完成以后，才会启动当前的服务\n- Before：与 After 相反，在启动指定的任务一个模块之间，都会首先确证当前服务已经运行\n- Binds To：与 Requires 相似，失败时失败，成功时成功，但是在这些模板中有任意一个出现意外结束或重启时，这个服务也会跟着终止或重启\n- Part Of：一个 Bind To 作用的子集，仅在列出的任务模块失败或重启时，终止或重启当前服务，而不会随列出模板的启动而启动\n- OnFailure：当这个模板启动失败时，就会自动启动列出的每个模块\n- Conflicts：与这个模块有冲突的模块，如果列出的模块中有已经在运行的，这个服务就不能启动，反之亦然\n\n#### **Install 段**\n\n这部分配置的目标模块通常是特定运行目标的 .target 文件，用来使得服务在系统启动时自动运行。这个区段可以包含三种启动约束：\n\n- WantedBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入 /etc/systemd/system 目录下面以 <Target 名> + .wants 后缀构成的子目录中，如 “/etc/systemd/system/multi-user.target.wants/“\n\n```javascript\n# find /etc/systemd/system/* -type d\n/etc/systemd/system/default.target.wants\n/etc/systemd/system/getty.target.wants\n/etc/systemd/system/graphical.target.wants\n/etc/systemd/system/multi-user.target.wants\n/etc/systemd/system/network-online.target.wants\n/etc/systemd/system/paths.target.wants\n/etc/systemd/system/shutdown.target.wants\n/etc/systemd/system/sockets.target.wants\n/etc/systemd/system/sysinit.target.wants\n/etc/systemd/system/timers.target.wants\n```\n\n- RequiredBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入 /etc/systemd/system 目录下面以 <Target 名> + .required 后缀构成的子目录中\n- Also：当前 Unit enable/disable 时，同时 enable/disable 的其他 Unit\n- Alias：当前 Unit 可用于启动的别名\n\n1. SysV-init 运行级别与 Systemd Target 对应的 Unit 文件\n\n![img](https://ask.qcloudimg.com/http-save/yehe-5449090/mvna7qlr41.png?imageView2/2/w/1620)\n\n通过 systemctl list-units --type=target 命令可以获取当前正在使用的运行目标\n\n```javascript\n# systemctl list-units --type=target\nUNIT                   LOAD   ACTIVE SUB    DESCRIPTION\nbasic.target           loaded active active Basic System\ncryptsetup.target      loaded active active Encrypted Volumes\ngetty.target           loaded active active Login Prompts\ngraphical.target       loaded active active Graphical Interface\nlocal-fs-pre.target    loaded active active Local File Systems (Pre)\nlocal-fs.target        loaded active active Local File Systems\nmulti-user.target      loaded active active Multi-User System\nnetwork-online.target  loaded active active Network is Online\nnetwork.target         loaded active active Network\nnss-user-lookup.target loaded active active User and Group Name Lookups\npaths.target           loaded active active Paths\nremote-fs-pre.target   loaded active active Remote File Systems (Pre)\nremote-fs.target       loaded active active Remote File Systems\nslices.target          loaded active active Slices\nsockets.target         loaded active active Sockets\nsound.target           loaded active active Sound Card\nswap.target            loaded active active Swap\nsysinit.target         loaded active active System Initialization\ntime-sync.target       loaded active active System Time Synchronized\ntimers.target          loaded active active Timers\nLOAD   = Reflects whether the unit definition was properly loaded.\nACTIVE = The high-level unit activation state, i.e. generalization of SUB.\nSUB    = The low-level unit activation state, values depend on unit type.\n20 loaded units listed. Pass --all to see loaded but inactive units, too.\nTo show all installed unit files use 'systemctl list-unit-files'.\n```\n\n#### **Service 段**\n\n用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段分为服务生命周期和服务上下文配置两个方面。\n\n1. 服务生命周期控制相关\n\n- Type：定义启动时的进程行为，它有以下几种值：\n  - Type=simple：默认值，执行ExecStart指定的命令，启动主进程\n  - Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n  - Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n  - Type=dbus：当前服务通过D-Bus启动\n  - Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n  - Type=idle：若有其他任务执行完毕，当前服务才会运行\n- RemainAfterExit：值为 true 或 false（默认）。当配置为 true 时，Systemd 只会负责启动服务进程，之后即便服务进程退出了，Systemd 也仍然会认为这个服务还在运行中。这个配置主要是提供给一些并非常驻内存，而是启动注册后立即退出，然后等待消息按需启动的特殊类型服务使用的。\n- ExecStart：启动当前服务的命令\n- ExecStartPre：启动当前服务之前执行的命令\n- ExecStartPos：启动当前服务之后执行的命令\n- ExecReload：重启当前服务时执行的命令\n- ExecStop：停止当前服务时执行的命令\n- ExecStopPost：停止当其服务之后执行的命令\n- RestartSec：自动重启当前服务间隔的秒数\n- Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括 always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog\n- TimeoutStartSec：启动服务时等待的秒数，这一配置对于使用 Docker 容器而言显得尤为重要，因其第一次运行时可能需要下载镜像，严重延时会容易被 Systemd 误判为启动失败杀死。通常，对于这种服务，将此值指定为 0，从而关闭超时检测\n- TimeoutStopSec：停止服务时的等待秒数，如果超过这个时间仍然没有停止，Systemd 会使用 SIGKILL 信号强行杀死服务的进程\n\n1. 服务上下文配置相关\n\n- Environment：为服务指定环境变量\n- EnvironmentFile：指定加载一个包含服务所需的环境变量的列表的文件，文件中的每一行都是一个环境变量的定义\n- Nice：服务的进程优先级，值越小优先级越高，默认为 0。其中 -20 为最高优先级，19 为最低优先级\n- WorkingDirectory：指定服务的工作目录\n- RootDirectory：指定服务进程的根目录（/ 目录）。如果配置了这个参数，服务将无法访问指定目录以外的任何文件\n- User：指定运行服务的用户\n- Group：指定运行服务的用户组\n- MountFlags：服务的 Mount Namespace 配置，会影响进程上下文中挂载点的信息，即服务是否会继承主机上已有挂载点，以及如果服务运行执行了挂载或卸载设备的操作，是否会真实地在主机上产生效果。可选值为 shared、slaved 或 private\n  - shared：服务与主机共用一个 Mount Namespace，继承主机挂载点，且服务挂载或卸载设备会真实地反映到主机上\n  - slave：服务使用独立的 Mount Namespace，它会继承主机挂载点，但服务对挂载点的操作只有在自己的 Namespace 内生效，不会反映到主机上\n  - private：服务使用独立的 Mount Namespace，它在启动时没有任何任何挂载点，服务对挂载点的操作也不会反映到主机上\n- LimitCPU / LimitSTACK / LimitNOFILE / LimitNPROC 等：限制特定服务的系统资源量，例如 CPU、程序堆栈、文件句柄数量、子进程数量等\n\n> 注意：如果在 ExecStart、ExecStop 等属性中使用了 Linux 命令，则必须要写出完整的绝对路径。对于 ExecStartPre 和 ExecStartPost 辅助命令，若前面有个 “-” 符号，表示忽略这些命令的出错。因为有些 “辅助” 命令本来就不一定成功，比如尝试清空一个文件，但文件可能不存在。\n\n### **Unit 文件占位符和模板**\n\n#### **Unit 文件占位符**\n\n在 Unit 文件中，有时会需要使用到一些与运行环境有关的信息，例如节点 ID、运行服务的用户等。这些信息可以使用占位符来表示，然后在实际运行被动态地替换实际的值。\n\n- %n：完整的 Unit 文件名字，包括 .service 后缀名\n- %p：Unit 模板文件名中 @ 符号之前的部分，不包括 @ 符号\n- %i：Unit 模板文件名中 @ 符号之后的部分，不包括 @ 符号和 .service 后缀名\n- %t：存放系统运行文件的目录，通常是 “run”\n- %u：运行服务的用户，如果 Unit 文件中没有指定，则默认为 root\n- %U：运行服务的用户 ID\n- %h：运行服务的用户 Home 目录，即 %{HOME} 环境变量的值\n- %s：运行服务的用户默认 Shell 类型，即 %{SHELL} 环境变量的值\n- %m：实际运行节点的 Machine ID，对于运行位置每个的服务比较有用\n- %b：Boot ID，这是一个随机数，每个节点各不相同，并且每次节点重启时都会改变\n- %H：实际运行节点的主机名\n- %v：内核版本，即 “uname -r” 命令输出的内容\n- %%：在 Unit 模板文件中表示一个普通的百分号\n\n#### **Unit 模板**\n\n在现实中，往往有一些应用需要被复制多份运行。例如，用于同一个[负载均衡](https://cloud.tencent.com/product/clb?from=10680)器分流的多个服务实例，或者为每个 SSH 连接建立一个独立的 sshd 服务进程。\n\nUnit 模板文件的写法与普通的服务 Unit 文件基本相同，不过 Unit 模板的文件名是以 @ 符号结尾的。通过模板启动服务实例时，需要在其文件名的 @ 字符后面附加一个参数字符串。\n\n1. 示例：apache@.service\n\n- apache@.service 模板\n\n```javascript\n[Unit]\nDescription=My Advanced Service Template\nAfter=etcd.service docker.service\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker kill apache%i\nExecStartPre=-/usr/bin/docker rm apache%i\nExecStartPre=/usr/bin/docker pull coreos/apache\nExecStart=/usr/bin/docker run --name apache%i -p %i:80 coreos/apache /usr/sbin/apache2ctl -D FOREGROUND\nExecStartPost=/usr/bin/etcdctl set /domains/example.com/%H:%i running\nExecStop=/usr/bin/docker stop apache1\nExecStopPost=/usr/bin/docker rm apache1\nExecStopPost=/usr/bin/etcdctl rm /domains/example.com/%H:%i\n[Install]\nWantedBy=multi-user.target\n```\n\n- 启动 Unit 模板的服务实例\n\n在服务启动时需要在 @ 后面放置一个用于区分服务实例的附加字符参数，通常这个参数用于监控的端口号或控制台 TTY 编译号。\n\n```javascript\n# systemctl start apache@8080.service\n```\n\nSystemd 在运行服务时，总是会先尝试找到一个完整匹配的 Unit 文件，如果没有找到，才会尝试选择匹配模板。例如上面的命令，System 首先会在约定的目录下寻找名为 apache@8080.service 的文件，如果没有找到，而文件名中包含 @ 字符，它就会尝试去掉后缀参数匹配模板文件。对于 apache@8080.service，systemd 会找到 apache@.service 模板文件，并通过这个模板文件将服务实例化。\n\n## **Systemd 的资源管理**\n\n### **Systemctl 命令**\n\n```javascript\n# systemctl --help\nsystemctl [OPTIONS...] {COMMAND} ...\nQuery or send control commands to the systemd manager.\n  -h --help           Show this help\n     --version        Show package version\n     --system         Connect to system manager\n  -H --host=[USER@]HOST\n                      Operate on remote host\n  -M --machine=CONTAINER\n                      Operate on local container\n  -t --type=TYPE      List units of a particular type\n     --state=STATE    List units with particular LOAD or SUB or ACTIVE state\n  -p --property=NAME  Show only properties by this name\n  -a --all            Show all loaded units/properties, including dead/empty\n                      ones. To list all units installed on the system, use\n                      the 'list-unit-files' command instead.\n  -l --full           Don't ellipsize unit names on output\n  -r --recursive      Show unit list of host and local containers\n     --reverse        Show reverse dependencies with 'list-dependencies'\n     --job-mode=MODE  Specify how to deal with already queued jobs, when\n                      queueing a new job\n     --show-types     When showing sockets, explicitly show their type\n  -i --ignore-inhibitors\n                      When shutting down or sleeping, ignore inhibitors\n     --kill-who=WHO   Who to send signal to\n  -s --signal=SIGNAL  Which signal to send\n     --now            Start or stop unit in addition to enabling or disabling it\n  -q --quiet          Suppress output\n     --no-block       Do not wait until operation finished\n     --no-wall        Don't send wall message before halt/power-off/reboot\n     --no-reload      Don't reload daemon after en-/dis-abling unit files\n     --no-legend      Do not print a legend (column headers and hints)\n     --no-pager       Do not pipe output into a pager\n     --no-ask-password\n                      Do not ask for system passwords\n     --global         Enable/disable unit files globally\n     --runtime        Enable unit files only temporarily until next reboot\n  -f --force          When enabling unit files, override existing symlinks\n                      When shutting down, execute action immediately\n     --preset-mode=   Apply only enable, only disable, or all presets\n     --root=PATH      Enable unit files in the specified root directory\n  -n --lines=INTEGER  Number of journal entries to show\n  -o --output=STRING  Change journal output mode (short, short-iso,\n                              short-precise, short-monotonic, verbose,\n                              export, json, json-pretty, json-sse, cat)\n     --plain          Print unit dependencies as a list instead of a tree\nUnit Commands:\n  list-units [PATTERN...]         List loaded units\n  list-sockets [PATTERN...]       List loaded sockets ordered by address\n  list-timers [PATTERN...]        List loaded timers ordered by next elapse\n  start NAME...                   Start (activate) one or more units\n  stop NAME...                    Stop (deactivate) one or more units\n  reload NAME...                  Reload one or more units\n  restart NAME...                 Start or restart one or more units\n  try-restart NAME...             Restart one or more units if active\n  reload-or-restart NAME...       Reload one or more units if possible,\n                                  otherwise start or restart\n  reload-or-try-restart NAME...   Reload one or more units if possible,\n                                  otherwise restart if active\n  isolate NAME                    Start one unit and stop all others\n  kill NAME...                    Send signal to processes of a unit\n  is-active PATTERN...            Check whether units are active\n  is-failed PATTERN...            Check whether units are failed\n  status [PATTERN...|PID...]      Show runtime status of one or more units\n  show [PATTERN...|JOB...]        Show properties of one or more\n                                  units/jobs or the manager\n  cat PATTERN...                  Show files and drop-ins of one or more units\n  set-property NAME ASSIGNMENT... Sets one or more properties of a unit\n  help PATTERN...|PID...          Show manual for one or more units\n  reset-failed [PATTERN...]       Reset failed state for all, one, or more\n                                  units\n  list-dependencies [NAME]        Recursively show units which are required\n                                  or wanted by this unit or by which this\n                                  unit is required or wanted\nUnit File Commands:\n  list-unit-files [PATTERN...]    List installed unit files\n  enable NAME...                  Enable one or more unit files\n  disable NAME...                 Disable one or more unit files\n  reenable NAME...                Reenable one or more unit files\n  preset NAME...                  Enable/disable one or more unit files\n                                  based on preset configuration\n  preset-all                      Enable/disable all unit files based on\n                                  preset configuration\n  is-enabled NAME...              Check whether unit files are enabled\n  mask NAME...                    Mask one or more units\n  unmask NAME...                  Unmask one or more units\n  link PATH...                    Link one or more units files into\n                                  the search path\n  add-wants TARGET NAME...        Add 'Wants' dependency for the target\n                                  on specified one or more units\n  add-requires TARGET NAME...     Add 'Requires' dependency for the target\n                                  on specified one or more units\n  edit NAME...                    Edit one or more unit files\n  get-default                     Get the name of the default target\n  set-default NAME                Set the default target\nMachine Commands:\n  list-machines [PATTERN...]      List local containers and host\nJob Commands:\n  list-jobs [PATTERN...]          List jobs\n  cancel [JOB...]                 Cancel all, one, or more jobs\nSnapshot Commands:\n  snapshot [NAME]                 Create a snapshot\n  delete NAME...                  Remove one or more snapshots\nEnvironment Commands:\n  show-environment                Dump environment\n  set-environment NAME=VALUE...   Set one or more environment variables\n  unset-environment NAME...       Unset one or more environment variables\n  import-environment [NAME...]    Import all or some environment variables\nManager Lifecycle Commands:\n  daemon-reload                   Reload systemd manager configuration\n  daemon-reexec                   Reexecute systemd manager\nSystem Commands:\n  is-system-running               Check whether system is fully running\n  default                         Enter system default mode\n  rescue                          Enter system rescue mode\n  emergency                       Enter system emergency mode\n  halt                            Shut down and halt the system\n  poweroff                        Shut down and power-off the system\n  reboot [ARG]                    Shut down and reboot the system\n  kexec                           Shut down and reboot the system with kexec\n  exit                            Request user instance exit\n  switch-root ROOT [INIT]         Change to a different root file system\n  suspend                         Suspend the system\n  hibernate                       Hibernate the system\n  hybrid-sleep                    Hibernate and suspend the system\n```\n\n### **Unit 管理**\n\n1. 查看当前系统的所有 Unit\n\n```javascript\n# 列出正在运行的 Unit\n$ systemctl list-units\n\n# 列出所有Unit，包括没有找到配置文件的或者启动失败的\n$ systemctl list-units --all\n\n# 列出所有没有运行的 Unit\n$ systemctl list-units --all --state=inactive\n\n# 列出所有加载失败的 Unit\n$ systemctl list-units --failed\n\n# 列出所有正在运行的、类型为 service 的 Unit\n$ systemctl list-units --type=service\n\n# 查看 Unit 配置文件的内容\n$ systemctl cat docker.service\n```\n\n1. 查看 Unit 的状态\n\n- enabled：已建立启动链接\n- disabled：没建立启动链接\n- static：该配置文件没有 [Install] 部分（无法执行），只能作为其他配置文件的依赖\n- masked：该配置文件被禁止建立启动链接\n\n```javascript\n# 显示系统状态\n$ systemctl status\n\n# 显示单个 Unit 的状态\n$ ystemctl status bluetooth.service\n\n# 显示远程主机的某个 Unit 的状态\n$ systemctl -H root@rhel7.example.com status httpd.service\n```\n\n1. Unit 的管理\n\n```javascript\n# 立即启动一个服务\n$ sudo systemctl start apache.service\n\n# 立即停止一个服务\n$ sudo systemctl stop apache.service\n\n# 重启一个服务\n$ sudo systemctl restart apache.service\n\n# 杀死一个服务的所有子进程\n$ sudo systemctl kill apache.service\n\n# 重新加载一个服务的配置文件\n$ sudo systemctl reload apache.service\n\n# 重载所有修改过的配置文件\n$ sudo systemctl daemon-reload\n\n# 显示某个 Unit 的所有底层参数\n$ systemctl show httpd.service\n\n# 显示某个 Unit 的指定属性的值\n$ systemctl show -p CPUShares httpd.service\n\n# 设置某个 Unit 的指定属性\n$ sudo systemctl set-property httpd.service CPUShares=500\n```\n\n1. 查看 Unit 的依赖关系\n\n```javascript\n# 列出一个 Unit 的所有依赖，默认不会列出 target 类型\n$ systemctl list-dependencies nginx.service\n\n# 列出一个 Unit 的所有依赖，包括 target 类型\n$ systemctl list-dependencies --all nginx.service\n```\n\n### **服务的生命周期**\n\n当一个新的 Unit 文件被放入 /etc/systemd/system/ 或 /usr/lib/systemd/system/ 目录中时，它是不会被自识识别的。\n\n1. 服务的激活\n\n- systemctl enable：在 /etc/systemd/system/ 建立服务的符号链接，指向 /usr/lib/systemd/system/ 中\n- systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令\n\n1. 服务的启动和停止\n\n- systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令\n- systemctl stop：依次停止定义在 Unit 文件中的 ExecStopPre、ExecStop 和 ExecStopPost 命令\n- systemctl restart：重启服务\n- systemctl kill：立即杀死服务\n\n1. 服务的开机启动和取消\n\n- systemctl enable：除了激活服务以外，也可以置服务为开机启动\n- systemctl disable：取消服务的开机启动\n\n1. 服务的修改和移除\n\n- systemctl daemon-reload：Systemd 会将 Unit 文件的内容写到缓存中，因此当 Unit 文件被更新时，需要告诉 Systemd 重新读取所有的 Unit 文件\n- systemctl reset-failed：移除标记为丢失的 Unit 文件。在删除 Unit 文件后，由于缓存的关系，即使通过 daemon-reload 更新了缓存，在 list-units 中依然会显示标记为 not-found 的 Unit。\n\n### **Target 管理**\n\nTarget 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。\n\n在传统的 SysV-init 启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。\n\n```javascript\n# 查看当前系统的所有 Target\n$ systemctl list-unit-files --type=target\n\n# 查看一个 Target 包含的所有 Unit\n$ systemctl list-dependencies multi-user.target\n\n# 查看启动时的默认 Target\n$ systemctl get-default\n\n# 设置启动时的默认 Target\n$ sudo systemctl set-default multi-user.target\n\n# 切换 Target 时，默认不关闭前一个 Target 启动的进程，systemctl isolate 命令改变这种行为，关闭前一个 Target 里面所有不属于后一个 Target 的进程\n$ sudo systemctl isolate multi-user.target\n```\n\n1. Target 与 SysV-init 进程的主要区别：\n\n- 默认的 RunLevel（在 /etc/inittab 文件设置）现在被默认的 Target 取代，位置是 /etc/systemd/system/default.target，通常符号链接到graphical.target（图形界面）或者multi-user.target（多用户命令行）。\n- 启动脚本的位置，以前是 /etc/init.d 目录，符号链接到不同的 RunLevel 目录 （比如 /etc/rc3.d、/etc/rc5.d 等），现在则存放在 /lib/systemd/system 和 /etc/systemd/system 目录。\n- 配置文件的位置，以前 init 进程的配置文件是 /etc/inittab，各种服务的配置文件存放在 /etc/sysconfig 目录。现在的配置文件主要存放在 /lib/systemd 目录，在 /etc/systemd 目录里面的修改可以覆盖原始设置。\n\n### **日志管理**\n\nSystemd 通过其标准日志服务 Journald 提供的配套程序 journalctl 将其管理的所有后台进程打印到 std:out（即控制台）的输出重定向到了日志文件。\n\nSystemd 的日志文件是二进制格式的，必须使用 Journald 提供的 journalctl 来查看，默认不带任何参数时会输出系统和所有后台进程的混合日志。\n\n默认日志最大限制为所在文件系统容量的 10%，可以修改 /etc/systemd/journald.conf 中的 SystemMaxUse 来指定该最大限制。\n\n```javascript\n# 查看所有日志（默认情况下 ，只保存本次启动的日志）\n$ sudo journalctl\n\n# 查看内核日志（不显示应用日志）：--dmesg 或 -k\n$ sudo journalctl -k\n\n# 查看系统本次启动的日志（其中包括了内核日志和各类系统服务的控制台输出）：--system 或 -b\n$ sudo journalctl -b\n$ sudo journalctl -b -0\n\n# 查看上一次启动的日志（需更改设置）\n$ sudo journalctl -b -1\n\n# 查看指定服务的日志：--unit 或 -u\n$ sudo journalctl -u docker.servcie\n\n# 查看指定服务的日志\n$ sudo journalctl /usr/lib/systemd/systemd\n\n# 实时滚动显示最新日志\n$ sudo journalctl -f\n\n# 查看指定时间的日志\n$ sudo journalctl --since=\"2012-10-30 18:17:16\"\n$ sudo journalctl --since \"20 min ago\"\n$ sudo journalctl --since yesterday\n$ sudo journalctl --since \"2015-01-10\" --until \"2015-01-11 03:00\"\n$ sudo journalctl --since 09:00 --until \"1 hour ago\"\n\n# 显示尾部的最新 10 行日志：--lines 或 -n\n$ sudo journalctl -n\n\n# 显示尾部指定行数的日志\n$ sudo journalctl -n 20\n\n# 将最新的日志显示在前面\n$ sudo journalctl -r -u docker.service\n\n# 改变输出的格式：--output 或 -o\n$ sudo journalctl -r -u docker.service -o json-pretty\n\n# 查看指定进程的日志\n$ sudo journalctl _PID=1\n\n# 查看某个路径的脚本的日志\n$ sudo journalctl /usr/bin/bash\n\n# 查看指定用户的日志\n$ sudo journalctl _UID=33 --since today\n\n# 查看某个 Unit 的日志\n$ sudo journalctl -u nginx.service\n$ sudo journalctl -u nginx.service --since today\n\n# 实时滚动显示某个 Unit 的最新日志\n$ sudo journalctl -u nginx.service -f\n\n# 合并显示多个 Unit 的日志\n$ journalctl -u nginx.service -u php-fpm.service --since today\n\n# 查看指定优先级（及其以上级别）的日志，共有 8 级\n# 0: emerg\n# 1: alert\n# 2: crit\n# 3: err\n# 4: warning\n# 5: notice\n# 6: info\n# 7: debug\n$ sudo journalctl -p err -b\n\n# 日志默认分页输出，--no-pager 改为正常的标准输出\n$ sudo journalctl --no-pager\n\n# 以 JSON 格式（单行）输出\n$ sudo journalctl -b -u nginx.service -o json\n\n# 以 JSON 格式（多行）输出，可读性更好\n$ sudo journalctl -b -u nginx.serviceqq\n -o json-pretty\n\n# 显示日志占据的硬盘空间\n$ sudo journalctl --disk-usage\n\n# 指定日志文件占据的最大空间\n$ sudo journalctl --vacuum-size=1G\n\n# 指定日志文件保存多久\n$ sudo journalctl --vacuum-time=1years\n```\n\n## **Systemd 工具集**\n\n- systemctl：用于检查和控制各种系统服务和资源的状态\n- bootctl：用于查看和管理系统启动分区\n- hostnamectl：用于查看和修改系统的主机名和主机信息\n- journalctl：用于查看系统日志和各类应用服务日志\n- localectl：用于查看和管理系统的地区信息\n- loginctl：用于管理系统已登录用户和 Session 的信息\n- machinectl：用于操作 Systemd 容器\n- timedatectl：用于查看和管理系统的时间和时区信息\n- systemd-analyze 显示此次系统启动时运行每个服务所消耗的时间，可以用于分析系统启动过程中的性能瓶颈\n- systemd-ask-password：辅助性工具，用星号屏蔽用户的任意输入，然后返回实际输入的内容\n- systemd-cat：用于将其他命令的输出重定向到系统日志\n- systemd-cgls：递归地显示指定 CGroup 的继承链\n- systemd-cgtop：显示系统当前最耗资源的 CGroup 单元\n- systemd-escape：辅助性工具，用于去除指定字符串中不能作为 Unit 文件名的字符\n- systemd-hwdb：Systemd 的内部工具，用于更新硬件数据库\n- systemd-delta：对比当前系统配置与默认系统配置的差异\n- systemd-detect-virt：显示主机的虚拟化类型\n- systemd-inhibit：用于强制延迟或禁止系统的关闭、睡眠和待机事件\n- systemd-machine-id-setup：Systemd 的内部工具，用于给 Systemd 容器生成 ID\n- systemd-notify：Systemd 的内部工具，用于通知服务的状态变化\n- systemd-nspawn：用于创建 Systemd 容器\n- systemd-path：Systemd 的内部工具，用于显示系统上下文中的各种路径配置\n- systemd-run：用于将任意指定的命令包装成一个临时的后台服务运行\n- systemd-stdio- bridge：Systemd 的内部 工具，用于将程序的标准输入输出重定向到系统总线\n- systemd-tmpfiles：Systemd 的内部工具，用于创建和管理临时文件目录\n- systemd-tty-ask-password-agent：用于响应后台服务进程发出的输入密码请求\n\n1. systemctl\n\n```javascript\n# 重启系统\n$ sudo systemctl reboot\n\n# 关闭系统，切断电源\n$ sudo systemctl poweroff\n\n# CPU停止工作\n$ sudo systemctl halt\n\n# 暂停系统\n$ sudo systemctl suspend\n\n# 让系统进入冬眠状态\n$ sudo systemctl hibernate\n\n# 让系统进入交互式休眠状态\n$ sudo systemctl hybrid-sleep\n\n# 启动进入救援状态（单用户状态）\n$ sudo systemctl rescue\n```\n\n1. systemd-analyze\n\n```javascript\n# 查看启动耗时\n$ systemd-analyze\n\n# 查看每个服务的启动耗时\n$ systemd-analyze blame\n\n# 显示瀑布状的启动过程流\n$ systemd-analyze critical-chain\n\n# 显示指定服务的启动流\n$ systemd-analyze critical-chain atd.service\n```\n\n1. hostnamectl\n\n```javascript\n# 显示当前主机的信息\n$ hostnamectl\n\n# 设置主机名。\n$ sudo hostnamectl set-hostname rhel7\n```\n\n1. timedatectl\n\n```javascript\n# 查看当前时区设置\n$ timedatectl\n\n# 显示所有可用的时区\n$ timedatectl list-timezones\n\n# 设置当前时区\n$ sudo timedatectl set-timezone America/New_York\n$ sudo timedatectl set-time YYYY-MM-DD\n$ sudo timedatectl set-time HH:MM:SS\n```\n\n1. loginctl\n\n```javascript\n# 列出当前 session\n$ loginctl list-sessions\n\n# 列出当前登录用户\n$ loginctl list-users\n\n# 列出显示指定用户的信息\n$ loginctl show-user ruanyf\n```\n\n1. systemd-ask-password\n\n```javascript\n$ PASSWORD=$(systemd-ask-password \"Input Your Passowrd:\")\n```\n\n1. systemd-run\n\nsystemd-run 可以将一个指定的操作变成后台运行的服务。它的效果似乎与直接在命令后加上表示后台运行的 & 符号很相似。然而，它让命令成为服务还意味着，它的生命周期将由 Systemd 控制。具体来说，包括以下好处：\n\n- 服务的生命击期由 Systemd 接管，不会随着启动它的控制台关闭而结束\n- 可以通过 systemctl 工具管理服务的状态\n- 可以通过 journalctl 工具查看和管理服务的日志信息\n- 可以通过 Systemd 提供的方法限制服务的 CPU、内存、磁盘 IO 等系统资源的使用情况。","source":"_posts/技术/linux/linux命令/Linux命令systemd.md","raw":"---\ntitle: Linux命令systemd\nabbrlink: 1026478354\ntags:\n\t- Linux\n\t- Centos\ndate: 2017-12-20\n---\n\n\n\n## **Systemd 概述**\n\n### **Systemd 简介**\n\nSystemd 是一系列工具的集合，其作用也远远不仅是启动操作系统，它还接管了后台服务、结束、状态查询，以及日志归档、设备管理、电源管理、定时任务等许多职责，并支持通过特定事件（如插入特定 USB 设备）和特定端口数据触发的 On-demand（按需）任务。\n\nSystemd 的后台服务还有一个特殊的身份——它是系统中 PID 值为 1 的进程。\n\n1. 更少的进程\n\nSystemd 提供了 服务按需启动 的能力，使得特定的服务只有在真定被请求时才启动。\n\n1. 允许更多的进程并行启动\n\n在 SysV-init 时代，将每个服务项目编号依次执行启动脚本。Ubuntu 的 Upstart 解决了没有直接依赖的启动之间的并行启动。而 Systemd 通过 Socket 缓存、DBus 缓存和建立临时挂载点等方法进一步解决了启动进程之间的依赖，做到了所有系统服务并发启动。对于用户自定义的服务，Systemd 允许配置其启动依赖项目，从而确保服务按必要的顺序运行。\n\n1. 使用 CGroup 跟踪和管理进程的生命周期\n\n在 Systemd 之间的主流应用管理服务都是使用 进程树 来跟踪应用的继承关系的，而进程的父子关系很容易通过 两次 fork 的方法脱离。\n\n而 Systemd 则提供通过 CGroup 跟踪进程关系，引补了这个缺漏。通过 CGroup 不仅能够实现服务之间访问隔离，限制特定应用程序对系统资源的访问配额，还能更精确地管理服务的生命周期。\n\n1. 统一管理服务日志\n\nSystemd 是一系列工具的集合， 包括了一个专用的系统日志管理服务：Journald。这个服务的设计初衷是克服现有 Syslog 服务的日志内容易伪造和日志格式不统一等缺点，Journald 用 二进制格式 保存所有的日志信息，因而日志内容很难被手工伪造。Journald 还提供了一个 journalctl 命令来查看日志信息，这样就使得不同服务输出的日志具有相同的排版格式， 便于数据的二次处理。\n\n### **Systemd 架构**\n\n![img](https://ask.qcloudimg.com/http-save/yehe-5449090/97kx52pwuj.png?imageView2/2/w/1620)\n\n## **Systemd 的 Unit 文件**\n\nSystemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）。\n\n在 Systemd 的生态圈中，Unit 文件统一了过去各种不同系统资源配置格式，例如服务的启/停、定时任务、设备自动挂载、网络配置、虚拟内存配置等。而 Systemd 通过不同的文件后缀来区分这些配置文件。\n\n1. Systemd 支持的 12 种 Unit 文件类型\n\n- .automount：用于控制自动挂载文件系统，相当于 SysV-init 的 autofs 服务\n- .device：对于 /dev 目录下的设备，主要用于定义设备之间的依赖关系\n- .mount：定义系统结构层次中的一个挂载点，可以替代过去的 /etc/fstab 配置文件\n- .path：用于监控指定目录或文件的变化，并触发其它 Unit 运行\n- .scope：这种 Unit 文件不是用户创建的，而是 Systemd 运行时产生的，描述一些系统服务的分组信息\n- .service：封装守护进程的启动、停止、重启和重载操作，是最常见的一种 Unit 文件\n- .slice：用于表示一个 CGroup 的树，通常用户不会自己创建这样的 Unit 文件\n- .snapshot：用于表示一个由 systemctl snapshot 命令创建的 Systemd Units 运行状态快照\n- .socket：监控来自于系统或网络的数据消息，用于实现基于数据自动触发服务启动\n- .swap：定义一个用户做虚拟内存的交换分区\n- .target：用于对 Unit 文件进行逻辑分组，引导其它 Unit 的执行。它替代了 SysV-init 运行级别的作用，并提供更灵活的基于特定设备事件的启动方式\n- .timer：用于配置在特定时间触发的任务，替代了 Crontab 的功能\n\n1. Systemd 目录\n\nUnit 文件按照 Systemd 约定，应该被放置指定的三个系统目录之一中。这三个目录是有优先级的，如下所示，越靠上的优先级越高。因此，在三个目录中有同名文件的时候，只有优先级最高的目录里的那个文件会被使用。\n\n- /etc/systemd/system：系统或用户自定义的配置文件\n- /run/systemd/system：软件运行时生成的配置文件\n- /usr/lib/systemd/system：系统或第三方软件安装时添加的配置文件。\n  - CentOS 7：Unit 文件指向该目录\n  - ubuntu 16：被移到了 /lib/systemd/system\n\nSystemd 默认从目录 /etc/systemd/system/ 读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录 /usr/lib/systemd/system/，真正的配置文件存放在那个目录。\n\n1. Unit 和 Target\n\nUnit 是 Systemd 管理系统资源的基本单元，可以认为每个系统资源就是一个 Unit，并使用一个 Unit 文件定义。在 Unit 文件中需要包含相应服务的描述、属性以及需要运行的命令。\n\nTarget 是 Systemd 中用于指定系统资源启动组的方式，相当于 SysV-init 中的运行级别。\n\n简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于”状态点”，启动某个 Target 就好比启动到某种状态。\n\n## **Systemd Service Unit**\n\n### **Unit 文件结构**\n\n```javascript\n[Unit]\nDescription=Hello World\nAfter=docker.service\nRequires=docker.service\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker kill busybox1\nExecStartPre=-/usr/bin/docker rm busybox1\nExecStartPre=/usr/bin/docker pull busybox\nExecStart=/usr/bin/docker run --name busybox1 busybox /bin/ sh -c \"while true; do echo Hello World; sleep 1; done\"\nExecStop=\"/usr/bin/docker stop busybox1\"\nExecStopPost=\"/usr/bin/docker rm busybox1\"\n[Install]\nWantedBy=multi-user.target\n```\n\n如下所示，Systemd 服务的 Unit 文件可以分为三个配置区段：\n\n- Unit 和 Install 段：所有 Unit 文件通用，用于配置服务（或其它系统资源）的描述、依赖和随系统启动的方式\n- Service 段：服务（Service）类型的 Unit 文件（后缀为 .service）特有的，用于定义服务的具体管理和操作方法\n\n#### **Unit 段**\n\n- Description：描述这个 Unit 文件的信息\n- Documentation：指定服务的文档，可以是一个或多个文档的 URL 路径\n- Requires：依赖的其它 Unit 列表，列在其中的 Unit 模板会在这个服务启动时的同时被启动。并且，如果其中任意一个服务启动失败，这个服务也会被终止\n- Wants：与 Requires 相似，但只是在被配置的这个 Unit 启动时，触发启动列出的每个 Unit 模块，而不去考虑这些模板启动是否成功\n- After：与 Requires 相似，但是在后面列出的所有模块全部启动完成以后，才会启动当前的服务\n- Before：与 After 相反，在启动指定的任务一个模块之间，都会首先确证当前服务已经运行\n- Binds To：与 Requires 相似，失败时失败，成功时成功，但是在这些模板中有任意一个出现意外结束或重启时，这个服务也会跟着终止或重启\n- Part Of：一个 Bind To 作用的子集，仅在列出的任务模块失败或重启时，终止或重启当前服务，而不会随列出模板的启动而启动\n- OnFailure：当这个模板启动失败时，就会自动启动列出的每个模块\n- Conflicts：与这个模块有冲突的模块，如果列出的模块中有已经在运行的，这个服务就不能启动，反之亦然\n\n#### **Install 段**\n\n这部分配置的目标模块通常是特定运行目标的 .target 文件，用来使得服务在系统启动时自动运行。这个区段可以包含三种启动约束：\n\n- WantedBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入 /etc/systemd/system 目录下面以 <Target 名> + .wants 后缀构成的子目录中，如 “/etc/systemd/system/multi-user.target.wants/“\n\n```javascript\n# find /etc/systemd/system/* -type d\n/etc/systemd/system/default.target.wants\n/etc/systemd/system/getty.target.wants\n/etc/systemd/system/graphical.target.wants\n/etc/systemd/system/multi-user.target.wants\n/etc/systemd/system/network-online.target.wants\n/etc/systemd/system/paths.target.wants\n/etc/systemd/system/shutdown.target.wants\n/etc/systemd/system/sockets.target.wants\n/etc/systemd/system/sysinit.target.wants\n/etc/systemd/system/timers.target.wants\n```\n\n- RequiredBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入 /etc/systemd/system 目录下面以 <Target 名> + .required 后缀构成的子目录中\n- Also：当前 Unit enable/disable 时，同时 enable/disable 的其他 Unit\n- Alias：当前 Unit 可用于启动的别名\n\n1. SysV-init 运行级别与 Systemd Target 对应的 Unit 文件\n\n![img](https://ask.qcloudimg.com/http-save/yehe-5449090/mvna7qlr41.png?imageView2/2/w/1620)\n\n通过 systemctl list-units --type=target 命令可以获取当前正在使用的运行目标\n\n```javascript\n# systemctl list-units --type=target\nUNIT                   LOAD   ACTIVE SUB    DESCRIPTION\nbasic.target           loaded active active Basic System\ncryptsetup.target      loaded active active Encrypted Volumes\ngetty.target           loaded active active Login Prompts\ngraphical.target       loaded active active Graphical Interface\nlocal-fs-pre.target    loaded active active Local File Systems (Pre)\nlocal-fs.target        loaded active active Local File Systems\nmulti-user.target      loaded active active Multi-User System\nnetwork-online.target  loaded active active Network is Online\nnetwork.target         loaded active active Network\nnss-user-lookup.target loaded active active User and Group Name Lookups\npaths.target           loaded active active Paths\nremote-fs-pre.target   loaded active active Remote File Systems (Pre)\nremote-fs.target       loaded active active Remote File Systems\nslices.target          loaded active active Slices\nsockets.target         loaded active active Sockets\nsound.target           loaded active active Sound Card\nswap.target            loaded active active Swap\nsysinit.target         loaded active active System Initialization\ntime-sync.target       loaded active active System Time Synchronized\ntimers.target          loaded active active Timers\nLOAD   = Reflects whether the unit definition was properly loaded.\nACTIVE = The high-level unit activation state, i.e. generalization of SUB.\nSUB    = The low-level unit activation state, values depend on unit type.\n20 loaded units listed. Pass --all to see loaded but inactive units, too.\nTo show all installed unit files use 'systemctl list-unit-files'.\n```\n\n#### **Service 段**\n\n用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段分为服务生命周期和服务上下文配置两个方面。\n\n1. 服务生命周期控制相关\n\n- Type：定义启动时的进程行为，它有以下几种值：\n  - Type=simple：默认值，执行ExecStart指定的命令，启动主进程\n  - Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\n  - Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\n  - Type=dbus：当前服务通过D-Bus启动\n  - Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\n  - Type=idle：若有其他任务执行完毕，当前服务才会运行\n- RemainAfterExit：值为 true 或 false（默认）。当配置为 true 时，Systemd 只会负责启动服务进程，之后即便服务进程退出了，Systemd 也仍然会认为这个服务还在运行中。这个配置主要是提供给一些并非常驻内存，而是启动注册后立即退出，然后等待消息按需启动的特殊类型服务使用的。\n- ExecStart：启动当前服务的命令\n- ExecStartPre：启动当前服务之前执行的命令\n- ExecStartPos：启动当前服务之后执行的命令\n- ExecReload：重启当前服务时执行的命令\n- ExecStop：停止当前服务时执行的命令\n- ExecStopPost：停止当其服务之后执行的命令\n- RestartSec：自动重启当前服务间隔的秒数\n- Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括 always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog\n- TimeoutStartSec：启动服务时等待的秒数，这一配置对于使用 Docker 容器而言显得尤为重要，因其第一次运行时可能需要下载镜像，严重延时会容易被 Systemd 误判为启动失败杀死。通常，对于这种服务，将此值指定为 0，从而关闭超时检测\n- TimeoutStopSec：停止服务时的等待秒数，如果超过这个时间仍然没有停止，Systemd 会使用 SIGKILL 信号强行杀死服务的进程\n\n1. 服务上下文配置相关\n\n- Environment：为服务指定环境变量\n- EnvironmentFile：指定加载一个包含服务所需的环境变量的列表的文件，文件中的每一行都是一个环境变量的定义\n- Nice：服务的进程优先级，值越小优先级越高，默认为 0。其中 -20 为最高优先级，19 为最低优先级\n- WorkingDirectory：指定服务的工作目录\n- RootDirectory：指定服务进程的根目录（/ 目录）。如果配置了这个参数，服务将无法访问指定目录以外的任何文件\n- User：指定运行服务的用户\n- Group：指定运行服务的用户组\n- MountFlags：服务的 Mount Namespace 配置，会影响进程上下文中挂载点的信息，即服务是否会继承主机上已有挂载点，以及如果服务运行执行了挂载或卸载设备的操作，是否会真实地在主机上产生效果。可选值为 shared、slaved 或 private\n  - shared：服务与主机共用一个 Mount Namespace，继承主机挂载点，且服务挂载或卸载设备会真实地反映到主机上\n  - slave：服务使用独立的 Mount Namespace，它会继承主机挂载点，但服务对挂载点的操作只有在自己的 Namespace 内生效，不会反映到主机上\n  - private：服务使用独立的 Mount Namespace，它在启动时没有任何任何挂载点，服务对挂载点的操作也不会反映到主机上\n- LimitCPU / LimitSTACK / LimitNOFILE / LimitNPROC 等：限制特定服务的系统资源量，例如 CPU、程序堆栈、文件句柄数量、子进程数量等\n\n> 注意：如果在 ExecStart、ExecStop 等属性中使用了 Linux 命令，则必须要写出完整的绝对路径。对于 ExecStartPre 和 ExecStartPost 辅助命令，若前面有个 “-” 符号，表示忽略这些命令的出错。因为有些 “辅助” 命令本来就不一定成功，比如尝试清空一个文件，但文件可能不存在。\n\n### **Unit 文件占位符和模板**\n\n#### **Unit 文件占位符**\n\n在 Unit 文件中，有时会需要使用到一些与运行环境有关的信息，例如节点 ID、运行服务的用户等。这些信息可以使用占位符来表示，然后在实际运行被动态地替换实际的值。\n\n- %n：完整的 Unit 文件名字，包括 .service 后缀名\n- %p：Unit 模板文件名中 @ 符号之前的部分，不包括 @ 符号\n- %i：Unit 模板文件名中 @ 符号之后的部分，不包括 @ 符号和 .service 后缀名\n- %t：存放系统运行文件的目录，通常是 “run”\n- %u：运行服务的用户，如果 Unit 文件中没有指定，则默认为 root\n- %U：运行服务的用户 ID\n- %h：运行服务的用户 Home 目录，即 %{HOME} 环境变量的值\n- %s：运行服务的用户默认 Shell 类型，即 %{SHELL} 环境变量的值\n- %m：实际运行节点的 Machine ID，对于运行位置每个的服务比较有用\n- %b：Boot ID，这是一个随机数，每个节点各不相同，并且每次节点重启时都会改变\n- %H：实际运行节点的主机名\n- %v：内核版本，即 “uname -r” 命令输出的内容\n- %%：在 Unit 模板文件中表示一个普通的百分号\n\n#### **Unit 模板**\n\n在现实中，往往有一些应用需要被复制多份运行。例如，用于同一个[负载均衡](https://cloud.tencent.com/product/clb?from=10680)器分流的多个服务实例，或者为每个 SSH 连接建立一个独立的 sshd 服务进程。\n\nUnit 模板文件的写法与普通的服务 Unit 文件基本相同，不过 Unit 模板的文件名是以 @ 符号结尾的。通过模板启动服务实例时，需要在其文件名的 @ 字符后面附加一个参数字符串。\n\n1. 示例：apache@.service\n\n- apache@.service 模板\n\n```javascript\n[Unit]\nDescription=My Advanced Service Template\nAfter=etcd.service docker.service\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker kill apache%i\nExecStartPre=-/usr/bin/docker rm apache%i\nExecStartPre=/usr/bin/docker pull coreos/apache\nExecStart=/usr/bin/docker run --name apache%i -p %i:80 coreos/apache /usr/sbin/apache2ctl -D FOREGROUND\nExecStartPost=/usr/bin/etcdctl set /domains/example.com/%H:%i running\nExecStop=/usr/bin/docker stop apache1\nExecStopPost=/usr/bin/docker rm apache1\nExecStopPost=/usr/bin/etcdctl rm /domains/example.com/%H:%i\n[Install]\nWantedBy=multi-user.target\n```\n\n- 启动 Unit 模板的服务实例\n\n在服务启动时需要在 @ 后面放置一个用于区分服务实例的附加字符参数，通常这个参数用于监控的端口号或控制台 TTY 编译号。\n\n```javascript\n# systemctl start apache@8080.service\n```\n\nSystemd 在运行服务时，总是会先尝试找到一个完整匹配的 Unit 文件，如果没有找到，才会尝试选择匹配模板。例如上面的命令，System 首先会在约定的目录下寻找名为 apache@8080.service 的文件，如果没有找到，而文件名中包含 @ 字符，它就会尝试去掉后缀参数匹配模板文件。对于 apache@8080.service，systemd 会找到 apache@.service 模板文件，并通过这个模板文件将服务实例化。\n\n## **Systemd 的资源管理**\n\n### **Systemctl 命令**\n\n```javascript\n# systemctl --help\nsystemctl [OPTIONS...] {COMMAND} ...\nQuery or send control commands to the systemd manager.\n  -h --help           Show this help\n     --version        Show package version\n     --system         Connect to system manager\n  -H --host=[USER@]HOST\n                      Operate on remote host\n  -M --machine=CONTAINER\n                      Operate on local container\n  -t --type=TYPE      List units of a particular type\n     --state=STATE    List units with particular LOAD or SUB or ACTIVE state\n  -p --property=NAME  Show only properties by this name\n  -a --all            Show all loaded units/properties, including dead/empty\n                      ones. To list all units installed on the system, use\n                      the 'list-unit-files' command instead.\n  -l --full           Don't ellipsize unit names on output\n  -r --recursive      Show unit list of host and local containers\n     --reverse        Show reverse dependencies with 'list-dependencies'\n     --job-mode=MODE  Specify how to deal with already queued jobs, when\n                      queueing a new job\n     --show-types     When showing sockets, explicitly show their type\n  -i --ignore-inhibitors\n                      When shutting down or sleeping, ignore inhibitors\n     --kill-who=WHO   Who to send signal to\n  -s --signal=SIGNAL  Which signal to send\n     --now            Start or stop unit in addition to enabling or disabling it\n  -q --quiet          Suppress output\n     --no-block       Do not wait until operation finished\n     --no-wall        Don't send wall message before halt/power-off/reboot\n     --no-reload      Don't reload daemon after en-/dis-abling unit files\n     --no-legend      Do not print a legend (column headers and hints)\n     --no-pager       Do not pipe output into a pager\n     --no-ask-password\n                      Do not ask for system passwords\n     --global         Enable/disable unit files globally\n     --runtime        Enable unit files only temporarily until next reboot\n  -f --force          When enabling unit files, override existing symlinks\n                      When shutting down, execute action immediately\n     --preset-mode=   Apply only enable, only disable, or all presets\n     --root=PATH      Enable unit files in the specified root directory\n  -n --lines=INTEGER  Number of journal entries to show\n  -o --output=STRING  Change journal output mode (short, short-iso,\n                              short-precise, short-monotonic, verbose,\n                              export, json, json-pretty, json-sse, cat)\n     --plain          Print unit dependencies as a list instead of a tree\nUnit Commands:\n  list-units [PATTERN...]         List loaded units\n  list-sockets [PATTERN...]       List loaded sockets ordered by address\n  list-timers [PATTERN...]        List loaded timers ordered by next elapse\n  start NAME...                   Start (activate) one or more units\n  stop NAME...                    Stop (deactivate) one or more units\n  reload NAME...                  Reload one or more units\n  restart NAME...                 Start or restart one or more units\n  try-restart NAME...             Restart one or more units if active\n  reload-or-restart NAME...       Reload one or more units if possible,\n                                  otherwise start or restart\n  reload-or-try-restart NAME...   Reload one or more units if possible,\n                                  otherwise restart if active\n  isolate NAME                    Start one unit and stop all others\n  kill NAME...                    Send signal to processes of a unit\n  is-active PATTERN...            Check whether units are active\n  is-failed PATTERN...            Check whether units are failed\n  status [PATTERN...|PID...]      Show runtime status of one or more units\n  show [PATTERN...|JOB...]        Show properties of one or more\n                                  units/jobs or the manager\n  cat PATTERN...                  Show files and drop-ins of one or more units\n  set-property NAME ASSIGNMENT... Sets one or more properties of a unit\n  help PATTERN...|PID...          Show manual for one or more units\n  reset-failed [PATTERN...]       Reset failed state for all, one, or more\n                                  units\n  list-dependencies [NAME]        Recursively show units which are required\n                                  or wanted by this unit or by which this\n                                  unit is required or wanted\nUnit File Commands:\n  list-unit-files [PATTERN...]    List installed unit files\n  enable NAME...                  Enable one or more unit files\n  disable NAME...                 Disable one or more unit files\n  reenable NAME...                Reenable one or more unit files\n  preset NAME...                  Enable/disable one or more unit files\n                                  based on preset configuration\n  preset-all                      Enable/disable all unit files based on\n                                  preset configuration\n  is-enabled NAME...              Check whether unit files are enabled\n  mask NAME...                    Mask one or more units\n  unmask NAME...                  Unmask one or more units\n  link PATH...                    Link one or more units files into\n                                  the search path\n  add-wants TARGET NAME...        Add 'Wants' dependency for the target\n                                  on specified one or more units\n  add-requires TARGET NAME...     Add 'Requires' dependency for the target\n                                  on specified one or more units\n  edit NAME...                    Edit one or more unit files\n  get-default                     Get the name of the default target\n  set-default NAME                Set the default target\nMachine Commands:\n  list-machines [PATTERN...]      List local containers and host\nJob Commands:\n  list-jobs [PATTERN...]          List jobs\n  cancel [JOB...]                 Cancel all, one, or more jobs\nSnapshot Commands:\n  snapshot [NAME]                 Create a snapshot\n  delete NAME...                  Remove one or more snapshots\nEnvironment Commands:\n  show-environment                Dump environment\n  set-environment NAME=VALUE...   Set one or more environment variables\n  unset-environment NAME...       Unset one or more environment variables\n  import-environment [NAME...]    Import all or some environment variables\nManager Lifecycle Commands:\n  daemon-reload                   Reload systemd manager configuration\n  daemon-reexec                   Reexecute systemd manager\nSystem Commands:\n  is-system-running               Check whether system is fully running\n  default                         Enter system default mode\n  rescue                          Enter system rescue mode\n  emergency                       Enter system emergency mode\n  halt                            Shut down and halt the system\n  poweroff                        Shut down and power-off the system\n  reboot [ARG]                    Shut down and reboot the system\n  kexec                           Shut down and reboot the system with kexec\n  exit                            Request user instance exit\n  switch-root ROOT [INIT]         Change to a different root file system\n  suspend                         Suspend the system\n  hibernate                       Hibernate the system\n  hybrid-sleep                    Hibernate and suspend the system\n```\n\n### **Unit 管理**\n\n1. 查看当前系统的所有 Unit\n\n```javascript\n# 列出正在运行的 Unit\n$ systemctl list-units\n\n# 列出所有Unit，包括没有找到配置文件的或者启动失败的\n$ systemctl list-units --all\n\n# 列出所有没有运行的 Unit\n$ systemctl list-units --all --state=inactive\n\n# 列出所有加载失败的 Unit\n$ systemctl list-units --failed\n\n# 列出所有正在运行的、类型为 service 的 Unit\n$ systemctl list-units --type=service\n\n# 查看 Unit 配置文件的内容\n$ systemctl cat docker.service\n```\n\n1. 查看 Unit 的状态\n\n- enabled：已建立启动链接\n- disabled：没建立启动链接\n- static：该配置文件没有 [Install] 部分（无法执行），只能作为其他配置文件的依赖\n- masked：该配置文件被禁止建立启动链接\n\n```javascript\n# 显示系统状态\n$ systemctl status\n\n# 显示单个 Unit 的状态\n$ ystemctl status bluetooth.service\n\n# 显示远程主机的某个 Unit 的状态\n$ systemctl -H root@rhel7.example.com status httpd.service\n```\n\n1. Unit 的管理\n\n```javascript\n# 立即启动一个服务\n$ sudo systemctl start apache.service\n\n# 立即停止一个服务\n$ sudo systemctl stop apache.service\n\n# 重启一个服务\n$ sudo systemctl restart apache.service\n\n# 杀死一个服务的所有子进程\n$ sudo systemctl kill apache.service\n\n# 重新加载一个服务的配置文件\n$ sudo systemctl reload apache.service\n\n# 重载所有修改过的配置文件\n$ sudo systemctl daemon-reload\n\n# 显示某个 Unit 的所有底层参数\n$ systemctl show httpd.service\n\n# 显示某个 Unit 的指定属性的值\n$ systemctl show -p CPUShares httpd.service\n\n# 设置某个 Unit 的指定属性\n$ sudo systemctl set-property httpd.service CPUShares=500\n```\n\n1. 查看 Unit 的依赖关系\n\n```javascript\n# 列出一个 Unit 的所有依赖，默认不会列出 target 类型\n$ systemctl list-dependencies nginx.service\n\n# 列出一个 Unit 的所有依赖，包括 target 类型\n$ systemctl list-dependencies --all nginx.service\n```\n\n### **服务的生命周期**\n\n当一个新的 Unit 文件被放入 /etc/systemd/system/ 或 /usr/lib/systemd/system/ 目录中时，它是不会被自识识别的。\n\n1. 服务的激活\n\n- systemctl enable：在 /etc/systemd/system/ 建立服务的符号链接，指向 /usr/lib/systemd/system/ 中\n- systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令\n\n1. 服务的启动和停止\n\n- systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令\n- systemctl stop：依次停止定义在 Unit 文件中的 ExecStopPre、ExecStop 和 ExecStopPost 命令\n- systemctl restart：重启服务\n- systemctl kill：立即杀死服务\n\n1. 服务的开机启动和取消\n\n- systemctl enable：除了激活服务以外，也可以置服务为开机启动\n- systemctl disable：取消服务的开机启动\n\n1. 服务的修改和移除\n\n- systemctl daemon-reload：Systemd 会将 Unit 文件的内容写到缓存中，因此当 Unit 文件被更新时，需要告诉 Systemd 重新读取所有的 Unit 文件\n- systemctl reset-failed：移除标记为丢失的 Unit 文件。在删除 Unit 文件后，由于缓存的关系，即使通过 daemon-reload 更新了缓存，在 list-units 中依然会显示标记为 not-found 的 Unit。\n\n### **Target 管理**\n\nTarget 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。\n\n在传统的 SysV-init 启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。\n\n```javascript\n# 查看当前系统的所有 Target\n$ systemctl list-unit-files --type=target\n\n# 查看一个 Target 包含的所有 Unit\n$ systemctl list-dependencies multi-user.target\n\n# 查看启动时的默认 Target\n$ systemctl get-default\n\n# 设置启动时的默认 Target\n$ sudo systemctl set-default multi-user.target\n\n# 切换 Target 时，默认不关闭前一个 Target 启动的进程，systemctl isolate 命令改变这种行为，关闭前一个 Target 里面所有不属于后一个 Target 的进程\n$ sudo systemctl isolate multi-user.target\n```\n\n1. Target 与 SysV-init 进程的主要区别：\n\n- 默认的 RunLevel（在 /etc/inittab 文件设置）现在被默认的 Target 取代，位置是 /etc/systemd/system/default.target，通常符号链接到graphical.target（图形界面）或者multi-user.target（多用户命令行）。\n- 启动脚本的位置，以前是 /etc/init.d 目录，符号链接到不同的 RunLevel 目录 （比如 /etc/rc3.d、/etc/rc5.d 等），现在则存放在 /lib/systemd/system 和 /etc/systemd/system 目录。\n- 配置文件的位置，以前 init 进程的配置文件是 /etc/inittab，各种服务的配置文件存放在 /etc/sysconfig 目录。现在的配置文件主要存放在 /lib/systemd 目录，在 /etc/systemd 目录里面的修改可以覆盖原始设置。\n\n### **日志管理**\n\nSystemd 通过其标准日志服务 Journald 提供的配套程序 journalctl 将其管理的所有后台进程打印到 std:out（即控制台）的输出重定向到了日志文件。\n\nSystemd 的日志文件是二进制格式的，必须使用 Journald 提供的 journalctl 来查看，默认不带任何参数时会输出系统和所有后台进程的混合日志。\n\n默认日志最大限制为所在文件系统容量的 10%，可以修改 /etc/systemd/journald.conf 中的 SystemMaxUse 来指定该最大限制。\n\n```javascript\n# 查看所有日志（默认情况下 ，只保存本次启动的日志）\n$ sudo journalctl\n\n# 查看内核日志（不显示应用日志）：--dmesg 或 -k\n$ sudo journalctl -k\n\n# 查看系统本次启动的日志（其中包括了内核日志和各类系统服务的控制台输出）：--system 或 -b\n$ sudo journalctl -b\n$ sudo journalctl -b -0\n\n# 查看上一次启动的日志（需更改设置）\n$ sudo journalctl -b -1\n\n# 查看指定服务的日志：--unit 或 -u\n$ sudo journalctl -u docker.servcie\n\n# 查看指定服务的日志\n$ sudo journalctl /usr/lib/systemd/systemd\n\n# 实时滚动显示最新日志\n$ sudo journalctl -f\n\n# 查看指定时间的日志\n$ sudo journalctl --since=\"2012-10-30 18:17:16\"\n$ sudo journalctl --since \"20 min ago\"\n$ sudo journalctl --since yesterday\n$ sudo journalctl --since \"2015-01-10\" --until \"2015-01-11 03:00\"\n$ sudo journalctl --since 09:00 --until \"1 hour ago\"\n\n# 显示尾部的最新 10 行日志：--lines 或 -n\n$ sudo journalctl -n\n\n# 显示尾部指定行数的日志\n$ sudo journalctl -n 20\n\n# 将最新的日志显示在前面\n$ sudo journalctl -r -u docker.service\n\n# 改变输出的格式：--output 或 -o\n$ sudo journalctl -r -u docker.service -o json-pretty\n\n# 查看指定进程的日志\n$ sudo journalctl _PID=1\n\n# 查看某个路径的脚本的日志\n$ sudo journalctl /usr/bin/bash\n\n# 查看指定用户的日志\n$ sudo journalctl _UID=33 --since today\n\n# 查看某个 Unit 的日志\n$ sudo journalctl -u nginx.service\n$ sudo journalctl -u nginx.service --since today\n\n# 实时滚动显示某个 Unit 的最新日志\n$ sudo journalctl -u nginx.service -f\n\n# 合并显示多个 Unit 的日志\n$ journalctl -u nginx.service -u php-fpm.service --since today\n\n# 查看指定优先级（及其以上级别）的日志，共有 8 级\n# 0: emerg\n# 1: alert\n# 2: crit\n# 3: err\n# 4: warning\n# 5: notice\n# 6: info\n# 7: debug\n$ sudo journalctl -p err -b\n\n# 日志默认分页输出，--no-pager 改为正常的标准输出\n$ sudo journalctl --no-pager\n\n# 以 JSON 格式（单行）输出\n$ sudo journalctl -b -u nginx.service -o json\n\n# 以 JSON 格式（多行）输出，可读性更好\n$ sudo journalctl -b -u nginx.serviceqq\n -o json-pretty\n\n# 显示日志占据的硬盘空间\n$ sudo journalctl --disk-usage\n\n# 指定日志文件占据的最大空间\n$ sudo journalctl --vacuum-size=1G\n\n# 指定日志文件保存多久\n$ sudo journalctl --vacuum-time=1years\n```\n\n## **Systemd 工具集**\n\n- systemctl：用于检查和控制各种系统服务和资源的状态\n- bootctl：用于查看和管理系统启动分区\n- hostnamectl：用于查看和修改系统的主机名和主机信息\n- journalctl：用于查看系统日志和各类应用服务日志\n- localectl：用于查看和管理系统的地区信息\n- loginctl：用于管理系统已登录用户和 Session 的信息\n- machinectl：用于操作 Systemd 容器\n- timedatectl：用于查看和管理系统的时间和时区信息\n- systemd-analyze 显示此次系统启动时运行每个服务所消耗的时间，可以用于分析系统启动过程中的性能瓶颈\n- systemd-ask-password：辅助性工具，用星号屏蔽用户的任意输入，然后返回实际输入的内容\n- systemd-cat：用于将其他命令的输出重定向到系统日志\n- systemd-cgls：递归地显示指定 CGroup 的继承链\n- systemd-cgtop：显示系统当前最耗资源的 CGroup 单元\n- systemd-escape：辅助性工具，用于去除指定字符串中不能作为 Unit 文件名的字符\n- systemd-hwdb：Systemd 的内部工具，用于更新硬件数据库\n- systemd-delta：对比当前系统配置与默认系统配置的差异\n- systemd-detect-virt：显示主机的虚拟化类型\n- systemd-inhibit：用于强制延迟或禁止系统的关闭、睡眠和待机事件\n- systemd-machine-id-setup：Systemd 的内部工具，用于给 Systemd 容器生成 ID\n- systemd-notify：Systemd 的内部工具，用于通知服务的状态变化\n- systemd-nspawn：用于创建 Systemd 容器\n- systemd-path：Systemd 的内部工具，用于显示系统上下文中的各种路径配置\n- systemd-run：用于将任意指定的命令包装成一个临时的后台服务运行\n- systemd-stdio- bridge：Systemd 的内部 工具，用于将程序的标准输入输出重定向到系统总线\n- systemd-tmpfiles：Systemd 的内部工具，用于创建和管理临时文件目录\n- systemd-tty-ask-password-agent：用于响应后台服务进程发出的输入密码请求\n\n1. systemctl\n\n```javascript\n# 重启系统\n$ sudo systemctl reboot\n\n# 关闭系统，切断电源\n$ sudo systemctl poweroff\n\n# CPU停止工作\n$ sudo systemctl halt\n\n# 暂停系统\n$ sudo systemctl suspend\n\n# 让系统进入冬眠状态\n$ sudo systemctl hibernate\n\n# 让系统进入交互式休眠状态\n$ sudo systemctl hybrid-sleep\n\n# 启动进入救援状态（单用户状态）\n$ sudo systemctl rescue\n```\n\n1. systemd-analyze\n\n```javascript\n# 查看启动耗时\n$ systemd-analyze\n\n# 查看每个服务的启动耗时\n$ systemd-analyze blame\n\n# 显示瀑布状的启动过程流\n$ systemd-analyze critical-chain\n\n# 显示指定服务的启动流\n$ systemd-analyze critical-chain atd.service\n```\n\n1. hostnamectl\n\n```javascript\n# 显示当前主机的信息\n$ hostnamectl\n\n# 设置主机名。\n$ sudo hostnamectl set-hostname rhel7\n```\n\n1. timedatectl\n\n```javascript\n# 查看当前时区设置\n$ timedatectl\n\n# 显示所有可用的时区\n$ timedatectl list-timezones\n\n# 设置当前时区\n$ sudo timedatectl set-timezone America/New_York\n$ sudo timedatectl set-time YYYY-MM-DD\n$ sudo timedatectl set-time HH:MM:SS\n```\n\n1. loginctl\n\n```javascript\n# 列出当前 session\n$ loginctl list-sessions\n\n# 列出当前登录用户\n$ loginctl list-users\n\n# 列出显示指定用户的信息\n$ loginctl show-user ruanyf\n```\n\n1. systemd-ask-password\n\n```javascript\n$ PASSWORD=$(systemd-ask-password \"Input Your Passowrd:\")\n```\n\n1. systemd-run\n\nsystemd-run 可以将一个指定的操作变成后台运行的服务。它的效果似乎与直接在命令后加上表示后台运行的 & 符号很相似。然而，它让命令成为服务还意味着，它的生命周期将由 Systemd 控制。具体来说，包括以下好处：\n\n- 服务的生命击期由 Systemd 接管，不会随着启动它的控制台关闭而结束\n- 可以通过 systemctl 工具管理服务的状态\n- 可以通过 journalctl 工具查看和管理服务的日志信息\n- 可以通过 Systemd 提供的方法限制服务的 CPU、内存、磁盘 IO 等系统资源的使用情况。","slug":"技术/linux/linux命令/Linux命令systemd","published":1,"updated":"2020-12-18T15:55:13.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiugesqu000nioxc601fbbwv","content":"<h2 id=\"Systemd-概述\"><a href=\"#Systemd-概述\" class=\"headerlink\" title=\"Systemd 概述\"></a><strong>Systemd 概述</strong></h2><h3 id=\"Systemd-简介\"><a href=\"#Systemd-简介\" class=\"headerlink\" title=\"Systemd 简介\"></a><strong>Systemd 简介</strong></h3><p>Systemd 是一系列工具的集合，其作用也远远不仅是启动操作系统，它还接管了后台服务、结束、状态查询，以及日志归档、设备管理、电源管理、定时任务等许多职责，并支持通过特定事件（如插入特定 USB 设备）和特定端口数据触发的 On-demand（按需）任务。</p>\n<p>Systemd 的后台服务还有一个特殊的身份——它是系统中 PID 值为 1 的进程。</p>\n<ol>\n<li>更少的进程</li>\n</ol>\n<p>Systemd 提供了 服务按需启动 的能力，使得特定的服务只有在真定被请求时才启动。</p>\n<ol>\n<li>允许更多的进程并行启动</li>\n</ol>\n<p>在 SysV-init 时代，将每个服务项目编号依次执行启动脚本。Ubuntu 的 Upstart 解决了没有直接依赖的启动之间的并行启动。而 Systemd 通过 Socket 缓存、DBus 缓存和建立临时挂载点等方法进一步解决了启动进程之间的依赖，做到了所有系统服务并发启动。对于用户自定义的服务，Systemd 允许配置其启动依赖项目，从而确保服务按必要的顺序运行。</p>\n<ol>\n<li>使用 CGroup 跟踪和管理进程的生命周期</li>\n</ol>\n<p>在 Systemd 之间的主流应用管理服务都是使用 进程树 来跟踪应用的继承关系的，而进程的父子关系很容易通过 两次 fork 的方法脱离。</p>\n<p>而 Systemd 则提供通过 CGroup 跟踪进程关系，引补了这个缺漏。通过 CGroup 不仅能够实现服务之间访问隔离，限制特定应用程序对系统资源的访问配额，还能更精确地管理服务的生命周期。</p>\n<ol>\n<li>统一管理服务日志</li>\n</ol>\n<p>Systemd 是一系列工具的集合， 包括了一个专用的系统日志管理服务：Journald。这个服务的设计初衷是克服现有 Syslog 服务的日志内容易伪造和日志格式不统一等缺点，Journald 用 二进制格式 保存所有的日志信息，因而日志内容很难被手工伪造。Journald 还提供了一个 journalctl 命令来查看日志信息，这样就使得不同服务输出的日志具有相同的排版格式， 便于数据的二次处理。</p>\n<h3 id=\"Systemd-架构\"><a href=\"#Systemd-架构\" class=\"headerlink\" title=\"Systemd 架构\"></a><strong>Systemd 架构</strong></h3><p><img src=\"https://ask.qcloudimg.com/http-save/yehe-5449090/97kx52pwuj.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<h2 id=\"Systemd-的-Unit-文件\"><a href=\"#Systemd-的-Unit-文件\" class=\"headerlink\" title=\"Systemd 的 Unit 文件\"></a><strong>Systemd 的 Unit 文件</strong></h2><p>Systemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）。</p>\n<p>在 Systemd 的生态圈中，Unit 文件统一了过去各种不同系统资源配置格式，例如服务的启/停、定时任务、设备自动挂载、网络配置、虚拟内存配置等。而 Systemd 通过不同的文件后缀来区分这些配置文件。</p>\n<ol>\n<li>Systemd 支持的 12 种 Unit 文件类型</li>\n</ol>\n<ul>\n<li>.automount：用于控制自动挂载文件系统，相当于 SysV-init 的 autofs 服务</li>\n<li>.device：对于 /dev 目录下的设备，主要用于定义设备之间的依赖关系</li>\n<li>.mount：定义系统结构层次中的一个挂载点，可以替代过去的 /etc/fstab 配置文件</li>\n<li>.path：用于监控指定目录或文件的变化，并触发其它 Unit 运行</li>\n<li>.scope：这种 Unit 文件不是用户创建的，而是 Systemd 运行时产生的，描述一些系统服务的分组信息</li>\n<li>.service：封装守护进程的启动、停止、重启和重载操作，是最常见的一种 Unit 文件</li>\n<li>.slice：用于表示一个 CGroup 的树，通常用户不会自己创建这样的 Unit 文件</li>\n<li>.snapshot：用于表示一个由 systemctl snapshot 命令创建的 Systemd Units 运行状态快照</li>\n<li>.socket：监控来自于系统或网络的数据消息，用于实现基于数据自动触发服务启动</li>\n<li>.swap：定义一个用户做虚拟内存的交换分区</li>\n<li>.target：用于对 Unit 文件进行逻辑分组，引导其它 Unit 的执行。它替代了 SysV-init 运行级别的作用，并提供更灵活的基于特定设备事件的启动方式</li>\n<li>.timer：用于配置在特定时间触发的任务，替代了 Crontab 的功能</li>\n</ul>\n<ol>\n<li>Systemd 目录</li>\n</ol>\n<p>Unit 文件按照 Systemd 约定，应该被放置指定的三个系统目录之一中。这三个目录是有优先级的，如下所示，越靠上的优先级越高。因此，在三个目录中有同名文件的时候，只有优先级最高的目录里的那个文件会被使用。</p>\n<ul>\n<li>/etc/systemd/system：系统或用户自定义的配置文件</li>\n<li>/run/systemd/system：软件运行时生成的配置文件</li>\n<li>/usr/lib/systemd/system：系统或第三方软件安装时添加的配置文件。<ul>\n<li>CentOS 7：Unit 文件指向该目录</li>\n<li>ubuntu 16：被移到了 /lib/systemd/system</li>\n</ul>\n</li>\n</ul>\n<p>Systemd 默认从目录 /etc/systemd/system/ 读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录 /usr/lib/systemd/system/，真正的配置文件存放在那个目录。</p>\n<ol>\n<li>Unit 和 Target</li>\n</ol>\n<p>Unit 是 Systemd 管理系统资源的基本单元，可以认为每个系统资源就是一个 Unit，并使用一个 Unit 文件定义。在 Unit 文件中需要包含相应服务的描述、属性以及需要运行的命令。</p>\n<p>Target 是 Systemd 中用于指定系统资源启动组的方式，相当于 SysV-init 中的运行级别。</p>\n<p>简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于”状态点”，启动某个 Target 就好比启动到某种状态。</p>\n<h2 id=\"Systemd-Service-Unit\"><a href=\"#Systemd-Service-Unit\" class=\"headerlink\" title=\"Systemd Service Unit\"></a><strong>Systemd Service Unit</strong></h2><h3 id=\"Unit-文件结构\"><a href=\"#Unit-文件结构\" class=\"headerlink\" title=\"Unit 文件结构\"></a><strong>Unit 文件结构</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">[Unit]<br>Description=Hello World<br>After=docker.service<br>Requires=docker.service<br>[Service]<br>TimeoutStartSec=<span class=\"hljs-number\">0</span><br>ExecStartPre=-<span class=\"hljs-regexp\">/usr/</span>bin/docker kill busybox1<br>ExecStartPre=-<span class=\"hljs-regexp\">/usr/</span>bin/docker rm busybox1<br>ExecStartPre=<span class=\"hljs-regexp\">/usr/</span>bin/docker pull busybox<br>ExecStart=<span class=\"hljs-regexp\">/usr/</span>bin/docker run --name busybox1 busybox /bin/ sh -c <span class=\"hljs-string\">&quot;while true; do echo Hello World; sleep 1; done&quot;</span><br>ExecStop=<span class=\"hljs-string\">&quot;/usr/bin/docker stop busybox1&quot;</span><br>ExecStopPost=<span class=\"hljs-string\">&quot;/usr/bin/docker rm busybox1&quot;</span><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure>\n<p>如下所示，Systemd 服务的 Unit 文件可以分为三个配置区段：</p>\n<ul>\n<li>Unit 和 Install 段：所有 Unit 文件通用，用于配置服务（或其它系统资源）的描述、依赖和随系统启动的方式</li>\n<li>Service 段：服务（Service）类型的 Unit 文件（后缀为 .service）特有的，用于定义服务的具体管理和操作方法</li>\n</ul>\n<h4 id=\"Unit-段\"><a href=\"#Unit-段\" class=\"headerlink\" title=\"Unit 段\"></a><strong>Unit 段</strong></h4><ul>\n<li>Description：描述这个 Unit 文件的信息</li>\n<li>Documentation：指定服务的文档，可以是一个或多个文档的 URL 路径</li>\n<li>Requires：依赖的其它 Unit 列表，列在其中的 Unit 模板会在这个服务启动时的同时被启动。并且，如果其中任意一个服务启动失败，这个服务也会被终止</li>\n<li>Wants：与 Requires 相似，但只是在被配置的这个 Unit 启动时，触发启动列出的每个 Unit 模块，而不去考虑这些模板启动是否成功</li>\n<li>After：与 Requires 相似，但是在后面列出的所有模块全部启动完成以后，才会启动当前的服务</li>\n<li>Before：与 After 相反，在启动指定的任务一个模块之间，都会首先确证当前服务已经运行</li>\n<li>Binds To：与 Requires 相似，失败时失败，成功时成功，但是在这些模板中有任意一个出现意外结束或重启时，这个服务也会跟着终止或重启</li>\n<li>Part Of：一个 Bind To 作用的子集，仅在列出的任务模块失败或重启时，终止或重启当前服务，而不会随列出模板的启动而启动</li>\n<li>OnFailure：当这个模板启动失败时，就会自动启动列出的每个模块</li>\n<li>Conflicts：与这个模块有冲突的模块，如果列出的模块中有已经在运行的，这个服务就不能启动，反之亦然</li>\n</ul>\n<h4 id=\"Install-段\"><a href=\"#Install-段\" class=\"headerlink\" title=\"Install 段\"></a><strong>Install 段</strong></h4><p>这部分配置的目标模块通常是特定运行目标的 .target 文件，用来使得服务在系统启动时自动运行。这个区段可以包含三种启动约束：</p>\n<ul>\n<li>WantedBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入 /etc/systemd/system 目录下面以 &lt;Target 名&gt; + .wants 后缀构成的子目录中，如 “/etc/systemd/system/multi-user.target.wants/“</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># find /etc/systemd/system/* -type d<br>/etc/systemd/system/<span class=\"hljs-keyword\">default</span>.target.wants<br>/etc/systemd/system/getty.target.wants<br>/etc/systemd/system/graphical.target.wants<br>/etc/systemd/system/multi-user.target.wants<br>/etc/systemd/system/network-online.target.wants<br>/etc/systemd/system/paths.target.wants<br>/etc/systemd/system/shutdown.target.wants<br>/etc/systemd/system/sockets.target.wants<br>/etc/systemd/system/sysinit.target.wants<br>/etc/systemd/system/timers.target.wants<br></code></pre></td></tr></table></figure>\n<ul>\n<li>RequiredBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入 /etc/systemd/system 目录下面以 &lt;Target 名&gt; + .required 后缀构成的子目录中</li>\n<li>Also：当前 Unit enable/disable 时，同时 enable/disable 的其他 Unit</li>\n<li>Alias：当前 Unit 可用于启动的别名</li>\n</ul>\n<ol>\n<li>SysV-init 运行级别与 Systemd Target 对应的 Unit 文件</li>\n</ol>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-5449090/mvna7qlr41.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>通过 systemctl list-units –type=target 命令可以获取当前正在使用的运行目标</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># systemctl list-units --type=target<br>UNIT                   LOAD   ACTIVE SUB    DESCRIPTION<br>basic.target           loaded active active Basic System<br>cryptsetup.target      loaded active active Encrypted Volumes<br>getty.target           loaded active active Login Prompts<br>graphical.target       loaded active active Graphical Interface<br>local-fs-pre.target    loaded active active Local File Systems (Pre)<br>local-fs.target        loaded active active Local File Systems<br>multi-user.target      loaded active active Multi-User System<br>network-online.target  loaded active active Network is Online<br>network.target         loaded active active Network<br>nss-user-lookup.target loaded active active User and Group Name Lookups<br>paths.target           loaded active active Paths<br>remote-fs-pre.target   loaded active active Remote File Systems (Pre)<br>remote-fs.target       loaded active active Remote File Systems<br>slices.target          loaded active active Slices<br>sockets.target         loaded active active Sockets<br>sound.target           loaded active active Sound Card<br>swap.target            loaded active active Swap<br>sysinit.target         loaded active active System Initialization<br>time-sync.target       loaded active active System Time Synchronized<br>timers.target          loaded active active Timers<br>LOAD   = Reflects whether the unit definition was properly loaded.<br>ACTIVE = The high-level unit activation state, i.e. generalization <span class=\"hljs-keyword\">of</span> SUB.<br>SUB    = The low-level unit activation state, values depend on unit type.<br><span class=\"hljs-number\">20</span> loaded units listed. Pass --all to see loaded but inactive units, too.<br>To show all installed unit files use <span class=\"hljs-string\">&#x27;systemctl list-unit-files&#x27;</span>.<br></code></pre></td></tr></table></figure>\n<h4 id=\"Service-段\"><a href=\"#Service-段\" class=\"headerlink\" title=\"Service 段\"></a><strong>Service 段</strong></h4><p>用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段分为服务生命周期和服务上下文配置两个方面。</p>\n<ol>\n<li>服务生命周期控制相关</li>\n</ol>\n<ul>\n<li>Type：定义启动时的进程行为，它有以下几种值：<ul>\n<li>Type=simple：默认值，执行ExecStart指定的命令，启动主进程</li>\n<li>Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</li>\n<li>Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</li>\n<li>Type=dbus：当前服务通过D-Bus启动</li>\n<li>Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行</li>\n<li>Type=idle：若有其他任务执行完毕，当前服务才会运行</li>\n</ul>\n</li>\n<li>RemainAfterExit：值为 true 或 false（默认）。当配置为 true 时，Systemd 只会负责启动服务进程，之后即便服务进程退出了，Systemd 也仍然会认为这个服务还在运行中。这个配置主要是提供给一些并非常驻内存，而是启动注册后立即退出，然后等待消息按需启动的特殊类型服务使用的。</li>\n<li>ExecStart：启动当前服务的命令</li>\n<li>ExecStartPre：启动当前服务之前执行的命令</li>\n<li>ExecStartPos：启动当前服务之后执行的命令</li>\n<li>ExecReload：重启当前服务时执行的命令</li>\n<li>ExecStop：停止当前服务时执行的命令</li>\n<li>ExecStopPost：停止当其服务之后执行的命令</li>\n<li>RestartSec：自动重启当前服务间隔的秒数</li>\n<li>Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括 always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</li>\n<li>TimeoutStartSec：启动服务时等待的秒数，这一配置对于使用 Docker 容器而言显得尤为重要，因其第一次运行时可能需要下载镜像，严重延时会容易被 Systemd 误判为启动失败杀死。通常，对于这种服务，将此值指定为 0，从而关闭超时检测</li>\n<li>TimeoutStopSec：停止服务时的等待秒数，如果超过这个时间仍然没有停止，Systemd 会使用 SIGKILL 信号强行杀死服务的进程</li>\n</ul>\n<ol>\n<li>服务上下文配置相关</li>\n</ol>\n<ul>\n<li>Environment：为服务指定环境变量</li>\n<li>EnvironmentFile：指定加载一个包含服务所需的环境变量的列表的文件，文件中的每一行都是一个环境变量的定义</li>\n<li>Nice：服务的进程优先级，值越小优先级越高，默认为 0。其中 -20 为最高优先级，19 为最低优先级</li>\n<li>WorkingDirectory：指定服务的工作目录</li>\n<li>RootDirectory：指定服务进程的根目录（/ 目录）。如果配置了这个参数，服务将无法访问指定目录以外的任何文件</li>\n<li>User：指定运行服务的用户</li>\n<li>Group：指定运行服务的用户组</li>\n<li>MountFlags：服务的 Mount Namespace 配置，会影响进程上下文中挂载点的信息，即服务是否会继承主机上已有挂载点，以及如果服务运行执行了挂载或卸载设备的操作，是否会真实地在主机上产生效果。可选值为 shared、slaved 或 private<ul>\n<li>shared：服务与主机共用一个 Mount Namespace，继承主机挂载点，且服务挂载或卸载设备会真实地反映到主机上</li>\n<li>slave：服务使用独立的 Mount Namespace，它会继承主机挂载点，但服务对挂载点的操作只有在自己的 Namespace 内生效，不会反映到主机上</li>\n<li>private：服务使用独立的 Mount Namespace，它在启动时没有任何任何挂载点，服务对挂载点的操作也不会反映到主机上</li>\n</ul>\n</li>\n<li>LimitCPU / LimitSTACK / LimitNOFILE / LimitNPROC 等：限制特定服务的系统资源量，例如 CPU、程序堆栈、文件句柄数量、子进程数量等</li>\n</ul>\n<blockquote>\n<p>注意：如果在 ExecStart、ExecStop 等属性中使用了 Linux 命令，则必须要写出完整的绝对路径。对于 ExecStartPre 和 ExecStartPost 辅助命令，若前面有个 “-” 符号，表示忽略这些命令的出错。因为有些 “辅助” 命令本来就不一定成功，比如尝试清空一个文件，但文件可能不存在。</p>\n</blockquote>\n<h3 id=\"Unit-文件占位符和模板\"><a href=\"#Unit-文件占位符和模板\" class=\"headerlink\" title=\"Unit 文件占位符和模板\"></a><strong>Unit 文件占位符和模板</strong></h3><h4 id=\"Unit-文件占位符\"><a href=\"#Unit-文件占位符\" class=\"headerlink\" title=\"Unit 文件占位符\"></a><strong>Unit 文件占位符</strong></h4><p>在 Unit 文件中，有时会需要使用到一些与运行环境有关的信息，例如节点 ID、运行服务的用户等。这些信息可以使用占位符来表示，然后在实际运行被动态地替换实际的值。</p>\n<ul>\n<li>%n：完整的 Unit 文件名字，包括 .service 后缀名</li>\n<li>%p：Unit 模板文件名中 @ 符号之前的部分，不包括 @ 符号</li>\n<li>%i：Unit 模板文件名中 @ 符号之后的部分，不包括 @ 符号和 .service 后缀名</li>\n<li>%t：存放系统运行文件的目录，通常是 “run”</li>\n<li>%u：运行服务的用户，如果 Unit 文件中没有指定，则默认为 root</li>\n<li>%U：运行服务的用户 ID</li>\n<li>%h：运行服务的用户 Home 目录，即 %{HOME} 环境变量的值</li>\n<li>%s：运行服务的用户默认 Shell 类型，即 %{SHELL} 环境变量的值</li>\n<li>%m：实际运行节点的 Machine ID，对于运行位置每个的服务比较有用</li>\n<li>%b：Boot ID，这是一个随机数，每个节点各不相同，并且每次节点重启时都会改变</li>\n<li>%H：实际运行节点的主机名</li>\n<li>%v：内核版本，即 “uname -r” 命令输出的内容</li>\n<li>%%：在 Unit 模板文件中表示一个普通的百分号</li>\n</ul>\n<h4 id=\"Unit-模板\"><a href=\"#Unit-模板\" class=\"headerlink\" title=\"Unit 模板\"></a><strong>Unit 模板</strong></h4><p>在现实中，往往有一些应用需要被复制多份运行。例如，用于同一个<a href=\"https://cloud.tencent.com/product/clb?from=10680\">负载均衡</a>器分流的多个服务实例，或者为每个 SSH 连接建立一个独立的 sshd 服务进程。</p>\n<p>Unit 模板文件的写法与普通的服务 Unit 文件基本相同，不过 Unit 模板的文件名是以 @ 符号结尾的。通过模板启动服务实例时，需要在其文件名的 @ 字符后面附加一个参数字符串。</p>\n<ol>\n<li>示例：apache@.service</li>\n</ol>\n<ul>\n<li>apache@.service 模板</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">[Unit]<br>Description=My Advanced Service Template<br>After=etcd.service docker.service<br>[Service]<br>TimeoutStartSec=<span class=\"hljs-number\">0</span><br>ExecStartPre=-<span class=\"hljs-regexp\">/usr/</span>bin/docker kill apache%i<br>ExecStartPre=-<span class=\"hljs-regexp\">/usr/</span>bin/docker rm apache%i<br>ExecStartPre=<span class=\"hljs-regexp\">/usr/</span>bin/docker pull coreos/apache<br>ExecStart=<span class=\"hljs-regexp\">/usr/</span>bin/docker run --name apache%i -p %i:<span class=\"hljs-number\">80</span> coreos/apache /usr/sbin/apache2ctl -D FOREGROUND<br>ExecStartPost=<span class=\"hljs-regexp\">/usr/</span>bin/etcdctl set /domains/example.com/%H:%i running<br>ExecStop=<span class=\"hljs-regexp\">/usr/</span>bin/docker stop apache1<br>ExecStopPost=<span class=\"hljs-regexp\">/usr/</span>bin/docker rm apache1<br>ExecStopPost=<span class=\"hljs-regexp\">/usr/</span>bin/etcdctl rm /domains/example.com/%H:%i<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure>\n<ul>\n<li>启动 Unit 模板的服务实例</li>\n</ul>\n<p>在服务启动时需要在 @ 后面放置一个用于区分服务实例的附加字符参数，通常这个参数用于监控的端口号或控制台 TTY 编译号。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># systemctl start apache@8080.service<br></code></pre></td></tr></table></figure>\n<p>Systemd 在运行服务时，总是会先尝试找到一个完整匹配的 Unit 文件，如果没有找到，才会尝试选择匹配模板。例如上面的命令，System 首先会在约定的目录下寻找名为 <a href=\"mailto:apache@8080.service\">apache@8080.service</a> 的文件，如果没有找到，而文件名中包含 @ 字符，它就会尝试去掉后缀参数匹配模板文件。对于 <a href=\"mailto:apache@8080.service\">apache@8080.service</a>，systemd 会找到 apache@.service 模板文件，并通过这个模板文件将服务实例化。</p>\n<h2 id=\"Systemd-的资源管理\"><a href=\"#Systemd-的资源管理\" class=\"headerlink\" title=\"Systemd 的资源管理\"></a><strong>Systemd 的资源管理</strong></h2><h3 id=\"Systemctl-命令\"><a href=\"#Systemctl-命令\" class=\"headerlink\" title=\"Systemctl 命令\"></a><strong>Systemctl 命令</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># systemctl --help<br>systemctl [OPTIONS...] &#123;COMMAND&#125; ...<br>Query or send control commands to the systemd manager.<br>  -h --help           Show <span class=\"hljs-built_in\">this</span> help<br>     --version        Show package version<br>     --system         Connect to system manager<br>  -H --host=[USER@]HOST<br>                      Operate on remote host<br>  -M --machine=CONTAINER<br>                      Operate on local container<br>  -t --type=TYPE      List units <span class=\"hljs-keyword\">of</span> a particular type<br>     --state=STATE    List units <span class=\"hljs-keyword\">with</span> particular LOAD or SUB or ACTIVE state<br>  -p --property=NAME  Show only properties by <span class=\"hljs-built_in\">this</span> name<br>  -a --all            Show all loaded units/properties, including dead/empty<br>                      ones. To list all units installed on the system, use<br>                      the <span class=\"hljs-string\">&#x27;list-unit-files&#x27;</span> command instead.<br>  -l --full           Don<span class=\"hljs-string\">&#x27;t ellipsize unit names on output</span><br><span class=\"hljs-string\">  -r --recursive      Show unit list of host and local containers</span><br><span class=\"hljs-string\">     --reverse        Show reverse dependencies with &#x27;</span>list-dependencies<span class=\"hljs-string\">&#x27;</span><br><span class=\"hljs-string\">     --job-mode=MODE  Specify how to deal with already queued jobs, when</span><br><span class=\"hljs-string\">                      queueing a new job</span><br><span class=\"hljs-string\">     --show-types     When showing sockets, explicitly show their type</span><br><span class=\"hljs-string\">  -i --ignore-inhibitors</span><br><span class=\"hljs-string\">                      When shutting down or sleeping, ignore inhibitors</span><br><span class=\"hljs-string\">     --kill-who=WHO   Who to send signal to</span><br><span class=\"hljs-string\">  -s --signal=SIGNAL  Which signal to send</span><br><span class=\"hljs-string\">     --now            Start or stop unit in addition to enabling or disabling it</span><br><span class=\"hljs-string\">  -q --quiet          Suppress output</span><br><span class=\"hljs-string\">     --no-block       Do not wait until operation finished</span><br><span class=\"hljs-string\">     --no-wall        Don&#x27;</span>t send wall message before halt/power-off/reboot<br>     --no-reload      Don<span class=\"hljs-string\">&#x27;t reload daemon after en-/dis-abling unit files</span><br><span class=\"hljs-string\">     --no-legend      Do not print a legend (column headers and hints)</span><br><span class=\"hljs-string\">     --no-pager       Do not pipe output into a pager</span><br><span class=\"hljs-string\">     --no-ask-password</span><br><span class=\"hljs-string\">                      Do not ask for system passwords</span><br><span class=\"hljs-string\">     --global         Enable/disable unit files globally</span><br><span class=\"hljs-string\">     --runtime        Enable unit files only temporarily until next reboot</span><br><span class=\"hljs-string\">  -f --force          When enabling unit files, override existing symlinks</span><br><span class=\"hljs-string\">                      When shutting down, execute action immediately</span><br><span class=\"hljs-string\">     --preset-mode=   Apply only enable, only disable, or all presets</span><br><span class=\"hljs-string\">     --root=PATH      Enable unit files in the specified root directory</span><br><span class=\"hljs-string\">  -n --lines=INTEGER  Number of journal entries to show</span><br><span class=\"hljs-string\">  -o --output=STRING  Change journal output mode (short, short-iso,</span><br><span class=\"hljs-string\">                              short-precise, short-monotonic, verbose,</span><br><span class=\"hljs-string\">                              export, json, json-pretty, json-sse, cat)</span><br><span class=\"hljs-string\">     --plain          Print unit dependencies as a list instead of a tree</span><br><span class=\"hljs-string\">Unit Commands:</span><br><span class=\"hljs-string\">  list-units [PATTERN...]         List loaded units</span><br><span class=\"hljs-string\">  list-sockets [PATTERN...]       List loaded sockets ordered by address</span><br><span class=\"hljs-string\">  list-timers [PATTERN...]        List loaded timers ordered by next elapse</span><br><span class=\"hljs-string\">  start NAME...                   Start (activate) one or more units</span><br><span class=\"hljs-string\">  stop NAME...                    Stop (deactivate) one or more units</span><br><span class=\"hljs-string\">  reload NAME...                  Reload one or more units</span><br><span class=\"hljs-string\">  restart NAME...                 Start or restart one or more units</span><br><span class=\"hljs-string\">  try-restart NAME...             Restart one or more units if active</span><br><span class=\"hljs-string\">  reload-or-restart NAME...       Reload one or more units if possible,</span><br><span class=\"hljs-string\">                                  otherwise start or restart</span><br><span class=\"hljs-string\">  reload-or-try-restart NAME...   Reload one or more units if possible,</span><br><span class=\"hljs-string\">                                  otherwise restart if active</span><br><span class=\"hljs-string\">  isolate NAME                    Start one unit and stop all others</span><br><span class=\"hljs-string\">  kill NAME...                    Send signal to processes of a unit</span><br><span class=\"hljs-string\">  is-active PATTERN...            Check whether units are active</span><br><span class=\"hljs-string\">  is-failed PATTERN...            Check whether units are failed</span><br><span class=\"hljs-string\">  status [PATTERN...|PID...]      Show runtime status of one or more units</span><br><span class=\"hljs-string\">  show [PATTERN...|JOB...]        Show properties of one or more</span><br><span class=\"hljs-string\">                                  units/jobs or the manager</span><br><span class=\"hljs-string\">  cat PATTERN...                  Show files and drop-ins of one or more units</span><br><span class=\"hljs-string\">  set-property NAME ASSIGNMENT... Sets one or more properties of a unit</span><br><span class=\"hljs-string\">  help PATTERN...|PID...          Show manual for one or more units</span><br><span class=\"hljs-string\">  reset-failed [PATTERN...]       Reset failed state for all, one, or more</span><br><span class=\"hljs-string\">                                  units</span><br><span class=\"hljs-string\">  list-dependencies [NAME]        Recursively show units which are required</span><br><span class=\"hljs-string\">                                  or wanted by this unit or by which this</span><br><span class=\"hljs-string\">                                  unit is required or wanted</span><br><span class=\"hljs-string\">Unit File Commands:</span><br><span class=\"hljs-string\">  list-unit-files [PATTERN...]    List installed unit files</span><br><span class=\"hljs-string\">  enable NAME...                  Enable one or more unit files</span><br><span class=\"hljs-string\">  disable NAME...                 Disable one or more unit files</span><br><span class=\"hljs-string\">  reenable NAME...                Reenable one or more unit files</span><br><span class=\"hljs-string\">  preset NAME...                  Enable/disable one or more unit files</span><br><span class=\"hljs-string\">                                  based on preset configuration</span><br><span class=\"hljs-string\">  preset-all                      Enable/disable all unit files based on</span><br><span class=\"hljs-string\">                                  preset configuration</span><br><span class=\"hljs-string\">  is-enabled NAME...              Check whether unit files are enabled</span><br><span class=\"hljs-string\">  mask NAME...                    Mask one or more units</span><br><span class=\"hljs-string\">  unmask NAME...                  Unmask one or more units</span><br><span class=\"hljs-string\">  link PATH...                    Link one or more units files into</span><br><span class=\"hljs-string\">                                  the search path</span><br><span class=\"hljs-string\">  add-wants TARGET NAME...        Add &#x27;</span>Wants<span class=\"hljs-string\">&#x27; dependency for the target</span><br><span class=\"hljs-string\">                                  on specified one or more units</span><br><span class=\"hljs-string\">  add-requires TARGET NAME...     Add &#x27;</span>Requires<span class=\"hljs-string\">&#x27; dependency for the target</span><br><span class=\"hljs-string\">                                  on specified one or more units</span><br><span class=\"hljs-string\">  edit NAME...                    Edit one or more unit files</span><br><span class=\"hljs-string\">  get-default                     Get the name of the default target</span><br><span class=\"hljs-string\">  set-default NAME                Set the default target</span><br><span class=\"hljs-string\">Machine Commands:</span><br><span class=\"hljs-string\">  list-machines [PATTERN...]      List local containers and host</span><br><span class=\"hljs-string\">Job Commands:</span><br><span class=\"hljs-string\">  list-jobs [PATTERN...]          List jobs</span><br><span class=\"hljs-string\">  cancel [JOB...]                 Cancel all, one, or more jobs</span><br><span class=\"hljs-string\">Snapshot Commands:</span><br><span class=\"hljs-string\">  snapshot [NAME]                 Create a snapshot</span><br><span class=\"hljs-string\">  delete NAME...                  Remove one or more snapshots</span><br><span class=\"hljs-string\">Environment Commands:</span><br><span class=\"hljs-string\">  show-environment                Dump environment</span><br><span class=\"hljs-string\">  set-environment NAME=VALUE...   Set one or more environment variables</span><br><span class=\"hljs-string\">  unset-environment NAME...       Unset one or more environment variables</span><br><span class=\"hljs-string\">  import-environment [NAME...]    Import all or some environment variables</span><br><span class=\"hljs-string\">Manager Lifecycle Commands:</span><br><span class=\"hljs-string\">  daemon-reload                   Reload systemd manager configuration</span><br><span class=\"hljs-string\">  daemon-reexec                   Reexecute systemd manager</span><br><span class=\"hljs-string\">System Commands:</span><br><span class=\"hljs-string\">  is-system-running               Check whether system is fully running</span><br><span class=\"hljs-string\">  default                         Enter system default mode</span><br><span class=\"hljs-string\">  rescue                          Enter system rescue mode</span><br><span class=\"hljs-string\">  emergency                       Enter system emergency mode</span><br><span class=\"hljs-string\">  halt                            Shut down and halt the system</span><br><span class=\"hljs-string\">  poweroff                        Shut down and power-off the system</span><br><span class=\"hljs-string\">  reboot [ARG]                    Shut down and reboot the system</span><br><span class=\"hljs-string\">  kexec                           Shut down and reboot the system with kexec</span><br><span class=\"hljs-string\">  exit                            Request user instance exit</span><br><span class=\"hljs-string\">  switch-root ROOT [INIT]         Change to a different root file system</span><br><span class=\"hljs-string\">  suspend                         Suspend the system</span><br><span class=\"hljs-string\">  hibernate                       Hibernate the system</span><br><span class=\"hljs-string\">  hybrid-sleep                    Hibernate and suspend the system</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"Unit-管理\"><a href=\"#Unit-管理\" class=\"headerlink\" title=\"Unit 管理\"></a><strong>Unit 管理</strong></h3><ol>\n<li>查看当前系统的所有 Unit</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 列出正在运行的 Unit<br>$ systemctl list-units<br><br># 列出所有Unit，包括没有找到配置文件的或者启动失败的<br>$ systemctl list-units --all<br><br># 列出所有没有运行的 Unit<br>$ systemctl list-units --all --state=inactive<br><br># 列出所有加载失败的 Unit<br>$ systemctl list-units --failed<br><br># 列出所有正在运行的、类型为 service 的 Unit<br>$ systemctl list-units --type=service<br><br># 查看 Unit 配置文件的内容<br>$ systemctl cat docker.service<br></code></pre></td></tr></table></figure>\n<ol>\n<li>查看 Unit 的状态</li>\n</ol>\n<ul>\n<li>enabled：已建立启动链接</li>\n<li>disabled：没建立启动链接</li>\n<li>static：该配置文件没有 [Install] 部分（无法执行），只能作为其他配置文件的依赖</li>\n<li>masked：该配置文件被禁止建立启动链接</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 显示系统状态<br>$ systemctl status<br><br># 显示单个 Unit 的状态<br>$ ystemctl status bluetooth.service<br><br># 显示远程主机的某个 Unit 的状态<br>$ systemctl -H root@rhel7.example.com status httpd.service<br></code></pre></td></tr></table></figure>\n<ol>\n<li>Unit 的管理</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 立即启动一个服务<br>$ sudo systemctl start apache.service<br><br># 立即停止一个服务<br>$ sudo systemctl stop apache.service<br><br># 重启一个服务<br>$ sudo systemctl restart apache.service<br><br># 杀死一个服务的所有子进程<br>$ sudo systemctl kill apache.service<br><br># 重新加载一个服务的配置文件<br>$ sudo systemctl reload apache.service<br><br># 重载所有修改过的配置文件<br>$ sudo systemctl daemon-reload<br><br># 显示某个 Unit 的所有底层参数<br>$ systemctl show httpd.service<br><br># 显示某个 Unit 的指定属性的值<br>$ systemctl show -p CPUShares httpd.service<br><br># 设置某个 Unit 的指定属性<br>$ sudo systemctl set-property httpd.service CPUShares=<span class=\"hljs-number\">500</span><br></code></pre></td></tr></table></figure>\n<ol>\n<li>查看 Unit 的依赖关系</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 列出一个 Unit 的所有依赖，默认不会列出 target 类型<br>$ systemctl list-dependencies nginx.service<br><br># 列出一个 Unit 的所有依赖，包括 target 类型<br>$ systemctl list-dependencies --all nginx.service<br></code></pre></td></tr></table></figure>\n<h3 id=\"服务的生命周期\"><a href=\"#服务的生命周期\" class=\"headerlink\" title=\"服务的生命周期\"></a><strong>服务的生命周期</strong></h3><p>当一个新的 Unit 文件被放入 /etc/systemd/system/ 或 /usr/lib/systemd/system/ 目录中时，它是不会被自识识别的。</p>\n<ol>\n<li>服务的激活</li>\n</ol>\n<ul>\n<li>systemctl enable：在 /etc/systemd/system/ 建立服务的符号链接，指向 /usr/lib/systemd/system/ 中</li>\n<li>systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令</li>\n</ul>\n<ol>\n<li>服务的启动和停止</li>\n</ol>\n<ul>\n<li>systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令</li>\n<li>systemctl stop：依次停止定义在 Unit 文件中的 ExecStopPre、ExecStop 和 ExecStopPost 命令</li>\n<li>systemctl restart：重启服务</li>\n<li>systemctl kill：立即杀死服务</li>\n</ul>\n<ol>\n<li>服务的开机启动和取消</li>\n</ol>\n<ul>\n<li>systemctl enable：除了激活服务以外，也可以置服务为开机启动</li>\n<li>systemctl disable：取消服务的开机启动</li>\n</ul>\n<ol>\n<li>服务的修改和移除</li>\n</ol>\n<ul>\n<li>systemctl daemon-reload：Systemd 会将 Unit 文件的内容写到缓存中，因此当 Unit 文件被更新时，需要告诉 Systemd 重新读取所有的 Unit 文件</li>\n<li>systemctl reset-failed：移除标记为丢失的 Unit 文件。在删除 Unit 文件后，由于缓存的关系，即使通过 daemon-reload 更新了缓存，在 list-units 中依然会显示标记为 not-found 的 Unit。</li>\n</ul>\n<h3 id=\"Target-管理\"><a href=\"#Target-管理\" class=\"headerlink\" title=\"Target 管理\"></a><strong>Target 管理</strong></h3><p>Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。</p>\n<p>在传统的 SysV-init 启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 查看当前系统的所有 Target<br>$ systemctl list-unit-files --type=target<br><br># 查看一个 Target 包含的所有 Unit<br>$ systemctl list-dependencies multi-user.target<br><br># 查看启动时的默认 Target<br>$ systemctl get-<span class=\"hljs-keyword\">default</span><br><br># 设置启动时的默认 Target<br>$ sudo systemctl set-<span class=\"hljs-keyword\">default</span> multi-user.target<br><br># 切换 Target 时，默认不关闭前一个 Target 启动的进程，systemctl isolate 命令改变这种行为，关闭前一个 Target 里面所有不属于后一个 Target 的进程<br>$ sudo systemctl isolate multi-user.target<br></code></pre></td></tr></table></figure>\n<ol>\n<li>Target 与 SysV-init 进程的主要区别：</li>\n</ol>\n<ul>\n<li>默认的 RunLevel（在 /etc/inittab 文件设置）现在被默认的 Target 取代，位置是 /etc/systemd/system/default.target，通常符号链接到graphical.target（图形界面）或者multi-user.target（多用户命令行）。</li>\n<li>启动脚本的位置，以前是 /etc/init.d 目录，符号链接到不同的 RunLevel 目录 （比如 /etc/rc3.d、/etc/rc5.d 等），现在则存放在 /lib/systemd/system 和 /etc/systemd/system 目录。</li>\n<li>配置文件的位置，以前 init 进程的配置文件是 /etc/inittab，各种服务的配置文件存放在 /etc/sysconfig 目录。现在的配置文件主要存放在 /lib/systemd 目录，在 /etc/systemd 目录里面的修改可以覆盖原始设置。</li>\n</ul>\n<h3 id=\"日志管理\"><a href=\"#日志管理\" class=\"headerlink\" title=\"日志管理\"></a><strong>日志管理</strong></h3><p>Systemd 通过其标准日志服务 Journald 提供的配套程序 journalctl 将其管理的所有后台进程打印到 std:out（即控制台）的输出重定向到了日志文件。</p>\n<p>Systemd 的日志文件是二进制格式的，必须使用 Journald 提供的 journalctl 来查看，默认不带任何参数时会输出系统和所有后台进程的混合日志。</p>\n<p>默认日志最大限制为所在文件系统容量的 10%，可以修改 /etc/systemd/journald.conf 中的 SystemMaxUse 来指定该最大限制。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 查看所有日志（默认情况下 ，只保存本次启动的日志）<br>$ sudo journalctl<br><br># 查看内核日志（不显示应用日志）：--dmesg 或 -k<br>$ sudo journalctl -k<br><br># 查看系统本次启动的日志（其中包括了内核日志和各类系统服务的控制台输出）：--system 或 -b<br>$ sudo journalctl -b<br>$ sudo journalctl -b -<span class=\"hljs-number\">0</span><br><br># 查看上一次启动的日志（需更改设置）<br>$ sudo journalctl -b -<span class=\"hljs-number\">1</span><br><br># 查看指定服务的日志：--unit 或 -u<br>$ sudo journalctl -u docker.servcie<br><br># 查看指定服务的日志<br>$ sudo journalctl /usr/lib/systemd/systemd<br><br># 实时滚动显示最新日志<br>$ sudo journalctl -f<br><br># 查看指定时间的日志<br>$ sudo journalctl --since=<span class=\"hljs-string\">&quot;2012-10-30 18:17:16&quot;</span><br>$ sudo journalctl --since <span class=\"hljs-string\">&quot;20 min ago&quot;</span><br>$ sudo journalctl --since yesterday<br>$ sudo journalctl --since <span class=\"hljs-string\">&quot;2015-01-10&quot;</span> --until <span class=\"hljs-string\">&quot;2015-01-11 03:00&quot;</span><br>$ sudo journalctl --since <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">00</span> --until <span class=\"hljs-string\">&quot;1 hour ago&quot;</span><br><br># 显示尾部的最新 10 行日志：--lines 或 -n<br>$ sudo journalctl -n<br><br># 显示尾部指定行数的日志<br>$ sudo journalctl -n <span class=\"hljs-number\">20</span><br><br># 将最新的日志显示在前面<br>$ sudo journalctl -r -u docker.service<br><br># 改变输出的格式：--output 或 -o<br>$ sudo journalctl -r -u docker.service -o json-pretty<br><br># 查看指定进程的日志<br>$ sudo journalctl _PID=<span class=\"hljs-number\">1</span><br><br># 查看某个路径的脚本的日志<br>$ sudo journalctl /usr/bin/bash<br><br># 查看指定用户的日志<br>$ sudo journalctl _UID=<span class=\"hljs-number\">33</span> --since today<br><br># 查看某个 Unit 的日志<br>$ sudo journalctl -u nginx.service<br>$ sudo journalctl -u nginx.service --since today<br><br># 实时滚动显示某个 Unit 的最新日志<br>$ sudo journalctl -u nginx.service -f<br><br># 合并显示多个 Unit 的日志<br>$ journalctl -u nginx.service -u php-fpm.service --since today<br><br># 查看指定优先级（及其以上级别）的日志，共有 8 级<br># 0: emerg<br># 1: alert<br># 2: crit<br># 3: err<br># 4: warning<br># 5: notice<br># 6: info<br># 7: debug<br>$ sudo journalctl -p err -b<br><br># 日志默认分页输出，--no-pager 改为正常的标准输出<br>$ sudo journalctl --no-pager<br><br># 以 JSON 格式（单行）输出<br>$ sudo journalctl -b -u nginx.service -o json<br><br># 以 JSON 格式（多行）输出，可读性更好<br>$ sudo journalctl -b -u nginx.serviceqq<br> -o json-pretty<br><br># 显示日志占据的硬盘空间<br>$ sudo journalctl --disk-usage<br><br># 指定日志文件占据的最大空间<br>$ sudo journalctl --vacuum-size=1G<br><br># 指定日志文件保存多久<br>$ sudo journalctl --vacuum-time=1years<br></code></pre></td></tr></table></figure>\n<h2 id=\"Systemd-工具集\"><a href=\"#Systemd-工具集\" class=\"headerlink\" title=\"Systemd 工具集\"></a><strong>Systemd 工具集</strong></h2><ul>\n<li>systemctl：用于检查和控制各种系统服务和资源的状态</li>\n<li>bootctl：用于查看和管理系统启动分区</li>\n<li>hostnamectl：用于查看和修改系统的主机名和主机信息</li>\n<li>journalctl：用于查看系统日志和各类应用服务日志</li>\n<li>localectl：用于查看和管理系统的地区信息</li>\n<li>loginctl：用于管理系统已登录用户和 Session 的信息</li>\n<li>machinectl：用于操作 Systemd 容器</li>\n<li>timedatectl：用于查看和管理系统的时间和时区信息</li>\n<li>systemd-analyze 显示此次系统启动时运行每个服务所消耗的时间，可以用于分析系统启动过程中的性能瓶颈</li>\n<li>systemd-ask-password：辅助性工具，用星号屏蔽用户的任意输入，然后返回实际输入的内容</li>\n<li>systemd-cat：用于将其他命令的输出重定向到系统日志</li>\n<li>systemd-cgls：递归地显示指定 CGroup 的继承链</li>\n<li>systemd-cgtop：显示系统当前最耗资源的 CGroup 单元</li>\n<li>systemd-escape：辅助性工具，用于去除指定字符串中不能作为 Unit 文件名的字符</li>\n<li>systemd-hwdb：Systemd 的内部工具，用于更新硬件数据库</li>\n<li>systemd-delta：对比当前系统配置与默认系统配置的差异</li>\n<li>systemd-detect-virt：显示主机的虚拟化类型</li>\n<li>systemd-inhibit：用于强制延迟或禁止系统的关闭、睡眠和待机事件</li>\n<li>systemd-machine-id-setup：Systemd 的内部工具，用于给 Systemd 容器生成 ID</li>\n<li>systemd-notify：Systemd 的内部工具，用于通知服务的状态变化</li>\n<li>systemd-nspawn：用于创建 Systemd 容器</li>\n<li>systemd-path：Systemd 的内部工具，用于显示系统上下文中的各种路径配置</li>\n<li>systemd-run：用于将任意指定的命令包装成一个临时的后台服务运行</li>\n<li>systemd-stdio- bridge：Systemd 的内部 工具，用于将程序的标准输入输出重定向到系统总线</li>\n<li>systemd-tmpfiles：Systemd 的内部工具，用于创建和管理临时文件目录</li>\n<li>systemd-tty-ask-password-agent：用于响应后台服务进程发出的输入密码请求</li>\n</ul>\n<ol>\n<li>systemctl</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 重启系统<br>$ sudo systemctl reboot<br><br># 关闭系统，切断电源<br>$ sudo systemctl poweroff<br><br># CPU停止工作<br>$ sudo systemctl halt<br><br># 暂停系统<br>$ sudo systemctl suspend<br><br># 让系统进入冬眠状态<br>$ sudo systemctl hibernate<br><br># 让系统进入交互式休眠状态<br>$ sudo systemctl hybrid-sleep<br><br># 启动进入救援状态（单用户状态）<br>$ sudo systemctl rescue<br></code></pre></td></tr></table></figure>\n<ol>\n<li>systemd-analyze</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 查看启动耗时<br>$ systemd-analyze<br><br># 查看每个服务的启动耗时<br>$ systemd-analyze blame<br><br># 显示瀑布状的启动过程流<br>$ systemd-analyze critical-chain<br><br># 显示指定服务的启动流<br>$ systemd-analyze critical-chain atd.service<br></code></pre></td></tr></table></figure>\n<ol>\n<li>hostnamectl</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 显示当前主机的信息<br>$ hostnamectl<br><br># 设置主机名。<br>$ sudo hostnamectl set-hostname rhel7<br></code></pre></td></tr></table></figure>\n<ol>\n<li>timedatectl</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 查看当前时区设置<br>$ timedatectl<br><br># 显示所有可用的时区<br>$ timedatectl list-timezones<br><br># 设置当前时区<br>$ sudo timedatectl set-timezone America/New_York<br>$ sudo timedatectl set-time YYYY-MM-DD<br>$ sudo timedatectl set-time HH:MM:SS<br></code></pre></td></tr></table></figure>\n<ol>\n<li>loginctl</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 列出当前 session<br>$ loginctl list-sessions<br><br># 列出当前登录用户<br>$ loginctl list-users<br><br># 列出显示指定用户的信息<br>$ loginctl show-user ruanyf<br></code></pre></td></tr></table></figure>\n<ol>\n<li>systemd-ask-password</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$ PASSWORD=$(systemd-ask-password <span class=\"hljs-string\">&quot;Input Your Passowrd:&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ol>\n<li>systemd-run</li>\n</ol>\n<p>systemd-run 可以将一个指定的操作变成后台运行的服务。它的效果似乎与直接在命令后加上表示后台运行的 &amp; 符号很相似。然而，它让命令成为服务还意味着，它的生命周期将由 Systemd 控制。具体来说，包括以下好处：</p>\n<ul>\n<li>服务的生命击期由 Systemd 接管，不会随着启动它的控制台关闭而结束</li>\n<li>可以通过 systemctl 工具管理服务的状态</li>\n<li>可以通过 journalctl 工具查看和管理服务的日志信息</li>\n<li>可以通过 Systemd 提供的方法限制服务的 CPU、内存、磁盘 IO 等系统资源的使用情况。</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"Systemd-概述\"><a href=\"#Systemd-概述\" class=\"headerlink\" title=\"Systemd 概述\"></a><strong>Systemd 概述</strong></h2><h3 id=\"Systemd-简介\"><a href=\"#Systemd-简介\" class=\"headerlink\" title=\"Systemd 简介\"></a><strong>Systemd 简介</strong></h3><p>Systemd 是一系列工具的集合，其作用也远远不仅是启动操作系统，它还接管了后台服务、结束、状态查询，以及日志归档、设备管理、电源管理、定时任务等许多职责，并支持通过特定事件（如插入特定 USB 设备）和特定端口数据触发的 On-demand（按需）任务。</p>\n<p>Systemd 的后台服务还有一个特殊的身份——它是系统中 PID 值为 1 的进程。</p>\n<ol>\n<li>更少的进程</li>\n</ol>\n<p>Systemd 提供了 服务按需启动 的能力，使得特定的服务只有在真定被请求时才启动。</p>\n<ol>\n<li>允许更多的进程并行启动</li>\n</ol>\n<p>在 SysV-init 时代，将每个服务项目编号依次执行启动脚本。Ubuntu 的 Upstart 解决了没有直接依赖的启动之间的并行启动。而 Systemd 通过 Socket 缓存、DBus 缓存和建立临时挂载点等方法进一步解决了启动进程之间的依赖，做到了所有系统服务并发启动。对于用户自定义的服务，Systemd 允许配置其启动依赖项目，从而确保服务按必要的顺序运行。</p>\n<ol>\n<li>使用 CGroup 跟踪和管理进程的生命周期</li>\n</ol>\n<p>在 Systemd 之间的主流应用管理服务都是使用 进程树 来跟踪应用的继承关系的，而进程的父子关系很容易通过 两次 fork 的方法脱离。</p>\n<p>而 Systemd 则提供通过 CGroup 跟踪进程关系，引补了这个缺漏。通过 CGroup 不仅能够实现服务之间访问隔离，限制特定应用程序对系统资源的访问配额，还能更精确地管理服务的生命周期。</p>\n<ol>\n<li>统一管理服务日志</li>\n</ol>\n<p>Systemd 是一系列工具的集合， 包括了一个专用的系统日志管理服务：Journald。这个服务的设计初衷是克服现有 Syslog 服务的日志内容易伪造和日志格式不统一等缺点，Journald 用 二进制格式 保存所有的日志信息，因而日志内容很难被手工伪造。Journald 还提供了一个 journalctl 命令来查看日志信息，这样就使得不同服务输出的日志具有相同的排版格式， 便于数据的二次处理。</p>\n<h3 id=\"Systemd-架构\"><a href=\"#Systemd-架构\" class=\"headerlink\" title=\"Systemd 架构\"></a><strong>Systemd 架构</strong></h3><p><img src=\"https://ask.qcloudimg.com/http-save/yehe-5449090/97kx52pwuj.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<h2 id=\"Systemd-的-Unit-文件\"><a href=\"#Systemd-的-Unit-文件\" class=\"headerlink\" title=\"Systemd 的 Unit 文件\"></a><strong>Systemd 的 Unit 文件</strong></h2><p>Systemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）。</p>\n<p>在 Systemd 的生态圈中，Unit 文件统一了过去各种不同系统资源配置格式，例如服务的启/停、定时任务、设备自动挂载、网络配置、虚拟内存配置等。而 Systemd 通过不同的文件后缀来区分这些配置文件。</p>\n<ol>\n<li>Systemd 支持的 12 种 Unit 文件类型</li>\n</ol>\n<ul>\n<li>.automount：用于控制自动挂载文件系统，相当于 SysV-init 的 autofs 服务</li>\n<li>.device：对于 /dev 目录下的设备，主要用于定义设备之间的依赖关系</li>\n<li>.mount：定义系统结构层次中的一个挂载点，可以替代过去的 /etc/fstab 配置文件</li>\n<li>.path：用于监控指定目录或文件的变化，并触发其它 Unit 运行</li>\n<li>.scope：这种 Unit 文件不是用户创建的，而是 Systemd 运行时产生的，描述一些系统服务的分组信息</li>\n<li>.service：封装守护进程的启动、停止、重启和重载操作，是最常见的一种 Unit 文件</li>\n<li>.slice：用于表示一个 CGroup 的树，通常用户不会自己创建这样的 Unit 文件</li>\n<li>.snapshot：用于表示一个由 systemctl snapshot 命令创建的 Systemd Units 运行状态快照</li>\n<li>.socket：监控来自于系统或网络的数据消息，用于实现基于数据自动触发服务启动</li>\n<li>.swap：定义一个用户做虚拟内存的交换分区</li>\n<li>.target：用于对 Unit 文件进行逻辑分组，引导其它 Unit 的执行。它替代了 SysV-init 运行级别的作用，并提供更灵活的基于特定设备事件的启动方式</li>\n<li>.timer：用于配置在特定时间触发的任务，替代了 Crontab 的功能</li>\n</ul>\n<ol>\n<li>Systemd 目录</li>\n</ol>\n<p>Unit 文件按照 Systemd 约定，应该被放置指定的三个系统目录之一中。这三个目录是有优先级的，如下所示，越靠上的优先级越高。因此，在三个目录中有同名文件的时候，只有优先级最高的目录里的那个文件会被使用。</p>\n<ul>\n<li>/etc/systemd/system：系统或用户自定义的配置文件</li>\n<li>/run/systemd/system：软件运行时生成的配置文件</li>\n<li>/usr/lib/systemd/system：系统或第三方软件安装时添加的配置文件。<ul>\n<li>CentOS 7：Unit 文件指向该目录</li>\n<li>ubuntu 16：被移到了 /lib/systemd/system</li>\n</ul>\n</li>\n</ul>\n<p>Systemd 默认从目录 /etc/systemd/system/ 读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录 /usr/lib/systemd/system/，真正的配置文件存放在那个目录。</p>\n<ol>\n<li>Unit 和 Target</li>\n</ol>\n<p>Unit 是 Systemd 管理系统资源的基本单元，可以认为每个系统资源就是一个 Unit，并使用一个 Unit 文件定义。在 Unit 文件中需要包含相应服务的描述、属性以及需要运行的命令。</p>\n<p>Target 是 Systemd 中用于指定系统资源启动组的方式，相当于 SysV-init 中的运行级别。</p>\n<p>简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于”状态点”，启动某个 Target 就好比启动到某种状态。</p>\n<h2 id=\"Systemd-Service-Unit\"><a href=\"#Systemd-Service-Unit\" class=\"headerlink\" title=\"Systemd Service Unit\"></a><strong>Systemd Service Unit</strong></h2><h3 id=\"Unit-文件结构\"><a href=\"#Unit-文件结构\" class=\"headerlink\" title=\"Unit 文件结构\"></a><strong>Unit 文件结构</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">[Unit]<br>Description=Hello World<br>After=docker.service<br>Requires=docker.service<br>[Service]<br>TimeoutStartSec=<span class=\"hljs-number\">0</span><br>ExecStartPre=-<span class=\"hljs-regexp\">/usr/</span>bin/docker kill busybox1<br>ExecStartPre=-<span class=\"hljs-regexp\">/usr/</span>bin/docker rm busybox1<br>ExecStartPre=<span class=\"hljs-regexp\">/usr/</span>bin/docker pull busybox<br>ExecStart=<span class=\"hljs-regexp\">/usr/</span>bin/docker run --name busybox1 busybox /bin/ sh -c <span class=\"hljs-string\">&quot;while true; do echo Hello World; sleep 1; done&quot;</span><br>ExecStop=<span class=\"hljs-string\">&quot;/usr/bin/docker stop busybox1&quot;</span><br>ExecStopPost=<span class=\"hljs-string\">&quot;/usr/bin/docker rm busybox1&quot;</span><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure>\n<p>如下所示，Systemd 服务的 Unit 文件可以分为三个配置区段：</p>\n<ul>\n<li>Unit 和 Install 段：所有 Unit 文件通用，用于配置服务（或其它系统资源）的描述、依赖和随系统启动的方式</li>\n<li>Service 段：服务（Service）类型的 Unit 文件（后缀为 .service）特有的，用于定义服务的具体管理和操作方法</li>\n</ul>\n<h4 id=\"Unit-段\"><a href=\"#Unit-段\" class=\"headerlink\" title=\"Unit 段\"></a><strong>Unit 段</strong></h4><ul>\n<li>Description：描述这个 Unit 文件的信息</li>\n<li>Documentation：指定服务的文档，可以是一个或多个文档的 URL 路径</li>\n<li>Requires：依赖的其它 Unit 列表，列在其中的 Unit 模板会在这个服务启动时的同时被启动。并且，如果其中任意一个服务启动失败，这个服务也会被终止</li>\n<li>Wants：与 Requires 相似，但只是在被配置的这个 Unit 启动时，触发启动列出的每个 Unit 模块，而不去考虑这些模板启动是否成功</li>\n<li>After：与 Requires 相似，但是在后面列出的所有模块全部启动完成以后，才会启动当前的服务</li>\n<li>Before：与 After 相反，在启动指定的任务一个模块之间，都会首先确证当前服务已经运行</li>\n<li>Binds To：与 Requires 相似，失败时失败，成功时成功，但是在这些模板中有任意一个出现意外结束或重启时，这个服务也会跟着终止或重启</li>\n<li>Part Of：一个 Bind To 作用的子集，仅在列出的任务模块失败或重启时，终止或重启当前服务，而不会随列出模板的启动而启动</li>\n<li>OnFailure：当这个模板启动失败时，就会自动启动列出的每个模块</li>\n<li>Conflicts：与这个模块有冲突的模块，如果列出的模块中有已经在运行的，这个服务就不能启动，反之亦然</li>\n</ul>\n<h4 id=\"Install-段\"><a href=\"#Install-段\" class=\"headerlink\" title=\"Install 段\"></a><strong>Install 段</strong></h4><p>这部分配置的目标模块通常是特定运行目标的 .target 文件，用来使得服务在系统启动时自动运行。这个区段可以包含三种启动约束：</p>\n<ul>\n<li>WantedBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入 /etc/systemd/system 目录下面以 &lt;Target 名&gt; + .wants 后缀构成的子目录中，如 “/etc/systemd/system/multi-user.target.wants/“</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># find /etc/systemd/system/* -type d<br>/etc/systemd/system/<span class=\"hljs-keyword\">default</span>.target.wants<br>/etc/systemd/system/getty.target.wants<br>/etc/systemd/system/graphical.target.wants<br>/etc/systemd/system/multi-user.target.wants<br>/etc/systemd/system/network-online.target.wants<br>/etc/systemd/system/paths.target.wants<br>/etc/systemd/system/shutdown.target.wants<br>/etc/systemd/system/sockets.target.wants<br>/etc/systemd/system/sysinit.target.wants<br>/etc/systemd/system/timers.target.wants<br></code></pre></td></tr></table></figure>\n<ul>\n<li>RequiredBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入 /etc/systemd/system 目录下面以 &lt;Target 名&gt; + .required 后缀构成的子目录中</li>\n<li>Also：当前 Unit enable/disable 时，同时 enable/disable 的其他 Unit</li>\n<li>Alias：当前 Unit 可用于启动的别名</li>\n</ul>\n<ol>\n<li>SysV-init 运行级别与 Systemd Target 对应的 Unit 文件</li>\n</ol>\n<p><img src=\"https://ask.qcloudimg.com/http-save/yehe-5449090/mvna7qlr41.png?imageView2/2/w/1620\" alt=\"img\"></p>\n<p>通过 systemctl list-units –type=target 命令可以获取当前正在使用的运行目标</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># systemctl list-units --type=target<br>UNIT                   LOAD   ACTIVE SUB    DESCRIPTION<br>basic.target           loaded active active Basic System<br>cryptsetup.target      loaded active active Encrypted Volumes<br>getty.target           loaded active active Login Prompts<br>graphical.target       loaded active active Graphical Interface<br>local-fs-pre.target    loaded active active Local File Systems (Pre)<br>local-fs.target        loaded active active Local File Systems<br>multi-user.target      loaded active active Multi-User System<br>network-online.target  loaded active active Network is Online<br>network.target         loaded active active Network<br>nss-user-lookup.target loaded active active User and Group Name Lookups<br>paths.target           loaded active active Paths<br>remote-fs-pre.target   loaded active active Remote File Systems (Pre)<br>remote-fs.target       loaded active active Remote File Systems<br>slices.target          loaded active active Slices<br>sockets.target         loaded active active Sockets<br>sound.target           loaded active active Sound Card<br>swap.target            loaded active active Swap<br>sysinit.target         loaded active active System Initialization<br>time-sync.target       loaded active active System Time Synchronized<br>timers.target          loaded active active Timers<br>LOAD   = Reflects whether the unit definition was properly loaded.<br>ACTIVE = The high-level unit activation state, i.e. generalization <span class=\"hljs-keyword\">of</span> SUB.<br>SUB    = The low-level unit activation state, values depend on unit type.<br><span class=\"hljs-number\">20</span> loaded units listed. Pass --all to see loaded but inactive units, too.<br>To show all installed unit files use <span class=\"hljs-string\">&#x27;systemctl list-unit-files&#x27;</span>.<br></code></pre></td></tr></table></figure>\n<h4 id=\"Service-段\"><a href=\"#Service-段\" class=\"headerlink\" title=\"Service 段\"></a><strong>Service 段</strong></h4><p>用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段分为服务生命周期和服务上下文配置两个方面。</p>\n<ol>\n<li>服务生命周期控制相关</li>\n</ol>\n<ul>\n<li>Type：定义启动时的进程行为，它有以下几种值：<ul>\n<li>Type=simple：默认值，执行ExecStart指定的命令，启动主进程</li>\n<li>Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</li>\n<li>Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</li>\n<li>Type=dbus：当前服务通过D-Bus启动</li>\n<li>Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行</li>\n<li>Type=idle：若有其他任务执行完毕，当前服务才会运行</li>\n</ul>\n</li>\n<li>RemainAfterExit：值为 true 或 false（默认）。当配置为 true 时，Systemd 只会负责启动服务进程，之后即便服务进程退出了，Systemd 也仍然会认为这个服务还在运行中。这个配置主要是提供给一些并非常驻内存，而是启动注册后立即退出，然后等待消息按需启动的特殊类型服务使用的。</li>\n<li>ExecStart：启动当前服务的命令</li>\n<li>ExecStartPre：启动当前服务之前执行的命令</li>\n<li>ExecStartPos：启动当前服务之后执行的命令</li>\n<li>ExecReload：重启当前服务时执行的命令</li>\n<li>ExecStop：停止当前服务时执行的命令</li>\n<li>ExecStopPost：停止当其服务之后执行的命令</li>\n<li>RestartSec：自动重启当前服务间隔的秒数</li>\n<li>Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括 always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</li>\n<li>TimeoutStartSec：启动服务时等待的秒数，这一配置对于使用 Docker 容器而言显得尤为重要，因其第一次运行时可能需要下载镜像，严重延时会容易被 Systemd 误判为启动失败杀死。通常，对于这种服务，将此值指定为 0，从而关闭超时检测</li>\n<li>TimeoutStopSec：停止服务时的等待秒数，如果超过这个时间仍然没有停止，Systemd 会使用 SIGKILL 信号强行杀死服务的进程</li>\n</ul>\n<ol>\n<li>服务上下文配置相关</li>\n</ol>\n<ul>\n<li>Environment：为服务指定环境变量</li>\n<li>EnvironmentFile：指定加载一个包含服务所需的环境变量的列表的文件，文件中的每一行都是一个环境变量的定义</li>\n<li>Nice：服务的进程优先级，值越小优先级越高，默认为 0。其中 -20 为最高优先级，19 为最低优先级</li>\n<li>WorkingDirectory：指定服务的工作目录</li>\n<li>RootDirectory：指定服务进程的根目录（/ 目录）。如果配置了这个参数，服务将无法访问指定目录以外的任何文件</li>\n<li>User：指定运行服务的用户</li>\n<li>Group：指定运行服务的用户组</li>\n<li>MountFlags：服务的 Mount Namespace 配置，会影响进程上下文中挂载点的信息，即服务是否会继承主机上已有挂载点，以及如果服务运行执行了挂载或卸载设备的操作，是否会真实地在主机上产生效果。可选值为 shared、slaved 或 private<ul>\n<li>shared：服务与主机共用一个 Mount Namespace，继承主机挂载点，且服务挂载或卸载设备会真实地反映到主机上</li>\n<li>slave：服务使用独立的 Mount Namespace，它会继承主机挂载点，但服务对挂载点的操作只有在自己的 Namespace 内生效，不会反映到主机上</li>\n<li>private：服务使用独立的 Mount Namespace，它在启动时没有任何任何挂载点，服务对挂载点的操作也不会反映到主机上</li>\n</ul>\n</li>\n<li>LimitCPU / LimitSTACK / LimitNOFILE / LimitNPROC 等：限制特定服务的系统资源量，例如 CPU、程序堆栈、文件句柄数量、子进程数量等</li>\n</ul>\n<blockquote>\n<p>注意：如果在 ExecStart、ExecStop 等属性中使用了 Linux 命令，则必须要写出完整的绝对路径。对于 ExecStartPre 和 ExecStartPost 辅助命令，若前面有个 “-” 符号，表示忽略这些命令的出错。因为有些 “辅助” 命令本来就不一定成功，比如尝试清空一个文件，但文件可能不存在。</p>\n</blockquote>\n<h3 id=\"Unit-文件占位符和模板\"><a href=\"#Unit-文件占位符和模板\" class=\"headerlink\" title=\"Unit 文件占位符和模板\"></a><strong>Unit 文件占位符和模板</strong></h3><h4 id=\"Unit-文件占位符\"><a href=\"#Unit-文件占位符\" class=\"headerlink\" title=\"Unit 文件占位符\"></a><strong>Unit 文件占位符</strong></h4><p>在 Unit 文件中，有时会需要使用到一些与运行环境有关的信息，例如节点 ID、运行服务的用户等。这些信息可以使用占位符来表示，然后在实际运行被动态地替换实际的值。</p>\n<ul>\n<li>%n：完整的 Unit 文件名字，包括 .service 后缀名</li>\n<li>%p：Unit 模板文件名中 @ 符号之前的部分，不包括 @ 符号</li>\n<li>%i：Unit 模板文件名中 @ 符号之后的部分，不包括 @ 符号和 .service 后缀名</li>\n<li>%t：存放系统运行文件的目录，通常是 “run”</li>\n<li>%u：运行服务的用户，如果 Unit 文件中没有指定，则默认为 root</li>\n<li>%U：运行服务的用户 ID</li>\n<li>%h：运行服务的用户 Home 目录，即 %{HOME} 环境变量的值</li>\n<li>%s：运行服务的用户默认 Shell 类型，即 %{SHELL} 环境变量的值</li>\n<li>%m：实际运行节点的 Machine ID，对于运行位置每个的服务比较有用</li>\n<li>%b：Boot ID，这是一个随机数，每个节点各不相同，并且每次节点重启时都会改变</li>\n<li>%H：实际运行节点的主机名</li>\n<li>%v：内核版本，即 “uname -r” 命令输出的内容</li>\n<li>%%：在 Unit 模板文件中表示一个普通的百分号</li>\n</ul>\n<h4 id=\"Unit-模板\"><a href=\"#Unit-模板\" class=\"headerlink\" title=\"Unit 模板\"></a><strong>Unit 模板</strong></h4><p>在现实中，往往有一些应用需要被复制多份运行。例如，用于同一个<a href=\"https://cloud.tencent.com/product/clb?from=10680\">负载均衡</a>器分流的多个服务实例，或者为每个 SSH 连接建立一个独立的 sshd 服务进程。</p>\n<p>Unit 模板文件的写法与普通的服务 Unit 文件基本相同，不过 Unit 模板的文件名是以 @ 符号结尾的。通过模板启动服务实例时，需要在其文件名的 @ 字符后面附加一个参数字符串。</p>\n<ol>\n<li>示例：apache@.service</li>\n</ol>\n<ul>\n<li>apache@.service 模板</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">[Unit]<br>Description=My Advanced Service Template<br>After=etcd.service docker.service<br>[Service]<br>TimeoutStartSec=<span class=\"hljs-number\">0</span><br>ExecStartPre=-<span class=\"hljs-regexp\">/usr/</span>bin/docker kill apache%i<br>ExecStartPre=-<span class=\"hljs-regexp\">/usr/</span>bin/docker rm apache%i<br>ExecStartPre=<span class=\"hljs-regexp\">/usr/</span>bin/docker pull coreos/apache<br>ExecStart=<span class=\"hljs-regexp\">/usr/</span>bin/docker run --name apache%i -p %i:<span class=\"hljs-number\">80</span> coreos/apache /usr/sbin/apache2ctl -D FOREGROUND<br>ExecStartPost=<span class=\"hljs-regexp\">/usr/</span>bin/etcdctl set /domains/example.com/%H:%i running<br>ExecStop=<span class=\"hljs-regexp\">/usr/</span>bin/docker stop apache1<br>ExecStopPost=<span class=\"hljs-regexp\">/usr/</span>bin/docker rm apache1<br>ExecStopPost=<span class=\"hljs-regexp\">/usr/</span>bin/etcdctl rm /domains/example.com/%H:%i<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure>\n<ul>\n<li>启动 Unit 模板的服务实例</li>\n</ul>\n<p>在服务启动时需要在 @ 后面放置一个用于区分服务实例的附加字符参数，通常这个参数用于监控的端口号或控制台 TTY 编译号。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># systemctl start apache@8080.service<br></code></pre></td></tr></table></figure>\n<p>Systemd 在运行服务时，总是会先尝试找到一个完整匹配的 Unit 文件，如果没有找到，才会尝试选择匹配模板。例如上面的命令，System 首先会在约定的目录下寻找名为 <a href=\"mailto:apache@8080.service\">apache@8080.service</a> 的文件，如果没有找到，而文件名中包含 @ 字符，它就会尝试去掉后缀参数匹配模板文件。对于 <a href=\"mailto:apache@8080.service\">apache@8080.service</a>，systemd 会找到 apache@.service 模板文件，并通过这个模板文件将服务实例化。</p>\n<h2 id=\"Systemd-的资源管理\"><a href=\"#Systemd-的资源管理\" class=\"headerlink\" title=\"Systemd 的资源管理\"></a><strong>Systemd 的资源管理</strong></h2><h3 id=\"Systemctl-命令\"><a href=\"#Systemctl-命令\" class=\"headerlink\" title=\"Systemctl 命令\"></a><strong>Systemctl 命令</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># systemctl --help<br>systemctl [OPTIONS...] &#123;COMMAND&#125; ...<br>Query or send control commands to the systemd manager.<br>  -h --help           Show <span class=\"hljs-built_in\">this</span> help<br>     --version        Show package version<br>     --system         Connect to system manager<br>  -H --host=[USER@]HOST<br>                      Operate on remote host<br>  -M --machine=CONTAINER<br>                      Operate on local container<br>  -t --type=TYPE      List units <span class=\"hljs-keyword\">of</span> a particular type<br>     --state=STATE    List units <span class=\"hljs-keyword\">with</span> particular LOAD or SUB or ACTIVE state<br>  -p --property=NAME  Show only properties by <span class=\"hljs-built_in\">this</span> name<br>  -a --all            Show all loaded units/properties, including dead/empty<br>                      ones. To list all units installed on the system, use<br>                      the <span class=\"hljs-string\">&#x27;list-unit-files&#x27;</span> command instead.<br>  -l --full           Don<span class=\"hljs-string\">&#x27;t ellipsize unit names on output</span><br><span class=\"hljs-string\">  -r --recursive      Show unit list of host and local containers</span><br><span class=\"hljs-string\">     --reverse        Show reverse dependencies with &#x27;</span>list-dependencies<span class=\"hljs-string\">&#x27;</span><br><span class=\"hljs-string\">     --job-mode=MODE  Specify how to deal with already queued jobs, when</span><br><span class=\"hljs-string\">                      queueing a new job</span><br><span class=\"hljs-string\">     --show-types     When showing sockets, explicitly show their type</span><br><span class=\"hljs-string\">  -i --ignore-inhibitors</span><br><span class=\"hljs-string\">                      When shutting down or sleeping, ignore inhibitors</span><br><span class=\"hljs-string\">     --kill-who=WHO   Who to send signal to</span><br><span class=\"hljs-string\">  -s --signal=SIGNAL  Which signal to send</span><br><span class=\"hljs-string\">     --now            Start or stop unit in addition to enabling or disabling it</span><br><span class=\"hljs-string\">  -q --quiet          Suppress output</span><br><span class=\"hljs-string\">     --no-block       Do not wait until operation finished</span><br><span class=\"hljs-string\">     --no-wall        Don&#x27;</span>t send wall message before halt/power-off/reboot<br>     --no-reload      Don<span class=\"hljs-string\">&#x27;t reload daemon after en-/dis-abling unit files</span><br><span class=\"hljs-string\">     --no-legend      Do not print a legend (column headers and hints)</span><br><span class=\"hljs-string\">     --no-pager       Do not pipe output into a pager</span><br><span class=\"hljs-string\">     --no-ask-password</span><br><span class=\"hljs-string\">                      Do not ask for system passwords</span><br><span class=\"hljs-string\">     --global         Enable/disable unit files globally</span><br><span class=\"hljs-string\">     --runtime        Enable unit files only temporarily until next reboot</span><br><span class=\"hljs-string\">  -f --force          When enabling unit files, override existing symlinks</span><br><span class=\"hljs-string\">                      When shutting down, execute action immediately</span><br><span class=\"hljs-string\">     --preset-mode=   Apply only enable, only disable, or all presets</span><br><span class=\"hljs-string\">     --root=PATH      Enable unit files in the specified root directory</span><br><span class=\"hljs-string\">  -n --lines=INTEGER  Number of journal entries to show</span><br><span class=\"hljs-string\">  -o --output=STRING  Change journal output mode (short, short-iso,</span><br><span class=\"hljs-string\">                              short-precise, short-monotonic, verbose,</span><br><span class=\"hljs-string\">                              export, json, json-pretty, json-sse, cat)</span><br><span class=\"hljs-string\">     --plain          Print unit dependencies as a list instead of a tree</span><br><span class=\"hljs-string\">Unit Commands:</span><br><span class=\"hljs-string\">  list-units [PATTERN...]         List loaded units</span><br><span class=\"hljs-string\">  list-sockets [PATTERN...]       List loaded sockets ordered by address</span><br><span class=\"hljs-string\">  list-timers [PATTERN...]        List loaded timers ordered by next elapse</span><br><span class=\"hljs-string\">  start NAME...                   Start (activate) one or more units</span><br><span class=\"hljs-string\">  stop NAME...                    Stop (deactivate) one or more units</span><br><span class=\"hljs-string\">  reload NAME...                  Reload one or more units</span><br><span class=\"hljs-string\">  restart NAME...                 Start or restart one or more units</span><br><span class=\"hljs-string\">  try-restart NAME...             Restart one or more units if active</span><br><span class=\"hljs-string\">  reload-or-restart NAME...       Reload one or more units if possible,</span><br><span class=\"hljs-string\">                                  otherwise start or restart</span><br><span class=\"hljs-string\">  reload-or-try-restart NAME...   Reload one or more units if possible,</span><br><span class=\"hljs-string\">                                  otherwise restart if active</span><br><span class=\"hljs-string\">  isolate NAME                    Start one unit and stop all others</span><br><span class=\"hljs-string\">  kill NAME...                    Send signal to processes of a unit</span><br><span class=\"hljs-string\">  is-active PATTERN...            Check whether units are active</span><br><span class=\"hljs-string\">  is-failed PATTERN...            Check whether units are failed</span><br><span class=\"hljs-string\">  status [PATTERN...|PID...]      Show runtime status of one or more units</span><br><span class=\"hljs-string\">  show [PATTERN...|JOB...]        Show properties of one or more</span><br><span class=\"hljs-string\">                                  units/jobs or the manager</span><br><span class=\"hljs-string\">  cat PATTERN...                  Show files and drop-ins of one or more units</span><br><span class=\"hljs-string\">  set-property NAME ASSIGNMENT... Sets one or more properties of a unit</span><br><span class=\"hljs-string\">  help PATTERN...|PID...          Show manual for one or more units</span><br><span class=\"hljs-string\">  reset-failed [PATTERN...]       Reset failed state for all, one, or more</span><br><span class=\"hljs-string\">                                  units</span><br><span class=\"hljs-string\">  list-dependencies [NAME]        Recursively show units which are required</span><br><span class=\"hljs-string\">                                  or wanted by this unit or by which this</span><br><span class=\"hljs-string\">                                  unit is required or wanted</span><br><span class=\"hljs-string\">Unit File Commands:</span><br><span class=\"hljs-string\">  list-unit-files [PATTERN...]    List installed unit files</span><br><span class=\"hljs-string\">  enable NAME...                  Enable one or more unit files</span><br><span class=\"hljs-string\">  disable NAME...                 Disable one or more unit files</span><br><span class=\"hljs-string\">  reenable NAME...                Reenable one or more unit files</span><br><span class=\"hljs-string\">  preset NAME...                  Enable/disable one or more unit files</span><br><span class=\"hljs-string\">                                  based on preset configuration</span><br><span class=\"hljs-string\">  preset-all                      Enable/disable all unit files based on</span><br><span class=\"hljs-string\">                                  preset configuration</span><br><span class=\"hljs-string\">  is-enabled NAME...              Check whether unit files are enabled</span><br><span class=\"hljs-string\">  mask NAME...                    Mask one or more units</span><br><span class=\"hljs-string\">  unmask NAME...                  Unmask one or more units</span><br><span class=\"hljs-string\">  link PATH...                    Link one or more units files into</span><br><span class=\"hljs-string\">                                  the search path</span><br><span class=\"hljs-string\">  add-wants TARGET NAME...        Add &#x27;</span>Wants<span class=\"hljs-string\">&#x27; dependency for the target</span><br><span class=\"hljs-string\">                                  on specified one or more units</span><br><span class=\"hljs-string\">  add-requires TARGET NAME...     Add &#x27;</span>Requires<span class=\"hljs-string\">&#x27; dependency for the target</span><br><span class=\"hljs-string\">                                  on specified one or more units</span><br><span class=\"hljs-string\">  edit NAME...                    Edit one or more unit files</span><br><span class=\"hljs-string\">  get-default                     Get the name of the default target</span><br><span class=\"hljs-string\">  set-default NAME                Set the default target</span><br><span class=\"hljs-string\">Machine Commands:</span><br><span class=\"hljs-string\">  list-machines [PATTERN...]      List local containers and host</span><br><span class=\"hljs-string\">Job Commands:</span><br><span class=\"hljs-string\">  list-jobs [PATTERN...]          List jobs</span><br><span class=\"hljs-string\">  cancel [JOB...]                 Cancel all, one, or more jobs</span><br><span class=\"hljs-string\">Snapshot Commands:</span><br><span class=\"hljs-string\">  snapshot [NAME]                 Create a snapshot</span><br><span class=\"hljs-string\">  delete NAME...                  Remove one or more snapshots</span><br><span class=\"hljs-string\">Environment Commands:</span><br><span class=\"hljs-string\">  show-environment                Dump environment</span><br><span class=\"hljs-string\">  set-environment NAME=VALUE...   Set one or more environment variables</span><br><span class=\"hljs-string\">  unset-environment NAME...       Unset one or more environment variables</span><br><span class=\"hljs-string\">  import-environment [NAME...]    Import all or some environment variables</span><br><span class=\"hljs-string\">Manager Lifecycle Commands:</span><br><span class=\"hljs-string\">  daemon-reload                   Reload systemd manager configuration</span><br><span class=\"hljs-string\">  daemon-reexec                   Reexecute systemd manager</span><br><span class=\"hljs-string\">System Commands:</span><br><span class=\"hljs-string\">  is-system-running               Check whether system is fully running</span><br><span class=\"hljs-string\">  default                         Enter system default mode</span><br><span class=\"hljs-string\">  rescue                          Enter system rescue mode</span><br><span class=\"hljs-string\">  emergency                       Enter system emergency mode</span><br><span class=\"hljs-string\">  halt                            Shut down and halt the system</span><br><span class=\"hljs-string\">  poweroff                        Shut down and power-off the system</span><br><span class=\"hljs-string\">  reboot [ARG]                    Shut down and reboot the system</span><br><span class=\"hljs-string\">  kexec                           Shut down and reboot the system with kexec</span><br><span class=\"hljs-string\">  exit                            Request user instance exit</span><br><span class=\"hljs-string\">  switch-root ROOT [INIT]         Change to a different root file system</span><br><span class=\"hljs-string\">  suspend                         Suspend the system</span><br><span class=\"hljs-string\">  hibernate                       Hibernate the system</span><br><span class=\"hljs-string\">  hybrid-sleep                    Hibernate and suspend the system</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"Unit-管理\"><a href=\"#Unit-管理\" class=\"headerlink\" title=\"Unit 管理\"></a><strong>Unit 管理</strong></h3><ol>\n<li>查看当前系统的所有 Unit</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 列出正在运行的 Unit<br>$ systemctl list-units<br><br># 列出所有Unit，包括没有找到配置文件的或者启动失败的<br>$ systemctl list-units --all<br><br># 列出所有没有运行的 Unit<br>$ systemctl list-units --all --state=inactive<br><br># 列出所有加载失败的 Unit<br>$ systemctl list-units --failed<br><br># 列出所有正在运行的、类型为 service 的 Unit<br>$ systemctl list-units --type=service<br><br># 查看 Unit 配置文件的内容<br>$ systemctl cat docker.service<br></code></pre></td></tr></table></figure>\n<ol>\n<li>查看 Unit 的状态</li>\n</ol>\n<ul>\n<li>enabled：已建立启动链接</li>\n<li>disabled：没建立启动链接</li>\n<li>static：该配置文件没有 [Install] 部分（无法执行），只能作为其他配置文件的依赖</li>\n<li>masked：该配置文件被禁止建立启动链接</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 显示系统状态<br>$ systemctl status<br><br># 显示单个 Unit 的状态<br>$ ystemctl status bluetooth.service<br><br># 显示远程主机的某个 Unit 的状态<br>$ systemctl -H root@rhel7.example.com status httpd.service<br></code></pre></td></tr></table></figure>\n<ol>\n<li>Unit 的管理</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 立即启动一个服务<br>$ sudo systemctl start apache.service<br><br># 立即停止一个服务<br>$ sudo systemctl stop apache.service<br><br># 重启一个服务<br>$ sudo systemctl restart apache.service<br><br># 杀死一个服务的所有子进程<br>$ sudo systemctl kill apache.service<br><br># 重新加载一个服务的配置文件<br>$ sudo systemctl reload apache.service<br><br># 重载所有修改过的配置文件<br>$ sudo systemctl daemon-reload<br><br># 显示某个 Unit 的所有底层参数<br>$ systemctl show httpd.service<br><br># 显示某个 Unit 的指定属性的值<br>$ systemctl show -p CPUShares httpd.service<br><br># 设置某个 Unit 的指定属性<br>$ sudo systemctl set-property httpd.service CPUShares=<span class=\"hljs-number\">500</span><br></code></pre></td></tr></table></figure>\n<ol>\n<li>查看 Unit 的依赖关系</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 列出一个 Unit 的所有依赖，默认不会列出 target 类型<br>$ systemctl list-dependencies nginx.service<br><br># 列出一个 Unit 的所有依赖，包括 target 类型<br>$ systemctl list-dependencies --all nginx.service<br></code></pre></td></tr></table></figure>\n<h3 id=\"服务的生命周期\"><a href=\"#服务的生命周期\" class=\"headerlink\" title=\"服务的生命周期\"></a><strong>服务的生命周期</strong></h3><p>当一个新的 Unit 文件被放入 /etc/systemd/system/ 或 /usr/lib/systemd/system/ 目录中时，它是不会被自识识别的。</p>\n<ol>\n<li>服务的激活</li>\n</ol>\n<ul>\n<li>systemctl enable：在 /etc/systemd/system/ 建立服务的符号链接，指向 /usr/lib/systemd/system/ 中</li>\n<li>systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令</li>\n</ul>\n<ol>\n<li>服务的启动和停止</li>\n</ol>\n<ul>\n<li>systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令</li>\n<li>systemctl stop：依次停止定义在 Unit 文件中的 ExecStopPre、ExecStop 和 ExecStopPost 命令</li>\n<li>systemctl restart：重启服务</li>\n<li>systemctl kill：立即杀死服务</li>\n</ul>\n<ol>\n<li>服务的开机启动和取消</li>\n</ol>\n<ul>\n<li>systemctl enable：除了激活服务以外，也可以置服务为开机启动</li>\n<li>systemctl disable：取消服务的开机启动</li>\n</ul>\n<ol>\n<li>服务的修改和移除</li>\n</ol>\n<ul>\n<li>systemctl daemon-reload：Systemd 会将 Unit 文件的内容写到缓存中，因此当 Unit 文件被更新时，需要告诉 Systemd 重新读取所有的 Unit 文件</li>\n<li>systemctl reset-failed：移除标记为丢失的 Unit 文件。在删除 Unit 文件后，由于缓存的关系，即使通过 daemon-reload 更新了缓存，在 list-units 中依然会显示标记为 not-found 的 Unit。</li>\n</ul>\n<h3 id=\"Target-管理\"><a href=\"#Target-管理\" class=\"headerlink\" title=\"Target 管理\"></a><strong>Target 管理</strong></h3><p>Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。</p>\n<p>在传统的 SysV-init 启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 查看当前系统的所有 Target<br>$ systemctl list-unit-files --type=target<br><br># 查看一个 Target 包含的所有 Unit<br>$ systemctl list-dependencies multi-user.target<br><br># 查看启动时的默认 Target<br>$ systemctl get-<span class=\"hljs-keyword\">default</span><br><br># 设置启动时的默认 Target<br>$ sudo systemctl set-<span class=\"hljs-keyword\">default</span> multi-user.target<br><br># 切换 Target 时，默认不关闭前一个 Target 启动的进程，systemctl isolate 命令改变这种行为，关闭前一个 Target 里面所有不属于后一个 Target 的进程<br>$ sudo systemctl isolate multi-user.target<br></code></pre></td></tr></table></figure>\n<ol>\n<li>Target 与 SysV-init 进程的主要区别：</li>\n</ol>\n<ul>\n<li>默认的 RunLevel（在 /etc/inittab 文件设置）现在被默认的 Target 取代，位置是 /etc/systemd/system/default.target，通常符号链接到graphical.target（图形界面）或者multi-user.target（多用户命令行）。</li>\n<li>启动脚本的位置，以前是 /etc/init.d 目录，符号链接到不同的 RunLevel 目录 （比如 /etc/rc3.d、/etc/rc5.d 等），现在则存放在 /lib/systemd/system 和 /etc/systemd/system 目录。</li>\n<li>配置文件的位置，以前 init 进程的配置文件是 /etc/inittab，各种服务的配置文件存放在 /etc/sysconfig 目录。现在的配置文件主要存放在 /lib/systemd 目录，在 /etc/systemd 目录里面的修改可以覆盖原始设置。</li>\n</ul>\n<h3 id=\"日志管理\"><a href=\"#日志管理\" class=\"headerlink\" title=\"日志管理\"></a><strong>日志管理</strong></h3><p>Systemd 通过其标准日志服务 Journald 提供的配套程序 journalctl 将其管理的所有后台进程打印到 std:out（即控制台）的输出重定向到了日志文件。</p>\n<p>Systemd 的日志文件是二进制格式的，必须使用 Journald 提供的 journalctl 来查看，默认不带任何参数时会输出系统和所有后台进程的混合日志。</p>\n<p>默认日志最大限制为所在文件系统容量的 10%，可以修改 /etc/systemd/journald.conf 中的 SystemMaxUse 来指定该最大限制。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 查看所有日志（默认情况下 ，只保存本次启动的日志）<br>$ sudo journalctl<br><br># 查看内核日志（不显示应用日志）：--dmesg 或 -k<br>$ sudo journalctl -k<br><br># 查看系统本次启动的日志（其中包括了内核日志和各类系统服务的控制台输出）：--system 或 -b<br>$ sudo journalctl -b<br>$ sudo journalctl -b -<span class=\"hljs-number\">0</span><br><br># 查看上一次启动的日志（需更改设置）<br>$ sudo journalctl -b -<span class=\"hljs-number\">1</span><br><br># 查看指定服务的日志：--unit 或 -u<br>$ sudo journalctl -u docker.servcie<br><br># 查看指定服务的日志<br>$ sudo journalctl /usr/lib/systemd/systemd<br><br># 实时滚动显示最新日志<br>$ sudo journalctl -f<br><br># 查看指定时间的日志<br>$ sudo journalctl --since=<span class=\"hljs-string\">&quot;2012-10-30 18:17:16&quot;</span><br>$ sudo journalctl --since <span class=\"hljs-string\">&quot;20 min ago&quot;</span><br>$ sudo journalctl --since yesterday<br>$ sudo journalctl --since <span class=\"hljs-string\">&quot;2015-01-10&quot;</span> --until <span class=\"hljs-string\">&quot;2015-01-11 03:00&quot;</span><br>$ sudo journalctl --since <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">00</span> --until <span class=\"hljs-string\">&quot;1 hour ago&quot;</span><br><br># 显示尾部的最新 10 行日志：--lines 或 -n<br>$ sudo journalctl -n<br><br># 显示尾部指定行数的日志<br>$ sudo journalctl -n <span class=\"hljs-number\">20</span><br><br># 将最新的日志显示在前面<br>$ sudo journalctl -r -u docker.service<br><br># 改变输出的格式：--output 或 -o<br>$ sudo journalctl -r -u docker.service -o json-pretty<br><br># 查看指定进程的日志<br>$ sudo journalctl _PID=<span class=\"hljs-number\">1</span><br><br># 查看某个路径的脚本的日志<br>$ sudo journalctl /usr/bin/bash<br><br># 查看指定用户的日志<br>$ sudo journalctl _UID=<span class=\"hljs-number\">33</span> --since today<br><br># 查看某个 Unit 的日志<br>$ sudo journalctl -u nginx.service<br>$ sudo journalctl -u nginx.service --since today<br><br># 实时滚动显示某个 Unit 的最新日志<br>$ sudo journalctl -u nginx.service -f<br><br># 合并显示多个 Unit 的日志<br>$ journalctl -u nginx.service -u php-fpm.service --since today<br><br># 查看指定优先级（及其以上级别）的日志，共有 8 级<br># 0: emerg<br># 1: alert<br># 2: crit<br># 3: err<br># 4: warning<br># 5: notice<br># 6: info<br># 7: debug<br>$ sudo journalctl -p err -b<br><br># 日志默认分页输出，--no-pager 改为正常的标准输出<br>$ sudo journalctl --no-pager<br><br># 以 JSON 格式（单行）输出<br>$ sudo journalctl -b -u nginx.service -o json<br><br># 以 JSON 格式（多行）输出，可读性更好<br>$ sudo journalctl -b -u nginx.serviceqq<br> -o json-pretty<br><br># 显示日志占据的硬盘空间<br>$ sudo journalctl --disk-usage<br><br># 指定日志文件占据的最大空间<br>$ sudo journalctl --vacuum-size=1G<br><br># 指定日志文件保存多久<br>$ sudo journalctl --vacuum-time=1years<br></code></pre></td></tr></table></figure>\n<h2 id=\"Systemd-工具集\"><a href=\"#Systemd-工具集\" class=\"headerlink\" title=\"Systemd 工具集\"></a><strong>Systemd 工具集</strong></h2><ul>\n<li>systemctl：用于检查和控制各种系统服务和资源的状态</li>\n<li>bootctl：用于查看和管理系统启动分区</li>\n<li>hostnamectl：用于查看和修改系统的主机名和主机信息</li>\n<li>journalctl：用于查看系统日志和各类应用服务日志</li>\n<li>localectl：用于查看和管理系统的地区信息</li>\n<li>loginctl：用于管理系统已登录用户和 Session 的信息</li>\n<li>machinectl：用于操作 Systemd 容器</li>\n<li>timedatectl：用于查看和管理系统的时间和时区信息</li>\n<li>systemd-analyze 显示此次系统启动时运行每个服务所消耗的时间，可以用于分析系统启动过程中的性能瓶颈</li>\n<li>systemd-ask-password：辅助性工具，用星号屏蔽用户的任意输入，然后返回实际输入的内容</li>\n<li>systemd-cat：用于将其他命令的输出重定向到系统日志</li>\n<li>systemd-cgls：递归地显示指定 CGroup 的继承链</li>\n<li>systemd-cgtop：显示系统当前最耗资源的 CGroup 单元</li>\n<li>systemd-escape：辅助性工具，用于去除指定字符串中不能作为 Unit 文件名的字符</li>\n<li>systemd-hwdb：Systemd 的内部工具，用于更新硬件数据库</li>\n<li>systemd-delta：对比当前系统配置与默认系统配置的差异</li>\n<li>systemd-detect-virt：显示主机的虚拟化类型</li>\n<li>systemd-inhibit：用于强制延迟或禁止系统的关闭、睡眠和待机事件</li>\n<li>systemd-machine-id-setup：Systemd 的内部工具，用于给 Systemd 容器生成 ID</li>\n<li>systemd-notify：Systemd 的内部工具，用于通知服务的状态变化</li>\n<li>systemd-nspawn：用于创建 Systemd 容器</li>\n<li>systemd-path：Systemd 的内部工具，用于显示系统上下文中的各种路径配置</li>\n<li>systemd-run：用于将任意指定的命令包装成一个临时的后台服务运行</li>\n<li>systemd-stdio- bridge：Systemd 的内部 工具，用于将程序的标准输入输出重定向到系统总线</li>\n<li>systemd-tmpfiles：Systemd 的内部工具，用于创建和管理临时文件目录</li>\n<li>systemd-tty-ask-password-agent：用于响应后台服务进程发出的输入密码请求</li>\n</ul>\n<ol>\n<li>systemctl</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 重启系统<br>$ sudo systemctl reboot<br><br># 关闭系统，切断电源<br>$ sudo systemctl poweroff<br><br># CPU停止工作<br>$ sudo systemctl halt<br><br># 暂停系统<br>$ sudo systemctl suspend<br><br># 让系统进入冬眠状态<br>$ sudo systemctl hibernate<br><br># 让系统进入交互式休眠状态<br>$ sudo systemctl hybrid-sleep<br><br># 启动进入救援状态（单用户状态）<br>$ sudo systemctl rescue<br></code></pre></td></tr></table></figure>\n<ol>\n<li>systemd-analyze</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 查看启动耗时<br>$ systemd-analyze<br><br># 查看每个服务的启动耗时<br>$ systemd-analyze blame<br><br># 显示瀑布状的启动过程流<br>$ systemd-analyze critical-chain<br><br># 显示指定服务的启动流<br>$ systemd-analyze critical-chain atd.service<br></code></pre></td></tr></table></figure>\n<ol>\n<li>hostnamectl</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 显示当前主机的信息<br>$ hostnamectl<br><br># 设置主机名。<br>$ sudo hostnamectl set-hostname rhel7<br></code></pre></td></tr></table></figure>\n<ol>\n<li>timedatectl</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 查看当前时区设置<br>$ timedatectl<br><br># 显示所有可用的时区<br>$ timedatectl list-timezones<br><br># 设置当前时区<br>$ sudo timedatectl set-timezone America/New_York<br>$ sudo timedatectl set-time YYYY-MM-DD<br>$ sudo timedatectl set-time HH:MM:SS<br></code></pre></td></tr></table></figure>\n<ol>\n<li>loginctl</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"># 列出当前 session<br>$ loginctl list-sessions<br><br># 列出当前登录用户<br>$ loginctl list-users<br><br># 列出显示指定用户的信息<br>$ loginctl show-user ruanyf<br></code></pre></td></tr></table></figure>\n<ol>\n<li>systemd-ask-password</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$ PASSWORD=$(systemd-ask-password <span class=\"hljs-string\">&quot;Input Your Passowrd:&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ol>\n<li>systemd-run</li>\n</ol>\n<p>systemd-run 可以将一个指定的操作变成后台运行的服务。它的效果似乎与直接在命令后加上表示后台运行的 &amp; 符号很相似。然而，它让命令成为服务还意味着，它的生命周期将由 Systemd 控制。具体来说，包括以下好处：</p>\n<ul>\n<li>服务的生命击期由 Systemd 接管，不会随着启动它的控制台关闭而结束</li>\n<li>可以通过 systemctl 工具管理服务的状态</li>\n<li>可以通过 journalctl 工具查看和管理服务的日志信息</li>\n<li>可以通过 Systemd 提供的方法限制服务的 CPU、内存、磁盘 IO 等系统资源的使用情况。</li>\n</ul>\n"},{"title":"Spring Cloud 微服务架构全链路实践","index_img":"/img/spring-cloud.jpeg","abbrlink":1879991184,"date":"2016-08-15T16:04:12.000Z","_content":"\n# 前言\nJava 微服务框架选型（Dubbo 和 Spring Cloud）\n\n{% asset_img 1.png %}\n\n目前公司使用的 Spring Cloud 整个技术组件，基本包含了上面图中所包含的，不得不说，Spring Cloud 整个生态真的很强大，使用起来也很方便有效。\n\n后面有时间再针对\n\n\n\n个组件进行使用解读，这篇文章主要说下 Spring Cloud 架构的链路图，顺便把自己的思路整理下来，以备查阅。\n\n{% asset_img 2.png %}\n\n# 网关请求流程\n\n在 Spring Cloud 整个组件库中，Spring Cloud Zuul 是最容易被忽视，但也是最重要的，Spring Cloud Zuul 可以和 Eureka 注册中心集成，我们目前使用 Spring Cloud Zuul 的功能如下：\n- Filter 过滤器\n- Router 路由\n- Ribbon 负载均衡\n- Hystrix 熔断\n- Retry 重试\n有些功能是 Spring Cloud Zuul 自带的，比如 Filter 和 Router，有些是结合 Spring Cloud 其他组件，比如 Ribbon 和 Hystrix。\n\n这里重点介绍下 Filter 过滤器，分为四个过滤类型：\n- pre：Zuul 转发请求之前执行，我们目前的实现是AccessTokenFilter，用于 oAuth2.0 JWT 的授权验证。\n- route：Zuul 路由时执行，目前项目没用到。\n- post：Zuul 路由转发后执行，也就是已经请求成功了后端服务，我们目前的实现是CustomResponseFilter，用于统一请求格式的封装，比如 code/msg/data 等。\n- error：以上过滤器发生错误时执行，我们目前的实现是CustomErrorFilter，用于拦截过滤器执行的出现的错误，然后统一格式封装返回，另外，error 过滤器好像并不能捕获后端服务执行出现的错误。\n\n另外，关于 oAuth2.0 JWT 的授权验证，实现的方式有两种：\n- 授权的配置在后端服务中（每个服务都需要当作 Resource Server 进行配置，需要配置公钥，接口的授权具体配置在注解中），Zuul 只做转发，并不进行授权的验证。\n- 授权的配置在 Zuul 中，也就是把 Zuul 当作 Resource Server，后端服务不需要进行任何处理，Zuul 中具体的实现就是AccessTokenFilter，里面的逻辑是手动解析 JWT，然后判断是否正确，以及解析出用户信息/Scope/Role，然后根据当前的请求 API，对授权 Map 中的配置进行匹配，如果匹配错误，直接抛出 401 授权错误。\n我们目前采用的是第二种方式，这两种方式都有利有弊，关键在于自己的取舍，为什么采用第二种方式？目的就是发挥 Zuul 的作用，对外网关进行统一授权验证。\n\n关于授权 Map，里面存储了所有服务接口的配置，示例配置：\n```\nprivate static final Map ROUTE_MAPS;\nstatic {\n    ROUTE_MAPS = new HashMap();\n    ROUTE_MAPS.put(\"eureka-client/home\", \"read:ROLE_ADMIN\");\n    ROUTE_MAPS.put(\"eureka-client/user\", \"read:ROLE_ADMIN\");\n    ROUTE_MAPS.put(\"eureka-client/error\", \"read:ROLE_ADMIN\");\n}\n```\n\n\n这是我们目前的配置，是一个静态的 Map，后面会存储在 Spring Cloud Config 配置中心，Zuul 启动时进行加载，利用 Spring Cloud Bus 动态刷新。\n\n关于 Zuul 网关，其实还有很多需要说的，后面有机会再进行针对说明。\n\n# Eureka 服务治理\n\n{% asset_img 3.png %}\n\nEureka 遵循的是 AP 原则（服务可用性和分区容错性），是服务治理最理想的遵循 CAP 分布式原则。\n\nEureka 集群中的节点是彼此平级，不像 Consul 有 master/worker 之分，集群中的 Eureka 节点彼此两两注册，所以，Eureka 集群最好部署三个节点，这也是我们目前的部署方式。\n\n另外，Eureka 的自我保护机制，可以参考这篇文章。\n\n服务之间的相互调用，负载有两种使用方式：\n- Feign：基于声明式，顾名思义，就是需要定义接口，就像我们平常使用对象调用一样。\n- Ribbon：软负载，通过往 RestTemplate 中注入负载 Handler，然后通过负载算法选取调用（通过 Eureka 获取服务注册信息）。\n我们目前打算使用 Ribbon 负载方式，为什么？看下面代码就知道了：\n\n```\nrestTemplate.getForObject(\"http://eureka-client/hello\", String.class);\n```\n\n# Config 配置中心\n\n{% asset_img 4.png %}\n\n我们目前配置中心使用的是 Spring Cloud Config，当然你也可以使用功能更强大的 Polly（携程开源），但 Config 目前也能满足我们的需求，存储仓库我们现在使用的是 Git。\n\nConfig 配置中心提供了数据加密功能，你可以使用 RSA 的加密方式，这样存储在 Git 中的配置都是密文形式，Config Client 获取加密配置的时候，Config Server 会自动进行解密返回。\n\n配置中心的使用场景，我们目前主要是两个地方：\n\n- 项目启动的配置信息，比如数据库的连接字符串等。\n- 业务服务的配置信息，也就是业务相关的配置。\n\n另外，需要说明的是，默认情况下，如果 Git 中的配置更新了，Config Client 不会进行更新配置，我们目前的解决方式是，使用 Spring Cloud Bus 进行动态刷新配置（Config Server 中配置），具体的流程：\n1. Git 中添加 WebHooks 脚本，比如curl -X POST http://manager1:8180/bus/refresh，当 Git 仓库中的配置更新后，自动执行。\n2. Config Server 中配置 Spring Cloud Bus，接受 Git 的配置刷新请求，然后利用 RabbitMQ 广播通知所有的 Config Client 订阅方，刷新配置信息。\n\n# Hystrix 监控\n\n{% asset_img 5.png %}\n\nHystrix 主要是用于服务熔断/降级/隔离处理，Hystrix 配置在调用方，当被调用方服务不可用时，触发 Hystrix 熔断，会执行指定的 Fallback 方法，进行特殊处理。\n\n我之前以为，Hystrix 熔断的触发条件是服务不可用，也就是服务请求超时（比如服务挂掉了），但我自己测试了下，服务出现 500 错误，也会触发 Hystrix 熔断，而且会自动忽略 Hystrix 的超时时间设置。\n\n我们目前使用 Hystrix，主要有两个地方：\n- 内部服务调用：可以对某个 API 接口进行熔断处理。\n- Zuul 网关使用：就是当 Zuul 路由转发调用时，但有个局限性，就是只能对服务进行熔断，并不能针对某个 API 接口熔断。\n\n上面图中，主要画的是 Hystrix 的监控流程，我们目前主要使用 RabbitMQ 进行采集传输，turbine-server 进行数据流的聚合，hystrix-dashboard 进行图形化的展示。\n\n# 服务调用链路\n\n{% asset_img 6.png %}\n\n服务调用链路的概念，就是当服务请求发起时，记录整个请求链路的数据，以备查询。\n\n目前市面上，几乎所有服务调用链路的实现，理论基础都是基于 Google Dapper 的那篇论文，其中最重要的概念就是 traceId 和 spanId。\ntraceId 记录整个服务链路的 ID，由首次请求方创建，服务链路中唯一。\nspanId 记录当前服务块的 ID，由当前服务方创建。\nparentId 记录上一个请求服务的 spanId。\n下面我描述下，我们目前的服务调用链路过程：\nH5 发起请求，到 Zuul 网关，Zuul 创建全局的 traceId 和自己的 spanId，然后携带这些数据到业务服务 A，并利用 Spring Cloud Sluth 传输到 RabbitMQ。\n业务服务 A，接收到 Zuul 传输的 traceId 和 spanId，然后把 Zuul 的 spanId 设置成 parentId，并生成自己的 spanId，然后携带这些数据到业务服务 B，并利用 Spring Cloud Sluth 传输到 RabbitMQ。\n....\n上面图中，详细说明了整个服务调用链路的过程，这边再说下使用的技术栈：\nSpring Cloud Sluth：和 SkyWalking 的探针概念比较类似，每个服务都进行配置，收集当然服务的请求数据（traceId 和 spanId），然后利用stream-sluth和binder-rabbit组件，将请求数据传输到 RabbitMQ。\nSpring Cloud Zipkin：主要用于请求链路的 UI 展示，Zipkin 会从 RabbitMQ 读取请求数据，然后存储到 ElasticSearch 中，然后下次显示直接从 ElasticSearch 中读取。\nKibana：Kibana 也可以显示 ElasticSearch 中的请求数据，只不过不是图形化的，需要索引配置创建。\n\n# ELK 日志链路\n\n{% asset_img 7.png  %}\n\nELK 可以参考下之前的几篇文章：\nELK 架构之 Elasticsearch 和 Kibana 安装配置\nELK 架构之 Logstash 和 Filebeat 安装配置\nELK 架构之 Logstash 和 Filebeat 配置使用（采集过滤）\nELK 架构之 Elasticsearch、Kibana、Logstash 和 Filebeat 安装配置汇总（6.2.4 版本）\n上面图中已经很详细介绍了下 ELK 的流程，ELK 默认技术栈里是没有 Filebeat 的，Logstash 用作日志收集的时候，CPU 和内存会占用资源比较大，所以我们使用轻量化的 Filebeat 进行日志的收集，Filebeat 部署在每个业务服务所在的服务器，然后将收集到的日志数据传输到 Logstash，Logstash 可以部署两到三台服务器上，用作日志的过滤和分析工作，然后再将处理后的日志数据，传输到 ElasticSearch 存储。\n\n# 统一格式返回\n\n{% asset_img 8.png %}\n\n","source":"_posts/spring/spring-cloud-learning.md","raw":"---\ntitle: Spring Cloud 微服务架构全链路实践\ncategories: 技术\ntags:\n  - Spring\n  - Spring Cloud\n  - Java\nindex_img: /img/spring-cloud.jpeg\nabbrlink: 1879991184\ndate: 2016-08-16 00:04:12\n---\n\n# 前言\nJava 微服务框架选型（Dubbo 和 Spring Cloud）\n\n{% asset_img 1.png %}\n\n目前公司使用的 Spring Cloud 整个技术组件，基本包含了上面图中所包含的，不得不说，Spring Cloud 整个生态真的很强大，使用起来也很方便有效。\n\n后面有时间再针对\n\n\n\n个组件进行使用解读，这篇文章主要说下 Spring Cloud 架构的链路图，顺便把自己的思路整理下来，以备查阅。\n\n{% asset_img 2.png %}\n\n# 网关请求流程\n\n在 Spring Cloud 整个组件库中，Spring Cloud Zuul 是最容易被忽视，但也是最重要的，Spring Cloud Zuul 可以和 Eureka 注册中心集成，我们目前使用 Spring Cloud Zuul 的功能如下：\n- Filter 过滤器\n- Router 路由\n- Ribbon 负载均衡\n- Hystrix 熔断\n- Retry 重试\n有些功能是 Spring Cloud Zuul 自带的，比如 Filter 和 Router，有些是结合 Spring Cloud 其他组件，比如 Ribbon 和 Hystrix。\n\n这里重点介绍下 Filter 过滤器，分为四个过滤类型：\n- pre：Zuul 转发请求之前执行，我们目前的实现是AccessTokenFilter，用于 oAuth2.0 JWT 的授权验证。\n- route：Zuul 路由时执行，目前项目没用到。\n- post：Zuul 路由转发后执行，也就是已经请求成功了后端服务，我们目前的实现是CustomResponseFilter，用于统一请求格式的封装，比如 code/msg/data 等。\n- error：以上过滤器发生错误时执行，我们目前的实现是CustomErrorFilter，用于拦截过滤器执行的出现的错误，然后统一格式封装返回，另外，error 过滤器好像并不能捕获后端服务执行出现的错误。\n\n另外，关于 oAuth2.0 JWT 的授权验证，实现的方式有两种：\n- 授权的配置在后端服务中（每个服务都需要当作 Resource Server 进行配置，需要配置公钥，接口的授权具体配置在注解中），Zuul 只做转发，并不进行授权的验证。\n- 授权的配置在 Zuul 中，也就是把 Zuul 当作 Resource Server，后端服务不需要进行任何处理，Zuul 中具体的实现就是AccessTokenFilter，里面的逻辑是手动解析 JWT，然后判断是否正确，以及解析出用户信息/Scope/Role，然后根据当前的请求 API，对授权 Map 中的配置进行匹配，如果匹配错误，直接抛出 401 授权错误。\n我们目前采用的是第二种方式，这两种方式都有利有弊，关键在于自己的取舍，为什么采用第二种方式？目的就是发挥 Zuul 的作用，对外网关进行统一授权验证。\n\n关于授权 Map，里面存储了所有服务接口的配置，示例配置：\n```\nprivate static final Map ROUTE_MAPS;\nstatic {\n    ROUTE_MAPS = new HashMap();\n    ROUTE_MAPS.put(\"eureka-client/home\", \"read:ROLE_ADMIN\");\n    ROUTE_MAPS.put(\"eureka-client/user\", \"read:ROLE_ADMIN\");\n    ROUTE_MAPS.put(\"eureka-client/error\", \"read:ROLE_ADMIN\");\n}\n```\n\n\n这是我们目前的配置，是一个静态的 Map，后面会存储在 Spring Cloud Config 配置中心，Zuul 启动时进行加载，利用 Spring Cloud Bus 动态刷新。\n\n关于 Zuul 网关，其实还有很多需要说的，后面有机会再进行针对说明。\n\n# Eureka 服务治理\n\n{% asset_img 3.png %}\n\nEureka 遵循的是 AP 原则（服务可用性和分区容错性），是服务治理最理想的遵循 CAP 分布式原则。\n\nEureka 集群中的节点是彼此平级，不像 Consul 有 master/worker 之分，集群中的 Eureka 节点彼此两两注册，所以，Eureka 集群最好部署三个节点，这也是我们目前的部署方式。\n\n另外，Eureka 的自我保护机制，可以参考这篇文章。\n\n服务之间的相互调用，负载有两种使用方式：\n- Feign：基于声明式，顾名思义，就是需要定义接口，就像我们平常使用对象调用一样。\n- Ribbon：软负载，通过往 RestTemplate 中注入负载 Handler，然后通过负载算法选取调用（通过 Eureka 获取服务注册信息）。\n我们目前打算使用 Ribbon 负载方式，为什么？看下面代码就知道了：\n\n```\nrestTemplate.getForObject(\"http://eureka-client/hello\", String.class);\n```\n\n# Config 配置中心\n\n{% asset_img 4.png %}\n\n我们目前配置中心使用的是 Spring Cloud Config，当然你也可以使用功能更强大的 Polly（携程开源），但 Config 目前也能满足我们的需求，存储仓库我们现在使用的是 Git。\n\nConfig 配置中心提供了数据加密功能，你可以使用 RSA 的加密方式，这样存储在 Git 中的配置都是密文形式，Config Client 获取加密配置的时候，Config Server 会自动进行解密返回。\n\n配置中心的使用场景，我们目前主要是两个地方：\n\n- 项目启动的配置信息，比如数据库的连接字符串等。\n- 业务服务的配置信息，也就是业务相关的配置。\n\n另外，需要说明的是，默认情况下，如果 Git 中的配置更新了，Config Client 不会进行更新配置，我们目前的解决方式是，使用 Spring Cloud Bus 进行动态刷新配置（Config Server 中配置），具体的流程：\n1. Git 中添加 WebHooks 脚本，比如curl -X POST http://manager1:8180/bus/refresh，当 Git 仓库中的配置更新后，自动执行。\n2. Config Server 中配置 Spring Cloud Bus，接受 Git 的配置刷新请求，然后利用 RabbitMQ 广播通知所有的 Config Client 订阅方，刷新配置信息。\n\n# Hystrix 监控\n\n{% asset_img 5.png %}\n\nHystrix 主要是用于服务熔断/降级/隔离处理，Hystrix 配置在调用方，当被调用方服务不可用时，触发 Hystrix 熔断，会执行指定的 Fallback 方法，进行特殊处理。\n\n我之前以为，Hystrix 熔断的触发条件是服务不可用，也就是服务请求超时（比如服务挂掉了），但我自己测试了下，服务出现 500 错误，也会触发 Hystrix 熔断，而且会自动忽略 Hystrix 的超时时间设置。\n\n我们目前使用 Hystrix，主要有两个地方：\n- 内部服务调用：可以对某个 API 接口进行熔断处理。\n- Zuul 网关使用：就是当 Zuul 路由转发调用时，但有个局限性，就是只能对服务进行熔断，并不能针对某个 API 接口熔断。\n\n上面图中，主要画的是 Hystrix 的监控流程，我们目前主要使用 RabbitMQ 进行采集传输，turbine-server 进行数据流的聚合，hystrix-dashboard 进行图形化的展示。\n\n# 服务调用链路\n\n{% asset_img 6.png %}\n\n服务调用链路的概念，就是当服务请求发起时，记录整个请求链路的数据，以备查询。\n\n目前市面上，几乎所有服务调用链路的实现，理论基础都是基于 Google Dapper 的那篇论文，其中最重要的概念就是 traceId 和 spanId。\ntraceId 记录整个服务链路的 ID，由首次请求方创建，服务链路中唯一。\nspanId 记录当前服务块的 ID，由当前服务方创建。\nparentId 记录上一个请求服务的 spanId。\n下面我描述下，我们目前的服务调用链路过程：\nH5 发起请求，到 Zuul 网关，Zuul 创建全局的 traceId 和自己的 spanId，然后携带这些数据到业务服务 A，并利用 Spring Cloud Sluth 传输到 RabbitMQ。\n业务服务 A，接收到 Zuul 传输的 traceId 和 spanId，然后把 Zuul 的 spanId 设置成 parentId，并生成自己的 spanId，然后携带这些数据到业务服务 B，并利用 Spring Cloud Sluth 传输到 RabbitMQ。\n....\n上面图中，详细说明了整个服务调用链路的过程，这边再说下使用的技术栈：\nSpring Cloud Sluth：和 SkyWalking 的探针概念比较类似，每个服务都进行配置，收集当然服务的请求数据（traceId 和 spanId），然后利用stream-sluth和binder-rabbit组件，将请求数据传输到 RabbitMQ。\nSpring Cloud Zipkin：主要用于请求链路的 UI 展示，Zipkin 会从 RabbitMQ 读取请求数据，然后存储到 ElasticSearch 中，然后下次显示直接从 ElasticSearch 中读取。\nKibana：Kibana 也可以显示 ElasticSearch 中的请求数据，只不过不是图形化的，需要索引配置创建。\n\n# ELK 日志链路\n\n{% asset_img 7.png  %}\n\nELK 可以参考下之前的几篇文章：\nELK 架构之 Elasticsearch 和 Kibana 安装配置\nELK 架构之 Logstash 和 Filebeat 安装配置\nELK 架构之 Logstash 和 Filebeat 配置使用（采集过滤）\nELK 架构之 Elasticsearch、Kibana、Logstash 和 Filebeat 安装配置汇总（6.2.4 版本）\n上面图中已经很详细介绍了下 ELK 的流程，ELK 默认技术栈里是没有 Filebeat 的，Logstash 用作日志收集的时候，CPU 和内存会占用资源比较大，所以我们使用轻量化的 Filebeat 进行日志的收集，Filebeat 部署在每个业务服务所在的服务器，然后将收集到的日志数据传输到 Logstash，Logstash 可以部署两到三台服务器上，用作日志的过滤和分析工作，然后再将处理后的日志数据，传输到 ElasticSearch 存储。\n\n# 统一格式返回\n\n{% asset_img 8.png %}\n\n","slug":"spring/spring-cloud-learning","published":1,"updated":"2020-12-19T05:42:56.906Z","_id":"ckiv93pb800001gxcdno90vmr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Java 微服务框架选型（Dubbo 和 Spring Cloud）</p>\n<img src=\"/posts/1879991184/index/1.png\" class=\"\">\n\n<p>目前公司使用的 Spring Cloud 整个技术组件，基本包含了上面图中所包含的，不得不说，Spring Cloud 整个生态真的很强大，使用起来也很方便有效。</p>\n<p>后面有时间再针对</p>\n<p>个组件进行使用解读，这篇文章主要说下 Spring Cloud 架构的链路图，顺便把自己的思路整理下来，以备查阅。</p>\n<img src=\"/posts/1879991184/index/2.png\" class=\"\">\n\n<h1 id=\"网关请求流程\"><a href=\"#网关请求流程\" class=\"headerlink\" title=\"网关请求流程\"></a>网关请求流程</h1><p>在 Spring Cloud 整个组件库中，Spring Cloud Zuul 是最容易被忽视，但也是最重要的，Spring Cloud Zuul 可以和 Eureka 注册中心集成，我们目前使用 Spring Cloud Zuul 的功能如下：</p>\n<ul>\n<li>Filter 过滤器</li>\n<li>Router 路由</li>\n<li>Ribbon 负载均衡</li>\n<li>Hystrix 熔断</li>\n<li>Retry 重试<br>有些功能是 Spring Cloud Zuul 自带的，比如 Filter 和 Router，有些是结合 Spring Cloud 其他组件，比如 Ribbon 和 Hystrix。</li>\n</ul>\n<p>这里重点介绍下 Filter 过滤器，分为四个过滤类型：</p>\n<ul>\n<li>pre：Zuul 转发请求之前执行，我们目前的实现是AccessTokenFilter，用于 oAuth2.0 JWT 的授权验证。</li>\n<li>route：Zuul 路由时执行，目前项目没用到。</li>\n<li>post：Zuul 路由转发后执行，也就是已经请求成功了后端服务，我们目前的实现是CustomResponseFilter，用于统一请求格式的封装，比如 code/msg/data 等。</li>\n<li>error：以上过滤器发生错误时执行，我们目前的实现是CustomErrorFilter，用于拦截过滤器执行的出现的错误，然后统一格式封装返回，另外，error 过滤器好像并不能捕获后端服务执行出现的错误。</li>\n</ul>\n<p>另外，关于 oAuth2.0 JWT 的授权验证，实现的方式有两种：</p>\n<ul>\n<li>授权的配置在后端服务中（每个服务都需要当作 Resource Server 进行配置，需要配置公钥，接口的授权具体配置在注解中），Zuul 只做转发，并不进行授权的验证。</li>\n<li>授权的配置在 Zuul 中，也就是把 Zuul 当作 Resource Server，后端服务不需要进行任何处理，Zuul 中具体的实现就是AccessTokenFilter，里面的逻辑是手动解析 JWT，然后判断是否正确，以及解析出用户信息/Scope/Role，然后根据当前的请求 API，对授权 Map 中的配置进行匹配，如果匹配错误，直接抛出 401 授权错误。<br>我们目前采用的是第二种方式，这两种方式都有利有弊，关键在于自己的取舍，为什么采用第二种方式？目的就是发挥 Zuul 的作用，对外网关进行统一授权验证。</li>\n</ul>\n<p>关于授权 Map，里面存储了所有服务接口的配置，示例配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">private static final Map ROUTE_MAPS;<br>static &#123;<br>    ROUTE_MAPS &#x3D; new HashMap();<br>    ROUTE_MAPS.put(&quot;eureka-client&#x2F;home&quot;, &quot;read:ROLE_ADMIN&quot;);<br>    ROUTE_MAPS.put(&quot;eureka-client&#x2F;user&quot;, &quot;read:ROLE_ADMIN&quot;);<br>    ROUTE_MAPS.put(&quot;eureka-client&#x2F;error&quot;, &quot;read:ROLE_ADMIN&quot;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这是我们目前的配置，是一个静态的 Map，后面会存储在 Spring Cloud Config 配置中心，Zuul 启动时进行加载，利用 Spring Cloud Bus 动态刷新。</p>\n<p>关于 Zuul 网关，其实还有很多需要说的，后面有机会再进行针对说明。</p>\n<h1 id=\"Eureka-服务治理\"><a href=\"#Eureka-服务治理\" class=\"headerlink\" title=\"Eureka 服务治理\"></a>Eureka 服务治理</h1><img src=\"/posts/1879991184/index/3.png\" class=\"\">\n\n<p>Eureka 遵循的是 AP 原则（服务可用性和分区容错性），是服务治理最理想的遵循 CAP 分布式原则。</p>\n<p>Eureka 集群中的节点是彼此平级，不像 Consul 有 master/worker 之分，集群中的 Eureka 节点彼此两两注册，所以，Eureka 集群最好部署三个节点，这也是我们目前的部署方式。</p>\n<p>另外，Eureka 的自我保护机制，可以参考这篇文章。</p>\n<p>服务之间的相互调用，负载有两种使用方式：</p>\n<ul>\n<li>Feign：基于声明式，顾名思义，就是需要定义接口，就像我们平常使用对象调用一样。</li>\n<li>Ribbon：软负载，通过往 RestTemplate 中注入负载 Handler，然后通过负载算法选取调用（通过 Eureka 获取服务注册信息）。<br>我们目前打算使用 Ribbon 负载方式，为什么？看下面代码就知道了：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">restTemplate.getForObject(&quot;http:&#x2F;&#x2F;eureka-client&#x2F;hello&quot;, String.class);<br></code></pre></td></tr></table></figure>\n<h1 id=\"Config-配置中心\"><a href=\"#Config-配置中心\" class=\"headerlink\" title=\"Config 配置中心\"></a>Config 配置中心</h1><img src=\"/posts/1879991184/index/4.png\" class=\"\">\n\n<p>我们目前配置中心使用的是 Spring Cloud Config，当然你也可以使用功能更强大的 Polly（携程开源），但 Config 目前也能满足我们的需求，存储仓库我们现在使用的是 Git。</p>\n<p>Config 配置中心提供了数据加密功能，你可以使用 RSA 的加密方式，这样存储在 Git 中的配置都是密文形式，Config Client 获取加密配置的时候，Config Server 会自动进行解密返回。</p>\n<p>配置中心的使用场景，我们目前主要是两个地方：</p>\n<ul>\n<li>项目启动的配置信息，比如数据库的连接字符串等。</li>\n<li>业务服务的配置信息，也就是业务相关的配置。</li>\n</ul>\n<p>另外，需要说明的是，默认情况下，如果 Git 中的配置更新了，Config Client 不会进行更新配置，我们目前的解决方式是，使用 Spring Cloud Bus 进行动态刷新配置（Config Server 中配置），具体的流程：</p>\n<ol>\n<li>Git 中添加 WebHooks 脚本，比如curl -X POST <a href=\"http://manager1:8180/bus/refresh，当\">http://manager1:8180/bus/refresh，当</a> Git 仓库中的配置更新后，自动执行。</li>\n<li>Config Server 中配置 Spring Cloud Bus，接受 Git 的配置刷新请求，然后利用 RabbitMQ 广播通知所有的 Config Client 订阅方，刷新配置信息。</li>\n</ol>\n<h1 id=\"Hystrix-监控\"><a href=\"#Hystrix-监控\" class=\"headerlink\" title=\"Hystrix 监控\"></a>Hystrix 监控</h1><img src=\"/posts/1879991184/index/5.png\" class=\"\">\n\n<p>Hystrix 主要是用于服务熔断/降级/隔离处理，Hystrix 配置在调用方，当被调用方服务不可用时，触发 Hystrix 熔断，会执行指定的 Fallback 方法，进行特殊处理。</p>\n<p>我之前以为，Hystrix 熔断的触发条件是服务不可用，也就是服务请求超时（比如服务挂掉了），但我自己测试了下，服务出现 500 错误，也会触发 Hystrix 熔断，而且会自动忽略 Hystrix 的超时时间设置。</p>\n<p>我们目前使用 Hystrix，主要有两个地方：</p>\n<ul>\n<li>内部服务调用：可以对某个 API 接口进行熔断处理。</li>\n<li>Zuul 网关使用：就是当 Zuul 路由转发调用时，但有个局限性，就是只能对服务进行熔断，并不能针对某个 API 接口熔断。</li>\n</ul>\n<p>上面图中，主要画的是 Hystrix 的监控流程，我们目前主要使用 RabbitMQ 进行采集传输，turbine-server 进行数据流的聚合，hystrix-dashboard 进行图形化的展示。</p>\n<h1 id=\"服务调用链路\"><a href=\"#服务调用链路\" class=\"headerlink\" title=\"服务调用链路\"></a>服务调用链路</h1><img src=\"/posts/1879991184/index/6.png\" class=\"\">\n\n<p>服务调用链路的概念，就是当服务请求发起时，记录整个请求链路的数据，以备查询。</p>\n<p>目前市面上，几乎所有服务调用链路的实现，理论基础都是基于 Google Dapper 的那篇论文，其中最重要的概念就是 traceId 和 spanId。<br>traceId 记录整个服务链路的 ID，由首次请求方创建，服务链路中唯一。<br>spanId 记录当前服务块的 ID，由当前服务方创建。<br>parentId 记录上一个请求服务的 spanId。<br>下面我描述下，我们目前的服务调用链路过程：<br>H5 发起请求，到 Zuul 网关，Zuul 创建全局的 traceId 和自己的 spanId，然后携带这些数据到业务服务 A，并利用 Spring Cloud Sluth 传输到 RabbitMQ。<br>业务服务 A，接收到 Zuul 传输的 traceId 和 spanId，然后把 Zuul 的 spanId 设置成 parentId，并生成自己的 spanId，然后携带这些数据到业务服务 B，并利用 Spring Cloud Sluth 传输到 RabbitMQ。<br>….<br>上面图中，详细说明了整个服务调用链路的过程，这边再说下使用的技术栈：<br>Spring Cloud Sluth：和 SkyWalking 的探针概念比较类似，每个服务都进行配置，收集当然服务的请求数据（traceId 和 spanId），然后利用stream-sluth和binder-rabbit组件，将请求数据传输到 RabbitMQ。<br>Spring Cloud Zipkin：主要用于请求链路的 UI 展示，Zipkin 会从 RabbitMQ 读取请求数据，然后存储到 ElasticSearch 中，然后下次显示直接从 ElasticSearch 中读取。<br>Kibana：Kibana 也可以显示 ElasticSearch 中的请求数据，只不过不是图形化的，需要索引配置创建。</p>\n<h1 id=\"ELK-日志链路\"><a href=\"#ELK-日志链路\" class=\"headerlink\" title=\"ELK 日志链路\"></a>ELK 日志链路</h1><img src=\"/posts/1879991184/index/7.png\" class=\"\">\n\n<p>ELK 可以参考下之前的几篇文章：<br>ELK 架构之 Elasticsearch 和 Kibana 安装配置<br>ELK 架构之 Logstash 和 Filebeat 安装配置<br>ELK 架构之 Logstash 和 Filebeat 配置使用（采集过滤）<br>ELK 架构之 Elasticsearch、Kibana、Logstash 和 Filebeat 安装配置汇总（6.2.4 版本）<br>上面图中已经很详细介绍了下 ELK 的流程，ELK 默认技术栈里是没有 Filebeat 的，Logstash 用作日志收集的时候，CPU 和内存会占用资源比较大，所以我们使用轻量化的 Filebeat 进行日志的收集，Filebeat 部署在每个业务服务所在的服务器，然后将收集到的日志数据传输到 Logstash，Logstash 可以部署两到三台服务器上，用作日志的过滤和分析工作，然后再将处理后的日志数据，传输到 ElasticSearch 存储。</p>\n<h1 id=\"统一格式返回\"><a href=\"#统一格式返回\" class=\"headerlink\" title=\"统一格式返回\"></a>统一格式返回</h1><img src=\"/posts/1879991184/index/8.png\" class=\"\">\n\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日畢"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Github","link":"https://github.com/tanxinzheng","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.CrfHDaVmhSd6poZDvbwlhwHaHa?o=6&pid=Api&w=1080&h=1080&rs=1","descr":"国际最大基友社交平台"},{"name":"Gitee","link":"https://gitee.com/tanxinzheng","avatar":"https://gitee.com/index/gitee-people/images/mayun_logo.png","descr":"中国最大基友社交平台"},{"name":"Pug","link":"https://www.pugjs.cn/api/getting-started.html","avatar":"https://tse2-mm.cn.bing.net/th/id/OIP.a8FM1mul-mzI6O8DRKOMWgHaHa?o=6&pid=Api&rs=1","descr":"Pug中文文档库"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Google Fonts","link":"http://www.googlefonts.cn/","avatar":"https://tse3-mm.cn.bing.net/th/id/OIP.WQyWuZZ_6C5jCgnifD6C_QHaHa?w=178&h=180&c=7&o=5&dpr=2&pid=1.7","descr":"众多优美酷炫字体可供选择"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Java 微服务框架选型（Dubbo 和 Spring Cloud）</p>\n<img src=\"/posts/1879991184/index/1.png\" class=\"\">\n\n<p>目前公司使用的 Spring Cloud 整个技术组件，基本包含了上面图中所包含的，不得不说，Spring Cloud 整个生态真的很强大，使用起来也很方便有效。</p>\n<p>后面有时间再针对</p>\n<p>个组件进行使用解读，这篇文章主要说下 Spring Cloud 架构的链路图，顺便把自己的思路整理下来，以备查阅。</p>\n<img src=\"/posts/1879991184/index/2.png\" class=\"\">\n\n<h1 id=\"网关请求流程\"><a href=\"#网关请求流程\" class=\"headerlink\" title=\"网关请求流程\"></a>网关请求流程</h1><p>在 Spring Cloud 整个组件库中，Spring Cloud Zuul 是最容易被忽视，但也是最重要的，Spring Cloud Zuul 可以和 Eureka 注册中心集成，我们目前使用 Spring Cloud Zuul 的功能如下：</p>\n<ul>\n<li>Filter 过滤器</li>\n<li>Router 路由</li>\n<li>Ribbon 负载均衡</li>\n<li>Hystrix 熔断</li>\n<li>Retry 重试<br>有些功能是 Spring Cloud Zuul 自带的，比如 Filter 和 Router，有些是结合 Spring Cloud 其他组件，比如 Ribbon 和 Hystrix。</li>\n</ul>\n<p>这里重点介绍下 Filter 过滤器，分为四个过滤类型：</p>\n<ul>\n<li>pre：Zuul 转发请求之前执行，我们目前的实现是AccessTokenFilter，用于 oAuth2.0 JWT 的授权验证。</li>\n<li>route：Zuul 路由时执行，目前项目没用到。</li>\n<li>post：Zuul 路由转发后执行，也就是已经请求成功了后端服务，我们目前的实现是CustomResponseFilter，用于统一请求格式的封装，比如 code/msg/data 等。</li>\n<li>error：以上过滤器发生错误时执行，我们目前的实现是CustomErrorFilter，用于拦截过滤器执行的出现的错误，然后统一格式封装返回，另外，error 过滤器好像并不能捕获后端服务执行出现的错误。</li>\n</ul>\n<p>另外，关于 oAuth2.0 JWT 的授权验证，实现的方式有两种：</p>\n<ul>\n<li>授权的配置在后端服务中（每个服务都需要当作 Resource Server 进行配置，需要配置公钥，接口的授权具体配置在注解中），Zuul 只做转发，并不进行授权的验证。</li>\n<li>授权的配置在 Zuul 中，也就是把 Zuul 当作 Resource Server，后端服务不需要进行任何处理，Zuul 中具体的实现就是AccessTokenFilter，里面的逻辑是手动解析 JWT，然后判断是否正确，以及解析出用户信息/Scope/Role，然后根据当前的请求 API，对授权 Map 中的配置进行匹配，如果匹配错误，直接抛出 401 授权错误。<br>我们目前采用的是第二种方式，这两种方式都有利有弊，关键在于自己的取舍，为什么采用第二种方式？目的就是发挥 Zuul 的作用，对外网关进行统一授权验证。</li>\n</ul>\n<p>关于授权 Map，里面存储了所有服务接口的配置，示例配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">private static final Map ROUTE_MAPS;<br>static &#123;<br>    ROUTE_MAPS &#x3D; new HashMap();<br>    ROUTE_MAPS.put(&quot;eureka-client&#x2F;home&quot;, &quot;read:ROLE_ADMIN&quot;);<br>    ROUTE_MAPS.put(&quot;eureka-client&#x2F;user&quot;, &quot;read:ROLE_ADMIN&quot;);<br>    ROUTE_MAPS.put(&quot;eureka-client&#x2F;error&quot;, &quot;read:ROLE_ADMIN&quot;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这是我们目前的配置，是一个静态的 Map，后面会存储在 Spring Cloud Config 配置中心，Zuul 启动时进行加载，利用 Spring Cloud Bus 动态刷新。</p>\n<p>关于 Zuul 网关，其实还有很多需要说的，后面有机会再进行针对说明。</p>\n<h1 id=\"Eureka-服务治理\"><a href=\"#Eureka-服务治理\" class=\"headerlink\" title=\"Eureka 服务治理\"></a>Eureka 服务治理</h1><img src=\"/posts/1879991184/index/3.png\" class=\"\">\n\n<p>Eureka 遵循的是 AP 原则（服务可用性和分区容错性），是服务治理最理想的遵循 CAP 分布式原则。</p>\n<p>Eureka 集群中的节点是彼此平级，不像 Consul 有 master/worker 之分，集群中的 Eureka 节点彼此两两注册，所以，Eureka 集群最好部署三个节点，这也是我们目前的部署方式。</p>\n<p>另外，Eureka 的自我保护机制，可以参考这篇文章。</p>\n<p>服务之间的相互调用，负载有两种使用方式：</p>\n<ul>\n<li>Feign：基于声明式，顾名思义，就是需要定义接口，就像我们平常使用对象调用一样。</li>\n<li>Ribbon：软负载，通过往 RestTemplate 中注入负载 Handler，然后通过负载算法选取调用（通过 Eureka 获取服务注册信息）。<br>我们目前打算使用 Ribbon 负载方式，为什么？看下面代码就知道了：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">restTemplate.getForObject(&quot;http:&#x2F;&#x2F;eureka-client&#x2F;hello&quot;, String.class);<br></code></pre></td></tr></table></figure>\n<h1 id=\"Config-配置中心\"><a href=\"#Config-配置中心\" class=\"headerlink\" title=\"Config 配置中心\"></a>Config 配置中心</h1><img src=\"/posts/1879991184/index/4.png\" class=\"\">\n\n<p>我们目前配置中心使用的是 Spring Cloud Config，当然你也可以使用功能更强大的 Polly（携程开源），但 Config 目前也能满足我们的需求，存储仓库我们现在使用的是 Git。</p>\n<p>Config 配置中心提供了数据加密功能，你可以使用 RSA 的加密方式，这样存储在 Git 中的配置都是密文形式，Config Client 获取加密配置的时候，Config Server 会自动进行解密返回。</p>\n<p>配置中心的使用场景，我们目前主要是两个地方：</p>\n<ul>\n<li>项目启动的配置信息，比如数据库的连接字符串等。</li>\n<li>业务服务的配置信息，也就是业务相关的配置。</li>\n</ul>\n<p>另外，需要说明的是，默认情况下，如果 Git 中的配置更新了，Config Client 不会进行更新配置，我们目前的解决方式是，使用 Spring Cloud Bus 进行动态刷新配置（Config Server 中配置），具体的流程：</p>\n<ol>\n<li>Git 中添加 WebHooks 脚本，比如curl -X POST <a href=\"http://manager1:8180/bus/refresh，当\">http://manager1:8180/bus/refresh，当</a> Git 仓库中的配置更新后，自动执行。</li>\n<li>Config Server 中配置 Spring Cloud Bus，接受 Git 的配置刷新请求，然后利用 RabbitMQ 广播通知所有的 Config Client 订阅方，刷新配置信息。</li>\n</ol>\n<h1 id=\"Hystrix-监控\"><a href=\"#Hystrix-监控\" class=\"headerlink\" title=\"Hystrix 监控\"></a>Hystrix 监控</h1><img src=\"/posts/1879991184/index/5.png\" class=\"\">\n\n<p>Hystrix 主要是用于服务熔断/降级/隔离处理，Hystrix 配置在调用方，当被调用方服务不可用时，触发 Hystrix 熔断，会执行指定的 Fallback 方法，进行特殊处理。</p>\n<p>我之前以为，Hystrix 熔断的触发条件是服务不可用，也就是服务请求超时（比如服务挂掉了），但我自己测试了下，服务出现 500 错误，也会触发 Hystrix 熔断，而且会自动忽略 Hystrix 的超时时间设置。</p>\n<p>我们目前使用 Hystrix，主要有两个地方：</p>\n<ul>\n<li>内部服务调用：可以对某个 API 接口进行熔断处理。</li>\n<li>Zuul 网关使用：就是当 Zuul 路由转发调用时，但有个局限性，就是只能对服务进行熔断，并不能针对某个 API 接口熔断。</li>\n</ul>\n<p>上面图中，主要画的是 Hystrix 的监控流程，我们目前主要使用 RabbitMQ 进行采集传输，turbine-server 进行数据流的聚合，hystrix-dashboard 进行图形化的展示。</p>\n<h1 id=\"服务调用链路\"><a href=\"#服务调用链路\" class=\"headerlink\" title=\"服务调用链路\"></a>服务调用链路</h1><img src=\"/posts/1879991184/index/6.png\" class=\"\">\n\n<p>服务调用链路的概念，就是当服务请求发起时，记录整个请求链路的数据，以备查询。</p>\n<p>目前市面上，几乎所有服务调用链路的实现，理论基础都是基于 Google Dapper 的那篇论文，其中最重要的概念就是 traceId 和 spanId。<br>traceId 记录整个服务链路的 ID，由首次请求方创建，服务链路中唯一。<br>spanId 记录当前服务块的 ID，由当前服务方创建。<br>parentId 记录上一个请求服务的 spanId。<br>下面我描述下，我们目前的服务调用链路过程：<br>H5 发起请求，到 Zuul 网关，Zuul 创建全局的 traceId 和自己的 spanId，然后携带这些数据到业务服务 A，并利用 Spring Cloud Sluth 传输到 RabbitMQ。<br>业务服务 A，接收到 Zuul 传输的 traceId 和 spanId，然后把 Zuul 的 spanId 设置成 parentId，并生成自己的 spanId，然后携带这些数据到业务服务 B，并利用 Spring Cloud Sluth 传输到 RabbitMQ。<br>….<br>上面图中，详细说明了整个服务调用链路的过程，这边再说下使用的技术栈：<br>Spring Cloud Sluth：和 SkyWalking 的探针概念比较类似，每个服务都进行配置，收集当然服务的请求数据（traceId 和 spanId），然后利用stream-sluth和binder-rabbit组件，将请求数据传输到 RabbitMQ。<br>Spring Cloud Zipkin：主要用于请求链路的 UI 展示，Zipkin 会从 RabbitMQ 读取请求数据，然后存储到 ElasticSearch 中，然后下次显示直接从 ElasticSearch 中读取。<br>Kibana：Kibana 也可以显示 ElasticSearch 中的请求数据，只不过不是图形化的，需要索引配置创建。</p>\n<h1 id=\"ELK-日志链路\"><a href=\"#ELK-日志链路\" class=\"headerlink\" title=\"ELK 日志链路\"></a>ELK 日志链路</h1><img src=\"/posts/1879991184/index/7.png\" class=\"\">\n\n<p>ELK 可以参考下之前的几篇文章：<br>ELK 架构之 Elasticsearch 和 Kibana 安装配置<br>ELK 架构之 Logstash 和 Filebeat 安装配置<br>ELK 架构之 Logstash 和 Filebeat 配置使用（采集过滤）<br>ELK 架构之 Elasticsearch、Kibana、Logstash 和 Filebeat 安装配置汇总（6.2.4 版本）<br>上面图中已经很详细介绍了下 ELK 的流程，ELK 默认技术栈里是没有 Filebeat 的，Logstash 用作日志收集的时候，CPU 和内存会占用资源比较大，所以我们使用轻量化的 Filebeat 进行日志的收集，Filebeat 部署在每个业务服务所在的服务器，然后将收集到的日志数据传输到 Logstash，Logstash 可以部署两到三台服务器上，用作日志的过滤和分析工作，然后再将处理后的日志数据，传输到 ElasticSearch 存储。</p>\n<h1 id=\"统一格式返回\"><a href=\"#统一格式返回\" class=\"headerlink\" title=\"统一格式返回\"></a>统一格式返回</h1><img src=\"/posts/1879991184/index/8.png\" class=\"\">\n\n"}],"PostAsset":[{"_id":"source/_posts/spring/spring-cloud-learning/1.png","slug":"1.png","post":"ckiv93pb800001gxcdno90vmr","modified":0,"renderable":0},{"_id":"source/_posts/spring/spring-cloud-learning/2.png","slug":"2.png","post":"ckiv93pb800001gxcdno90vmr","modified":0,"renderable":0},{"_id":"source/_posts/spring/spring-cloud-learning/3.png","slug":"3.png","post":"ckiv93pb800001gxcdno90vmr","modified":0,"renderable":0},{"_id":"source/_posts/spring/spring-cloud-learning/4.png","slug":"4.png","post":"ckiv93pb800001gxcdno90vmr","modified":0,"renderable":0},{"_id":"source/_posts/spring/spring-cloud-learning/5.png","slug":"5.png","post":"ckiv93pb800001gxcdno90vmr","modified":0,"renderable":0},{"_id":"source/_posts/spring/spring-cloud-learning/6.png","slug":"6.png","post":"ckiv93pb800001gxcdno90vmr","modified":0,"renderable":0},{"_id":"source/_posts/spring/spring-cloud-learning/7.png","slug":"7.png","post":"ckiv93pb800001gxcdno90vmr","modified":0,"renderable":0},{"_id":"source/_posts/spring/spring-cloud-learning/8.png","slug":"8.png","post":"ckiv93pb800001gxcdno90vmr","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckitw8kmu000l88cd1h2b5b11","category_id":"ckitw8kmt000h88cd654jdbtq","_id":"ckitw8kmy000v88cdaltq7ugt"},{"post_id":"ckitw8kmu000j88cdgz7y0bz5","category_id":"ckitw8kmt000h88cd654jdbtq","_id":"ckitw8kn0001188cd3kh846cb"},{"post_id":"ckitw8kmx000r88cd4a7me2qd","category_id":"ckitw8kn0001288cd1qr969xr","_id":"ckitw8kn4001g88cdb0budn68"},{"post_id":"ckitw8kmy000u88cderck1g5r","category_id":"ckitw8kn0001288cd1qr969xr","_id":"ckitw8kn7001k88cd1gm64iiy"},{"post_id":"ckitw8kmy000x88cd1eby9kkr","category_id":"ckitw8kn0001288cd1qr969xr","_id":"ckitw8kn9001p88cdh3q2dnke"},{"post_id":"ckitw8kn9001r88cdalixe4ld","category_id":"ckitw8kmt000h88cd654jdbtq","_id":"ckitw8knb001x88cd1phlbbel"},{"post_id":"ckitw8kn6001j88cddi9qeirh","category_id":"ckitw8kn8001n88cd7um0eqt3","_id":"ckitw8knc001z88cd2qnc4ocj"},{"post_id":"ckitw8kn7001m88cd27osbbk5","category_id":"ckitw8kn8001n88cd7um0eqt3","_id":"ckitw8knc002288cd1rj988c6"},{"post_id":"ckitw8knl003588cdfri01utb","category_id":"ckitw8kmt000h88cd654jdbtq","_id":"ckitw8knn003888cd39zthhdt"},{"post_id":"ckiu3rmn4000170cd7932hk1r","category_id":"ckitw8kmt000h88cd654jdbtq","_id":"ckiu3rmnc000370cdej4faif5"},{"post_id":"ckiu9uymo0004ijcd77u7aq73","category_id":"ckitw8kn0001288cd1qr969xr","_id":"ckiu9uymp0007ijcdf6rw19wt"},{"post_id":"ckiu3rmn3000070cd138364k6","category_id":"ckitw8kmt000h88cd654jdbtq","_id":"ckiu9z2d6000aijcd7ynr1df6"},{"post_id":"ckiugc4ez0007ioxchy5h5vdj","category_id":"ckiv9blyd00051gxc1omg4zj7","_id":"ckiv9blye00061gxcg5mc441h"},{"post_id":"ckiv93pb800001gxcdno90vmr","category_id":"ckitw8kmt000h88cd654jdbtq","_id":"ckiv9uw4v00091gxcemr46eef"}],"PostTag":[{"post_id":"ckitw8kmd000188cd1ixy7g16","tag_id":"ckitw8kmh000488cdhabi1ut8","_id":"ckitw8kmv000n88cd27af8e41"},{"post_id":"ckitw8kmd000188cd1ixy7g16","tag_id":"ckitw8kmp000b88cd9dkm4g5x","_id":"ckitw8kmw000q88cd40cs6kf8"},{"post_id":"ckitw8kmg000388cd69zf0ax6","tag_id":"ckitw8kmh000488cdhabi1ut8","_id":"ckitw8kmx000t88cdb8oy2t51"},{"post_id":"ckitw8kmi000688cdf0ftbzav","tag_id":"ckitw8kmv000m88cd7vdcesk0","_id":"ckitw8kn0001388cdc6va1lfj"},{"post_id":"ckitw8kmi000688cdf0ftbzav","tag_id":"ckitw8kmx000s88cd0w20dmiy","_id":"ckitw8kn1001588cdevvp71zf"},{"post_id":"ckitw8kmk000888cdf0wa8b4v","tag_id":"ckitw8kmz000z88cd67j72x7u","_id":"ckitw8kn2001a88cd42r0fzk2"},{"post_id":"ckitw8kmu000j88cdgz7y0bz5","tag_id":"ckitw8knb001v88cd3tpp6fti","_id":"ckitw8knc002588cdbdtu3pr8"},{"post_id":"ckitw8kmu000j88cdgz7y0bz5","tag_id":"ckitw8knc002088cd7ry20i7u","_id":"ckitw8knd002688cdf8757uex"},{"post_id":"ckitw8kmu000l88cd1h2b5b11","tag_id":"ckitw8knb001v88cd3tpp6fti","_id":"ckitw8knd002888cdgxq2fkf3"},{"post_id":"ckitw8kmx000r88cd4a7me2qd","tag_id":"ckitw8knd002788cddfte28d4","_id":"ckitw8knd002a88cd5enr80go"},{"post_id":"ckitw8kmy000u88cderck1g5r","tag_id":"ckitw8knd002788cddfte28d4","_id":"ckitw8kne002c88cddjtvak66"},{"post_id":"ckitw8kmy000x88cd1eby9kkr","tag_id":"ckitw8knd002788cddfte28d4","_id":"ckitw8kne002f88cde82qg7tl"},{"post_id":"ckitw8kmy000x88cd1eby9kkr","tag_id":"ckitw8kne002d88cd4ph11qre","_id":"ckitw8kne002g88cd66cf26xc"},{"post_id":"ckitw8kmz001088cdaxuq25b4","tag_id":"ckitw8kne002e88cd9nrjabjp","_id":"ckitw8knf002i88cdayczh1gh"},{"post_id":"ckitw8kn1001488cd75l5c52c","tag_id":"ckitw8kne002e88cd9nrjabjp","_id":"ckitw8knf002k88cdbl099slx"},{"post_id":"ckitw8kn4001i88cddze9e821","tag_id":"ckitw8knf002l88cdc7484nq3","_id":"ckitw8kng002p88cd5ecv39l9"},{"post_id":"ckitw8kn4001i88cddze9e821","tag_id":"ckitw8knf002n88cd0fck50vl","_id":"ckitw8kng002q88cdh0vh4oj6"},{"post_id":"ckitw8kn6001j88cddi9qeirh","tag_id":"ckitw8kng002o88cd75au48rq","_id":"ckitw8kng002s88cd44q9dfm3"},{"post_id":"ckitw8kn7001m88cd27osbbk5","tag_id":"ckitw8kng002o88cd75au48rq","_id":"ckitw8knh002u88cdbhfvhp2e"},{"post_id":"ckitw8kn9001r88cdalixe4ld","tag_id":"ckitw8knh002x88cd04uncg0f","_id":"ckitw8kni003288cdar139lu0"},{"post_id":"ckitw8kn9001r88cdalixe4ld","tag_id":"ckitw8kni003088cdd0br1wtd","_id":"ckitw8kni003388cd4v3b1pln"},{"post_id":"ckitw8knl003588cdfri01utb","tag_id":"ckitw8knn003988cd6exy5vnf","_id":"ckitw8kno003c88cdamgw58ny"},{"post_id":"ckiu3rmn4000170cd7932hk1r","tag_id":"ckiu3rmn6000270cdc6j9euu8","_id":"ckiu3rmnc000470cd11e942gm"},{"post_id":"ckiu3rmn4000170cd7932hk1r","tag_id":"ckitw8kmv000m88cd7vdcesk0","_id":"ckiu3rmnc000570cdbh9dar8t"},{"post_id":"ckiu9uymo0004ijcd77u7aq73","tag_id":"ckitw8knd002788cddfte28d4","_id":"ckiu9uymp0005ijcdhmyg5n4e"},{"post_id":"ckiu9uymo0004ijcd77u7aq73","tag_id":"ckitw8knm003688cdbzii2otj","_id":"ckiu9uymp0006ijcd9s2uaby0"},{"post_id":"ckiu3rmn3000070cd138364k6","tag_id":"ckiu3rmn6000270cdc6j9euu8","_id":"ckiu9z2d60008ijcd7pt74puy"},{"post_id":"ckiu3rmn3000070cd138364k6","tag_id":"ckitw8kmv000m88cd7vdcesk0","_id":"ckiu9z2d60009ijcd6nycec4r"},{"post_id":"ckiugbo1y0002ioxc54zo9775","tag_id":"ckitw8kn2001788cda0uqa5c1","_id":"ckiugbo200003ioxchn7s6kkd"},{"post_id":"ckiugbo1y0002ioxc54zo9775","tag_id":"ckitw8kn4001e88cdbel7fcwa","_id":"ckiugbo200004ioxc0o7x46vd"},{"post_id":"ckiugbo1y0002ioxc54zo9775","tag_id":"ckitw8kn7001l88cd8v8f1c22","_id":"ckiugbo200005ioxc3x8ygvex"},{"post_id":"ckiugbo1y0002ioxc54zo9775","tag_id":"ckitw8kn9001q88cdc1jgg695","_id":"ckiugbo200006ioxc7dq08t4s"},{"post_id":"ckiugc4ez0007ioxchy5h5vdj","tag_id":"ckitw8kmh000488cdhabi1ut8","_id":"ckiugc4f00008ioxcfg0f2z23"},{"post_id":"ckiugc4ez0007ioxchy5h5vdj","tag_id":"ckitw8kmp000b88cd9dkm4g5x","_id":"ckiugc4f00009ioxc9a6b4n62"},{"post_id":"ckiugespq000gioxc661a22em","tag_id":"ckitw8kmx000s88cd0w20dmiy","_id":"ckiugespr000iioxc5h8icy72"},{"post_id":"ckiugespr000hioxc8rpi2vg6","tag_id":"ckitw8knf002j88cd41rkfeoe","_id":"ckiugespr000jioxcaiso6hd3"},{"post_id":"ckiugesqa000kioxc1vck8k63","tag_id":"ckitw8kmx000s88cd0w20dmiy","_id":"ckiugesqb000lioxc25va9dc7"},{"post_id":"ckiugesqu000nioxc601fbbwv","tag_id":"ckitw8kmx000s88cd0w20dmiy","_id":"ckiugesqu000oioxc86ko0rug"},{"post_id":"ckiugesqu000nioxc601fbbwv","tag_id":"ckitw8kns003e88cdbuoy88k0","_id":"ckiugesqv000pioxc0qh85mhj"},{"post_id":"ckiv93pb800001gxcdno90vmr","tag_id":"ckitw8kng002t88cd8yi49pkx","_id":"ckiv9uw4v00071gxchz675nd9"},{"post_id":"ckiv93pb800001gxcdno90vmr","tag_id":"ckitw8knh002v88cd5ihr4vko","_id":"ckiv9uw4v00081gxcbgra8x17"},{"post_id":"ckiv93pb800001gxcdno90vmr","tag_id":"ckitw8kne002e88cd9nrjabjp","_id":"ckiv9uw4w000a1gxcdzmlcxei"}],"Tag":[{"name":"数据结构","_id":"ckitw8kmh000488cdhabi1ut8"},{"name":"算法","_id":"ckitw8kmp000b88cd9dkm4g5x"},{"name":"Mac","_id":"ckitw8kmv000m88cd7vdcesk0"},{"name":"Linux","_id":"ckitw8kmx000s88cd0w20dmiy"},{"name":"MySQL","_id":"ckitw8kmz000z88cd67j72x7u"},{"name":"redis","_id":"ckitw8kn2001788cda0uqa5c1"},{"name":"cluster","_id":"ckitw8kn4001e88cdbel7fcwa"},{"name":"docker","_id":"ckitw8kn7001l88cd8v8f1c22"},{"name":"docker-compose","_id":"ckitw8kn9001q88cdc1jgg695"},{"name":"git","_id":"ckitw8knb001v88cd3tpp6fti"},{"name":"github","_id":"ckitw8knc002088cd7ry20i7u"},{"name":"Hexo","_id":"ckitw8knd002788cddfte28d4"},{"name":"Github","_id":"ckitw8kne002d88cd4ph11qre"},{"name":"Java","_id":"ckitw8kne002e88cd9nrjabjp"},{"name":"Docker","_id":"ckitw8knf002j88cd41rkfeoe"},{"name":"mac","_id":"ckitw8knf002l88cdc7484nq3"},{"name":"node","_id":"ckitw8knf002n88cd0fck50vl"},{"name":"Markdown","_id":"ckitw8kng002o88cd75au48rq"},{"name":"Spring","_id":"ckitw8kng002t88cd8yi49pkx"},{"name":"Spring Cloud","_id":"ckitw8knh002v88cd5ihr4vko"},{"name":"https","_id":"ckitw8knh002x88cd04uncg0f"},{"name":"ssl","_id":"ckitw8kni003088cdd0br1wtd"},{"name":"NexT","_id":"ckitw8knm003688cdbzii2otj"},{"name":"Kafka","_id":"ckitw8knn003988cd6exy5vnf"},{"name":"Centos","_id":"ckitw8kns003e88cdbuoy88k0"},{"name":"RAS","_id":"ckiu3rmn6000270cdc6j9euu8"}]}}